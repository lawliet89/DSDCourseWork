#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\lstset{ %
  basicstyle=\footnotesize,       % the size of the fonts that are used for the code
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  breaklines=true,                % sets automatic line breaking
  captionpos=b,                   % sets the caption-position to bottom
  commentstyle=\color{dkgreen},   % comment style
  escapeinside={\%*}{*)},         % if you want to add LaTeX within your code
  keywordstyle=\color{blue},      % keyword style
  language=C,                     % the language of the code
  numbers=left,                   % where to put the line-numbers; possible values are (none, left, right)
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stringstyle=\color{mauve},      % string literal style
  tabsize=2,                      % sets default tabsize to 2 spaces
  xleftmargin=12pt,          % left margin
  frame=leftline
}

\lfoot{ywc110 \& rmb209}
\cfoot{}
\rfoot{\thepage}

\setlength{\textfloatsep}{1ex plus 0.5ex minus 0.5ex}
\setlength{\intextsep}{1ex plus 0.5ex minus 0.5ex}
%\newref{sub}{refcmd={Subsection \ref{#1}}}
\end_preamble
\use_default_options true
\begin_modules
figs-within-sections
tabs-within-sections
eqs-within-sections
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf5
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue, bookmarks=false, pdfstartview={FitH}"
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\headheight 2cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Digital System Design Report
\end_layout

\begin_layout Author
Yong Wen Chua (ywc110) & Richard Bennett (rmb209)
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Determinant
\end_layout

\begin_layout Standard
yada
\end_layout

\begin_layout Part
Notch Filter
\end_layout

\begin_layout Standard
A notch filter is to be implemented to filter a wave file that is corrupted
 by a single 1 KHz tone.
 The filter's implementation is first tested in software using C++ code
 first, before actually implementing it in hardware.
 
\end_layout

\begin_layout Section
Design Consideration
\end_layout

\begin_layout Standard
Two classes of filters are available for implementation: Finite Impulse
 Response (FIR) or Infinite Impulse Response (IIR) filters.
 FIR filters have the advantage of being stable and not subjected to feedback.
 FIR filters also have linear phase, which is simply a group delay of the
 input and will not cause any non-linear phase shifts in the output.
 However, to acheive a sharp roll-off, particularly when we only want to
 filter out a certain frequency, a high number of taps are required.
 Combined with the fact that we need to quantise the inputs, along with
 limitatons, having a high order filter is not desirable.
 On the other hand, IIR filters can acheive a sharper roll-off with very
 low orders.
 But IIR filters do not offer non-linear phase shifts, and can become unstable
 due to feedback.
 When combined with quantisation errors, the filter may become unstable.
 
\end_layout

\begin_layout Standard
An IIR filter was eventually chosen for implementation.
 This was chosen primarily for:
\end_layout

\begin_layout Itemize
Sharp roll-off of IIR filters with low orders
\end_layout

\begin_layout Itemize
Phase shifts are generally not picked up by the human ears, unless they
 are very specific phase shifts.
\end_layout

\begin_layout Itemize
Ease of implementation
\end_layout

\begin_layout Standard
However, care must be taken during quantisation and scaling so as not to
 cause the filter to become unstable.
 A second order IIR filter is chosen to be implemented for sake of simplicity.
 The difference equation for the 
\begin_inset Formula $k$
\end_inset


\begin_inset script superscript

\begin_layout Plain Layout
th
\end_layout

\end_inset

 output 
\begin_inset Formula $y(k)$
\end_inset

 based on the 
\begin_inset Formula $k$
\end_inset


\begin_inset script superscript

\begin_layout Plain Layout
th 
\end_layout

\end_inset

input 
\begin_inset Formula $x(k)$
\end_inset

 is given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y(k)=b_{0}x(k)+b_{1}x(k-1)+b_{2}x(k-2)-a_{1}y(k-1)-a_{2}y(k-2)\label{eq:iir-diff-eq}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $a_{0},a_{1},b_{0},b_{1},b_{2}$
\end_inset

 are coefficients to be designed.
 
\end_layout

\begin_layout Subsection
Quantisation Considerations
\end_layout

\begin_layout Standard
In order to quantise the range of the input sound file accurately, the input
 and output was chosen to be 32 bits, and the coefficients are represented
 with 16 bits.
 For a second order, the coefficients are of the range 
\begin_inset Formula $-2\leqslant a_{i},b_{i}\leqslant2$
\end_inset

 and are thus scaled by the scaling constant 
\begin_inset Formula $S_{c}=16383$
\end_inset

.
 The inputs are in the range 
\begin_inset Formula $-1\leqslant x(k)\leqslant1$
\end_inset

 and are thus scaled by the scaling constant 
\begin_inset Formula $S_{x}=2147483647$
\end_inset

.
 Based on 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:iir-diff-eq"

\end_inset

, the bit lengths of the intermediate values are then computed using interval
 arithmetic, and are shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interval-arith"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quantity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lower Interval
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Upper Interval
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No.
 of Bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{x}x(k)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2147483647 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2147483647 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{x}y(k)$
\end_inset

 (expected)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2147483647 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2147483647 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coefficients
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}a_{i}$
\end_inset

 or 
\begin_inset Formula $S_{c}b_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-32766
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32766
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiplication with 
\begin_inset Formula $a$
\end_inset

 coefficients
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{y}y(k)\times S_{c}a_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-7.03644\times10^{13}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7.03644\times10^{13}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Accumulation of 
\begin_inset Formula $a_{i}y$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\displaystyle \sum}_{i=1}^{2}S_{y}y(k-i)\times S_{c}a_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-1.40729\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.40729\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiplication with 
\begin_inset Formula $b$
\end_inset

 coefficients
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{x}x(k)\times S_{c}b_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-7.03644\times10^{13}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-7.03644\times10^{13}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Accumulation of 
\begin_inset Formula $b_{i}x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\displaystyle \sum}_{i=0}^{2}S_{x}x(k-i)\times S_{c}b_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-2.11093\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.11093\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
49
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculation of 
\begin_inset Formula $y(k)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}S_{x}y(k)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-3.51822\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.51822\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{x}y(k)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-21474836474 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21474836474 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
36
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interval-arith"

\end_inset

Number of bits for the various intermediate quantities during computation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It can be seen from 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interval-arith"

\end_inset

 that the output, after dividing with 
\begin_inset Formula $S_{c}$
\end_inset

 still requires 36 bits to fully represent its value.
 We will be truncating that in the output, or the number of bits required
 will increase exponentially as computation goes on.
 
\end_layout

\begin_layout Subsection
Filter Design
\end_layout

\begin_layout Standard
Based on the FFT of the input noisy signal, it is calculated that an attenuation
 of about 50 dB at 1000 Hz would be sufficient to almost zero the noise.
 However, this is difficult to acheive with a second order filter.
 Using Matlab to tweak the specifications using various design algorithms,
 the following coefficients were chosen to be implemented: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
a_{1} & =-1.894360482169740.913743852992773,a_{2}=0.913743852992773,\\
b_{0} & =0.956871926496387,b_{1}=-1.89436048216974,b_{2}=0.956871926496387
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
and their scaled versions are given by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
S_{c}a_{1}=-31035,S_{c}a_{2}=14969,S_{c}b_{0}=1576,S_{c}b_{1}=-31035,S_{c}b_{2}=15676\label{eq:coeff-scaled}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename iir-matlab.png
	lyxscale 50
	scale 46

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:freqz-dp"

\end_inset

Frequency Response of Matlab designed filter, calculated at double precision.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename iir-matlab-fft.png
	lyxscale 50
	scale 46

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:fft-dp"

\end_inset

FFT comparison of the original sound file and the filtered version.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption

\begin_layout Plain Layout
Matlab designed second order filter response
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The frequency response of the filter calculated with double precision in
 Matlab is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:freqz-dp"

\end_inset

, and the comparison of the DFTs of the original signal and the filtered
 signal can be seen in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:fft-dp"

\end_inset

.
 It can be seen that this filter performs sufficiently well in removing
 the 1 kHz tone.
 In listening test, the tone is almost inaudible.
 
\end_layout

\begin_layout Subsection
Quantisation Tests
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename iir-simulate.png
	lyxscale 50
	scale 46

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:c++-simulated"

\end_inset

Comparison of the FFT between the Matlab computation (double precision)
 and C++ simulation (fixed point)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to test the effects of calculating in fixed point rather than double-pr
evision floating point, a simple C++ program was written to calculate the
 expected output, along with the bit truncation that occurs.
 The code can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:C++-Simulation-Code"

\end_inset

.
 The FFT comparison between the Matlab filtered version and the C++ version
 can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:c++-simulated"

\end_inset

.
 It can be seen that the 1 kHz frequency bin is not attenuated as much.
 From listening tests, the tone is only faintly audible, a drastic improvement
 over the original noise corrupted input.
\end_layout

\begin_layout Section
Hardware Implementation
\end_layout

\begin_layout Standard
The hardware filter block is implemented to interact with the NIOS process
 via means of a NIOS custom instruction slave.
 It will read and write from the SDRAM using an Avalon master interface.
 Finally, it offers an Avalon Slave interface for its settings (coefficients)
 to be changed and status of calculation to be checked.
 Finally, it implements an Avalon interrupt to notify the NIOS processor
 that is done processing.The Verilog code for its implementation can be found
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Verilog-Implementation"

\end_inset

.
\end_layout

\begin_layout Subsection
Hardware Interface
\end_layout

\begin_layout Standard
The input and output signals of the hardware block can be seen in 
\series bold
INSERT FIGURE HERE
\series default
.
 Its connection in Qsys with the rest of the components can be seen in 
\series bold
ANOTHER FIGURE HERE PLEASE
\end_layout

\begin_layout Subsubsection
NIOS Custom Instruction Slave
\end_layout

\begin_layout Standard
The computation of the filtering is done via an invocation of a custom instructi
on through the NIOS Custom Instruction Slave.
 The custom instruction only expects one argument: the address where the
 first sample is stored at.
 When the hardware block is ready and has accepted the invocation to start
 computation, it will return a value of 
\begin_inset Quotes eld
\end_inset

99
\begin_inset Quotes erd
\end_inset

 to the CPU.
 This should be taken as the sign that computation has begun.
 If the argument has a value of zero, a number indicating the status of
 the system will be returned to the CPU.
 If the system is idle and ready to accept new invocations, it will return
 
\begin_inset Quotes eld
\end_inset

-1
\begin_inset Quotes erd
\end_inset

.
 If the hardware block is in the process of computation, it will return
 the sample number that has been written back to SDRAM successfully.
 If the hardware block is waiting for its interrupt request (IRQ) to be
 serviced, it will return the number 
\begin_inset Quotes eld
\end_inset

-2
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Avalon Master
\end_layout

\begin_layout Standard
An Avalon Master is implemented to read and write results to the SDRAM.
 Samples are expected to be stored in 32 bit signed integers with little
 endian byte ordering.
 The number of samples is provided via a write to the Avalon Slave (see
 below), and the address to process the samples from is provided via an
 invocation through the NIOS Custom Instruction Slave (above).
 Samples are read, computed, and overwritten with the results 
\emph on
in situ
\emph default
.
 A flag, writable through the Avalon Slave, can instruct the hardware to
 actually write the results or to simply compute them and discard them.
\end_layout

\begin_layout Subsubsection
Avalon Slave & Avalon Interrupt
\end_layout

\begin_layout Standard
The Avalon Slave allows for settings to be changed, and for internal status
 flags to be checked.
 The full list can be seen in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Avalon-Slave"

\end_inset

.
 The meanings of the various internal flags will be described later.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of samples requested from SDRAM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Overwrite Result Flag
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request FIFO Usage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}a_{1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read FIFO Usage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}a_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of samples read from SDRAM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}b_{0}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Samples discarded form SDRAM (should always be zero)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}b_{1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculation stage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{c}b_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of samples computed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of samples written to SDRAM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write FIFO Usage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Avalon Master) read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Avalon Master) waitrequest
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Avalon Master) write
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stage of operation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Overwrite Result Flag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N/A
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Avalon-Slave"

\end_inset

Avalon Slave read and write contents at various addresses.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An Avalon Interrupt interface is implemented to interrupt the NIOS processor
 to notify it that computation of all samples are complete.
 The interrupt service routine should then perform a read on the slave to
 clear the IRQ.
 It does not matter which content is read.
\end_layout

\begin_layout Subsection
Hardware Operation
\end_layout

\begin_layout Subsubsection
Idle State
\end_layout

\begin_layout Standard
The hardware exists at the top level as a finite state machine with three
 states (c.f.
 
\begin_inset Quotes eld
\end_inset

Stage of operation
\begin_inset Quotes erd
\end_inset

 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Avalon-Slave"

\end_inset

).
 The first state (stage 0) is the idle state where the hardware is ready
 to compute.
 If invoked with a non-zero address via the Custom Instruction slave intercace,
 the hardware will proceed to the second state and return 
\begin_inset Quotes eld
\end_inset

99
\begin_inset Quotes erd
\end_inset

 to the processor.
 If invoked with a zero address, it will return 
\begin_inset Quotes eld
\end_inset

-1
\begin_inset Quotes erd
\end_inset

 to the processor to indicate its idle status.
\end_layout

\begin_layout Subsubsection
Computation State
\end_layout

\begin_layout Standard
Four operations need to be completed during the computation state (stage
 1): requesting a fetch from the SDRAM (
\begin_inset Quotes eld
\end_inset

request pipeline
\begin_inset Quotes erd
\end_inset

), receive sample from the SDRAM (
\begin_inset Quotes eld
\end_inset

receive pipeline
\begin_inset Quotes erd
\end_inset

), calculate the output (
\begin_inset Quotes eld
\end_inset

calculate pipeline
\begin_inset Quotes erd
\end_inset

), and write the output (
\begin_inset Quotes eld
\end_inset

write pipeline
\begin_inset Quotes erd
\end_inset

).
 Due to the fact that each of these processes take different amount of time
 to complete, and in the case of SDRAM operations, the amount of time can
 be unspecified, these processes are implemented as four separate pipelines,
 analogous to four different threads.
 
\end_layout

\begin_layout Standard
These four pipelines communicate with each other via three different FIFO
 buffers: 
\begin_inset Quotes eld
\end_inset

request FIFO
\begin_inset Quotes erd
\end_inset

 between the request and calculate pipeline, 
\begin_inset Quotes eld
\end_inset

read FIFO
\begin_inset Quotes erd
\end_inset

 between the receive and calculate pipeline, and 
\begin_inset Quotes eld
\end_inset

write FIFO
\begin_inset Quotes erd
\end_inset

 between the calculate and write pipeline.
 These FIFO buffers serve to pass data from one pipeline to the other.
 Data generally flows from the request, to receive, to calculate and finally
 to the write pipeline.
 The FIFO buffers also serve to block the upstream process if buffers are
 full.
 
\end_layout

\begin_layout Standard
In general, the calculation pipeline would be expected to take the most
 amount of computation time, and the SDRAM read and writes should be sufficientl
y quick, barring any high load on the SDRAM from other components in the
 system.
 Thus, it is expected that the receive and read FIFO would be filled most
 of the time, and the request and receive pipeline would thus be more likely
 to be blocked.
 
\end_layout

\begin_layout Subsubsection*
Request Pipeline
\end_layout

\begin_layout Standard
The request pipeline sends request to the SDRAM to read data.
 As per the Avalon interface specification, when the 
\begin_inset Quotes eld
\end_inset

waitrequest
\begin_inset Quotes erd
\end_inset

 signal goes low, the pipeline would take it as a sign that the request
 has been accepted by the Avalon slave.
 At the same time, it fills the request FIFO.
 If the request FIFO is not full, it will proceed to request the next sample.
 Otherwise, it yields the 
\begin_inset Quotes eld
\end_inset

read
\begin_inset Quotes erd
\end_inset

 signal, and stops requesting for new samples.
 When request FIFO is not full, and a 
\begin_inset Quotes eld
\end_inset

write
\begin_inset Quotes erd
\end_inset

 operation is not taking place, it will restart the requests.
 
\end_layout

\begin_layout Subsubsection*
Receive Pipeline
\end_layout

\begin_layout Standard
Due to the fact that it can take an unspecified number of cycles between
 requesting and receiving a sample, the receive pipeline is necessary.
 When the 
\begin_inset Quotes eld
\end_inset

readdatavalid
\begin_inset Quotes erd
\end_inset

 signal is high, the receive pipeline will fill the read FIFO with the data.
 If the FIFO is full, it will discard the data.
 This is not likely to happen due to the use of the request FIFO, and is
 simply a safeguard.
 
\end_layout

\begin_layout Subsubsection*
Calculate Pipeline
\end_layout

\begin_layout Standard
The calculate pipeline exists as a state machine for the various stages
 of the calculation (see calculation stage in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Avalon-Slave"

\end_inset

).
 In its idle state, if the read FIFO is not empty, it will drain the read
 FIFO.
 Also, it will drain the request FIFO so that the request pipeline can request
 for new samples.
 It then calculates the output over several clock cycles according to 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:iir-diff-eq"

\end_inset

.
 Finally, it will wait for the write FIFO to not be full and write to it.
 It will then return to its idle state.
\end_layout

\begin_layout Subsubsection*
Write Pipeline
\end_layout

\begin_layout Standard
The write pipeline exists as a state machine for various stages of write.
 In its idle state, it will watch if the write FIFO has any content.
 It will then drain the value from the FIFO.
 Next, it will check to see if a 
\begin_inset Quotes eld
\end_inset

read
\begin_inset Quotes erd
\end_inset

 operation is taking place, before starting its 
\begin_inset Quotes eld
\end_inset

write
\begin_inset Quotes erd
\end_inset

 operation.
 Once 
\begin_inset Quotes eld
\end_inset

waitrequest
\begin_inset Quotes erd
\end_inset

 goes low, it will go back to its idle state.
\end_layout

\begin_layout Standard
When all the samples have been calculated and written, and IRQ will be asserted,
 and the hardware will wait for an Avalon slave read to be performed (stage
 3) before going back to its idle state (stage 0).
\end_layout

\begin_layout Subsubsection*
Reader Priority
\end_layout

\begin_layout Standard
Due to the long latency in calculation, and the fact that only one read
 or write operation can be performed on the SDRAM at any time, the request
 pipeline is given priorty over the write pipeline.
 This is so that the necessary buffers can be filled up first so that calculatio
n can take place as the writing is essentially much faster.
 The request pipeline will only yield when the buffers are full.
 Care was also taken to prevent deadlocks when both reads and writes are
 waiting on each other to complete.
 
\end_layout

\begin_layout Subsection
Performance Evaluation
\end_layout

\begin_layout Subsection
Further Enhancements
\end_layout

\begin_layout Standard
The calculation pipeline can itself be further pipelined to increase its
 throughput.
 While the latency will not be reduced, it can be further improved to yield
 a higher throughput.
 The hardware block can also be designed to act as a biquad filter with
 cascaded second order IIR filters.
 This, however, can increase the requirements for the bit widths of the
 intermediates and increase complexity as the values have to be multipled
 with yet another gain value in between the second order IIR filter blocks.
\end_layout

\begin_layout Section
\start_of_appendix
NIOS C File
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "D:/Code/Git/DSDCourseWork/software/software/hello_world.c"

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:C++-Simulation-Code"

\end_inset

Notch Filter C++ Simulation Code
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "D:/Code/Git/DSDCourseWork/notch_files/test/test.cpp"

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Verilog-Implementation"

\end_inset

Notch Filter Verilog Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "D:/Code/Git/DSDCourseWork/ip/notch.v"
lstparams "language=Verilog"

\end_inset


\end_layout

\end_body
\end_document
