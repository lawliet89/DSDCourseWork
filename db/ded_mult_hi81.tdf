--alt_ded_mult_y CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" dedicated_multiplier_circuitry="NO" device_family="Cyclone III" dsp_block_balancing="Auto" extra_latency=0 input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" output_aclr="ACLR3" output_reg="CLOCK0" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="UNSIGNED" sub_dedicated_multiplier_circuitry="NO" width_a=32 width_b=4 aclr clock dataa datab ena result
--VERSION_BEGIN 12.0 cbx_alt_ded_mult_y 2012:05:31:20:08:01:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_parallel_add 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION ded_mult_5qf1 (aclr[3..0], clock[3..0], dataa[13..0], datab[3..0], ena[3..0])
RETURNS ( result[17..0]);
FUNCTION ded_mult_9qf1 (aclr[3..0], clock[3..0], dataa[17..0], datab[3..0], ena[3..0])
RETURNS ( result[21..0]);

--synthesis_resources = lut 228 reg 36 
SUBDESIGN ded_mult_hi81
( 
	aclr[3..0]	:	input;
	clock[3..0]	:	input;
	dataa[31..0]	:	input;
	datab[3..0]	:	input;
	ena[3..0]	:	input;
	result[35..0]	:	output;
) 
VARIABLE 
	left_mult : ded_mult_5qf1;
	right_mult : ded_mult_9qf1;
	external_mult_registers[35..0] : dffe;
	substage_adder_dataa[17..0]	:	WIRE;
	substage_adder_datab[17..0]	:	WIRE;
	substage_adder_result[17..0]	:	WIRE;
	extension_bits[13..0]	: WIRE;

BEGIN 
	left_mult.aclr[] = aclr[];
	left_mult.clock[] = clock[];
	left_mult.dataa[13..0] = dataa[31..18];
	left_mult.datab[] = datab[];
	left_mult.ena[] = ena[];
	right_mult.aclr[] = aclr[];
	right_mult.clock[] = clock[];
	right_mult.dataa[17..0] = dataa[17..0];
	right_mult.datab[] = datab[];
	right_mult.ena[] = ena[];
	external_mult_registers[].clk = clock[0..0];
	external_mult_registers[].clrn = (! aclr[3..3]);
	external_mult_registers[].d = ( substage_adder_result[], right_mult.result[17..0]);
	external_mult_registers[].ena = ena[0..0];
	substage_adder_result[] = substage_adder_dataa[] + substage_adder_datab[];
	substage_adder_dataa[] = left_mult.result[];
	substage_adder_datab[] = ( ( extension_bits[], right_mult.result[21..18]));
	extension_bits[] = B"00000000000000";
	result[] = external_mult_registers[].q;
END;
--VALID FILE
