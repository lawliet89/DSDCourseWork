--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=0 LPM_WIDTHA=18 LPM_WIDTHB=4 LPM_WIDTHP=22 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 115 
SUBDESIGN mult_urm
( 
	dataa[17..0]	:	input;
	datab[3..0]	:	input;
	result[21..0]	:	output;
) 
VARIABLE
	add30_result[24..0]	:	WIRE;
	add34_result[21..0]	:	WIRE;
	add38_result[2..0]	:	WIRE;
	cs25a[2..0] : carry_sum;
	cs26a[2..0] : carry_sum;
	le27a[19..0] : lcell;
	le28a[19..0] : lcell;
	le29a[18..0] : lcell;
	sft31a[24..0] : soft;
	sft32a[24..0] : soft;
	sft33a[24..0] : soft;
	sft35a[21..0] : soft;
	sft36a[21..0] : soft;
	sft37a[21..0] : soft;
	sft39a[2..0] : soft;
	sft40a[2..0] : soft;
	sft41a[2..0] : soft;
	dataa_node[17..0]	: WIRE;
	datab_node[3..0]	: WIRE;
	final_result_node[21..0]	: WIRE;
	w565w[5..0]	: WIRE;
	w628w[19..0]	: WIRE;
	w703w[19..0]	: WIRE;
	w811w	: WIRE;
	w824w	: WIRE;
	w969w[24..0]	: WIRE;

BEGIN 
	add30_result[] = sft31a[].out + sft32a[].out;
	add34_result[] = sft35a[].out + sft36a[].out;
	add38_result[] = sft39a[].out + sft40a[].out;
	cs25a[].cin = ( ((w565w[4..4] & cs25a[1].cout) # w565w[5..5]), ((w565w[2..2] & cs25a[0].cout) # w565w[3..3]), w565w[1..1]);
	cs25a[].sin = ( ((((((! w565w[5..5]) & w565w[4..4]) & cs25a[1].cout) # ((w565w[5..5] & w565w[4..4]) & (! cs25a[1].cout))) # ((w565w[5..5] & (! w565w[4..4])) & cs25a[1].cout)) # ((w565w[5..5] & (! w565w[4..4])) & (! cs25a[1].cout))), ((((((! w565w[3..3]) & w565w[2..2]) & cs25a[0].cout) # ((w565w[3..3] & w565w[2..2]) & (! cs25a[0].cout))) # ((w565w[3..3] & (! w565w[2..2])) & cs25a[0].cout)) # ((w565w[3..3] & (! w565w[2..2])) & (! cs25a[0].cout))), w565w[1..1]);
	cs26a[].cin = ( ((w565w[4..4] & cs26a[1].cout) # w565w[5..5]), ((w565w[2..2] & cs26a[0].cout) # w565w[3..3]), w565w[1..1]);
	cs26a[].sin = ( ((((((! w565w[5..5]) & (! w565w[4..4])) & cs26a[1].cout) # (((! w565w[5..5]) & w565w[4..4]) & (! cs26a[1].cout))) # ((w565w[5..5] & w565w[4..4]) & (! cs26a[1].cout))) # ((w565w[5..5] & (! w565w[4..4])) & cs26a[1].cout)), ((((((! w565w[3..3]) & (! w565w[2..2])) & cs26a[0].cout) # (((! w565w[3..3]) & w565w[2..2]) & (! cs26a[0].cout))) # ((w565w[3..3] & w565w[2..2]) & (! cs26a[0].cout))) # ((w565w[3..3] & (! w565w[2..2])) & cs26a[0].cout)), w565w[0..0]);
	le27a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs25a[0].sout) & (! cs26a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs25a[0].sout) & cs26a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs25a[0].sout)) & cs26a[0].sout)))));
	le28a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs25a[1].sout) & (! cs26a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs25a[1].sout) & cs26a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs25a[1].sout)) & cs26a[1].sout)))));
	le29a[].in = ((cs25a[2].sout & ( dataa_node[], B"0")) # (cs26a[2].sout & ( B"0", dataa_node[])));
	sft31a[].in = ( w811w, ( w811w, ( le29a[18..18].out, ( sft37a[19..19].out, ( sft37a[18..18].out, ( sft37a[17..17].out, ( le29a[14..14].out, ( le29a[13..13].out, ( le29a[12..12].out, ( le29a[11..11].out, ( le29a[10..10].out, ( le29a[9..9].out, ( le29a[8..8].out, ( le29a[7..7].out, ( le29a[6..6].out, ( le29a[5..5].out, ( le29a[4..4].out, ( le29a[3..3].out, ( le29a[2..2].out, ( le29a[1..1].out, ( le29a[0..0].out, ( le28a[1..1].out, ( le28a[0..0].out, ( le27a[1..0].out))))))))))))))))))))))));
	sft32a[].in = ( w824w, ( sft37a[21..21].out, ( sft37a[20..20].out, ( sft41a[2..2].out, ( sft41a[1..1].out, ( sft41a[0..0].out, ( sft37a[16..16].out, ( sft37a[15..15].out, ( sft37a[14..14].out, ( sft37a[13..13].out, ( sft37a[12..12].out, ( sft37a[11..11].out, ( sft37a[10..10].out, ( sft37a[9..9].out, ( sft37a[8..8].out, ( sft37a[7..7].out, ( sft37a[6..6].out, ( sft37a[5..5].out, ( sft37a[4..4].out, ( sft37a[3..3].out, ( sft37a[2..2].out, ( sft37a[1..1].out, ( sft37a[0..0].out, ( w824w, cs25a[0].sout))))))))))))))))))))))));
	sft33a[].in = add30_result[];
	sft35a[].in = ( w824w, ( w811w, ( le29a[17..17].out, ( le29a[16..16].out, ( le29a[15..15].out, ( le28a[16..16].out, ( le28a[15..15].out, ( le28a[14..14].out, ( le28a[13..13].out, ( le28a[12..12].out, ( le28a[11..11].out, ( le28a[10..10].out, ( le28a[9..9].out, ( le28a[8..8].out, ( le28a[7..7].out, ( le28a[6..6].out, ( le28a[5..5].out, ( le28a[4..4].out, ( le28a[3..3].out, ( le28a[2..2].out, ( le27a[3..2].out)))))))))))))))))))));
	sft36a[].in = ( w824w, ( w824w, ( (! w703w[19..19]), ( le28a[18..18].out, ( le28a[17..17].out, ( le27a[18..18].out, ( le27a[17..17].out, ( le27a[16..16].out, ( le27a[15..15].out, ( le27a[14..14].out, ( le27a[13..13].out, ( le27a[12..12].out, ( le27a[11..11].out, ( le27a[10..10].out, ( le27a[9..9].out, ( le27a[8..8].out, ( le27a[7..7].out, ( le27a[6..6].out, ( le27a[5..5].out, ( le27a[4..4].out, ( w824w, cs25a[1].sout)))))))))))))))))))));
	sft37a[].in = add34_result[];
	sft39a[].in = ( w824w, ( w811w, w811w));
	sft40a[].in = ( w824w, ( w824w, (! w628w[19..19])));
	sft41a[].in = add38_result[];
	dataa_node[] = ( dataa[17..0]);
	datab_node[] = ( datab[3..0]);
	final_result_node[] = ( w969w[21..0]);
	result[] = ( final_result_node[21..0]);
	w565w[] = ( B"00", datab_node[]);
	w628w[] = le27a[].out;
	w703w[] = le28a[].out;
	w811w = B"1";
	w824w = B"0";
	w969w[] = ( sft33a[24..23].out, sft33a[22..21].out, sft33a[20..19].out, sft33a[18..17].out, sft33a[16..15].out, sft33a[14..13].out, sft33a[12..11].out, sft33a[10..9].out, sft33a[8..7].out, sft33a[6..5].out, sft33a[4..3].out, sft33a[2..1].out, sft33a[0..0].out);
END;
--VALID FILE
