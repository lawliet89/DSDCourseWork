--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=0 LPM_WIDTHA=14 LPM_WIDTHB=4 LPM_WIDTHP=18 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 95 
SUBDESIGN mult_vrm
( 
	dataa[13..0]	:	input;
	datab[3..0]	:	input;
	result[17..0]	:	output;
) 
VARIABLE
	add10_result[20..0]	:	WIRE;
	add14_result[17..0]	:	WIRE;
	add18_result[2..0]	:	WIRE;
	cs5a[2..0] : carry_sum;
	cs6a[2..0] : carry_sum;
	le7a[15..0] : lcell;
	le8a[15..0] : lcell;
	le9a[14..0] : lcell;
	sft11a[20..0] : soft;
	sft12a[20..0] : soft;
	sft13a[20..0] : soft;
	sft15a[17..0] : soft;
	sft16a[17..0] : soft;
	sft17a[17..0] : soft;
	sft19a[2..0] : soft;
	sft20a[2..0] : soft;
	sft21a[2..0] : soft;
	dataa_node[13..0]	: WIRE;
	datab_node[3..0]	: WIRE;
	final_result_node[17..0]	: WIRE;
	w134w[15..0]	: WIRE;
	w201w[15..0]	: WIRE;
	w297w	: WIRE;
	w310w	: WIRE;
	w431w[20..0]	: WIRE;
	w71w[5..0]	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add14_result[] = sft15a[].out + sft16a[].out;
	add18_result[] = sft19a[].out + sft20a[].out;
	cs5a[].cin = ( ((w71w[4..4] & cs5a[1].cout) # w71w[5..5]), ((w71w[2..2] & cs5a[0].cout) # w71w[3..3]), w71w[1..1]);
	cs5a[].sin = ( ((((((! w71w[5..5]) & w71w[4..4]) & cs5a[1].cout) # ((w71w[5..5] & w71w[4..4]) & (! cs5a[1].cout))) # ((w71w[5..5] & (! w71w[4..4])) & cs5a[1].cout)) # ((w71w[5..5] & (! w71w[4..4])) & (! cs5a[1].cout))), ((((((! w71w[3..3]) & w71w[2..2]) & cs5a[0].cout) # ((w71w[3..3] & w71w[2..2]) & (! cs5a[0].cout))) # ((w71w[3..3] & (! w71w[2..2])) & cs5a[0].cout)) # ((w71w[3..3] & (! w71w[2..2])) & (! cs5a[0].cout))), w71w[1..1]);
	cs6a[].cin = ( ((w71w[4..4] & cs6a[1].cout) # w71w[5..5]), ((w71w[2..2] & cs6a[0].cout) # w71w[3..3]), w71w[1..1]);
	cs6a[].sin = ( ((((((! w71w[5..5]) & (! w71w[4..4])) & cs6a[1].cout) # (((! w71w[5..5]) & w71w[4..4]) & (! cs6a[1].cout))) # ((w71w[5..5] & w71w[4..4]) & (! cs6a[1].cout))) # ((w71w[5..5] & (! w71w[4..4])) & cs6a[1].cout)), ((((((! w71w[3..3]) & (! w71w[2..2])) & cs6a[0].cout) # (((! w71w[3..3]) & w71w[2..2]) & (! cs6a[0].cout))) # ((w71w[3..3] & w71w[2..2]) & (! cs6a[0].cout))) # ((w71w[3..3] & (! w71w[2..2])) & cs6a[0].cout)), w71w[0..0]);
	le7a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs5a[0].sout) & (! cs6a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs5a[0].sout) & cs6a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs5a[0].sout)) & cs6a[0].sout)))));
	le8a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs5a[1].sout) & (! cs6a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs5a[1].sout) & cs6a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs5a[1].sout)) & cs6a[1].sout)))));
	le9a[].in = ((cs5a[2].sout & ( dataa_node[], B"0")) # (cs6a[2].sout & ( B"0", dataa_node[])));
	sft11a[].in = ( w297w, ( w297w, ( le9a[14..14].out, ( sft17a[15..15].out, ( sft17a[14..14].out, ( sft17a[13..13].out, ( le9a[10..10].out, ( le9a[9..9].out, ( le9a[8..8].out, ( le9a[7..7].out, ( le9a[6..6].out, ( le9a[5..5].out, ( le9a[4..4].out, ( le9a[3..3].out, ( le9a[2..2].out, ( le9a[1..1].out, ( le9a[0..0].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..0].out))))))))))))))))))));
	sft12a[].in = ( w310w, ( sft17a[17..17].out, ( sft17a[16..16].out, ( sft21a[2..2].out, ( sft21a[1..1].out, ( sft21a[0..0].out, ( sft17a[12..12].out, ( sft17a[11..11].out, ( sft17a[10..10].out, ( sft17a[9..9].out, ( sft17a[8..8].out, ( sft17a[7..7].out, ( sft17a[6..6].out, ( sft17a[5..5].out, ( sft17a[4..4].out, ( sft17a[3..3].out, ( sft17a[2..2].out, ( sft17a[1..1].out, ( sft17a[0..0].out, ( w310w, cs5a[0].sout))))))))))))))))))));
	sft13a[].in = add10_result[];
	sft15a[].in = ( w310w, ( w297w, ( le9a[13..13].out, ( le9a[12..12].out, ( le9a[11..11].out, ( le8a[12..12].out, ( le8a[11..11].out, ( le8a[10..10].out, ( le8a[9..9].out, ( le8a[8..8].out, ( le8a[7..7].out, ( le8a[6..6].out, ( le8a[5..5].out, ( le8a[4..4].out, ( le8a[3..3].out, ( le8a[2..2].out, ( le7a[3..2].out)))))))))))))))));
	sft16a[].in = ( w310w, ( w310w, ( (! w201w[15..15]), ( le8a[14..14].out, ( le8a[13..13].out, ( le7a[14..14].out, ( le7a[13..13].out, ( le7a[12..12].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( w310w, cs5a[1].sout)))))))))))))))));
	sft17a[].in = add14_result[];
	sft19a[].in = ( w310w, ( w297w, w297w));
	sft20a[].in = ( w310w, ( w310w, (! w134w[15..15])));
	sft21a[].in = add18_result[];
	dataa_node[] = ( dataa[13..0]);
	datab_node[] = ( datab[3..0]);
	final_result_node[] = ( w431w[17..0]);
	result[] = ( final_result_node[17..0]);
	w134w[] = le7a[].out;
	w201w[] = le8a[].out;
	w297w = B"1";
	w310w = B"0";
	w431w[] = ( sft13a[20..19].out, sft13a[18..17].out, sft13a[16..15].out, sft13a[14..13].out, sft13a[12..11].out, sft13a[10..9].out, sft13a[8..7].out, sft13a[6..5].out, sft13a[4..3].out, sft13a[2..1].out, sft13a[0..0].out);
	w71w[] = ( B"00", datab_node[]);
END;
--VALID FILE
