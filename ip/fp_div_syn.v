// megafunction wizard: %ALTFP_DIV%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altfp_div 

// ============================================================
// File Name: fp_div.v
// Megafunction Name(s):
// 			altfp_div
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 12.0 Build 178 05/31/2012 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2012 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altfp_div DENORMAL_SUPPORT="NO" DEVICE_FAMILY="Cyclone III" OPTIMIZE="SPEED" PIPELINE=14 REDUCED_FUNCTIONALITY="NO" WIDTH_EXP=8 WIDTH_MAN=23 aclr clk_en clock dataa datab division_by_zero nan overflow result underflow zero
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:08:02:SJ cbx_altfp_div 2012:05:31:20:08:02:SJ cbx_altsyncram 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_abs 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_decode 2012:05:31:20:08:02:SJ cbx_lpm_divide 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_stratixiii 2012:05:31:20:08:02:SJ cbx_stratixv 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altfp_div_pst DEVICE_FAMILY="Cyclone III" FILE_NAME="fp_div_syn.v:a" PIPELINE=14 WIDTH_EXP=8 WIDTH_MAN=23 aclr clk_en clock dataa datab division_by_zero nan overflow result underflow zero
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:08:02:SJ cbx_altfp_div 2012:05:31:20:08:02:SJ cbx_altsyncram 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_abs 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_decode 2012:05:31:20:08:02:SJ cbx_lpm_divide 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_stratixiii 2012:05:31:20:08:02:SJ cbx_stratixv 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


//altsyncram DEVICE_FAMILY="Cyclone III" INIT_FILE="fp_div_syn.hex" OPERATION_MODE="ROM" WIDTH_A=9 WIDTHAD_A=9 address_a clock0 clocken0 q_a
//VERSION_BEGIN 12.0 cbx_altsyncram 2012:05:31:20:08:02:SJ cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_lpm_decode 2012:05:31:20:08:02:SJ cbx_lpm_mux 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_stratixiii 2012:05:31:20:08:02:SJ cbx_stratixv 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = M9K 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  fp_div_altsyncram
	( 
	address_a,
	clock0,
	clocken0,
	q_a) /* synthesis synthesis_clearbox=1 */;
	input   [8:0]  address_a;
	input   clock0;
	input   clocken0;
	output   [8:0]  q_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clock0;
	tri1   clocken0;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block4a_0portadataout;
	wire  [0:0]   wire_ram_block4a_1portadataout;
	wire  [0:0]   wire_ram_block4a_2portadataout;
	wire  [0:0]   wire_ram_block4a_3portadataout;
	wire  [0:0]   wire_ram_block4a_4portadataout;
	wire  [0:0]   wire_ram_block4a_5portadataout;
	wire  [0:0]   wire_ram_block4a_6portadataout;
	wire  [0:0]   wire_ram_block4a_7portadataout;
	wire  [0:0]   wire_ram_block4a_8portadataout;
	wire  [8:0]  address_a_wire;

	cycloneiii_ram_block   ram_block4a_0
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_0portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_0.clk0_core_clock_enable = "ena0",
		ram_block4a_0.clk0_input_clock_enable = "ena0",
		ram_block4a_0.connectivity_checking = "OFF",
		ram_block4a_0.init_file = "fp_div_syn.hex",
		ram_block4a_0.init_file_layout = "port_a",
		ram_block4a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_0.mem_init0 = 512'h333333336664CD99326CD93649B249B6DB6DB6D24B692D2D2D694A52B5AB56A954AAB5555555555552AA55AB52B4A5A5B49249B264CCCCCE639C70E1F07F0000,
		ram_block4a_0.operation_mode = "rom",
		ram_block4a_0.port_a_address_width = 9,
		ram_block4a_0.port_a_data_out_clear = "none",
		ram_block4a_0.port_a_data_out_clock = "none",
		ram_block4a_0.port_a_data_width = 1,
		ram_block4a_0.port_a_first_address = 0,
		ram_block4a_0.port_a_first_bit_number = 0,
		ram_block4a_0.port_a_last_address = 511,
		ram_block4a_0.port_a_logical_ram_depth = 512,
		ram_block4a_0.port_a_logical_ram_width = 9,
		ram_block4a_0.ram_block_type = "AUTO",
		ram_block4a_0.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_1
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_1portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_1.clk0_core_clock_enable = "ena0",
		ram_block4a_1.clk0_input_clock_enable = "ena0",
		ram_block4a_1.connectivity_checking = "OFF",
		ram_block4a_1.init_file = "fp_div_syn.hex",
		ram_block4a_1.init_file_layout = "port_a",
		ram_block4a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_1.mem_init0 = 512'h0F0F0F0F1E1C3C78F1E3C70E3871C78E38E38E31C718E31CE318C6318C673198CC667333333333333666CC99366D936C92492496D25A5A5AD6B52A54AAD55555,
		ram_block4a_1.operation_mode = "rom",
		ram_block4a_1.port_a_address_width = 9,
		ram_block4a_1.port_a_data_out_clear = "none",
		ram_block4a_1.port_a_data_out_clock = "none",
		ram_block4a_1.port_a_data_width = 1,
		ram_block4a_1.port_a_first_address = 0,
		ram_block4a_1.port_a_first_bit_number = 1,
		ram_block4a_1.port_a_last_address = 511,
		ram_block4a_1.port_a_logical_ram_depth = 512,
		ram_block4a_1.port_a_logical_ram_width = 9,
		ram_block4a_1.ram_block_type = "AUTO",
		ram_block4a_1.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_2
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_2portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_2.clk0_core_clock_enable = "ena0",
		ram_block4a_2.clk0_input_clock_enable = "ena0",
		ram_block4a_2.connectivity_checking = "OFF",
		ram_block4a_2.init_file = "fp_div_syn.hex",
		ram_block4a_2.init_file_layout = "port_a",
		ram_block4a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_2.mem_init0 = 512'h00FF00FF01FC03F80FE03F01F80FC07E07E07E0FC0F81F03E0F83E0F83E0F0783C1E0F0F0F0F0F0F0E1E3C78F1E38F1C71C71C71CE39C639CE7319CC66333333,
		ram_block4a_2.operation_mode = "rom",
		ram_block4a_2.port_a_address_width = 9,
		ram_block4a_2.port_a_data_out_clear = "none",
		ram_block4a_2.port_a_data_out_clock = "none",
		ram_block4a_2.port_a_data_width = 1,
		ram_block4a_2.port_a_first_address = 0,
		ram_block4a_2.port_a_first_bit_number = 2,
		ram_block4a_2.port_a_last_address = 511,
		ram_block4a_2.port_a_logical_ram_depth = 512,
		ram_block4a_2.port_a_logical_ram_width = 9,
		ram_block4a_2.ram_block_type = "AUTO",
		ram_block4a_2.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_3
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_3portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_3.clk0_core_clock_enable = "ena0",
		ram_block4a_3.clk0_input_clock_enable = "ena0",
		ram_block4a_3.connectivity_checking = "OFF",
		ram_block4a_3.init_file = "fp_div_syn.hex",
		ram_block4a_3.init_file_layout = "port_a",
		ram_block4a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_3.mem_init0 = 512'h0000FFFF0003FFF8001FFF0007FFC001FFE001FFC007FF001FF801FF801FF007FC01FF00FF00FF00FE01FC07F01F80FC0FC0FC0FC1F83E07C1F0F83C1E0F0F0F,
		ram_block4a_3.operation_mode = "rom",
		ram_block4a_3.port_a_address_width = 9,
		ram_block4a_3.port_a_data_out_clear = "none",
		ram_block4a_3.port_a_data_out_clock = "none",
		ram_block4a_3.port_a_data_width = 1,
		ram_block4a_3.port_a_first_address = 0,
		ram_block4a_3.port_a_first_bit_number = 3,
		ram_block4a_3.port_a_last_address = 511,
		ram_block4a_3.port_a_logical_ram_depth = 512,
		ram_block4a_3.port_a_logical_ram_width = 9,
		ram_block4a_3.ram_block_type = "AUTO",
		ram_block4a_3.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_4
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_4portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_4.clk0_core_clock_enable = "ena0",
		ram_block4a_4.clk0_input_clock_enable = "ena0",
		ram_block4a_4.connectivity_checking = "OFF",
		ram_block4a_4.init_file = "fp_div_syn.hex",
		ram_block4a_4.init_file_layout = "port_a",
		ram_block4a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_4.mem_init0 = 512'h00000000FFFFFFF8000000FFFFFFC000001FFFFFC00000FFFFF800007FFFF00003FFFF0000FFFF0001FFFC000FFF8003FFC003FFC007FE003FF007FC01FF00FF,
		ram_block4a_4.operation_mode = "rom",
		ram_block4a_4.port_a_address_width = 9,
		ram_block4a_4.port_a_data_out_clear = "none",
		ram_block4a_4.port_a_data_out_clock = "none",
		ram_block4a_4.port_a_data_width = 1,
		ram_block4a_4.port_a_first_address = 0,
		ram_block4a_4.port_a_first_bit_number = 4,
		ram_block4a_4.port_a_last_address = 511,
		ram_block4a_4.port_a_logical_ram_depth = 512,
		ram_block4a_4.port_a_logical_ram_width = 9,
		ram_block4a_4.ram_block_type = "AUTO",
		ram_block4a_4.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_5
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_5portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_5.clk0_core_clock_enable = "ena0",
		ram_block4a_5.clk0_input_clock_enable = "ena0",
		ram_block4a_5.connectivity_checking = "OFF",
		ram_block4a_5.init_file = "fp_div_syn.hex",
		ram_block4a_5.init_file_layout = "port_a",
		ram_block4a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_5.mem_init0 = 512'h0000000000000007FFFFFFFFFFFFC000000000003FFFFFFFFFF8000000000FFFFFFFFF00000000FFFFFFFC0000007FFFFFC000003FFFFE00000FFFFC0000FFFF,
		ram_block4a_5.operation_mode = "rom",
		ram_block4a_5.port_a_address_width = 9,
		ram_block4a_5.port_a_data_out_clear = "none",
		ram_block4a_5.port_a_data_out_clock = "none",
		ram_block4a_5.port_a_data_width = 1,
		ram_block4a_5.port_a_first_address = 0,
		ram_block4a_5.port_a_first_bit_number = 5,
		ram_block4a_5.port_a_last_address = 511,
		ram_block4a_5.port_a_logical_ram_depth = 512,
		ram_block4a_5.port_a_logical_ram_width = 9,
		ram_block4a_5.ram_block_type = "AUTO",
		ram_block4a_5.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_6
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_6portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_6.clk0_core_clock_enable = "ena0",
		ram_block4a_6.clk0_input_clock_enable = "ena0",
		ram_block4a_6.connectivity_checking = "OFF",
		ram_block4a_6.init_file = "fp_div_syn.hex",
		ram_block4a_6.init_file_layout = "port_a",
		ram_block4a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_6.mem_init0 = 512'h00000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFF8000000000000000000FFFFFFFFFFFFFFFC0000000000003FFFFFFFFFFE0000000003FFFFFFFF,
		ram_block4a_6.operation_mode = "rom",
		ram_block4a_6.port_a_address_width = 9,
		ram_block4a_6.port_a_data_out_clear = "none",
		ram_block4a_6.port_a_data_out_clock = "none",
		ram_block4a_6.port_a_data_width = 1,
		ram_block4a_6.port_a_first_address = 0,
		ram_block4a_6.port_a_first_bit_number = 6,
		ram_block4a_6.port_a_last_address = 511,
		ram_block4a_6.port_a_logical_ram_depth = 512,
		ram_block4a_6.port_a_logical_ram_width = 9,
		ram_block4a_6.ram_block_type = "AUTO",
		ram_block4a_6.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_7
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_7portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_7.clk0_core_clock_enable = "ena0",
		ram_block4a_7.clk0_input_clock_enable = "ena0",
		ram_block4a_7.connectivity_checking = "OFF",
		ram_block4a_7.init_file = "fp_div_syn.hex",
		ram_block4a_7.init_file_layout = "port_a",
		ram_block4a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_7.mem_init0 = 512'h0000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000000000001FFFFFFFFFFFFFFFFFF,
		ram_block4a_7.operation_mode = "rom",
		ram_block4a_7.port_a_address_width = 9,
		ram_block4a_7.port_a_data_out_clear = "none",
		ram_block4a_7.port_a_data_out_clock = "none",
		ram_block4a_7.port_a_data_width = 1,
		ram_block4a_7.port_a_first_address = 0,
		ram_block4a_7.port_a_first_bit_number = 7,
		ram_block4a_7.port_a_last_address = 511,
		ram_block4a_7.port_a_logical_ram_depth = 512,
		ram_block4a_7.port_a_logical_ram_width = 9,
		ram_block4a_7.ram_block_type = "AUTO",
		ram_block4a_7.lpm_type = "cycloneiii_ram_block";
	cycloneiii_ram_block   ram_block4a_8
	( 
	.clk0(clock0),
	.ena0(clocken0),
	.portaaddr({address_a_wire[8:0]}),
	.portadataout(wire_ram_block4a_8portadataout[0:0]),
	.portare(1'b1),
	.portbdataout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1(1'b0),
	.clr0(1'b0),
	.clr1(1'b0),
	.ena1(1'b1),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portadatain({1{1'b0}}),
	.portawe(1'b0),
	.portbaddr({1{1'b0}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbre(1'b1),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block4a_8.clk0_core_clock_enable = "ena0",
		ram_block4a_8.clk0_input_clock_enable = "ena0",
		ram_block4a_8.connectivity_checking = "OFF",
		ram_block4a_8.init_file = "fp_div_syn.hex",
		ram_block4a_8.init_file_layout = "port_a",
		ram_block4a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block4a_8.mem_init0 = 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
		ram_block4a_8.operation_mode = "rom",
		ram_block4a_8.port_a_address_width = 9,
		ram_block4a_8.port_a_data_out_clear = "none",
		ram_block4a_8.port_a_data_out_clock = "none",
		ram_block4a_8.port_a_data_width = 1,
		ram_block4a_8.port_a_first_address = 0,
		ram_block4a_8.port_a_first_bit_number = 8,
		ram_block4a_8.port_a_last_address = 511,
		ram_block4a_8.port_a_logical_ram_depth = 512,
		ram_block4a_8.port_a_logical_ram_width = 9,
		ram_block4a_8.ram_block_type = "AUTO",
		ram_block4a_8.lpm_type = "cycloneiii_ram_block";
	assign
		address_a_wire = address_a,
		q_a = {wire_ram_block4a_8portadataout[0], wire_ram_block4a_7portadataout[0], wire_ram_block4a_6portadataout[0], wire_ram_block4a_5portadataout[0], wire_ram_block4a_4portadataout[0], wire_ram_block4a_3portadataout[0], wire_ram_block4a_2portadataout[0], wire_ram_block4a_1portadataout[0], wire_ram_block4a_0portadataout[0]};
endmodule //fp_div_altsyncram


//lpm_add_sub DEVICE_FAMILY="Cyclone III" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=9 aclr clken clock dataa datab overflow result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=9 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone III" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=31 aclr cin clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=50 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Cyclone III" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=23 alb dataa datab
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_compare 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=25 LPM_WIDTHB=10 LPM_WIDTHP=35 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone III" WIDTH=18 dataa datab result
//VERSION_BEGIN 12.0 cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = dsp_9bit 4 lut 18 reg 36 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fp_div_mult
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [24:0]  dataa;
	input   [9:0]  datab;
	output   [34:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[17:0]	wire_add45_result;
	wire  [27:0]   wire_mac_mult5_dataout;
	wire  [16:0]   wire_mac_mult7_dataout;
	wire  [27:0]   wire_mac_out6_dataout;
	wire  [16:0]   wire_mac_out8_dataout;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe10;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe11;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe12;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe13;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe14;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe15;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe16;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe17;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe18;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe19;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe20;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe21;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe22;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe23;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe24;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe25;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe26;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe27;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe28;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe29;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe30;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe31;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe32;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe33;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe34;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe35;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe36;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe37;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe38;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe39;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe40;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe41;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe42;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe43;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe44;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe9;
	wire  [17:0]   wire_sft46a_in;
	wire  [17:0]   wire_sft46a_out;
	wire  [17:0]   wire_sft47a_in;
	wire  [17:0]   wire_sft47a_out;
	wire  [17:0]   wire_sft48a_in;
	wire  [17:0]   wire_sft48a_out;
	wire  w577w;
	wire  [35:0]  w650w;

	assign
		wire_add45_result = wire_sft46a_out + wire_sft47a_out;
	cycloneiii_mac_mult   mac_mult5
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa({dataa[17:0]}),
	.datab({datab[9:0]}),
	.dataout(wire_mac_mult5_dataout),
	.ena(clken),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult5.dataa_clock = "0",
		mac_mult5.dataa_width = 18,
		mac_mult5.datab_clock = "0",
		mac_mult5.datab_width = 10,
		mac_mult5.signa_clock = "none",
		mac_mult5.signb_clock = "none",
		mac_mult5.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_mult   mac_mult7
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa({dataa[24:18]}),
	.datab({datab[9:0]}),
	.dataout(wire_mac_mult7_dataout),
	.ena(clken),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult7.dataa_clock = "0",
		mac_mult7.dataa_width = 7,
		mac_mult7.datab_clock = "0",
		mac_mult7.datab_width = 10,
		mac_mult7.signa_clock = "none",
		mac_mult7.signb_clock = "none",
		mac_mult7.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_out   mac_out6
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult5_dataout),
	.dataout(wire_mac_out6_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out6.dataa_width = 28,
		mac_out6.output_clock = "0",
		mac_out6.lpm_type = "cycloneiii_mac_out";
	cycloneiii_mac_out   mac_out8
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult7_dataout),
	.dataout(wire_mac_out8_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out8.dataa_width = 17,
		mac_out8.output_clock = "0",
		mac_out8.lpm_type = "cycloneiii_mac_out";
	// synopsys translate_off
	initial
		dffe10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe10 <= 1'b0;
		else if  (clken == 1'b1)   dffe10 <= wire_mac_out6_dataout[1];
	// synopsys translate_off
	initial
		dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe11 <= 1'b0;
		else if  (clken == 1'b1)   dffe11 <= wire_mac_out6_dataout[2];
	// synopsys translate_off
	initial
		dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe12 <= 1'b0;
		else if  (clken == 1'b1)   dffe12 <= wire_mac_out6_dataout[3];
	// synopsys translate_off
	initial
		dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe13 <= 1'b0;
		else if  (clken == 1'b1)   dffe13 <= wire_mac_out6_dataout[4];
	// synopsys translate_off
	initial
		dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe14 <= 1'b0;
		else if  (clken == 1'b1)   dffe14 <= wire_mac_out6_dataout[5];
	// synopsys translate_off
	initial
		dffe15 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe15 <= 1'b0;
		else if  (clken == 1'b1)   dffe15 <= wire_mac_out6_dataout[6];
	// synopsys translate_off
	initial
		dffe16 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe16 <= 1'b0;
		else if  (clken == 1'b1)   dffe16 <= wire_mac_out6_dataout[7];
	// synopsys translate_off
	initial
		dffe17 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe17 <= 1'b0;
		else if  (clken == 1'b1)   dffe17 <= wire_mac_out6_dataout[8];
	// synopsys translate_off
	initial
		dffe18 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe18 <= 1'b0;
		else if  (clken == 1'b1)   dffe18 <= wire_mac_out6_dataout[9];
	// synopsys translate_off
	initial
		dffe19 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe19 <= 1'b0;
		else if  (clken == 1'b1)   dffe19 <= wire_mac_out6_dataout[10];
	// synopsys translate_off
	initial
		dffe20 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe20 <= 1'b0;
		else if  (clken == 1'b1)   dffe20 <= wire_mac_out6_dataout[11];
	// synopsys translate_off
	initial
		dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe21 <= 1'b0;
		else if  (clken == 1'b1)   dffe21 <= wire_mac_out6_dataout[12];
	// synopsys translate_off
	initial
		dffe22 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe22 <= 1'b0;
		else if  (clken == 1'b1)   dffe22 <= wire_mac_out6_dataout[13];
	// synopsys translate_off
	initial
		dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe23 <= 1'b0;
		else if  (clken == 1'b1)   dffe23 <= wire_mac_out6_dataout[14];
	// synopsys translate_off
	initial
		dffe24 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe24 <= 1'b0;
		else if  (clken == 1'b1)   dffe24 <= wire_mac_out6_dataout[15];
	// synopsys translate_off
	initial
		dffe25 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe25 <= 1'b0;
		else if  (clken == 1'b1)   dffe25 <= wire_mac_out6_dataout[16];
	// synopsys translate_off
	initial
		dffe26 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe26 <= 1'b0;
		else if  (clken == 1'b1)   dffe26 <= wire_mac_out6_dataout[17];
	// synopsys translate_off
	initial
		dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe27 <= 1'b0;
		else if  (clken == 1'b1)   dffe27 <= wire_sft48a_out[0];
	// synopsys translate_off
	initial
		dffe28 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe28 <= 1'b0;
		else if  (clken == 1'b1)   dffe28 <= wire_sft48a_out[1];
	// synopsys translate_off
	initial
		dffe29 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe29 <= 1'b0;
		else if  (clken == 1'b1)   dffe29 <= wire_sft48a_out[2];
	// synopsys translate_off
	initial
		dffe30 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe30 <= 1'b0;
		else if  (clken == 1'b1)   dffe30 <= wire_sft48a_out[3];
	// synopsys translate_off
	initial
		dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe31 <= 1'b0;
		else if  (clken == 1'b1)   dffe31 <= wire_sft48a_out[4];
	// synopsys translate_off
	initial
		dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe32 <= 1'b0;
		else if  (clken == 1'b1)   dffe32 <= wire_sft48a_out[5];
	// synopsys translate_off
	initial
		dffe33 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe33 <= 1'b0;
		else if  (clken == 1'b1)   dffe33 <= wire_sft48a_out[6];
	// synopsys translate_off
	initial
		dffe34 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe34 <= 1'b0;
		else if  (clken == 1'b1)   dffe34 <= wire_sft48a_out[7];
	// synopsys translate_off
	initial
		dffe35 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe35 <= 1'b0;
		else if  (clken == 1'b1)   dffe35 <= wire_sft48a_out[8];
	// synopsys translate_off
	initial
		dffe36 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe36 <= 1'b0;
		else if  (clken == 1'b1)   dffe36 <= wire_sft48a_out[9];
	// synopsys translate_off
	initial
		dffe37 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe37 <= 1'b0;
		else if  (clken == 1'b1)   dffe37 <= wire_sft48a_out[10];
	// synopsys translate_off
	initial
		dffe38 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe38 <= 1'b0;
		else if  (clken == 1'b1)   dffe38 <= wire_sft48a_out[11];
	// synopsys translate_off
	initial
		dffe39 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe39 <= 1'b0;
		else if  (clken == 1'b1)   dffe39 <= wire_sft48a_out[12];
	// synopsys translate_off
	initial
		dffe40 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe40 <= 1'b0;
		else if  (clken == 1'b1)   dffe40 <= wire_sft48a_out[13];
	// synopsys translate_off
	initial
		dffe41 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe41 <= 1'b0;
		else if  (clken == 1'b1)   dffe41 <= wire_sft48a_out[14];
	// synopsys translate_off
	initial
		dffe42 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe42 <= 1'b0;
		else if  (clken == 1'b1)   dffe42 <= wire_sft48a_out[15];
	// synopsys translate_off
	initial
		dffe43 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe43 <= 1'b0;
		else if  (clken == 1'b1)   dffe43 <= wire_sft48a_out[16];
	// synopsys translate_off
	initial
		dffe44 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe44 <= 1'b0;
		else if  (clken == 1'b1)   dffe44 <= wire_sft48a_out[17];
	// synopsys translate_off
	initial
		dffe9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe9 <= 1'b0;
		else if  (clken == 1'b1)   dffe9 <= wire_mac_out6_dataout[0];
	soft   sft46a_0
	( 
	.in(wire_sft46a_in[0:0]),
	.out(wire_sft46a_out[0:0]));
	soft   sft46a_1
	( 
	.in(wire_sft46a_in[1:1]),
	.out(wire_sft46a_out[1:1]));
	soft   sft46a_2
	( 
	.in(wire_sft46a_in[2:2]),
	.out(wire_sft46a_out[2:2]));
	soft   sft46a_3
	( 
	.in(wire_sft46a_in[3:3]),
	.out(wire_sft46a_out[3:3]));
	soft   sft46a_4
	( 
	.in(wire_sft46a_in[4:4]),
	.out(wire_sft46a_out[4:4]));
	soft   sft46a_5
	( 
	.in(wire_sft46a_in[5:5]),
	.out(wire_sft46a_out[5:5]));
	soft   sft46a_6
	( 
	.in(wire_sft46a_in[6:6]),
	.out(wire_sft46a_out[6:6]));
	soft   sft46a_7
	( 
	.in(wire_sft46a_in[7:7]),
	.out(wire_sft46a_out[7:7]));
	soft   sft46a_8
	( 
	.in(wire_sft46a_in[8:8]),
	.out(wire_sft46a_out[8:8]));
	soft   sft46a_9
	( 
	.in(wire_sft46a_in[9:9]),
	.out(wire_sft46a_out[9:9]));
	soft   sft46a_10
	( 
	.in(wire_sft46a_in[10:10]),
	.out(wire_sft46a_out[10:10]));
	soft   sft46a_11
	( 
	.in(wire_sft46a_in[11:11]),
	.out(wire_sft46a_out[11:11]));
	soft   sft46a_12
	( 
	.in(wire_sft46a_in[12:12]),
	.out(wire_sft46a_out[12:12]));
	soft   sft46a_13
	( 
	.in(wire_sft46a_in[13:13]),
	.out(wire_sft46a_out[13:13]));
	soft   sft46a_14
	( 
	.in(wire_sft46a_in[14:14]),
	.out(wire_sft46a_out[14:14]));
	soft   sft46a_15
	( 
	.in(wire_sft46a_in[15:15]),
	.out(wire_sft46a_out[15:15]));
	soft   sft46a_16
	( 
	.in(wire_sft46a_in[16:16]),
	.out(wire_sft46a_out[16:16]));
	soft   sft46a_17
	( 
	.in(wire_sft46a_in[17:17]),
	.out(wire_sft46a_out[17:17]));
	assign
		wire_sft46a_in = {w577w, {wire_mac_out8_dataout[16], {wire_mac_out8_dataout[15], {wire_mac_out8_dataout[14], {wire_mac_out8_dataout[13], {wire_mac_out8_dataout[12], {wire_mac_out8_dataout[11], {wire_mac_out8_dataout[10], {wire_mac_out6_dataout[27], {wire_mac_out6_dataout[26], {wire_mac_out6_dataout[25], {wire_mac_out6_dataout[24], {wire_mac_out6_dataout[23], {wire_mac_out6_dataout[22], {wire_mac_out6_dataout[21], {wire_mac_out6_dataout[20], {wire_mac_out6_dataout[19:18]}}}}}}}}}}}}}}}}};
	soft   sft47a_0
	( 
	.in(wire_sft47a_in[0:0]),
	.out(wire_sft47a_out[0:0]));
	soft   sft47a_1
	( 
	.in(wire_sft47a_in[1:1]),
	.out(wire_sft47a_out[1:1]));
	soft   sft47a_2
	( 
	.in(wire_sft47a_in[2:2]),
	.out(wire_sft47a_out[2:2]));
	soft   sft47a_3
	( 
	.in(wire_sft47a_in[3:3]),
	.out(wire_sft47a_out[3:3]));
	soft   sft47a_4
	( 
	.in(wire_sft47a_in[4:4]),
	.out(wire_sft47a_out[4:4]));
	soft   sft47a_5
	( 
	.in(wire_sft47a_in[5:5]),
	.out(wire_sft47a_out[5:5]));
	soft   sft47a_6
	( 
	.in(wire_sft47a_in[6:6]),
	.out(wire_sft47a_out[6:6]));
	soft   sft47a_7
	( 
	.in(wire_sft47a_in[7:7]),
	.out(wire_sft47a_out[7:7]));
	soft   sft47a_8
	( 
	.in(wire_sft47a_in[8:8]),
	.out(wire_sft47a_out[8:8]));
	soft   sft47a_9
	( 
	.in(wire_sft47a_in[9:9]),
	.out(wire_sft47a_out[9:9]));
	soft   sft47a_10
	( 
	.in(wire_sft47a_in[10:10]),
	.out(wire_sft47a_out[10:10]));
	soft   sft47a_11
	( 
	.in(wire_sft47a_in[11:11]),
	.out(wire_sft47a_out[11:11]));
	soft   sft47a_12
	( 
	.in(wire_sft47a_in[12:12]),
	.out(wire_sft47a_out[12:12]));
	soft   sft47a_13
	( 
	.in(wire_sft47a_in[13:13]),
	.out(wire_sft47a_out[13:13]));
	soft   sft47a_14
	( 
	.in(wire_sft47a_in[14:14]),
	.out(wire_sft47a_out[14:14]));
	soft   sft47a_15
	( 
	.in(wire_sft47a_in[15:15]),
	.out(wire_sft47a_out[15:15]));
	soft   sft47a_16
	( 
	.in(wire_sft47a_in[16:16]),
	.out(wire_sft47a_out[16:16]));
	soft   sft47a_17
	( 
	.in(wire_sft47a_in[17:17]),
	.out(wire_sft47a_out[17:17]));
	assign
		wire_sft47a_in = {w577w, {w577w, {w577w, {w577w, {w577w, {w577w, {w577w, {w577w, {wire_mac_out8_dataout[9], {wire_mac_out8_dataout[8], {wire_mac_out8_dataout[7], {wire_mac_out8_dataout[6], {wire_mac_out8_dataout[5], {wire_mac_out8_dataout[4], {wire_mac_out8_dataout[3], {wire_mac_out8_dataout[2], {wire_mac_out8_dataout[1:0]}}}}}}}}}}}}}}}}};
	soft   sft48a_0
	( 
	.in(wire_sft48a_in[0:0]),
	.out(wire_sft48a_out[0:0]));
	soft   sft48a_1
	( 
	.in(wire_sft48a_in[1:1]),
	.out(wire_sft48a_out[1:1]));
	soft   sft48a_2
	( 
	.in(wire_sft48a_in[2:2]),
	.out(wire_sft48a_out[2:2]));
	soft   sft48a_3
	( 
	.in(wire_sft48a_in[3:3]),
	.out(wire_sft48a_out[3:3]));
	soft   sft48a_4
	( 
	.in(wire_sft48a_in[4:4]),
	.out(wire_sft48a_out[4:4]));
	soft   sft48a_5
	( 
	.in(wire_sft48a_in[5:5]),
	.out(wire_sft48a_out[5:5]));
	soft   sft48a_6
	( 
	.in(wire_sft48a_in[6:6]),
	.out(wire_sft48a_out[6:6]));
	soft   sft48a_7
	( 
	.in(wire_sft48a_in[7:7]),
	.out(wire_sft48a_out[7:7]));
	soft   sft48a_8
	( 
	.in(wire_sft48a_in[8:8]),
	.out(wire_sft48a_out[8:8]));
	soft   sft48a_9
	( 
	.in(wire_sft48a_in[9:9]),
	.out(wire_sft48a_out[9:9]));
	soft   sft48a_10
	( 
	.in(wire_sft48a_in[10:10]),
	.out(wire_sft48a_out[10:10]));
	soft   sft48a_11
	( 
	.in(wire_sft48a_in[11:11]),
	.out(wire_sft48a_out[11:11]));
	soft   sft48a_12
	( 
	.in(wire_sft48a_in[12:12]),
	.out(wire_sft48a_out[12:12]));
	soft   sft48a_13
	( 
	.in(wire_sft48a_in[13:13]),
	.out(wire_sft48a_out[13:13]));
	soft   sft48a_14
	( 
	.in(wire_sft48a_in[14:14]),
	.out(wire_sft48a_out[14:14]));
	soft   sft48a_15
	( 
	.in(wire_sft48a_in[15:15]),
	.out(wire_sft48a_out[15:15]));
	soft   sft48a_16
	( 
	.in(wire_sft48a_in[16:16]),
	.out(wire_sft48a_out[16:16]));
	soft   sft48a_17
	( 
	.in(wire_sft48a_in[17:17]),
	.out(wire_sft48a_out[17:17]));
	assign
		wire_sft48a_in = wire_add45_result;
	assign
		result = w650w[34:0],
		w577w = 1'b0,
		w650w = {dffe44, dffe43, dffe42, dffe41, dffe40, dffe39, dffe38, dffe37, dffe36, dffe35, dffe34, dffe33, dffe32, dffe31, dffe30, dffe29, dffe28, dffe27, dffe26, dffe25, dffe24, dffe23, dffe22, dffe21, dffe20, dffe19, dffe18, dffe17, dffe16, dffe15, dffe14, dffe13, dffe12, dffe11, dffe10, dffe9};
endmodule //fp_div_mult


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=24 LPM_WIDTHB=10 LPM_WIDTHP=34 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone III" WIDTH=17 dataa datab result
//VERSION_BEGIN 12.0 cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = dsp_9bit 4 lut 17 reg 35 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fp_div_mult1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [23:0]  dataa;
	input   [9:0]  datab;
	output   [33:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[16:0]	wire_add88_result;
	wire  [27:0]   wire_mac_mult49_dataout;
	wire  [15:0]   wire_mac_mult51_dataout;
	wire  [27:0]   wire_mac_out50_dataout;
	wire  [15:0]   wire_mac_out52_dataout;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe53;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe54;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe55;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe56;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe57;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe58;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe59;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe60;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe61;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe62;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe63;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe64;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe65;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe66;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe67;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe68;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe69;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe70;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe71;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe72;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe73;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe74;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe75;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe76;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe77;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe78;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe79;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe80;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe81;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe82;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe83;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe84;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe85;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe86;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe87;
	wire  [16:0]   wire_sft89a_in;
	wire  [16:0]   wire_sft89a_out;
	wire  [16:0]   wire_sft90a_in;
	wire  [16:0]   wire_sft90a_out;
	wire  [16:0]   wire_sft91a_in;
	wire  [16:0]   wire_sft91a_out;
	wire  w784w;
	wire  [34:0]  w854w;

	assign
		wire_add88_result = wire_sft89a_out + wire_sft90a_out;
	cycloneiii_mac_mult   mac_mult49
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa({dataa[17:0]}),
	.datab({datab[9:0]}),
	.dataout(wire_mac_mult49_dataout),
	.ena(clken),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult49.dataa_clock = "0",
		mac_mult49.dataa_width = 18,
		mac_mult49.datab_clock = "0",
		mac_mult49.datab_width = 10,
		mac_mult49.signa_clock = "none",
		mac_mult49.signb_clock = "none",
		mac_mult49.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_mult   mac_mult51
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa({dataa[23:18]}),
	.datab({datab[9:0]}),
	.dataout(wire_mac_mult51_dataout),
	.ena(clken),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult51.dataa_clock = "0",
		mac_mult51.dataa_width = 6,
		mac_mult51.datab_clock = "0",
		mac_mult51.datab_width = 10,
		mac_mult51.signa_clock = "none",
		mac_mult51.signb_clock = "none",
		mac_mult51.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_out   mac_out50
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult49_dataout),
	.dataout(wire_mac_out50_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out50.dataa_width = 28,
		mac_out50.output_clock = "0",
		mac_out50.lpm_type = "cycloneiii_mac_out";
	cycloneiii_mac_out   mac_out52
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult51_dataout),
	.dataout(wire_mac_out52_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out52.dataa_width = 16,
		mac_out52.output_clock = "0",
		mac_out52.lpm_type = "cycloneiii_mac_out";
	// synopsys translate_off
	initial
		dffe53 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe53 <= 1'b0;
		else if  (clken == 1'b1)   dffe53 <= wire_mac_out50_dataout[0];
	// synopsys translate_off
	initial
		dffe54 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe54 <= 1'b0;
		else if  (clken == 1'b1)   dffe54 <= wire_mac_out50_dataout[1];
	// synopsys translate_off
	initial
		dffe55 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe55 <= 1'b0;
		else if  (clken == 1'b1)   dffe55 <= wire_mac_out50_dataout[2];
	// synopsys translate_off
	initial
		dffe56 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe56 <= 1'b0;
		else if  (clken == 1'b1)   dffe56 <= wire_mac_out50_dataout[3];
	// synopsys translate_off
	initial
		dffe57 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe57 <= 1'b0;
		else if  (clken == 1'b1)   dffe57 <= wire_mac_out50_dataout[4];
	// synopsys translate_off
	initial
		dffe58 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe58 <= 1'b0;
		else if  (clken == 1'b1)   dffe58 <= wire_mac_out50_dataout[5];
	// synopsys translate_off
	initial
		dffe59 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe59 <= 1'b0;
		else if  (clken == 1'b1)   dffe59 <= wire_mac_out50_dataout[6];
	// synopsys translate_off
	initial
		dffe60 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe60 <= 1'b0;
		else if  (clken == 1'b1)   dffe60 <= wire_mac_out50_dataout[7];
	// synopsys translate_off
	initial
		dffe61 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe61 <= 1'b0;
		else if  (clken == 1'b1)   dffe61 <= wire_mac_out50_dataout[8];
	// synopsys translate_off
	initial
		dffe62 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe62 <= 1'b0;
		else if  (clken == 1'b1)   dffe62 <= wire_mac_out50_dataout[9];
	// synopsys translate_off
	initial
		dffe63 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe63 <= 1'b0;
		else if  (clken == 1'b1)   dffe63 <= wire_mac_out50_dataout[10];
	// synopsys translate_off
	initial
		dffe64 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe64 <= 1'b0;
		else if  (clken == 1'b1)   dffe64 <= wire_mac_out50_dataout[11];
	// synopsys translate_off
	initial
		dffe65 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe65 <= 1'b0;
		else if  (clken == 1'b1)   dffe65 <= wire_mac_out50_dataout[12];
	// synopsys translate_off
	initial
		dffe66 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe66 <= 1'b0;
		else if  (clken == 1'b1)   dffe66 <= wire_mac_out50_dataout[13];
	// synopsys translate_off
	initial
		dffe67 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe67 <= 1'b0;
		else if  (clken == 1'b1)   dffe67 <= wire_mac_out50_dataout[14];
	// synopsys translate_off
	initial
		dffe68 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe68 <= 1'b0;
		else if  (clken == 1'b1)   dffe68 <= wire_mac_out50_dataout[15];
	// synopsys translate_off
	initial
		dffe69 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe69 <= 1'b0;
		else if  (clken == 1'b1)   dffe69 <= wire_mac_out50_dataout[16];
	// synopsys translate_off
	initial
		dffe70 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe70 <= 1'b0;
		else if  (clken == 1'b1)   dffe70 <= wire_mac_out50_dataout[17];
	// synopsys translate_off
	initial
		dffe71 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe71 <= 1'b0;
		else if  (clken == 1'b1)   dffe71 <= wire_sft91a_out[0];
	// synopsys translate_off
	initial
		dffe72 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe72 <= 1'b0;
		else if  (clken == 1'b1)   dffe72 <= wire_sft91a_out[1];
	// synopsys translate_off
	initial
		dffe73 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe73 <= 1'b0;
		else if  (clken == 1'b1)   dffe73 <= wire_sft91a_out[2];
	// synopsys translate_off
	initial
		dffe74 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe74 <= 1'b0;
		else if  (clken == 1'b1)   dffe74 <= wire_sft91a_out[3];
	// synopsys translate_off
	initial
		dffe75 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe75 <= 1'b0;
		else if  (clken == 1'b1)   dffe75 <= wire_sft91a_out[4];
	// synopsys translate_off
	initial
		dffe76 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe76 <= 1'b0;
		else if  (clken == 1'b1)   dffe76 <= wire_sft91a_out[5];
	// synopsys translate_off
	initial
		dffe77 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe77 <= 1'b0;
		else if  (clken == 1'b1)   dffe77 <= wire_sft91a_out[6];
	// synopsys translate_off
	initial
		dffe78 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe78 <= 1'b0;
		else if  (clken == 1'b1)   dffe78 <= wire_sft91a_out[7];
	// synopsys translate_off
	initial
		dffe79 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe79 <= 1'b0;
		else if  (clken == 1'b1)   dffe79 <= wire_sft91a_out[8];
	// synopsys translate_off
	initial
		dffe80 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe80 <= 1'b0;
		else if  (clken == 1'b1)   dffe80 <= wire_sft91a_out[9];
	// synopsys translate_off
	initial
		dffe81 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe81 <= 1'b0;
		else if  (clken == 1'b1)   dffe81 <= wire_sft91a_out[10];
	// synopsys translate_off
	initial
		dffe82 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe82 <= 1'b0;
		else if  (clken == 1'b1)   dffe82 <= wire_sft91a_out[11];
	// synopsys translate_off
	initial
		dffe83 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe83 <= 1'b0;
		else if  (clken == 1'b1)   dffe83 <= wire_sft91a_out[12];
	// synopsys translate_off
	initial
		dffe84 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe84 <= 1'b0;
		else if  (clken == 1'b1)   dffe84 <= wire_sft91a_out[13];
	// synopsys translate_off
	initial
		dffe85 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe85 <= 1'b0;
		else if  (clken == 1'b1)   dffe85 <= wire_sft91a_out[14];
	// synopsys translate_off
	initial
		dffe86 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe86 <= 1'b0;
		else if  (clken == 1'b1)   dffe86 <= wire_sft91a_out[15];
	// synopsys translate_off
	initial
		dffe87 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe87 <= 1'b0;
		else if  (clken == 1'b1)   dffe87 <= wire_sft91a_out[16];
	soft   sft89a_0
	( 
	.in(wire_sft89a_in[0:0]),
	.out(wire_sft89a_out[0:0]));
	soft   sft89a_1
	( 
	.in(wire_sft89a_in[1:1]),
	.out(wire_sft89a_out[1:1]));
	soft   sft89a_2
	( 
	.in(wire_sft89a_in[2:2]),
	.out(wire_sft89a_out[2:2]));
	soft   sft89a_3
	( 
	.in(wire_sft89a_in[3:3]),
	.out(wire_sft89a_out[3:3]));
	soft   sft89a_4
	( 
	.in(wire_sft89a_in[4:4]),
	.out(wire_sft89a_out[4:4]));
	soft   sft89a_5
	( 
	.in(wire_sft89a_in[5:5]),
	.out(wire_sft89a_out[5:5]));
	soft   sft89a_6
	( 
	.in(wire_sft89a_in[6:6]),
	.out(wire_sft89a_out[6:6]));
	soft   sft89a_7
	( 
	.in(wire_sft89a_in[7:7]),
	.out(wire_sft89a_out[7:7]));
	soft   sft89a_8
	( 
	.in(wire_sft89a_in[8:8]),
	.out(wire_sft89a_out[8:8]));
	soft   sft89a_9
	( 
	.in(wire_sft89a_in[9:9]),
	.out(wire_sft89a_out[9:9]));
	soft   sft89a_10
	( 
	.in(wire_sft89a_in[10:10]),
	.out(wire_sft89a_out[10:10]));
	soft   sft89a_11
	( 
	.in(wire_sft89a_in[11:11]),
	.out(wire_sft89a_out[11:11]));
	soft   sft89a_12
	( 
	.in(wire_sft89a_in[12:12]),
	.out(wire_sft89a_out[12:12]));
	soft   sft89a_13
	( 
	.in(wire_sft89a_in[13:13]),
	.out(wire_sft89a_out[13:13]));
	soft   sft89a_14
	( 
	.in(wire_sft89a_in[14:14]),
	.out(wire_sft89a_out[14:14]));
	soft   sft89a_15
	( 
	.in(wire_sft89a_in[15:15]),
	.out(wire_sft89a_out[15:15]));
	soft   sft89a_16
	( 
	.in(wire_sft89a_in[16:16]),
	.out(wire_sft89a_out[16:16]));
	assign
		wire_sft89a_in = {w784w, {wire_mac_out52_dataout[15], {wire_mac_out52_dataout[14], {wire_mac_out52_dataout[13], {wire_mac_out52_dataout[12], {wire_mac_out52_dataout[11], {wire_mac_out52_dataout[10], {wire_mac_out50_dataout[27], {wire_mac_out50_dataout[26], {wire_mac_out50_dataout[25], {wire_mac_out50_dataout[24], {wire_mac_out50_dataout[23], {wire_mac_out50_dataout[22], {wire_mac_out50_dataout[21], {wire_mac_out50_dataout[20], {wire_mac_out50_dataout[19:18]}}}}}}}}}}}}}}}};
	soft   sft90a_0
	( 
	.in(wire_sft90a_in[0:0]),
	.out(wire_sft90a_out[0:0]));
	soft   sft90a_1
	( 
	.in(wire_sft90a_in[1:1]),
	.out(wire_sft90a_out[1:1]));
	soft   sft90a_2
	( 
	.in(wire_sft90a_in[2:2]),
	.out(wire_sft90a_out[2:2]));
	soft   sft90a_3
	( 
	.in(wire_sft90a_in[3:3]),
	.out(wire_sft90a_out[3:3]));
	soft   sft90a_4
	( 
	.in(wire_sft90a_in[4:4]),
	.out(wire_sft90a_out[4:4]));
	soft   sft90a_5
	( 
	.in(wire_sft90a_in[5:5]),
	.out(wire_sft90a_out[5:5]));
	soft   sft90a_6
	( 
	.in(wire_sft90a_in[6:6]),
	.out(wire_sft90a_out[6:6]));
	soft   sft90a_7
	( 
	.in(wire_sft90a_in[7:7]),
	.out(wire_sft90a_out[7:7]));
	soft   sft90a_8
	( 
	.in(wire_sft90a_in[8:8]),
	.out(wire_sft90a_out[8:8]));
	soft   sft90a_9
	( 
	.in(wire_sft90a_in[9:9]),
	.out(wire_sft90a_out[9:9]));
	soft   sft90a_10
	( 
	.in(wire_sft90a_in[10:10]),
	.out(wire_sft90a_out[10:10]));
	soft   sft90a_11
	( 
	.in(wire_sft90a_in[11:11]),
	.out(wire_sft90a_out[11:11]));
	soft   sft90a_12
	( 
	.in(wire_sft90a_in[12:12]),
	.out(wire_sft90a_out[12:12]));
	soft   sft90a_13
	( 
	.in(wire_sft90a_in[13:13]),
	.out(wire_sft90a_out[13:13]));
	soft   sft90a_14
	( 
	.in(wire_sft90a_in[14:14]),
	.out(wire_sft90a_out[14:14]));
	soft   sft90a_15
	( 
	.in(wire_sft90a_in[15:15]),
	.out(wire_sft90a_out[15:15]));
	soft   sft90a_16
	( 
	.in(wire_sft90a_in[16:16]),
	.out(wire_sft90a_out[16:16]));
	assign
		wire_sft90a_in = {w784w, {w784w, {w784w, {w784w, {w784w, {w784w, {w784w, {wire_mac_out52_dataout[9], {wire_mac_out52_dataout[8], {wire_mac_out52_dataout[7], {wire_mac_out52_dataout[6], {wire_mac_out52_dataout[5], {wire_mac_out52_dataout[4], {wire_mac_out52_dataout[3], {wire_mac_out52_dataout[2], {wire_mac_out52_dataout[1:0]}}}}}}}}}}}}}}}};
	soft   sft91a_0
	( 
	.in(wire_sft91a_in[0:0]),
	.out(wire_sft91a_out[0:0]));
	soft   sft91a_1
	( 
	.in(wire_sft91a_in[1:1]),
	.out(wire_sft91a_out[1:1]));
	soft   sft91a_2
	( 
	.in(wire_sft91a_in[2:2]),
	.out(wire_sft91a_out[2:2]));
	soft   sft91a_3
	( 
	.in(wire_sft91a_in[3:3]),
	.out(wire_sft91a_out[3:3]));
	soft   sft91a_4
	( 
	.in(wire_sft91a_in[4:4]),
	.out(wire_sft91a_out[4:4]));
	soft   sft91a_5
	( 
	.in(wire_sft91a_in[5:5]),
	.out(wire_sft91a_out[5:5]));
	soft   sft91a_6
	( 
	.in(wire_sft91a_in[6:6]),
	.out(wire_sft91a_out[6:6]));
	soft   sft91a_7
	( 
	.in(wire_sft91a_in[7:7]),
	.out(wire_sft91a_out[7:7]));
	soft   sft91a_8
	( 
	.in(wire_sft91a_in[8:8]),
	.out(wire_sft91a_out[8:8]));
	soft   sft91a_9
	( 
	.in(wire_sft91a_in[9:9]),
	.out(wire_sft91a_out[9:9]));
	soft   sft91a_10
	( 
	.in(wire_sft91a_in[10:10]),
	.out(wire_sft91a_out[10:10]));
	soft   sft91a_11
	( 
	.in(wire_sft91a_in[11:11]),
	.out(wire_sft91a_out[11:11]));
	soft   sft91a_12
	( 
	.in(wire_sft91a_in[12:12]),
	.out(wire_sft91a_out[12:12]));
	soft   sft91a_13
	( 
	.in(wire_sft91a_in[13:13]),
	.out(wire_sft91a_out[13:13]));
	soft   sft91a_14
	( 
	.in(wire_sft91a_in[14:14]),
	.out(wire_sft91a_out[14:14]));
	soft   sft91a_15
	( 
	.in(wire_sft91a_in[15:15]),
	.out(wire_sft91a_out[15:15]));
	soft   sft91a_16
	( 
	.in(wire_sft91a_in[16:16]),
	.out(wire_sft91a_out[16:16]));
	assign
		wire_sft91a_in = wire_add88_result;
	assign
		result = w854w[33:0],
		w784w = 1'b0,
		w854w = {dffe87, dffe86, dffe85, dffe84, dffe83, dffe82, dffe81, dffe80, dffe79, dffe78, dffe77, dffe76, dffe75, dffe74, dffe73, dffe72, dffe71, dffe70, dffe69, dffe68, dffe67, dffe66, dffe65, dffe64, dffe63, dffe62, dffe61, dffe60, dffe59, dffe58, dffe57, dffe56, dffe55, dffe54, dffe53};
endmodule //fp_div_mult1


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=17 LPM_WIDTHB=17 LPM_WIDTHP=34 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = dsp_9bit 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fp_div_mult12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [16:0]  dataa;
	input   [16:0]  datab;
	output   [33:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [33:0]   wire_mac_mult92_dataout;
	wire  [33:0]   wire_mac_out93_dataout;

	cycloneiii_mac_mult   mac_mult92
	( 
	.dataa({dataa}),
	.datab({datab}),
	.dataout(wire_mac_mult92_dataout),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult92.dataa_clock = "none",
		mac_mult92.dataa_width = 17,
		mac_mult92.datab_clock = "none",
		mac_mult92.datab_width = 17,
		mac_mult92.signa_clock = "none",
		mac_mult92.signb_clock = "none",
		mac_mult92.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_out   mac_out93
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult92_dataout),
	.dataout(wire_mac_out93_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out93.dataa_width = 34,
		mac_out93.output_clock = "0",
		mac_out93.lpm_type = "cycloneiii_mac_out";
	assign
		result = wire_mac_out93_dataout[33:0];
endmodule //fp_div_mult12


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=34 LPM_WIDTHB=17 LPM_WIDTHP=51 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_cycloneii 2012:05:31:20:08:02:SJ cbx_lpm_add_sub 2012:05:31:20:08:02:SJ cbx_lpm_mult 2012:05:31:20:08:02:SJ cbx_mgl 2012:05:31:20:10:16:SJ cbx_padd 2012:05:31:20:08:02:SJ cbx_stratix 2012:05:31:20:08:02:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone III" WIDTH=34 dataa datab result
//VERSION_BEGIN 12.0 cbx_mgl 2012:05:31:20:10:16:SJ cbx_stratixii 2012:05:31:20:08:02:SJ cbx_util_mgl 2012:05:31:20:08:02:SJ  VERSION_END

//synthesis_resources = dsp_9bit 4 lut 34 reg 52 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fp_div_mult123
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [33:0]  dataa;
	input   [16:0]  datab;
	output   [50:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[33:0]	wire_add150_result;
	wire  [34:0]   wire_mac_mult94_dataout;
	wire  [32:0]   wire_mac_mult96_dataout;
	wire  [34:0]   wire_mac_out95_dataout;
	wire  [32:0]   wire_mac_out97_dataout;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe100;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe101;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe102;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe103;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe104;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe105;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe106;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe107;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe108;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe109;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe110;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe111;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe112;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe113;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe114;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe115;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe116;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe117;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe118;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe119;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe120;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe121;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe122;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe123;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe124;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe125;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe126;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe127;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe128;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe129;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe130;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe131;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe132;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe133;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe134;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe135;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe136;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe137;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe138;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe139;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe140;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe141;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe142;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe143;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe144;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe145;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe146;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe147;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe148;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe149;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe98;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe99;
	wire  [33:0]   wire_sft151a_in;
	wire  [33:0]   wire_sft151a_out;
	wire  [33:0]   wire_sft152a_in;
	wire  [33:0]   wire_sft152a_out;
	wire  [33:0]   wire_sft153a_in;
	wire  [33:0]   wire_sft153a_out;
	wire  w1034w;
	wire  [51:0]  w1155w;

	assign
		wire_add150_result = wire_sft151a_out + wire_sft152a_out;
	cycloneiii_mac_mult   mac_mult94
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa({dataa[17:0]}),
	.datab({datab[16:0]}),
	.dataout(wire_mac_mult94_dataout),
	.ena(clken),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult94.dataa_clock = "0",
		mac_mult94.dataa_width = 18,
		mac_mult94.datab_clock = "0",
		mac_mult94.datab_width = 17,
		mac_mult94.signa_clock = "none",
		mac_mult94.signb_clock = "none",
		mac_mult94.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_mult   mac_mult96
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa({dataa[33:18]}),
	.datab({datab[16:0]}),
	.dataout(wire_mac_mult96_dataout),
	.ena(clken),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult96.dataa_clock = "0",
		mac_mult96.dataa_width = 16,
		mac_mult96.datab_clock = "0",
		mac_mult96.datab_width = 17,
		mac_mult96.signa_clock = "none",
		mac_mult96.signb_clock = "none",
		mac_mult96.lpm_type = "cycloneiii_mac_mult";
	cycloneiii_mac_out   mac_out95
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult94_dataout),
	.dataout(wire_mac_out95_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out95.dataa_width = 35,
		mac_out95.output_clock = "0",
		mac_out95.lpm_type = "cycloneiii_mac_out";
	cycloneiii_mac_out   mac_out97
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult96_dataout),
	.dataout(wire_mac_out97_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out97.dataa_width = 33,
		mac_out97.output_clock = "0",
		mac_out97.lpm_type = "cycloneiii_mac_out";
	// synopsys translate_off
	initial
		dffe100 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe100 <= 1'b0;
		else if  (clken == 1'b1)   dffe100 <= wire_mac_out95_dataout[2];
	// synopsys translate_off
	initial
		dffe101 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe101 <= 1'b0;
		else if  (clken == 1'b1)   dffe101 <= wire_mac_out95_dataout[3];
	// synopsys translate_off
	initial
		dffe102 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe102 <= 1'b0;
		else if  (clken == 1'b1)   dffe102 <= wire_mac_out95_dataout[4];
	// synopsys translate_off
	initial
		dffe103 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe103 <= 1'b0;
		else if  (clken == 1'b1)   dffe103 <= wire_mac_out95_dataout[5];
	// synopsys translate_off
	initial
		dffe104 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe104 <= 1'b0;
		else if  (clken == 1'b1)   dffe104 <= wire_mac_out95_dataout[6];
	// synopsys translate_off
	initial
		dffe105 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe105 <= 1'b0;
		else if  (clken == 1'b1)   dffe105 <= wire_mac_out95_dataout[7];
	// synopsys translate_off
	initial
		dffe106 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe106 <= 1'b0;
		else if  (clken == 1'b1)   dffe106 <= wire_mac_out95_dataout[8];
	// synopsys translate_off
	initial
		dffe107 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe107 <= 1'b0;
		else if  (clken == 1'b1)   dffe107 <= wire_mac_out95_dataout[9];
	// synopsys translate_off
	initial
		dffe108 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe108 <= 1'b0;
		else if  (clken == 1'b1)   dffe108 <= wire_mac_out95_dataout[10];
	// synopsys translate_off
	initial
		dffe109 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe109 <= 1'b0;
		else if  (clken == 1'b1)   dffe109 <= wire_mac_out95_dataout[11];
	// synopsys translate_off
	initial
		dffe110 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe110 <= 1'b0;
		else if  (clken == 1'b1)   dffe110 <= wire_mac_out95_dataout[12];
	// synopsys translate_off
	initial
		dffe111 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe111 <= 1'b0;
		else if  (clken == 1'b1)   dffe111 <= wire_mac_out95_dataout[13];
	// synopsys translate_off
	initial
		dffe112 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe112 <= 1'b0;
		else if  (clken == 1'b1)   dffe112 <= wire_mac_out95_dataout[14];
	// synopsys translate_off
	initial
		dffe113 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe113 <= 1'b0;
		else if  (clken == 1'b1)   dffe113 <= wire_mac_out95_dataout[15];
	// synopsys translate_off
	initial
		dffe114 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe114 <= 1'b0;
		else if  (clken == 1'b1)   dffe114 <= wire_mac_out95_dataout[16];
	// synopsys translate_off
	initial
		dffe115 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe115 <= 1'b0;
		else if  (clken == 1'b1)   dffe115 <= wire_mac_out95_dataout[17];
	// synopsys translate_off
	initial
		dffe116 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe116 <= 1'b0;
		else if  (clken == 1'b1)   dffe116 <= wire_sft153a_out[0];
	// synopsys translate_off
	initial
		dffe117 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe117 <= 1'b0;
		else if  (clken == 1'b1)   dffe117 <= wire_sft153a_out[1];
	// synopsys translate_off
	initial
		dffe118 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe118 <= 1'b0;
		else if  (clken == 1'b1)   dffe118 <= wire_sft153a_out[2];
	// synopsys translate_off
	initial
		dffe119 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe119 <= 1'b0;
		else if  (clken == 1'b1)   dffe119 <= wire_sft153a_out[3];
	// synopsys translate_off
	initial
		dffe120 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe120 <= 1'b0;
		else if  (clken == 1'b1)   dffe120 <= wire_sft153a_out[4];
	// synopsys translate_off
	initial
		dffe121 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe121 <= 1'b0;
		else if  (clken == 1'b1)   dffe121 <= wire_sft153a_out[5];
	// synopsys translate_off
	initial
		dffe122 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe122 <= 1'b0;
		else if  (clken == 1'b1)   dffe122 <= wire_sft153a_out[6];
	// synopsys translate_off
	initial
		dffe123 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe123 <= 1'b0;
		else if  (clken == 1'b1)   dffe123 <= wire_sft153a_out[7];
	// synopsys translate_off
	initial
		dffe124 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe124 <= 1'b0;
		else if  (clken == 1'b1)   dffe124 <= wire_sft153a_out[8];
	// synopsys translate_off
	initial
		dffe125 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe125 <= 1'b0;
		else if  (clken == 1'b1)   dffe125 <= wire_sft153a_out[9];
	// synopsys translate_off
	initial
		dffe126 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe126 <= 1'b0;
		else if  (clken == 1'b1)   dffe126 <= wire_sft153a_out[10];
	// synopsys translate_off
	initial
		dffe127 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe127 <= 1'b0;
		else if  (clken == 1'b1)   dffe127 <= wire_sft153a_out[11];
	// synopsys translate_off
	initial
		dffe128 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe128 <= 1'b0;
		else if  (clken == 1'b1)   dffe128 <= wire_sft153a_out[12];
	// synopsys translate_off
	initial
		dffe129 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe129 <= 1'b0;
		else if  (clken == 1'b1)   dffe129 <= wire_sft153a_out[13];
	// synopsys translate_off
	initial
		dffe130 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe130 <= 1'b0;
		else if  (clken == 1'b1)   dffe130 <= wire_sft153a_out[14];
	// synopsys translate_off
	initial
		dffe131 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe131 <= 1'b0;
		else if  (clken == 1'b1)   dffe131 <= wire_sft153a_out[15];
	// synopsys translate_off
	initial
		dffe132 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe132 <= 1'b0;
		else if  (clken == 1'b1)   dffe132 <= wire_sft153a_out[16];
	// synopsys translate_off
	initial
		dffe133 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe133 <= 1'b0;
		else if  (clken == 1'b1)   dffe133 <= wire_sft153a_out[17];
	// synopsys translate_off
	initial
		dffe134 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe134 <= 1'b0;
		else if  (clken == 1'b1)   dffe134 <= wire_sft153a_out[18];
	// synopsys translate_off
	initial
		dffe135 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe135 <= 1'b0;
		else if  (clken == 1'b1)   dffe135 <= wire_sft153a_out[19];
	// synopsys translate_off
	initial
		dffe136 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe136 <= 1'b0;
		else if  (clken == 1'b1)   dffe136 <= wire_sft153a_out[20];
	// synopsys translate_off
	initial
		dffe137 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe137 <= 1'b0;
		else if  (clken == 1'b1)   dffe137 <= wire_sft153a_out[21];
	// synopsys translate_off
	initial
		dffe138 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe138 <= 1'b0;
		else if  (clken == 1'b1)   dffe138 <= wire_sft153a_out[22];
	// synopsys translate_off
	initial
		dffe139 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe139 <= 1'b0;
		else if  (clken == 1'b1)   dffe139 <= wire_sft153a_out[23];
	// synopsys translate_off
	initial
		dffe140 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe140 <= 1'b0;
		else if  (clken == 1'b1)   dffe140 <= wire_sft153a_out[24];
	// synopsys translate_off
	initial
		dffe141 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe141 <= 1'b0;
		else if  (clken == 1'b1)   dffe141 <= wire_sft153a_out[25];
	// synopsys translate_off
	initial
		dffe142 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe142 <= 1'b0;
		else if  (clken == 1'b1)   dffe142 <= wire_sft153a_out[26];
	// synopsys translate_off
	initial
		dffe143 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe143 <= 1'b0;
		else if  (clken == 1'b1)   dffe143 <= wire_sft153a_out[27];
	// synopsys translate_off
	initial
		dffe144 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe144 <= 1'b0;
		else if  (clken == 1'b1)   dffe144 <= wire_sft153a_out[28];
	// synopsys translate_off
	initial
		dffe145 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe145 <= 1'b0;
		else if  (clken == 1'b1)   dffe145 <= wire_sft153a_out[29];
	// synopsys translate_off
	initial
		dffe146 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe146 <= 1'b0;
		else if  (clken == 1'b1)   dffe146 <= wire_sft153a_out[30];
	// synopsys translate_off
	initial
		dffe147 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe147 <= 1'b0;
		else if  (clken == 1'b1)   dffe147 <= wire_sft153a_out[31];
	// synopsys translate_off
	initial
		dffe148 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe148 <= 1'b0;
		else if  (clken == 1'b1)   dffe148 <= wire_sft153a_out[32];
	// synopsys translate_off
	initial
		dffe149 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe149 <= 1'b0;
		else if  (clken == 1'b1)   dffe149 <= wire_sft153a_out[33];
	// synopsys translate_off
	initial
		dffe98 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe98 <= 1'b0;
		else if  (clken == 1'b1)   dffe98 <= wire_mac_out95_dataout[0];
	// synopsys translate_off
	initial
		dffe99 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe99 <= 1'b0;
		else if  (clken == 1'b1)   dffe99 <= wire_mac_out95_dataout[1];
	soft   sft151a_0
	( 
	.in(wire_sft151a_in[0:0]),
	.out(wire_sft151a_out[0:0]));
	soft   sft151a_1
	( 
	.in(wire_sft151a_in[1:1]),
	.out(wire_sft151a_out[1:1]));
	soft   sft151a_2
	( 
	.in(wire_sft151a_in[2:2]),
	.out(wire_sft151a_out[2:2]));
	soft   sft151a_3
	( 
	.in(wire_sft151a_in[3:3]),
	.out(wire_sft151a_out[3:3]));
	soft   sft151a_4
	( 
	.in(wire_sft151a_in[4:4]),
	.out(wire_sft151a_out[4:4]));
	soft   sft151a_5
	( 
	.in(wire_sft151a_in[5:5]),
	.out(wire_sft151a_out[5:5]));
	soft   sft151a_6
	( 
	.in(wire_sft151a_in[6:6]),
	.out(wire_sft151a_out[6:6]));
	soft   sft151a_7
	( 
	.in(wire_sft151a_in[7:7]),
	.out(wire_sft151a_out[7:7]));
	soft   sft151a_8
	( 
	.in(wire_sft151a_in[8:8]),
	.out(wire_sft151a_out[8:8]));
	soft   sft151a_9
	( 
	.in(wire_sft151a_in[9:9]),
	.out(wire_sft151a_out[9:9]));
	soft   sft151a_10
	( 
	.in(wire_sft151a_in[10:10]),
	.out(wire_sft151a_out[10:10]));
	soft   sft151a_11
	( 
	.in(wire_sft151a_in[11:11]),
	.out(wire_sft151a_out[11:11]));
	soft   sft151a_12
	( 
	.in(wire_sft151a_in[12:12]),
	.out(wire_sft151a_out[12:12]));
	soft   sft151a_13
	( 
	.in(wire_sft151a_in[13:13]),
	.out(wire_sft151a_out[13:13]));
	soft   sft151a_14
	( 
	.in(wire_sft151a_in[14:14]),
	.out(wire_sft151a_out[14:14]));
	soft   sft151a_15
	( 
	.in(wire_sft151a_in[15:15]),
	.out(wire_sft151a_out[15:15]));
	soft   sft151a_16
	( 
	.in(wire_sft151a_in[16:16]),
	.out(wire_sft151a_out[16:16]));
	soft   sft151a_17
	( 
	.in(wire_sft151a_in[17:17]),
	.out(wire_sft151a_out[17:17]));
	soft   sft151a_18
	( 
	.in(wire_sft151a_in[18:18]),
	.out(wire_sft151a_out[18:18]));
	soft   sft151a_19
	( 
	.in(wire_sft151a_in[19:19]),
	.out(wire_sft151a_out[19:19]));
	soft   sft151a_20
	( 
	.in(wire_sft151a_in[20:20]),
	.out(wire_sft151a_out[20:20]));
	soft   sft151a_21
	( 
	.in(wire_sft151a_in[21:21]),
	.out(wire_sft151a_out[21:21]));
	soft   sft151a_22
	( 
	.in(wire_sft151a_in[22:22]),
	.out(wire_sft151a_out[22:22]));
	soft   sft151a_23
	( 
	.in(wire_sft151a_in[23:23]),
	.out(wire_sft151a_out[23:23]));
	soft   sft151a_24
	( 
	.in(wire_sft151a_in[24:24]),
	.out(wire_sft151a_out[24:24]));
	soft   sft151a_25
	( 
	.in(wire_sft151a_in[25:25]),
	.out(wire_sft151a_out[25:25]));
	soft   sft151a_26
	( 
	.in(wire_sft151a_in[26:26]),
	.out(wire_sft151a_out[26:26]));
	soft   sft151a_27
	( 
	.in(wire_sft151a_in[27:27]),
	.out(wire_sft151a_out[27:27]));
	soft   sft151a_28
	( 
	.in(wire_sft151a_in[28:28]),
	.out(wire_sft151a_out[28:28]));
	soft   sft151a_29
	( 
	.in(wire_sft151a_in[29:29]),
	.out(wire_sft151a_out[29:29]));
	soft   sft151a_30
	( 
	.in(wire_sft151a_in[30:30]),
	.out(wire_sft151a_out[30:30]));
	soft   sft151a_31
	( 
	.in(wire_sft151a_in[31:31]),
	.out(wire_sft151a_out[31:31]));
	soft   sft151a_32
	( 
	.in(wire_sft151a_in[32:32]),
	.out(wire_sft151a_out[32:32]));
	soft   sft151a_33
	( 
	.in(wire_sft151a_in[33:33]),
	.out(wire_sft151a_out[33:33]));
	assign
		wire_sft151a_in = {w1034w, {wire_mac_out97_dataout[32], {wire_mac_out97_dataout[31], {wire_mac_out97_dataout[30], {wire_mac_out97_dataout[29], {wire_mac_out97_dataout[28], {wire_mac_out97_dataout[27], {wire_mac_out97_dataout[26], {wire_mac_out97_dataout[25], {wire_mac_out97_dataout[24], {wire_mac_out97_dataout[23], {wire_mac_out97_dataout[22], {wire_mac_out97_dataout[21], {wire_mac_out97_dataout[20], {wire_mac_out97_dataout[19], {wire_mac_out97_dataout[18], {wire_mac_out97_dataout[17], {wire_mac_out95_dataout[34], {wire_mac_out95_dataout[33], {wire_mac_out95_dataout[32], {wire_mac_out95_dataout[31], {wire_mac_out95_dataout[30], {wire_mac_out95_dataout[29], {wire_mac_out95_dataout[28], {wire_mac_out95_dataout[27], {wire_mac_out95_dataout[26], {wire_mac_out95_dataout[25], {wire_mac_out95_dataout[24], {wire_mac_out95_dataout[23], {wire_mac_out95_dataout[22], {wire_mac_out95_dataout[21], {wire_mac_out95_dataout[20], {wire_mac_out95_dataout[19:18]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft152a_0
	( 
	.in(wire_sft152a_in[0:0]),
	.out(wire_sft152a_out[0:0]));
	soft   sft152a_1
	( 
	.in(wire_sft152a_in[1:1]),
	.out(wire_sft152a_out[1:1]));
	soft   sft152a_2
	( 
	.in(wire_sft152a_in[2:2]),
	.out(wire_sft152a_out[2:2]));
	soft   sft152a_3
	( 
	.in(wire_sft152a_in[3:3]),
	.out(wire_sft152a_out[3:3]));
	soft   sft152a_4
	( 
	.in(wire_sft152a_in[4:4]),
	.out(wire_sft152a_out[4:4]));
	soft   sft152a_5
	( 
	.in(wire_sft152a_in[5:5]),
	.out(wire_sft152a_out[5:5]));
	soft   sft152a_6
	( 
	.in(wire_sft152a_in[6:6]),
	.out(wire_sft152a_out[6:6]));
	soft   sft152a_7
	( 
	.in(wire_sft152a_in[7:7]),
	.out(wire_sft152a_out[7:7]));
	soft   sft152a_8
	( 
	.in(wire_sft152a_in[8:8]),
	.out(wire_sft152a_out[8:8]));
	soft   sft152a_9
	( 
	.in(wire_sft152a_in[9:9]),
	.out(wire_sft152a_out[9:9]));
	soft   sft152a_10
	( 
	.in(wire_sft152a_in[10:10]),
	.out(wire_sft152a_out[10:10]));
	soft   sft152a_11
	( 
	.in(wire_sft152a_in[11:11]),
	.out(wire_sft152a_out[11:11]));
	soft   sft152a_12
	( 
	.in(wire_sft152a_in[12:12]),
	.out(wire_sft152a_out[12:12]));
	soft   sft152a_13
	( 
	.in(wire_sft152a_in[13:13]),
	.out(wire_sft152a_out[13:13]));
	soft   sft152a_14
	( 
	.in(wire_sft152a_in[14:14]),
	.out(wire_sft152a_out[14:14]));
	soft   sft152a_15
	( 
	.in(wire_sft152a_in[15:15]),
	.out(wire_sft152a_out[15:15]));
	soft   sft152a_16
	( 
	.in(wire_sft152a_in[16:16]),
	.out(wire_sft152a_out[16:16]));
	soft   sft152a_17
	( 
	.in(wire_sft152a_in[17:17]),
	.out(wire_sft152a_out[17:17]));
	soft   sft152a_18
	( 
	.in(wire_sft152a_in[18:18]),
	.out(wire_sft152a_out[18:18]));
	soft   sft152a_19
	( 
	.in(wire_sft152a_in[19:19]),
	.out(wire_sft152a_out[19:19]));
	soft   sft152a_20
	( 
	.in(wire_sft152a_in[20:20]),
	.out(wire_sft152a_out[20:20]));
	soft   sft152a_21
	( 
	.in(wire_sft152a_in[21:21]),
	.out(wire_sft152a_out[21:21]));
	soft   sft152a_22
	( 
	.in(wire_sft152a_in[22:22]),
	.out(wire_sft152a_out[22:22]));
	soft   sft152a_23
	( 
	.in(wire_sft152a_in[23:23]),
	.out(wire_sft152a_out[23:23]));
	soft   sft152a_24
	( 
	.in(wire_sft152a_in[24:24]),
	.out(wire_sft152a_out[24:24]));
	soft   sft152a_25
	( 
	.in(wire_sft152a_in[25:25]),
	.out(wire_sft152a_out[25:25]));
	soft   sft152a_26
	( 
	.in(wire_sft152a_in[26:26]),
	.out(wire_sft152a_out[26:26]));
	soft   sft152a_27
	( 
	.in(wire_sft152a_in[27:27]),
	.out(wire_sft152a_out[27:27]));
	soft   sft152a_28
	( 
	.in(wire_sft152a_in[28:28]),
	.out(wire_sft152a_out[28:28]));
	soft   sft152a_29
	( 
	.in(wire_sft152a_in[29:29]),
	.out(wire_sft152a_out[29:29]));
	soft   sft152a_30
	( 
	.in(wire_sft152a_in[30:30]),
	.out(wire_sft152a_out[30:30]));
	soft   sft152a_31
	( 
	.in(wire_sft152a_in[31:31]),
	.out(wire_sft152a_out[31:31]));
	soft   sft152a_32
	( 
	.in(wire_sft152a_in[32:32]),
	.out(wire_sft152a_out[32:32]));
	soft   sft152a_33
	( 
	.in(wire_sft152a_in[33:33]),
	.out(wire_sft152a_out[33:33]));
	assign
		wire_sft152a_in = {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {w1034w, {wire_mac_out97_dataout[16], {wire_mac_out97_dataout[15], {wire_mac_out97_dataout[14], {wire_mac_out97_dataout[13], {wire_mac_out97_dataout[12], {wire_mac_out97_dataout[11], {wire_mac_out97_dataout[10], {wire_mac_out97_dataout[9], {wire_mac_out97_dataout[8], {wire_mac_out97_dataout[7], {wire_mac_out97_dataout[6], {wire_mac_out97_dataout[5], {wire_mac_out97_dataout[4], {wire_mac_out97_dataout[3], {wire_mac_out97_dataout[2], {wire_mac_out97_dataout[1:0]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft153a_0
	( 
	.in(wire_sft153a_in[0:0]),
	.out(wire_sft153a_out[0:0]));
	soft   sft153a_1
	( 
	.in(wire_sft153a_in[1:1]),
	.out(wire_sft153a_out[1:1]));
	soft   sft153a_2
	( 
	.in(wire_sft153a_in[2:2]),
	.out(wire_sft153a_out[2:2]));
	soft   sft153a_3
	( 
	.in(wire_sft153a_in[3:3]),
	.out(wire_sft153a_out[3:3]));
	soft   sft153a_4
	( 
	.in(wire_sft153a_in[4:4]),
	.out(wire_sft153a_out[4:4]));
	soft   sft153a_5
	( 
	.in(wire_sft153a_in[5:5]),
	.out(wire_sft153a_out[5:5]));
	soft   sft153a_6
	( 
	.in(wire_sft153a_in[6:6]),
	.out(wire_sft153a_out[6:6]));
	soft   sft153a_7
	( 
	.in(wire_sft153a_in[7:7]),
	.out(wire_sft153a_out[7:7]));
	soft   sft153a_8
	( 
	.in(wire_sft153a_in[8:8]),
	.out(wire_sft153a_out[8:8]));
	soft   sft153a_9
	( 
	.in(wire_sft153a_in[9:9]),
	.out(wire_sft153a_out[9:9]));
	soft   sft153a_10
	( 
	.in(wire_sft153a_in[10:10]),
	.out(wire_sft153a_out[10:10]));
	soft   sft153a_11
	( 
	.in(wire_sft153a_in[11:11]),
	.out(wire_sft153a_out[11:11]));
	soft   sft153a_12
	( 
	.in(wire_sft153a_in[12:12]),
	.out(wire_sft153a_out[12:12]));
	soft   sft153a_13
	( 
	.in(wire_sft153a_in[13:13]),
	.out(wire_sft153a_out[13:13]));
	soft   sft153a_14
	( 
	.in(wire_sft153a_in[14:14]),
	.out(wire_sft153a_out[14:14]));
	soft   sft153a_15
	( 
	.in(wire_sft153a_in[15:15]),
	.out(wire_sft153a_out[15:15]));
	soft   sft153a_16
	( 
	.in(wire_sft153a_in[16:16]),
	.out(wire_sft153a_out[16:16]));
	soft   sft153a_17
	( 
	.in(wire_sft153a_in[17:17]),
	.out(wire_sft153a_out[17:17]));
	soft   sft153a_18
	( 
	.in(wire_sft153a_in[18:18]),
	.out(wire_sft153a_out[18:18]));
	soft   sft153a_19
	( 
	.in(wire_sft153a_in[19:19]),
	.out(wire_sft153a_out[19:19]));
	soft   sft153a_20
	( 
	.in(wire_sft153a_in[20:20]),
	.out(wire_sft153a_out[20:20]));
	soft   sft153a_21
	( 
	.in(wire_sft153a_in[21:21]),
	.out(wire_sft153a_out[21:21]));
	soft   sft153a_22
	( 
	.in(wire_sft153a_in[22:22]),
	.out(wire_sft153a_out[22:22]));
	soft   sft153a_23
	( 
	.in(wire_sft153a_in[23:23]),
	.out(wire_sft153a_out[23:23]));
	soft   sft153a_24
	( 
	.in(wire_sft153a_in[24:24]),
	.out(wire_sft153a_out[24:24]));
	soft   sft153a_25
	( 
	.in(wire_sft153a_in[25:25]),
	.out(wire_sft153a_out[25:25]));
	soft   sft153a_26
	( 
	.in(wire_sft153a_in[26:26]),
	.out(wire_sft153a_out[26:26]));
	soft   sft153a_27
	( 
	.in(wire_sft153a_in[27:27]),
	.out(wire_sft153a_out[27:27]));
	soft   sft153a_28
	( 
	.in(wire_sft153a_in[28:28]),
	.out(wire_sft153a_out[28:28]));
	soft   sft153a_29
	( 
	.in(wire_sft153a_in[29:29]),
	.out(wire_sft153a_out[29:29]));
	soft   sft153a_30
	( 
	.in(wire_sft153a_in[30:30]),
	.out(wire_sft153a_out[30:30]));
	soft   sft153a_31
	( 
	.in(wire_sft153a_in[31:31]),
	.out(wire_sft153a_out[31:31]));
	soft   sft153a_32
	( 
	.in(wire_sft153a_in[32:32]),
	.out(wire_sft153a_out[32:32]));
	soft   sft153a_33
	( 
	.in(wire_sft153a_in[33:33]),
	.out(wire_sft153a_out[33:33]));
	assign
		wire_sft153a_in = wire_add150_result;
	assign
		result = w1155w[50:0],
		w1034w = 1'b0,
		w1155w = {dffe149, dffe148, dffe147, dffe146, dffe145, dffe144, dffe143, dffe142, dffe141, dffe140, dffe139, dffe138, dffe137, dffe136, dffe135, dffe134, dffe133, dffe132, dffe131, dffe130, dffe129, dffe128, dffe127, dffe126, dffe125, dffe124, dffe123, dffe122, dffe121, dffe120, dffe119, dffe118, dffe117, dffe116, dffe115, dffe114, dffe113, dffe112, dffe111, dffe110, dffe109, dffe108, dffe107, dffe106, dffe105, dffe104, dffe103, dffe102, dffe101, dffe100, dffe99, dffe98};
endmodule //fp_div_mult123

//synthesis_resources = dsp_9bit 16 lut 194 M9K 1 mux21 74 reg 999 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fp_div_altfp_div_pst
	( 
	aclr,
	clk_en,
	clock,
	dataa,
	datab,
	division_by_zero,
	nan,
	overflow,
	result,
	underflow,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   division_by_zero;
	output   nan;
	output   overflow;
	output   [31:0]  result;
	output   underflow;
	output   zero;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [8:0]   wire_altsyncram3_q_a;
	reg	a_is_infinity_dffe_0;
	reg	a_is_infinity_dffe_1;
	reg	a_is_infinity_dffe_10;
	reg	a_is_infinity_dffe_11;
	reg	a_is_infinity_dffe_12;
	reg	a_is_infinity_dffe_2;
	reg	a_is_infinity_dffe_3;
	reg	a_is_infinity_dffe_4;
	reg	a_is_infinity_dffe_5;
	reg	a_is_infinity_dffe_6;
	reg	a_is_infinity_dffe_7;
	reg	a_is_infinity_dffe_8;
	reg	a_is_infinity_dffe_9;
	reg	a_zero_b_not_dffe_0;
	reg	a_zero_b_not_dffe_1;
	reg	a_zero_b_not_dffe_10;
	reg	a_zero_b_not_dffe_11;
	reg	a_zero_b_not_dffe_12;
	reg	a_zero_b_not_dffe_2;
	reg	a_zero_b_not_dffe_3;
	reg	a_zero_b_not_dffe_4;
	reg	a_zero_b_not_dffe_5;
	reg	a_zero_b_not_dffe_6;
	reg	a_zero_b_not_dffe_7;
	reg	a_zero_b_not_dffe_8;
	reg	a_zero_b_not_dffe_9;
	reg	[33:0]	b1_dffe_0;
	reg	[33:0]	b1_dffe_1;
	reg	b_is_infinity_dffe_0;
	reg	b_is_infinity_dffe_1;
	reg	b_is_infinity_dffe_10;
	reg	b_is_infinity_dffe_11;
	reg	b_is_infinity_dffe_12;
	reg	b_is_infinity_dffe_2;
	reg	b_is_infinity_dffe_3;
	reg	b_is_infinity_dffe_4;
	reg	b_is_infinity_dffe_5;
	reg	b_is_infinity_dffe_6;
	reg	b_is_infinity_dffe_7;
	reg	b_is_infinity_dffe_8;
	reg	b_is_infinity_dffe_9;
	reg	both_exp_zeros_dffe;
	reg	divbyzero_pipe_dffe_0;
	reg	divbyzero_pipe_dffe_1;
	reg	divbyzero_pipe_dffe_10;
	reg	divbyzero_pipe_dffe_11;
	reg	divbyzero_pipe_dffe_12;
	reg	divbyzero_pipe_dffe_13;
	reg	divbyzero_pipe_dffe_2;
	reg	divbyzero_pipe_dffe_3;
	reg	divbyzero_pipe_dffe_4;
	reg	divbyzero_pipe_dffe_5;
	reg	divbyzero_pipe_dffe_6;
	reg	divbyzero_pipe_dffe_7;
	reg	divbyzero_pipe_dffe_8;
	reg	divbyzero_pipe_dffe_9;
	reg	[16:0]	e1_dffe_0;
	reg	[16:0]	e1_dffe_1;
	reg	[16:0]	e1_dffe_perf_0;
	reg	[16:0]	e1_dffe_perf_1;
	reg	[16:0]	e1_dffe_perf_2;
	reg	[16:0]	e1_dffe_perf_3;
	reg	[7:0]	exp_result_dffe_0;
	reg	[7:0]	exp_result_dffe_1;
	reg	[7:0]	exp_result_dffe_10;
	reg	[7:0]	exp_result_dffe_11;
	reg	[7:0]	exp_result_dffe_2;
	reg	[7:0]	exp_result_dffe_3;
	reg	[7:0]	exp_result_dffe_4;
	reg	[7:0]	exp_result_dffe_5;
	reg	[7:0]	exp_result_dffe_6;
	reg	[7:0]	exp_result_dffe_7;
	reg	[7:0]	exp_result_dffe_8;
	reg	[7:0]	exp_result_dffe_9;
	reg	frac_a_smaller_dffe1;
	reg	[22:0]	man_a_dffe1_dffe1;
	reg	[22:0]	man_b_dffe1_dffe1;
	reg	[22:0]	man_result_dffe;
	reg	nan_pipe_dffe_0;
	reg	nan_pipe_dffe_1;
	reg	nan_pipe_dffe_10;
	reg	nan_pipe_dffe_11;
	reg	nan_pipe_dffe_12;
	reg	nan_pipe_dffe_13;
	reg	nan_pipe_dffe_2;
	reg	nan_pipe_dffe_3;
	reg	nan_pipe_dffe_4;
	reg	nan_pipe_dffe_5;
	reg	nan_pipe_dffe_6;
	reg	nan_pipe_dffe_7;
	reg	nan_pipe_dffe_8;
	reg	nan_pipe_dffe_9;
	reg	overflow_dffe_0;
	reg	overflow_dffe_1;
	reg	overflow_dffe_10;
	reg	overflow_dffe_11;
	reg	overflow_dffe_2;
	reg	overflow_dffe_3;
	reg	overflow_dffe_4;
	reg	overflow_dffe_5;
	reg	overflow_dffe_6;
	reg	overflow_dffe_7;
	reg	overflow_dffe_8;
	reg	overflow_dffe_9;
	reg	[33:0]	q_partial_perf_dffe_0;
	reg	[33:0]	q_partial_perf_dffe_1;
	reg	[16:0]	quotient_j_dffe;
	reg	[16:0]	quotient_k_dffe_0;
	reg	[16:0]	quotient_k_dffe_perf_0;
	reg	[16:0]	quotient_k_dffe_perf_1;
	reg	[16:0]	quotient_k_dffe_perf_2;
	reg	[16:0]	quotient_k_dffe_perf_3;
	reg	[49:0]	remainder_j_dffe_0;
	reg	[49:0]	remainder_j_dffe_1;
	reg	[49:0]	remainder_j_dffe_perf_0;
	reg	[49:0]	remainder_j_dffe_perf_1;
	reg	[49:0]	remainder_j_dffe_perf_2;
	reg	sign_pipe_dffe_0;
	reg	sign_pipe_dffe_1;
	reg	sign_pipe_dffe_10;
	reg	sign_pipe_dffe_11;
	reg	sign_pipe_dffe_12;
	reg	sign_pipe_dffe_13;
	reg	sign_pipe_dffe_2;
	reg	sign_pipe_dffe_3;
	reg	sign_pipe_dffe_4;
	reg	sign_pipe_dffe_5;
	reg	sign_pipe_dffe_6;
	reg	sign_pipe_dffe_7;
	reg	sign_pipe_dffe_8;
	reg	sign_pipe_dffe_9;
	reg	underflow_dffe_0;
	reg	underflow_dffe_1;
	reg	underflow_dffe_10;
	reg	underflow_dffe_11;
	reg	underflow_dffe_2;
	reg	underflow_dffe_3;
	reg	underflow_dffe_4;
	reg	underflow_dffe_5;
	reg	underflow_dffe_6;
	reg	underflow_dffe_7;
	reg	underflow_dffe_8;
	reg	underflow_dffe_9;
	reg	zero_dffe;
	reg	zero_pipe_dffe_0;
	reg	zero_pipe_dffe_1;
	reg	zero_pipe_dffe_10;
	reg	zero_pipe_dffe_11;
	reg	zero_pipe_dffe_12;
	reg	zero_pipe_dffe_2;
	reg	zero_pipe_dffe_3;
	reg	zero_pipe_dffe_4;
	reg	zero_pipe_dffe_5;
	reg	zero_pipe_dffe_6;
	reg	zero_pipe_dffe_7;
	reg	zero_pipe_dffe_8;
	reg	zero_pipe_dffe_9;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[8:0]	wire_bias_addition_pipeline_dffe_Q;
	wire	[8:0]	wire_bias_addition_pipeline_dffe_D;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[0:0]	wire_bias_addition_overflow_dffe_Q;
	wire	[0:0]	wire_bias_addition_overflow_dffe_D;
	wire	[8:0]	wire_bias_addition_result_int;
	wire	wire_bias_addition_aclr;
	wire	wire_bias_addition_clken;
	wire	wire_bias_addition_clock;
	wire	[8:0]	wire_bias_addition_dataa;
	wire	[8:0]	wire_bias_addition_datab;
	wire	wire_bias_addition_overflow;
	wire	[8:0]	wire_bias_addition_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[8:0]	wire_exp_sub_pipeline_dffe_Q;
	wire	[8:0]	wire_exp_sub_pipeline_dffe_D;
	wire	[8:0]	wire_exp_sub_result_int;
	wire	wire_exp_sub_aclr;
	wire	wire_exp_sub_clken;
	wire	wire_exp_sub_clock;
	wire	[8:0]	wire_exp_sub_dataa;
	wire	[8:0]	wire_exp_sub_datab;
	wire	[8:0]	wire_exp_sub_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[30:0]	wire_quotient_process_pipeline_dffe_Q;
	wire	[30:0]	wire_quotient_process_pipeline_dffe_D;
	wire	[31:0]	wire_quotient_process_result_int;
	wire	wire_quotient_process_aclr;
	wire	wire_quotient_process_cin;
	wire	wire_quotient_process_clken;
	wire	wire_quotient_process_clock;
	wire	[30:0]	wire_quotient_process_dataa;
	wire	[30:0]	wire_quotient_process_datab;
	wire	[30:0]	wire_quotient_process_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[49:0]	wire_remainder_sub_0_pipeline_dffe_Q;
	wire	[49:0]	wire_remainder_sub_0_pipeline_dffe_D;
	wire	[49:0]	wire_remainder_sub_0_result_int;
	wire	wire_remainder_sub_0_aclr;
	wire	wire_remainder_sub_0_clken;
	wire	wire_remainder_sub_0_clock;
	wire	[49:0]	wire_remainder_sub_0_dataa;
	wire	[49:0]	wire_remainder_sub_0_datab;
	wire	[49:0]	wire_remainder_sub_0_result;
	reg	wire_cmpr2_alb_int;
	wire	wire_cmpr2_alb;
	wire	[22:0]	wire_cmpr2_dataa;
	wire	[22:0]	wire_cmpr2_datab;
	wire  [34:0]   wire_a1_prod_result;
	wire  [33:0]   wire_b1_prod_result;
	wire  [33:0]   wire_q_partial_0_result;
	wire  [33:0]   wire_q_partial_1_result;
	wire  [50:0]   wire_remainder_mult_0_result;
	wire	[7:0]wire_exp_result_muxa_dataout;
	wire	[24:0]wire_man_a_adjusteda_dataout;
	wire	[22:0]wire_man_result_muxa_dataout;
	wire	[8:0]wire_select_bias_2a_dataout;
	wire	[8:0]wire_select_biasa_dataout;
	wire  a_is_infinity_w;
	wire  a_is_nan_w;
	wire  a_zero_b_not;
	wire  [33:0]  b1_dffe_w;
	wire  b_is_infinity_w;
	wire  b_is_nan_w;
	wire  bias_addition_overf_w;
	wire  [7:0]  bias_addition_w;
	wire  both_exp_zeros;
	wire  [8:0]  e0_dffe1_wo;
	wire  [8:0]  e0_w;
	wire  [50:0]  e1_w;
	wire  [7:0]  exp_a_all_one_w;
	wire  [7:0]  exp_a_not_zero_w;
	wire  [7:0]  exp_add_output_all_one;
	wire  [7:0]  exp_add_output_not_zero;
	wire  [7:0]  exp_b_all_one_w;
	wire  [7:0]  exp_b_not_zero_w;
	wire  [7:0]  exp_result_mux_out;
	wire  exp_result_mux_sel_w;
	wire  [7:0]  exp_result_w;
	wire  exp_sign_w;
	wire  [8:0]  exp_sub_a_w;
	wire  [8:0]  exp_sub_b_w;
	wire  [8:0]  exp_sub_w;
	wire  frac_a_smaller_dffe1_wi;
	wire  frac_a_smaller_dffe1_wo;
	wire  frac_a_smaller_w;
	wire  guard_bit;
	wire  [24:0]  man_a_adjusted_w;
	wire  [22:0]  man_a_dffe1_wi;
	wire  [22:0]  man_a_dffe1_wo;
	wire  [22:0]  man_a_not_zero_w;
	wire  [23:0]  man_b_adjusted_w;
	wire  [22:0]  man_b_dffe1_wi;
	wire  [22:0]  man_b_dffe1_wo;
	wire  [22:0]  man_b_not_zero_w;
	wire  [22:0]  man_result_dffe_wi;
	wire  [22:0]  man_result_dffe_wo;
	wire  man_result_mux_select;
	wire  [22:0]  man_result_w;
	wire  [22:0]  man_zeros_w;
	wire  [7:0]  overflow_ones_w;
	wire  overflow_w;
	wire  [61:0]  quotient_accumulate_w;
	wire  quotient_process_cin_w;
	wire  [99:0]  remainder_j_w;
	wire  round_bit;
	wire  [8:0]  select_bias_out_2_w;
	wire  [8:0]  select_bias_out_w;
	wire  [4:0]  sticky_bits;
	wire  underflow_w;
	wire  [7:0]  underflow_zeros_w;
	wire  [8:0]  value_add_one_w;
	wire  [8:0]  value_normal_w;
	wire  [8:0]  value_zero_w;
	wire  zero_dffe_wi;
	wire  zero_dffe_wo;

	fp_div_altsyncram   altsyncram3
	( 
	.address_a(datab[22:14]),
	.clock0(clock),
	.clocken0(clk_en),
	.q_a(wire_altsyncram3_q_a));
	// synopsys translate_off
	initial
		a_is_infinity_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_0 <= a_is_infinity_w;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_1 <= a_is_infinity_dffe_0;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_10 <= a_is_infinity_dffe_9;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_11 <= a_is_infinity_dffe_10;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_12 <= a_is_infinity_dffe_11;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_2 <= a_is_infinity_dffe_1;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_3 <= a_is_infinity_dffe_2;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_4 <= a_is_infinity_dffe_3;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_5 <= a_is_infinity_dffe_4;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_6 <= a_is_infinity_dffe_5;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_7 <= a_is_infinity_dffe_6;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_8 <= a_is_infinity_dffe_7;
	// synopsys translate_off
	initial
		a_is_infinity_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_is_infinity_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   a_is_infinity_dffe_9 <= a_is_infinity_dffe_8;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_0 <= a_zero_b_not;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_1 <= a_zero_b_not_dffe_0;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_10 <= a_zero_b_not_dffe_9;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_11 <= a_zero_b_not_dffe_10;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_12 <= a_zero_b_not_dffe_11;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_2 <= a_zero_b_not_dffe_1;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_3 <= a_zero_b_not_dffe_2;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_4 <= a_zero_b_not_dffe_3;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_5 <= a_zero_b_not_dffe_4;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_6 <= a_zero_b_not_dffe_5;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_7 <= a_zero_b_not_dffe_6;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_8 <= a_zero_b_not_dffe_7;
	// synopsys translate_off
	initial
		a_zero_b_not_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) a_zero_b_not_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   a_zero_b_not_dffe_9 <= a_zero_b_not_dffe_8;
	// synopsys translate_off
	initial
		b1_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b1_dffe_0 <= 34'b0;
		else if  (clk_en == 1'b1)   b1_dffe_0 <= wire_b1_prod_result;
	// synopsys translate_off
	initial
		b1_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b1_dffe_1 <= 34'b0;
		else if  (clk_en == 1'b1)   b1_dffe_1 <= b1_dffe_0;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_0 <= b_is_infinity_w;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_1 <= b_is_infinity_dffe_0;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_10 <= b_is_infinity_dffe_9;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_11 <= b_is_infinity_dffe_10;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_12 <= b_is_infinity_dffe_11;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_2 <= b_is_infinity_dffe_1;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_3 <= b_is_infinity_dffe_2;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_4 <= b_is_infinity_dffe_3;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_5 <= b_is_infinity_dffe_4;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_6 <= b_is_infinity_dffe_5;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_7 <= b_is_infinity_dffe_6;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_8 <= b_is_infinity_dffe_7;
	// synopsys translate_off
	initial
		b_is_infinity_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_is_infinity_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   b_is_infinity_dffe_9 <= b_is_infinity_dffe_8;
	// synopsys translate_off
	initial
		both_exp_zeros_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) both_exp_zeros_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   both_exp_zeros_dffe <= ((~ exp_b_not_zero_w[7]) & (~ exp_a_not_zero_w[7]));
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_0 <= ((((~ exp_b_not_zero_w[7]) & (~ a_is_nan_w)) & exp_a_not_zero_w[7]) & (~ a_is_infinity_w));
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_1 <= divbyzero_pipe_dffe_0;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_10 <= divbyzero_pipe_dffe_9;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_11 <= divbyzero_pipe_dffe_10;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_12 <= divbyzero_pipe_dffe_11;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_13 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_13 <= divbyzero_pipe_dffe_12;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_2 <= divbyzero_pipe_dffe_1;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_3 <= divbyzero_pipe_dffe_2;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_4 <= divbyzero_pipe_dffe_3;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_5 <= divbyzero_pipe_dffe_4;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_6 <= divbyzero_pipe_dffe_5;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_7 <= divbyzero_pipe_dffe_6;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_8 <= divbyzero_pipe_dffe_7;
	// synopsys translate_off
	initial
		divbyzero_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divbyzero_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   divbyzero_pipe_dffe_9 <= divbyzero_pipe_dffe_8;
	// synopsys translate_off
	initial
		e1_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_0 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_0 <= e1_w[16:0];
	// synopsys translate_off
	initial
		e1_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_1 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_1 <= e1_w[33:17];
	// synopsys translate_off
	initial
		e1_dffe_perf_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_0 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_0 <= e1_dffe_0;
	// synopsys translate_off
	initial
		e1_dffe_perf_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_1 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_1 <= e1_dffe_perf_0;
	// synopsys translate_off
	initial
		e1_dffe_perf_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_2 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_2 <= e1_dffe_perf_1;
	// synopsys translate_off
	initial
		e1_dffe_perf_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) e1_dffe_perf_3 <= 17'b0;
		else if  (clk_en == 1'b1)   e1_dffe_perf_3 <= e1_dffe_perf_2;
	// synopsys translate_off
	initial
		exp_result_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_0 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_0 <= exp_result_mux_out;
	// synopsys translate_off
	initial
		exp_result_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_1 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_1 <= exp_result_dffe_0;
	// synopsys translate_off
	initial
		exp_result_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_10 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_10 <= exp_result_dffe_9;
	// synopsys translate_off
	initial
		exp_result_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_11 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_11 <= exp_result_dffe_10;
	// synopsys translate_off
	initial
		exp_result_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_2 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_2 <= exp_result_dffe_1;
	// synopsys translate_off
	initial
		exp_result_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_3 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_3 <= exp_result_dffe_2;
	// synopsys translate_off
	initial
		exp_result_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_4 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_4 <= exp_result_dffe_3;
	// synopsys translate_off
	initial
		exp_result_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_5 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_5 <= exp_result_dffe_4;
	// synopsys translate_off
	initial
		exp_result_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_6 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_6 <= exp_result_dffe_5;
	// synopsys translate_off
	initial
		exp_result_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_7 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_7 <= exp_result_dffe_6;
	// synopsys translate_off
	initial
		exp_result_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_8 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_8 <= exp_result_dffe_7;
	// synopsys translate_off
	initial
		exp_result_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_dffe_9 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_dffe_9 <= exp_result_dffe_8;
	// synopsys translate_off
	initial
		frac_a_smaller_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) frac_a_smaller_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   frac_a_smaller_dffe1 <= frac_a_smaller_dffe1_wi;
	// synopsys translate_off
	initial
		man_a_dffe1_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_a_dffe1_dffe1 <= 23'b0;
		else if  (clk_en == 1'b1)   man_a_dffe1_dffe1 <= man_a_dffe1_wi;
	// synopsys translate_off
	initial
		man_b_dffe1_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_b_dffe1_dffe1 <= 23'b0;
		else if  (clk_en == 1'b1)   man_b_dffe1_dffe1 <= man_b_dffe1_wi;
	// synopsys translate_off
	initial
		man_result_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_result_dffe <= 23'b0;
		else if  (clk_en == 1'b1)   man_result_dffe <= man_result_dffe_wi;
	// synopsys translate_off
	initial
		nan_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_0 <= (((a_is_nan_w | b_is_nan_w) | (a_is_infinity_w & b_is_infinity_w)) | ((~ exp_a_not_zero_w[7]) & (~ exp_b_not_zero_w[7])));
	// synopsys translate_off
	initial
		nan_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_1 <= nan_pipe_dffe_0;
	// synopsys translate_off
	initial
		nan_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_10 <= nan_pipe_dffe_9;
	// synopsys translate_off
	initial
		nan_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_11 <= nan_pipe_dffe_10;
	// synopsys translate_off
	initial
		nan_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_12 <= nan_pipe_dffe_11;
	// synopsys translate_off
	initial
		nan_pipe_dffe_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_13 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_13 <= nan_pipe_dffe_12;
	// synopsys translate_off
	initial
		nan_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_2 <= nan_pipe_dffe_1;
	// synopsys translate_off
	initial
		nan_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_3 <= nan_pipe_dffe_2;
	// synopsys translate_off
	initial
		nan_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_4 <= nan_pipe_dffe_3;
	// synopsys translate_off
	initial
		nan_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_5 <= nan_pipe_dffe_4;
	// synopsys translate_off
	initial
		nan_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_6 <= nan_pipe_dffe_5;
	// synopsys translate_off
	initial
		nan_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_7 <= nan_pipe_dffe_6;
	// synopsys translate_off
	initial
		nan_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_8 <= nan_pipe_dffe_7;
	// synopsys translate_off
	initial
		nan_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   nan_pipe_dffe_9 <= nan_pipe_dffe_8;
	// synopsys translate_off
	initial
		overflow_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_0 <= overflow_w;
	// synopsys translate_off
	initial
		overflow_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_1 <= overflow_dffe_0;
	// synopsys translate_off
	initial
		overflow_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_10 <= overflow_dffe_9;
	// synopsys translate_off
	initial
		overflow_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_11 <= overflow_dffe_10;
	// synopsys translate_off
	initial
		overflow_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_2 <= overflow_dffe_1;
	// synopsys translate_off
	initial
		overflow_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_3 <= overflow_dffe_2;
	// synopsys translate_off
	initial
		overflow_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_4 <= overflow_dffe_3;
	// synopsys translate_off
	initial
		overflow_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_5 <= overflow_dffe_4;
	// synopsys translate_off
	initial
		overflow_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_6 <= overflow_dffe_5;
	// synopsys translate_off
	initial
		overflow_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_7 <= overflow_dffe_6;
	// synopsys translate_off
	initial
		overflow_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_8 <= overflow_dffe_7;
	// synopsys translate_off
	initial
		overflow_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) overflow_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   overflow_dffe_9 <= overflow_dffe_8;
	// synopsys translate_off
	initial
		q_partial_perf_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) q_partial_perf_dffe_0 <= 34'b0;
		else if  (clk_en == 1'b1)   q_partial_perf_dffe_0 <= wire_q_partial_0_result;
	// synopsys translate_off
	initial
		q_partial_perf_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) q_partial_perf_dffe_1 <= 34'b0;
		else if  (clk_en == 1'b1)   q_partial_perf_dffe_1 <= wire_q_partial_1_result;
	// synopsys translate_off
	initial
		quotient_j_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_j_dffe <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_j_dffe <= q_partial_perf_dffe_0[32:16];
	// synopsys translate_off
	initial
		quotient_k_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_0 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_0 <= quotient_k_dffe_perf_3;
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_0 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_0 <= quotient_accumulate_w[30:14];
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_1 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_1 <= quotient_k_dffe_perf_0;
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_2 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_2 <= quotient_k_dffe_perf_1;
	// synopsys translate_off
	initial
		quotient_k_dffe_perf_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) quotient_k_dffe_perf_3 <= 17'b0;
		else if  (clk_en == 1'b1)   quotient_k_dffe_perf_3 <= quotient_k_dffe_perf_2;
	// synopsys translate_off
	initial
		remainder_j_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_0 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_0 <= remainder_j_w[49:0];
	// synopsys translate_off
	initial
		remainder_j_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_1 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_1 <= remainder_j_dffe_perf_2;
	// synopsys translate_off
	initial
		remainder_j_dffe_perf_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_perf_0 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_perf_0 <= remainder_j_dffe_0;
	// synopsys translate_off
	initial
		remainder_j_dffe_perf_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_perf_1 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_perf_1 <= remainder_j_dffe_perf_0;
	// synopsys translate_off
	initial
		remainder_j_dffe_perf_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) remainder_j_dffe_perf_2 <= 50'b0;
		else if  (clk_en == 1'b1)   remainder_j_dffe_perf_2 <= remainder_j_dffe_perf_1;
	// synopsys translate_off
	initial
		sign_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_0 <= (dataa[31] ^ datab[31]);
	// synopsys translate_off
	initial
		sign_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_1 <= sign_pipe_dffe_0;
	// synopsys translate_off
	initial
		sign_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_10 <= sign_pipe_dffe_9;
	// synopsys translate_off
	initial
		sign_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_11 <= sign_pipe_dffe_10;
	// synopsys translate_off
	initial
		sign_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_12 <= sign_pipe_dffe_11;
	// synopsys translate_off
	initial
		sign_pipe_dffe_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_13 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_13 <= sign_pipe_dffe_12;
	// synopsys translate_off
	initial
		sign_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_2 <= sign_pipe_dffe_1;
	// synopsys translate_off
	initial
		sign_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_3 <= sign_pipe_dffe_2;
	// synopsys translate_off
	initial
		sign_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_4 <= sign_pipe_dffe_3;
	// synopsys translate_off
	initial
		sign_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_5 <= sign_pipe_dffe_4;
	// synopsys translate_off
	initial
		sign_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_6 <= sign_pipe_dffe_5;
	// synopsys translate_off
	initial
		sign_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_7 <= sign_pipe_dffe_6;
	// synopsys translate_off
	initial
		sign_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_8 <= sign_pipe_dffe_7;
	// synopsys translate_off
	initial
		sign_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe_dffe_9 <= sign_pipe_dffe_8;
	// synopsys translate_off
	initial
		underflow_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_0 <= underflow_w;
	// synopsys translate_off
	initial
		underflow_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_1 <= underflow_dffe_0;
	// synopsys translate_off
	initial
		underflow_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_10 <= underflow_dffe_9;
	// synopsys translate_off
	initial
		underflow_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_11 <= underflow_dffe_10;
	// synopsys translate_off
	initial
		underflow_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_2 <= underflow_dffe_1;
	// synopsys translate_off
	initial
		underflow_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_3 <= underflow_dffe_2;
	// synopsys translate_off
	initial
		underflow_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_4 <= underflow_dffe_3;
	// synopsys translate_off
	initial
		underflow_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_5 <= underflow_dffe_4;
	// synopsys translate_off
	initial
		underflow_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_6 <= underflow_dffe_5;
	// synopsys translate_off
	initial
		underflow_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_7 <= underflow_dffe_6;
	// synopsys translate_off
	initial
		underflow_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_8 <= underflow_dffe_7;
	// synopsys translate_off
	initial
		underflow_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   underflow_dffe_9 <= underflow_dffe_8;
	// synopsys translate_off
	initial
		zero_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   zero_dffe <= zero_dffe_wi;
	// synopsys translate_off
	initial
		zero_pipe_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_0 <= (~ exp_a_not_zero_w[7]);
	// synopsys translate_off
	initial
		zero_pipe_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_1 <= zero_pipe_dffe_0;
	// synopsys translate_off
	initial
		zero_pipe_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_10 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_10 <= zero_pipe_dffe_9;
	// synopsys translate_off
	initial
		zero_pipe_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_11 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_11 <= zero_pipe_dffe_10;
	// synopsys translate_off
	initial
		zero_pipe_dffe_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_12 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_12 <= zero_pipe_dffe_11;
	// synopsys translate_off
	initial
		zero_pipe_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_2 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_2 <= zero_pipe_dffe_1;
	// synopsys translate_off
	initial
		zero_pipe_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_3 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_3 <= zero_pipe_dffe_2;
	// synopsys translate_off
	initial
		zero_pipe_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_4 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_4 <= zero_pipe_dffe_3;
	// synopsys translate_off
	initial
		zero_pipe_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_5 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_5 <= zero_pipe_dffe_4;
	// synopsys translate_off
	initial
		zero_pipe_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_6 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_6 <= zero_pipe_dffe_5;
	// synopsys translate_off
	initial
		zero_pipe_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_7 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_7 <= zero_pipe_dffe_6;
	// synopsys translate_off
	initial
		zero_pipe_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_8 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_8 <= zero_pipe_dffe_7;
	// synopsys translate_off
	initial
		zero_pipe_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_pipe_dffe_9 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_pipe_dffe_9 <= zero_pipe_dffe_8;
	assign
		wire_bias_addition_result_int = wire_bias_addition_dataa + wire_bias_addition_datab;
	//synopsys translate_off
	initial
		wire_bias_addition_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_bias_addition_clock or posedge wire_bias_addition_aclr)
		if (wire_bias_addition_aclr == 1'b1) wire_bias_addition_pipeline_dffe_Q <= 9'b0;
		else if (wire_bias_addition_clken == 1'b1) wire_bias_addition_pipeline_dffe_Q <= wire_bias_addition_pipeline_dffe_D;
	//synopsys translate_off
	initial
		wire_bias_addition_overflow_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_bias_addition_clock or posedge wire_bias_addition_aclr)
		if (wire_bias_addition_aclr == 1'b1) wire_bias_addition_overflow_dffe_Q <= 1'b0;
		else if (wire_bias_addition_clken == 1'b1) wire_bias_addition_overflow_dffe_Q <= wire_bias_addition_overflow_dffe_D;
	assign
		wire_bias_addition_result = wire_bias_addition_pipeline_dffe_Q[8:0],
		wire_bias_addition_pipeline_dffe_D[8:0] = wire_bias_addition_result_int;
	assign
		wire_bias_addition_overflow = wire_bias_addition_overflow_dffe_Q[0:0],
		wire_bias_addition_overflow_dffe_D[0:0] = ~(wire_bias_addition_dataa[8:8] ^ wire_bias_addition_datab[8:8]) & (wire_bias_addition_dataa[8:8] ^ wire_bias_addition_result_int[8:8]);
	assign
		wire_bias_addition_aclr = aclr,
		wire_bias_addition_clken = clk_en,
		wire_bias_addition_clock = clock,
		wire_bias_addition_dataa = exp_sub_w,
		wire_bias_addition_datab = select_bias_out_2_w;
	assign
		wire_exp_sub_result_int = wire_exp_sub_dataa - wire_exp_sub_datab;
	//synopsys translate_off
	initial
		wire_exp_sub_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_exp_sub_clock or posedge wire_exp_sub_aclr)
		if (wire_exp_sub_aclr == 1'b1) wire_exp_sub_pipeline_dffe_Q <= 9'b0;
		else if (wire_exp_sub_clken == 1'b1) wire_exp_sub_pipeline_dffe_Q <= wire_exp_sub_pipeline_dffe_D;
	assign
		wire_exp_sub_result = wire_exp_sub_pipeline_dffe_Q[8:0],
		wire_exp_sub_pipeline_dffe_D[8:0] = wire_exp_sub_result_int;
	assign
		wire_exp_sub_aclr = aclr,
		wire_exp_sub_clken = clk_en,
		wire_exp_sub_clock = clock,
		wire_exp_sub_dataa = exp_sub_a_w,
		wire_exp_sub_datab = exp_sub_b_w;
	assign
		wire_quotient_process_result_int = {wire_quotient_process_dataa, wire_quotient_process_cin} + {wire_quotient_process_datab, wire_quotient_process_cin};
	//synopsys translate_off
	initial
		wire_quotient_process_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_quotient_process_clock or posedge wire_quotient_process_aclr)
		if (wire_quotient_process_aclr == 1'b1) wire_quotient_process_pipeline_dffe_Q <= 31'b0;
		else if (wire_quotient_process_clken == 1'b1) wire_quotient_process_pipeline_dffe_Q <= wire_quotient_process_pipeline_dffe_D;
	assign
		wire_quotient_process_result = wire_quotient_process_pipeline_dffe_Q[30:0],
		wire_quotient_process_pipeline_dffe_D[30:0] = wire_quotient_process_result_int[31:1];
	assign
		wire_quotient_process_aclr = aclr,
		wire_quotient_process_cin = quotient_process_cin_w,
		wire_quotient_process_clken = clk_en,
		wire_quotient_process_clock = clock,
		wire_quotient_process_dataa = {quotient_accumulate_w[61:45], {14{1'b0}}},
		wire_quotient_process_datab = {{14{1'b0}}, q_partial_perf_dffe_1[32:22], {6{1'b1}}};
	assign
		wire_remainder_sub_0_result_int = wire_remainder_sub_0_dataa - wire_remainder_sub_0_datab;
	//synopsys translate_off
	initial
		wire_remainder_sub_0_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_remainder_sub_0_clock or posedge wire_remainder_sub_0_aclr)
		if (wire_remainder_sub_0_aclr == 1'b1) wire_remainder_sub_0_pipeline_dffe_Q <= 50'b0;
		else if (wire_remainder_sub_0_clken == 1'b1) wire_remainder_sub_0_pipeline_dffe_Q <= wire_remainder_sub_0_pipeline_dffe_D;
	assign
		wire_remainder_sub_0_result = wire_remainder_sub_0_pipeline_dffe_Q[49:0],
		wire_remainder_sub_0_pipeline_dffe_D[49:0] = wire_remainder_sub_0_result_int;
	assign
		wire_remainder_sub_0_aclr = aclr,
		wire_remainder_sub_0_clken = clk_en,
		wire_remainder_sub_0_clock = clock,
		wire_remainder_sub_0_dataa = {remainder_j_dffe_1[49:15], {15{1'b0}}},
		wire_remainder_sub_0_datab = wire_remainder_mult_0_result[49:0];
	always @(wire_cmpr2_dataa or wire_cmpr2_datab)
	begin
		if (wire_cmpr2_dataa < wire_cmpr2_datab) 
			begin
				wire_cmpr2_alb_int = 1'b1;
			end
		else
			begin
				wire_cmpr2_alb_int = 1'b0;
			end
	end
	assign
		wire_cmpr2_alb = wire_cmpr2_alb_int;
	assign
		wire_cmpr2_dataa = dataa[22:0],
		wire_cmpr2_datab = datab[22:0];
	fp_div_mult   a1_prod
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_a_adjusted_w),
	.datab({1'b1, e0_dffe1_wo}),
	.result(wire_a1_prod_result));
	fp_div_mult1   b1_prod
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_b_adjusted_w),
	.datab({1'b1, e0_dffe1_wo}),
	.result(wire_b1_prod_result));
	fp_div_mult12   q_partial_0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(remainder_j_w[49:33]),
	.datab(e1_w[16:0]),
	.result(wire_q_partial_0_result));
	fp_div_mult12   q_partial_1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(remainder_j_w[99:83]),
	.datab(e1_w[50:34]),
	.result(wire_q_partial_1_result));
	fp_div_mult123   remainder_mult_0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(b1_dffe_w[33:0]),
	.datab(q_partial_perf_dffe_0[32:16]),
	.result(wire_remainder_mult_0_result));
	assign		wire_exp_result_muxa_dataout = (exp_result_mux_sel_w === 1'b1) ? underflow_zeros_w : exp_result_w;
	assign		wire_man_a_adjusteda_dataout = (frac_a_smaller_dffe1_wo === 1'b1) ? {1'b1, man_a_dffe1_wo, 1'b0} : {1'b0, 1'b1, man_a_dffe1_wo};
	assign		wire_man_result_muxa_dataout = (man_result_mux_select === 1'b1) ? {nan_pipe_dffe_12, man_zeros_w[21:0]} : wire_quotient_process_result[28:6];
	assign		wire_select_bias_2a_dataout = (both_exp_zeros === 1'b1) ? value_zero_w : select_bias_out_w;
	assign		wire_select_biasa_dataout = (frac_a_smaller_dffe1_wo === 1'b1) ? value_normal_w : value_add_one_w;
	assign
		a_is_infinity_w = (exp_a_all_one_w[7] & (~ man_a_not_zero_w[22])),
		a_is_nan_w = (exp_a_all_one_w[7] & man_a_not_zero_w[22]),
		a_zero_b_not = (exp_b_not_zero_w[7] & (~ exp_a_not_zero_w[7])),
		b1_dffe_w = {b1_dffe_1},
		b_is_infinity_w = (exp_b_all_one_w[7] & (~ man_b_not_zero_w[22])),
		b_is_nan_w = (exp_b_all_one_w[7] & man_b_not_zero_w[22]),
		bias_addition_overf_w = wire_bias_addition_overflow,
		bias_addition_w = wire_bias_addition_result[7:0],
		both_exp_zeros = both_exp_zeros_dffe,
		division_by_zero = divbyzero_pipe_dffe_13,
		e0_dffe1_wo = e0_w,
		e0_w = wire_altsyncram3_q_a,
		e1_w = {e1_dffe_1, e1_dffe_perf_3, (~ wire_b1_prod_result[33:17])},
		exp_a_all_one_w = {(dataa[30] & exp_a_all_one_w[6]), (dataa[29] & exp_a_all_one_w[5]), (dataa[28] & exp_a_all_one_w[4]), (dataa[27] & exp_a_all_one_w[3]), (dataa[26] & exp_a_all_one_w[2]), (dataa[25] & exp_a_all_one_w[1]), (dataa[24] & exp_a_all_one_w[0]), dataa[23]},
		exp_a_not_zero_w = {(dataa[30] | exp_a_not_zero_w[6]), (dataa[29] | exp_a_not_zero_w[5]), (dataa[28] | exp_a_not_zero_w[4]), (dataa[27] | exp_a_not_zero_w[3]), (dataa[26] | exp_a_not_zero_w[2]), (dataa[25] | exp_a_not_zero_w[1]), (dataa[24] | exp_a_not_zero_w[0]), dataa[23]},
		exp_add_output_all_one = {(bias_addition_w[7] & exp_add_output_all_one[6]), (bias_addition_w[6] & exp_add_output_all_one[5]), (bias_addition_w[5] & exp_add_output_all_one[4]), (bias_addition_w[4] & exp_add_output_all_one[3]), (bias_addition_w[3] & exp_add_output_all_one[2]), (bias_addition_w[2] & exp_add_output_all_one[1]), (bias_addition_w[1] & exp_add_output_all_one[0]), bias_addition_w[0]},
		exp_add_output_not_zero = {(bias_addition_w[7] | exp_add_output_not_zero[6]), (bias_addition_w[6] | exp_add_output_not_zero[5]), (bias_addition_w[5] | exp_add_output_not_zero[4]), (bias_addition_w[4] | exp_add_output_not_zero[3]), (bias_addition_w[3] | exp_add_output_not_zero[2]), (bias_addition_w[2] | exp_add_output_not_zero[1]), (bias_addition_w[1] | exp_add_output_not_zero[0]), bias_addition_w[0]},
		exp_b_all_one_w = {(datab[30] & exp_b_all_one_w[6]), (datab[29] & exp_b_all_one_w[5]), (datab[28] & exp_b_all_one_w[4]), (datab[27] & exp_b_all_one_w[3]), (datab[26] & exp_b_all_one_w[2]), (datab[25] & exp_b_all_one_w[1]), (datab[24] & exp_b_all_one_w[0]), datab[23]},
		exp_b_not_zero_w = {(datab[30] | exp_b_not_zero_w[6]), (datab[29] | exp_b_not_zero_w[5]), (datab[28] | exp_b_not_zero_w[4]), (datab[27] | exp_b_not_zero_w[3]), (datab[26] | exp_b_not_zero_w[2]), (datab[25] | exp_b_not_zero_w[1]), (datab[24] | exp_b_not_zero_w[0]), datab[23]},
		exp_result_mux_out = wire_exp_result_muxa_dataout,
		exp_result_mux_sel_w = ((((a_zero_b_not_dffe_1 | b_is_infinity_dffe_1) | ((~ bias_addition_overf_w) & exp_sign_w)) | (((~ exp_add_output_not_zero[7]) & (~ bias_addition_overf_w)) & (~ exp_sign_w))) & (~ nan_pipe_dffe_1)),
		exp_result_w = (({8{((~ bias_addition_overf_w) & (~ exp_sign_w))}} & bias_addition_w) | ({8{(((bias_addition_overf_w | divbyzero_pipe_dffe_1) | nan_pipe_dffe_1) | a_is_infinity_dffe_1)}} & overflow_ones_w)),
		exp_sign_w = wire_bias_addition_result[8],
		exp_sub_a_w = {1'b0, dataa[30:23]},
		exp_sub_b_w = {1'b0, datab[30:23]},
		exp_sub_w = wire_exp_sub_result,
		frac_a_smaller_dffe1_wi = frac_a_smaller_w,
		frac_a_smaller_dffe1_wo = frac_a_smaller_dffe1,
		frac_a_smaller_w = wire_cmpr2_alb,
		guard_bit = q_partial_perf_dffe_1[22],
		man_a_adjusted_w = wire_man_a_adjusteda_dataout,
		man_a_dffe1_wi = dataa[22:0],
		man_a_dffe1_wo = man_a_dffe1_dffe1,
		man_a_not_zero_w = {(dataa[22] | man_a_not_zero_w[21]), (dataa[21] | man_a_not_zero_w[20]), (dataa[20] | man_a_not_zero_w[19]), (dataa[19] | man_a_not_zero_w[18]), (dataa[18] | man_a_not_zero_w[17]), (dataa[17] | man_a_not_zero_w[16]), (dataa[16] | man_a_not_zero_w[15]), (dataa[15] | man_a_not_zero_w[14]), (dataa[14] | man_a_not_zero_w[13]), (dataa[13] | man_a_not_zero_w[12]), (dataa[12] | man_a_not_zero_w[11]), (dataa[11] | man_a_not_zero_w[10]), (dataa[10] | man_a_not_zero_w[9]), (dataa[9] | man_a_not_zero_w[8]), (dataa[8] | man_a_not_zero_w[7]), (dataa[7] | man_a_not_zero_w[6]), (dataa[6] | man_a_not_zero_w[5]), (dataa[5] | man_a_not_zero_w[4]), (dataa[4] | man_a_not_zero_w[3]), (dataa[3] | man_a_not_zero_w[2]), (dataa[2] | man_a_not_zero_w[1]), (dataa[1] | man_a_not_zero_w[0]), dataa[0]},
		man_b_adjusted_w = {1'b1, man_b_dffe1_wo},
		man_b_dffe1_wi = datab[22:0],
		man_b_dffe1_wo = man_b_dffe1_dffe1,
		man_b_not_zero_w = {(datab[22] | man_b_not_zero_w[21]), (datab[21] | man_b_not_zero_w[20]), (datab[20] | man_b_not_zero_w[19]), (datab[19] | man_b_not_zero_w[18]), (datab[18] | man_b_not_zero_w[17]), (datab[17] | man_b_not_zero_w[16]), (datab[16] | man_b_not_zero_w[15]), (datab[15] | man_b_not_zero_w[14]), (datab[14] | man_b_not_zero_w[13]), (datab[13] | man_b_not_zero_w[12]), (datab[12] | man_b_not_zero_w[11]), (datab[11] | man_b_not_zero_w[10]), (datab[10] | man_b_not_zero_w[9]), (datab[9] | man_b_not_zero_w[8]), (datab[8] | man_b_not_zero_w[7]), (datab[7] | man_b_not_zero_w[6]), (datab[6] | man_b_not_zero_w[5]), (datab[5] | man_b_not_zero_w[4]), (datab[4] | man_b_not_zero_w[3]), (datab[3] | man_b_not_zero_w[2]), (datab[2] | man_b_not_zero_w[1]), (datab[1] | man_b_not_zero_w[0]), datab[0]},
		man_result_dffe_wi = man_result_w,
		man_result_dffe_wo = man_result_dffe,
		man_result_mux_select = ((((((overflow_dffe_10 | underflow_dffe_10) | a_zero_b_not_dffe_12) | nan_pipe_dffe_12) | b_is_infinity_dffe_12) | a_is_infinity_dffe_12) | divbyzero_pipe_dffe_12),
		man_result_w = wire_man_result_muxa_dataout,
		man_zeros_w = {23{1'b0}},
		nan = nan_pipe_dffe_13,
		overflow = overflow_dffe_11,
		overflow_ones_w = {8{1'b1}},
		overflow_w = ((bias_addition_overf_w | ((exp_add_output_all_one[7] & (~ bias_addition_overf_w)) & (~ exp_sign_w))) & (((~ nan_pipe_dffe_1) & (~ a_is_infinity_dffe_1)) & (~ divbyzero_pipe_dffe_1))),
		quotient_accumulate_w = {quotient_k_dffe_0, {14{1'b0}}, quotient_j_dffe, {14{1'b0}}},
		quotient_process_cin_w = (round_bit & (guard_bit | sticky_bits[4])),
		remainder_j_w = {wire_remainder_sub_0_result[35:0], {14{1'b0}}, wire_a1_prod_result[34:0], {15{1'b0}}},
		result = {sign_pipe_dffe_13, exp_result_dffe_11, man_result_dffe_wo},
		round_bit = q_partial_perf_dffe_1[21],
		select_bias_out_2_w = wire_select_bias_2a_dataout,
		select_bias_out_w = wire_select_biasa_dataout,
		sticky_bits = {(q_partial_perf_dffe_1[20] | sticky_bits[3]), (q_partial_perf_dffe_1[19] | sticky_bits[2]), (q_partial_perf_dffe_1[18] | sticky_bits[1]), (q_partial_perf_dffe_1[17] | sticky_bits[0]), q_partial_perf_dffe_1[16]},
		underflow = underflow_dffe_11,
		underflow_w = ((((((~ bias_addition_overf_w) & exp_sign_w) | (((~ exp_add_output_not_zero[7]) & (~ bias_addition_overf_w)) & (~ exp_sign_w))) & (~ nan_pipe_dffe_1)) & (~ a_zero_b_not_dffe_1)) & (~ b_is_infinity_dffe_1)),
		underflow_zeros_w = {8{1'b0}},
		value_add_one_w = 9'b001111111,
		value_normal_w = 9'b001111110,
		value_zero_w = {9{1'b0}},
		zero = zero_dffe_wo,
		zero_dffe_wi = (((zero_pipe_dffe_12 | underflow_dffe_10) | (b_is_infinity_dffe_12 & (~ a_is_infinity_dffe_12))) & (~ nan_pipe_dffe_12)),
		zero_dffe_wo = zero_dffe;
endmodule //fp_div_altfp_div_pst

//synthesis_resources = dsp_9bit 16 lut 194 M9K 1 mux21 74 reg 999 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fp_div_altfp_div
	( 
	aclr,
	clk_en,
	clock,
	dataa,
	datab,
	division_by_zero,
	nan,
	overflow,
	result,
	underflow,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   division_by_zero;
	output   nan;
	output   overflow;
	output   [31:0]  result;
	output   underflow;
	output   zero;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_altfp_div_pst1_division_by_zero;
	wire  wire_altfp_div_pst1_nan;
	wire  wire_altfp_div_pst1_overflow;
	wire  [31:0]   wire_altfp_div_pst1_result;
	wire  wire_altfp_div_pst1_underflow;
	wire  wire_altfp_div_pst1_zero;

	fp_div_altfp_div_pst   altfp_div_pst1
	( 
	.aclr(aclr),
	.clk_en(clk_en),
	.clock(clock),
	.dataa(dataa),
	.datab(datab),
	.division_by_zero(wire_altfp_div_pst1_division_by_zero),
	.nan(wire_altfp_div_pst1_nan),
	.overflow(wire_altfp_div_pst1_overflow),
	.result(wire_altfp_div_pst1_result),
	.underflow(wire_altfp_div_pst1_underflow),
	.zero(wire_altfp_div_pst1_zero));
	assign
		division_by_zero = wire_altfp_div_pst1_division_by_zero,
		nan = wire_altfp_div_pst1_nan,
		overflow = wire_altfp_div_pst1_overflow,
		result = wire_altfp_div_pst1_result,
		underflow = wire_altfp_div_pst1_underflow,
		zero = wire_altfp_div_pst1_zero;
endmodule //fp_div_altfp_div
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module fp_div (
	aclr,
	clk_en,
	clock,
	dataa,
	datab,
	division_by_zero,
	nan,
	overflow,
	result,
	underflow,
	zero)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clk_en;
	input	  clock;
	input	[31:0]  dataa;
	input	[31:0]  datab;
	output	  division_by_zero;
	output	  nan;
	output	  overflow;
	output	[31:0]  result;
	output	  underflow;
	output	  zero;

	wire  sub_wire0;
	wire  sub_wire1;
	wire  sub_wire2;
	wire [31:0] sub_wire3;
	wire  sub_wire4;
	wire  sub_wire5;
	wire  overflow = sub_wire0;
	wire  zero = sub_wire1;
	wire  nan = sub_wire2;
	wire [31:0] result = sub_wire3[31:0];
	wire  division_by_zero = sub_wire4;
	wire  underflow = sub_wire5;

	fp_div_altfp_div	fp_div_altfp_div_component (
				.clk_en (clk_en),
				.clock (clock),
				.datab (datab),
				.dataa (dataa),
				.aclr (aclr),
				.overflow (sub_wire0),
				.zero (sub_wire1),
				.nan (sub_wire2),
				.result (sub_wire3),
				.division_by_zero (sub_wire4),
				.underflow (sub_wire5));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone III"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: DENORMAL_SUPPORT STRING "NO"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone III"
// Retrieval info: CONSTANT: OPTIMIZE STRING "SPEED"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "14"
// Retrieval info: CONSTANT: REDUCED_FUNCTIONALITY STRING "NO"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "23"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: USED_PORT: clk_en 0 0 0 0 INPUT NODEFVAL "clk_en"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 32 0 INPUT NODEFVAL "dataa[31..0]"
// Retrieval info: USED_PORT: datab 0 0 32 0 INPUT NODEFVAL "datab[31..0]"
// Retrieval info: USED_PORT: division_by_zero 0 0 0 0 OUTPUT NODEFVAL "division_by_zero"
// Retrieval info: USED_PORT: nan 0 0 0 0 OUTPUT NODEFVAL "nan"
// Retrieval info: USED_PORT: overflow 0 0 0 0 OUTPUT NODEFVAL "overflow"
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: USED_PORT: underflow 0 0 0 0 OUTPUT NODEFVAL "underflow"
// Retrieval info: USED_PORT: zero 0 0 0 0 OUTPUT NODEFVAL "zero"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @clk_en 0 0 0 0 clk_en 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 32 0 dataa 0 0 32 0
// Retrieval info: CONNECT: @datab 0 0 32 0 datab 0 0 32 0
// Retrieval info: CONNECT: division_by_zero 0 0 0 0 @division_by_zero 0 0 0 0
// Retrieval info: CONNECT: nan 0 0 0 0 @nan 0 0 0 0
// Retrieval info: CONNECT: overflow 0 0 0 0 @overflow 0 0 0 0
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: CONNECT: underflow 0 0 0 0 @underflow 0 0 0 0
// Retrieval info: CONNECT: zero 0 0 0 0 @zero 0 0 0 0
// Retrieval info: GEN_FILE: TYPE_NORMAL fp_div.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fp_div.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fp_div.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fp_div.bsf TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fp_div_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fp_div_syn.v TRUE
