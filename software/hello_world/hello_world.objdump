
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000a1e0 memsz 0x0000a1e0 flags r-x
    LOAD off    0x0000b200 vaddr 0x0080a200 paddr 0x0080bc48 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x0000d690 vaddr 0x0080d690 paddr 0x0080d690 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009dcc  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002b0  00809f50  00809f50  0000af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  0080a200  0080bc48  0000b200  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0080d690  0080d690  0000d690  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000cc48  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  0000cc70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001326  00000000  00000000  0000d928  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000200d6  00000000  00000000  0000ec4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000085bc  00000000  00000000  0002ed24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000131aa  00000000  00000000  000372e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016ac  00000000  00000000  0004a48c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000277d  00000000  00000000  0004bb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a7f8  00000000  00000000  0004e2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00058ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000978  00000000  00000000  00058ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005c0d8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005c0db  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005c0de  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005c0df  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005c0e0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005c0e4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005c0e8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005c0ec  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005c0f5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005c0fe  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0005c107  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000a  00000000  00000000  0005c119  2**0
                  CONTENTS, READONLY
 29 .jdi          00005134  00000000  00000000  0005c123  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003102d  00000000  00000000  00061257  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
00809f50 l    d  .rodata	00000000 .rodata
0080a200 l    d  .rwdata	00000000 .rwdata
0080d690 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00800688 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00800ce8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
0080a200 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
00802810 l     F .text	000001f0 print_e
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mprec.c
0080a1c4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
00804e30 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00807038 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080bc20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080aa08 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00807658 l     F .text	00000058 altera_avalon_jtag_uart_timeout
00807730 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00807c00 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00807dc4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808c70 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00809054 l     F .text	00000058 std
00809160 l     F .text	00000008 __fp_lock
00809168 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_write.c
00803b14 g     F .text	00000094 _mprec_log10
00803c00 g     F .text	00000088 __any_on
008099f4 g     F .text	00000070 _isatty_r
0080a19c g     O .rodata	00000028 __mprec_tinytens
00807300 g     F .text	00000050 alt_main
00804cf0 g     F .text	0000008c strcpy
0080d6e0 g     O .bss	00000100 alt_irq
00809a64 g     F .text	00000078 _lseek_r
0080bc48 g       *ABS*	00000000 __flash_rwdata_start
00806b38 g     F .text	00000088 __eqdf2
0080d7e0 g       *ABS*	00000000 __alt_heap_start
00809630 g     F .text	00000068 __sseek
008090bc g     F .text	000000a4 __sinit
00803120 g     F .text	000001a8 fcvtbuf
008091bc g     F .text	00000068 __sfmoreglue
00807354 g     F .text	00000004 __malloc_unlock
00800b20 g     F .text	00000174 __divsf3
008001fc g     F .text	000002d8 determinant
008065fc g     F .text	000000e0 memmove
008091ac g     F .text	00000010 _cleanup
00803c88 g     F .text	000000bc _Balloc
00807358 g     F .text	00000014 alt_putstr
00806c48 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
008074dc g     F .text	00000080 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
008001c0 g     F .text	0000001c getAt
00809980 g     F .text	00000074 _fstat_r
0080d69c g     O .bss	00000004 errno
00801444 g     F .text	00000038 __make_dp
0080d6a4 g     O .bss	00000004 alt_argv
00813c10 g       *ABS*	00000000 _gp
0080086c g     F .text	00000070 __subsf3
0080ba90 g     O .rwdata	00000180 alt_fd_list
00808228 g     F .text	00000094 alt_find_dev
00802700 g     F .text	000000a0 memcpy
008091a0 g     F .text	0000000c _cleanup_r
00806e68 g     F .text	000000f8 __floatsidf
00807f78 g     F .text	00000104 alt_io_redirect
00806d58 g     F .text	00000088 __ltdf2
00803a64 g     F .text	000000b0 __ratio
008078c0 g     F .text	0000016c altera_avalon_jtag_uart_read
00801fac g     F .text	00000014 malloc
00807174 g     F .text	00000008 __udivsi3
00809bf8 g     F .text	00000084 isatty
0080a0ac g     O .rodata	000000c8 __mprec_tens
00801e68 g     F .text	00000040 gcvtf
008083cc g     F .text	00000038 alt_icache_flush
0080d690 g     O .bss	00000004 __malloc_top_pad
008084cc g     F .text	0000049c __sfvwrite_r
00804380 g     F .text	0000003c __i2b
008027a0 g     F .text	00000070 _sbrk_r
00809adc g     F .text	00000078 _read_r
0080bc3c g     O .rwdata	00000004 alt_max_fd
00801c64 g     F .text	00000138 __unpack_d
0080985c g     F .text	00000110 _fclose_r
00809020 g     F .text	00000034 fflush
0080d694 g     O .bss	00000004 __malloc_max_sbrked_mem
00800c94 g     F .text	00000054 __extendsfdf2
00801178 g     F .text	00000074 __adddf3
00803944 g     F .text	00000120 __b2d
00809c7c g     F .text	0000009c lseek
0080bc14 g     O .rwdata	00000004 _global_impure_ptr
008046fc g     F .text	000005f4 _realloc_r
0080d7e0 g       *ABS*	00000000 __bss_end
00807ef0 g     F .text	00000088 alt_iic_isr_register
008073f4 g     F .text	000000e8 alt_tick
0080a174 g     O .rodata	00000028 __mprec_bigtens
008045dc g     F .text	00000120 __s2b
0080147c g     F .text	00000194 __floatunsidf
00803864 g     F .text	00000060 __mcmp
00809188 g     F .text	00000018 __fp_lock_all
00807e54 g     F .text	00000018 alt_ic_irq_enabled
008073c0 g     F .text	00000034 alt_alarm_stop
0080d6b4 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
0080ba68 g     O .rwdata	00000028 alt_dev_null
00801888 g     F .text	000000c8 __unpack_f
008001dc g     F .text	00000020 putAt
00807dc0 g     F .text	00000004 alt_dcache_flush_all
00803730 g     F .text	00000070 __hi0bits
00806f60 g     F .text	000000d8 __fixdfsi
0080bc48 g       *ABS*	00000000 __ram_rwdata_end
0080bc34 g     O .rwdata	00000008 alt_dev_list
00809e34 g     F .text	00000118 write
0080a200 g       *ABS*	00000000 __ram_rodata_end
00809b68 g     F .text	00000090 fstat
00806de0 g     F .text	00000088 __ledf2
008044bc g     F .text	00000120 __pow5mult
0080717c g     F .text	00000008 __umodsi3
0080d7e0 g       *ABS*	00000000 end
00801728 g     F .text	00000160 __pack_f
008076b0 g     F .text	00000080 altera_avalon_jtag_uart_init
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802ce0 g     F .text	000002f8 _dcvt
00807bb0 g     F .text	00000050 alt_avalon_timer_sc_init
008016a8 g     F .text	00000080 __clzsi2
00807a2c g     F .text	00000184 altera_avalon_jtag_uart_write
008090ac g     F .text	00000004 __sfp_lock_acquire
00808968 g     F .text	000000e4 memchr
008033f4 g     F .text	00000314 _free_r
00808c74 g     F .text	000001b0 __call_exitprocs
0080bc1c g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000003c _start
0080d6ac g     O .bss	00000004 _alt_tick_rate
00802a00 g     F .text	000002e0 _gcvt
0080404c g     F .text	0000014c __lshift
0080d6b0 g     O .bss	00000004 _alt_nticks
00809d18 g     F .text	0000011c read
0080755c g     F .text	00000058 alt_sys_init
00804198 g     F .text	000001e8 __multiply
00807610 g     F .text	00000048 altera_avalon_jtag_uart_close
0080a200 g       *ABS*	00000000 __ram_rwdata_start
00809f50 g       *ABS*	00000000 __ram_rodata_start
0080d6b8 g     O .bss	00000028 __malloc_current_mallinfo
00803d44 g     F .text	0000017c __d2b
00807600 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0080836c g     F .text	00000060 alt_get_fd
00807184 g     F .text	000000c8 __fpcmp_parts_d
008097ec g     F .text	00000070 _close_r
00808a4c g     F .text	00000074 memcmp
008075e0 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0080d7e0 g       *ABS*	00000000 __alt_stack_base
008075d4 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00808b34 g     F .text	0000013c __swsetup_r
008011ec g     F .text	00000258 __divdf3
00809224 g     F .text	000000f0 __sfp
00803ba8 g     F .text	00000058 __copybits
0080a600 g     O .rwdata	00000408 __malloc_av_
008090b8 g     F .text	00000004 __sinit_lock_release
00806774 g     F .text	000003c4 __muldf3
00809714 g     F .text	00000060 __sread
00809f84 g     O .rodata	00000010 __thenan_sf
008082bc g     F .text	000000b0 alt_find_file
00807dcc g     F .text	0000007c alt_dev_llist_insert
00807350 g     F .text	00000004 __malloc_lock
0080736c g     F .text	00000054 sbrk
00808e24 g     F .text	000001fc _fflush_r
00804d7c g     F .text	000000b4 _calloc_r
0080d690 g       *ABS*	00000000 __bss_start
008066dc g     F .text	00000098 memset
008004d4 g     F .text	000001b4 main
00801f20 g     F .text	00000024 fcvt
0080d6a8 g     O .bss	00000004 alt_envp
0080d698 g     O .bss	00000004 __malloc_max_total_mem
008075f0 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00802fd8 g     F .text	00000148 ecvtbuf
00809628 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080996c g     F .text	00000014 fclose
00805048 g     F .text	000015b4 _dtoa_r
00801fc0 g     F .text	00000740 _malloc_r
0080bc40 g     O .rwdata	00000004 alt_errno
00801ecc g     F .text	00000054 ecvtf
008093dc g     F .text	000000b8 _fwalk
008070b4 g     F .text	00000060 __divsi3
00809f94 g     O .rodata	00000014 __thenan_df
008032c8 g     F .text	0000012c _malloc_trim_r
00800940 g     F .text	000001e0 __mulsf3
00809f50 g       *ABS*	00000000 __flash_rodata_start
00806bc0 g     F .text	00000088 __nedf2
008075b4 g     F .text	00000020 alt_irq_init
008081fc g     F .text	00000024 alt_release_fd
00809fa8 g     O .rodata	00000100 __clz_tab
00809774 g     F .text	00000078 _write_r
0080bc10 g     O .rwdata	00000004 _impure_ptr
0080d6a0 g     O .bss	00000004 alt_argc
00800020 g       .exceptions	00000000 alt_irq_entry
008038c4 g     F .text	00000080 __ulp
00809170 g     F .text	00000018 __fp_unlock_all
00801ea8 g     F .text	00000024 ecvt
0080bc2c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807eec g     F .text	00000004 alt_ic_isr_register
0080bc48 g       *ABS*	00000000 _edata
0080d7e0 g       *ABS*	00000000 _end
00800184 g       *ABS*	00000000 __ram_exceptions_end
00807838 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
0080843c g     F .text	00000074 _fputs_r
00807eac g     F .text	00000040 alt_ic_irq_disable
00809698 g     F .text	0000007c __swrite
0080bc18 g     O .rwdata	00000004 __malloc_trim_threshold
00801f44 g     F .text	00000054 fcvtf
00808220 g     F .text	00000008 altera_nios2_qsys_irq_init
00808404 g     F .text	00000038 exit
00809314 g     F .text	000000c8 _fwalk_reent
00803ec0 g     F .text	0000018c __mdiff
00807114 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008090b0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801d9c g     F .text	000000cc gcvt
00809b54 g     F .text	00000014 _exit
00807c3c g     F .text	00000094 alt_alarm_start
00801610 g     F .text	00000098 __muldi3
00809494 g     F .text	00000194 __smakebuf_r
00808ac0 g     F .text	00000074 strlen
0080807c g     F .text	00000180 open
00806cd0 g     F .text	00000088 __gedf2
00807e48 g     F .text	0000000c alt_icache_flush_all
008084b0 g     F .text	0000001c fputs
0080bc44 g     O .rwdata	00000004 alt_priority_mask
00807e6c g     F .text	00000040 alt_ic_irq_enable
008010f8 g     F .text	00000080 __subdf3
008037a0 g     F .text	000000c4 __lo0bits
0080bc24 g     O .rwdata	00000008 alt_alarm_list
00807cd0 g     F .text	000000f0 close
008008dc g     F .text	00000064 __addsf3
0080724c g     F .text	000000b4 alt_load
00801950 g     F .text	00000314 __pack_d
00801f98 g     F .text	00000014 free
008090b4 g     F .text	00000004 __sinit_lock_acquire
008043bc g     F .text	00000100 __multadd
00803708 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002074 	movhi	r16,129
  800108:	8435b804 	addi	r16,r16,-10528
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800184:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800188:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80018c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800190:	d68f0414 	ori	gp,gp,15376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800194:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800198:	10b5a414 	ori	r2,r2,54928

    movhi r3, %hi(__bss_end)
  80019c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001a0:	18f5f814 	ori	r3,r3,55264

    beq r2, r3, 1f
  8001a4:	10c00326 	beq	r2,r3,8001b4 <_start+0x30>

0:
    stw zero, (r2)
  8001a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001b0:	10fffd36 	bltu	r2,r3,8001a8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b4:	080724c0 	call	80724c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b8:	08073000 	call	807300 <alt_main>

008001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001bc:	003fff06 	br	8001bc <alt_after_alt_main>

008001c0 <getAt>:

	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
  8001c0:	29cb383a 	mul	r5,r5,r7
  8001c4:	298b883a 	add	r5,r5,r6
  8001c8:	294b883a 	add	r5,r5,r5
  8001cc:	294b883a 	add	r5,r5,r5
  8001d0:	290b883a 	add	r5,r5,r4
	return *(m + i*dimension + j);
}
  8001d4:	28800017 	ldw	r2,0(r5)
  8001d8:	f800283a 	ret

008001dc <putAt>:

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8001dc:	29cb383a 	mul	r5,r5,r7
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
  8001e0:	d8800017 	ldw	r2,0(sp)
	*(m + i*dimension + j) = value;
  8001e4:	298b883a 	add	r5,r5,r6
  8001e8:	294b883a 	add	r5,r5,r5
  8001ec:	294b883a 	add	r5,r5,r5
  8001f0:	290b883a 	add	r5,r5,r4
  8001f4:	28800015 	stw	r2,0(r5)
}
  8001f8:	f800283a 	ret

008001fc <determinant>:
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  8001fc:	2945883a 	add	r2,r5,r5

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800200:	deffea04 	addi	sp,sp,-88
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800204:	1087883a 	add	r3,r2,r2

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800208:	dc400d15 	stw	r17,52(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  80020c:	28e3383a 	mul	r17,r5,r3

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800210:	dcc00f15 	stw	r19,60(sp)
  800214:	2027883a 	mov	r19,r4
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800218:	8809883a 	mov	r4,r17

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  80021c:	dfc01515 	stw	ra,84(sp)
  800220:	d9400815 	stw	r5,32(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800224:	d8c00915 	stw	r3,36(sp)

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800228:	df001415 	stw	fp,80(sp)
  80022c:	ddc01315 	stw	r23,76(sp)
  800230:	dd801215 	stw	r22,72(sp)
  800234:	dd401115 	stw	r21,68(sp)
  800238:	dd001015 	stw	r20,64(sp)
  80023c:	dc800e15 	stw	r18,56(sp)
  800240:	dc000c15 	stw	r16,48(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800244:	d8800b15 	stw	r2,44(sp)
  800248:	0801fac0 	call	801fac <malloc>
	memcpy(m, matrix, sizeof(float)*dimension*dimension );
  80024c:	1009883a 	mov	r4,r2
  800250:	980b883a 	mov	r5,r19
  800254:	880d883a 	mov	r6,r17
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800258:	d8800715 	stw	r2,28(sp)
  80025c:	d8800215 	stw	r2,8(sp)
	memcpy(m, matrix, sizeof(float)*dimension*dimension );
  800260:	08027000 	call	802700 <memcpy>
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  800264:	d9000817 	ldw	r4,32(sp)
  800268:	0100980e 	bge	zero,r4,8004cc <determinant+0x2d0>

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  80026c:	d8800717 	ldw	r2,28(sp)
  800270:	0039883a 	mov	fp,zero
  800274:	d8000315 	stw	zero,12(sp)
  800278:	d8800015 	stw	r2,0(sp)
  80027c:	d8800115 	stw	r2,4(sp)
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  800280:	07003f0e 	bge	zero,fp,800380 <determinant+0x184>
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  800284:	d8800017 	ldw	r2,0(sp)
  800288:	0029883a 	mov	r20,zero
  80028c:	002d883a 	mov	r22,zero
  800290:	14800017 	ldw	r18,0(r2)
  800294:	d8800615 	stw	r2,24(sp)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800298:	d9000817 	ldw	r4,32(sp)
  80029c:	d8c00317 	ldw	r3,12(sp)
  8002a0:	2509383a 	mul	r4,r4,r20
  8002a4:	a0c5883a 	add	r2,r20,r3
  8002a8:	a507883a 	add	r3,r20,r20
  8002ac:	d9000415 	stw	r4,16(sp)
  8002b0:	d9000717 	ldw	r4,28(sp)
  8002b4:	1085883a 	add	r2,r2,r2
  8002b8:	18c7883a 	add	r3,r3,r3
  8002bc:	20c7883a 	add	r3,r4,r3
  8002c0:	1085883a 	add	r2,r2,r2
  8002c4:	2085883a 	add	r2,r4,r2
  8002c8:	1dc00104 	addi	r23,r3,4
  8002cc:	d8c00417 	ldw	r3,16(sp)
  8002d0:	10800104 	addi	r2,r2,4
  8002d4:	d8800515 	stw	r2,20(sp)
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8002d8:	b0c5883a 	add	r2,r22,r3
  8002dc:	1085883a 	add	r2,r2,r2
  8002e0:	1085883a 	add	r2,r2,r2
  8002e4:	1105883a 	add	r2,r2,r4
  8002e8:	11400017 	ldw	r5,0(r2)
  8002ec:	9009883a 	mov	r4,r18
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  8002f0:	a5000044 	addi	r20,r20,1
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8002f4:	0800b200 	call	800b20 <__divsf3>
  8002f8:	d8c00617 	ldw	r3,24(sp)
  8002fc:	18800015 	stw	r2,0(r3)
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  800300:	a7001f0e 	bge	r20,fp,800380 <determinant+0x184>

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800304:	d8c00517 	ldw	r3,20(sp)
  800308:	a02d883a 	mov	r22,r20
  80030c:	d8c00615 	stw	r3,24(sp)
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  800310:	1c800017 	ldw	r18,0(r3)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800314:	053fe00e 	bge	zero,r20,800298 <determinant+0x9c>
  800318:	d9000b17 	ldw	r4,44(sp)
  80031c:	dcc00017 	ldw	r19,0(sp)
  800320:	b823883a 	mov	r17,r23
  800324:	212b883a 	add	r21,r4,r4
  800328:	0021883a 	mov	r16,zero
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  80032c:	99000017 	ldw	r4,0(r19)
  800330:	89400017 	ldw	r5,0(r17)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800334:	84000044 	addi	r16,r16,1
  800338:	9cc00104 	addi	r19,r19,4
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  80033c:	08009400 	call	800940 <__mulsf3>
  800340:	100b883a 	mov	r5,r2
  800344:	9009883a 	mov	r4,r18
  800348:	080086c0 	call	80086c <__subsf3>
  80034c:	1025883a 	mov	r18,r2
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800350:	8d63883a 	add	r17,r17,r21
  800354:	a43ff51e 	bne	r20,r16,80032c <determinant+0x130>
  800358:	d8c00417 	ldw	r3,16(sp)
  80035c:	d9000817 	ldw	r4,32(sp)
  800360:	d8800517 	ldw	r2,20(sp)
  800364:	bdc00104 	addi	r23,r23,4
  800368:	1907883a 	add	r3,r3,r4
  80036c:	d9000717 	ldw	r4,28(sp)
  800370:	10800104 	addi	r2,r2,4
  800374:	d8800515 	stw	r2,20(sp)
  800378:	d8c00415 	stw	r3,16(sp)
  80037c:	003fd606 	br	8002d8 <determinant+0xdc>
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
		result *= getAt(m, i, i, dimension);

	free(m);
  800380:	d9000317 	ldw	r4,12(sp)
  800384:	d8c00717 	ldw	r3,28(sp)
  800388:	ddc00117 	ldw	r23,4(sp)
  80038c:	2705883a 	add	r2,r4,fp
  800390:	1085883a 	add	r2,r2,r2
  800394:	1085883a 	add	r2,r2,r2
  800398:	e1000050 	cmplti	r4,fp,1
  80039c:	18ab883a 	add	r21,r3,r2
  8003a0:	e02d883a 	mov	r22,fp
  8003a4:	d9000a15 	stw	r4,40(sp)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003a8:	d9000a17 	ldw	r4,40(sp)
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  8003ac:	ac800017 	ldw	r18,0(r21)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003b0:	2000141e 	bne	r4,zero,800404 <determinant+0x208>
  8003b4:	d8c00317 	ldw	r3,12(sp)
  8003b8:	d9000717 	ldw	r4,28(sp)
  8003bc:	b823883a 	mov	r17,r23
  8003c0:	18c5883a 	add	r2,r3,r3
  8003c4:	1085883a 	add	r2,r2,r2
  8003c8:	20a7883a 	add	r19,r4,r2
  8003cc:	d8800b17 	ldw	r2,44(sp)
  8003d0:	0021883a 	mov	r16,zero
  8003d4:	10a9883a 	add	r20,r2,r2
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  8003d8:	99000017 	ldw	r4,0(r19)
  8003dc:	89400017 	ldw	r5,0(r17)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003e0:	84000044 	addi	r16,r16,1
  8003e4:	9cc00104 	addi	r19,r19,4
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  8003e8:	08009400 	call	800940 <__mulsf3>
  8003ec:	100b883a 	mov	r5,r2
  8003f0:	9009883a 	mov	r4,r18
  8003f4:	080086c0 	call	80086c <__subsf3>
  8003f8:	1025883a 	mov	r18,r2
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003fc:	8d23883a 	add	r17,r17,r20
  800400:	e43ff51e 	bne	fp,r16,8003d8 <determinant+0x1dc>
			for (p = 0; p < j; p++){
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
  800404:	d8c00817 	ldw	r3,32(sp)
  800408:	b5800044 	addi	r22,r22,1
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  80040c:	ac800015 	stw	r18,0(r21)
			for (p = 0; p < j; p++){
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
  800410:	bdc00104 	addi	r23,r23,4
  800414:	ad400104 	addi	r21,r21,4
  800418:	b0ffe316 	blt	r22,r3,8003a8 <determinant+0x1ac>
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  80041c:	d9000117 	ldw	r4,4(sp)
  800420:	d8800317 	ldw	r2,12(sp)
  800424:	e7000044 	addi	fp,fp,1
  800428:	21000104 	addi	r4,r4,4
  80042c:	10c5883a 	add	r2,r2,r3
  800430:	d9000115 	stw	r4,4(sp)
  800434:	d8c00017 	ldw	r3,0(sp)
  800438:	d9000917 	ldw	r4,36(sp)
  80043c:	d8800315 	stw	r2,12(sp)
  800440:	d8800817 	ldw	r2,32(sp)
  800444:	1907883a 	add	r3,r3,r4
  800448:	d8c00015 	stw	r3,0(sp)
  80044c:	173f8c1e 	bne	r2,fp,800280 <determinant+0x84>
		for (j = 0; j < i; j++){
  800450:	d8c00b17 	ldw	r3,44(sp)
  800454:	0023883a 	mov	r17,zero
  800458:	040fe034 	movhi	r16,16256
  80045c:	18c5883a 	add	r2,r3,r3
  800460:	14800104 	addi	r18,r2,4
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
		result *= getAt(m, i, i, dimension);
  800464:	d9000217 	ldw	r4,8(sp)
	// Second step is to find the determinant.
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
  800468:	8c400044 	addi	r17,r17,1
		result *= getAt(m, i, i, dimension);
  80046c:	21400017 	ldw	r5,0(r4)
  800470:	8009883a 	mov	r4,r16
  800474:	08009400 	call	800940 <__mulsf3>
  800478:	1021883a 	mov	r16,r2
	// Second step is to find the determinant.
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
  80047c:	d8800217 	ldw	r2,8(sp)
  800480:	d8c00817 	ldw	r3,32(sp)
  800484:	1485883a 	add	r2,r2,r18
  800488:	d8800215 	stw	r2,8(sp)
  80048c:	1c7ff51e 	bne	r3,r17,800464 <determinant+0x268>
		result *= getAt(m, i, i, dimension);

	free(m);
  800490:	d9000717 	ldw	r4,28(sp)
  800494:	0801f980 	call	801f98 <free>

	return result;
}
  800498:	8005883a 	mov	r2,r16
  80049c:	dfc01517 	ldw	ra,84(sp)
  8004a0:	df001417 	ldw	fp,80(sp)
  8004a4:	ddc01317 	ldw	r23,76(sp)
  8004a8:	dd801217 	ldw	r22,72(sp)
  8004ac:	dd401117 	ldw	r21,68(sp)
  8004b0:	dd001017 	ldw	r20,64(sp)
  8004b4:	dcc00f17 	ldw	r19,60(sp)
  8004b8:	dc800e17 	ldw	r18,56(sp)
  8004bc:	dc400d17 	ldw	r17,52(sp)
  8004c0:	dc000c17 	ldw	r16,48(sp)
  8004c4:	dec01604 	addi	sp,sp,88
  8004c8:	f800283a 	ret
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  8004cc:	040fe034 	movhi	r16,16256
  8004d0:	003fef06 	br	800490 <determinant+0x294>

008004d4 <main>:
// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
}

int main(){
  8004d4:	deffed04 	addi	sp,sp,-76
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  8004d8:	00907234 	movhi	r2,16840
  8004dc:	00d02834 	movhi	r3,16544
  8004e0:	d8800615 	stw	r2,24(sp)
  8004e4:	d8c00715 	stw	r3,28(sp)
  8004e8:	0090a034 	movhi	r2,17024
  8004ec:	00d04034 	movhi	r3,16640
  8004f0:	014fe034 	movhi	r5,16256
	clock_t exec_t1, exec_t2;

	alt_putstr("Hello from DE0!\n");
  8004f4:	01002074 	movhi	r4,129
  8004f8:	2127d404 	addi	r4,r4,-24752
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  8004fc:	d8800915 	stw	r2,36(sp)
  800500:	d8c00a15 	stw	r3,40(sp)
  800504:	0090c434 	movhi	r2,17168
  800508:	00d05034 	movhi	r3,16704
// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
}

int main(){
  80050c:	dfc01215 	stw	ra,72(sp)
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  800510:	d8c00d15 	stw	r3,52(sp)
  800514:	d9400e15 	stw	r5,56(sp)
  800518:	d9400815 	stw	r5,32(sp)
  80051c:	d9400b15 	stw	r5,44(sp)
// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
}

int main(){
  800520:	dcc01115 	stw	r19,68(sp)
  800524:	dc401015 	stw	r17,64(sp)
  800528:	dc000f15 	stw	r16,60(sp)
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  80052c:	d8800c15 	stw	r2,48(sp)
	clock_t exec_t1, exec_t2;

	alt_putstr("Hello from DE0!\n");
  800530:	08073580 	call	807358 <alt_putstr>
	exec_t1 = times(NULL); // get system time before starting the process
  800534:	0009883a 	mov	r4,zero
  800538:	dc400604 	addi	r17,sp,24
  80053c:	08074dc0 	call	8074dc <times>



	for (i = 0; i < 10; i++)
	{
		det = determinant( (float *) matrix, DIMENSION);
  800540:	014000c4 	movi	r5,3
  800544:	8809883a 	mov	r4,r17
			{64, 8, 1},
			{144, 12, 1}};
	clock_t exec_t1, exec_t2;

	alt_putstr("Hello from DE0!\n");
	exec_t1 = times(NULL); // get system time before starting the process
  800548:	1027883a 	mov	r19,r2



	for (i = 0; i < 10; i++)
	{
		det = determinant( (float *) matrix, DIMENSION);
  80054c:	08001fc0 	call	8001fc <determinant>
  800550:	8809883a 	mov	r4,r17
  800554:	014000c4 	movi	r5,3
  800558:	08001fc0 	call	8001fc <determinant>
  80055c:	8809883a 	mov	r4,r17
  800560:	014000c4 	movi	r5,3
  800564:	08001fc0 	call	8001fc <determinant>
  800568:	8809883a 	mov	r4,r17
  80056c:	014000c4 	movi	r5,3
  800570:	08001fc0 	call	8001fc <determinant>
  800574:	8809883a 	mov	r4,r17
  800578:	014000c4 	movi	r5,3
  80057c:	08001fc0 	call	8001fc <determinant>
  800580:	8809883a 	mov	r4,r17
  800584:	014000c4 	movi	r5,3
  800588:	08001fc0 	call	8001fc <determinant>
  80058c:	8809883a 	mov	r4,r17
  800590:	014000c4 	movi	r5,3
  800594:	08001fc0 	call	8001fc <determinant>
  800598:	8809883a 	mov	r4,r17
  80059c:	014000c4 	movi	r5,3
  8005a0:	08001fc0 	call	8001fc <determinant>
  8005a4:	8809883a 	mov	r4,r17
  8005a8:	014000c4 	movi	r5,3
  8005ac:	08001fc0 	call	8001fc <determinant>
  8005b0:	8809883a 	mov	r4,r17
  8005b4:	014000c4 	movi	r5,3
  8005b8:	08001fc0 	call	8001fc <determinant>

	}
	gcvt(det, 10, buffer);
  8005bc:	1009883a 	mov	r4,r2
  8005c0:	0800c940 	call	800c94 <__extendsfdf2>
  8005c4:	dc4002c4 	addi	r17,sp,11
  8005c8:	880f883a 	mov	r7,r17
  8005cc:	180b883a 	mov	r5,r3
  8005d0:	01800284 	movi	r6,10
  8005d4:	1009883a 	mov	r4,r2
  8005d8:	0801d9c0 	call	801d9c <gcvt>
	alt_putstr(buffer);
  8005dc:	8809883a 	mov	r4,r17
  8005e0:	08073580 	call	807358 <alt_putstr>
	alt_putstr("\n");
  8005e4:	01002074 	movhi	r4,129
  8005e8:	2127d904 	addi	r4,r4,-24732
  8005ec:	08073580 	call	807358 <alt_putstr>
	exec_t2 = times(NULL); // get system time after finishing the process
  8005f0:	0009883a 	mov	r4,zero
  8005f4:	08074dc0 	call	8074dc <times>
	gcvt(((double)exec_t2-(double)exec_t1) / alt_ticks_per_second(), 10, buf);
  8005f8:	1009883a 	mov	r4,r2
  8005fc:	080147c0 	call	80147c <__floatunsidf>
  800600:	9809883a 	mov	r4,r19
  800604:	1021883a 	mov	r16,r2
  800608:	1823883a 	mov	r17,r3
  80060c:	080147c0 	call	80147c <__floatunsidf>
  800610:	880b883a 	mov	r5,r17
  800614:	180f883a 	mov	r7,r3
  800618:	100d883a 	mov	r6,r2
  80061c:	8009883a 	mov	r4,r16
  800620:	08010f80 	call	8010f8 <__subdf3>
  800624:	01402074 	movhi	r5,129
  800628:	2975ab04 	addi	r5,r5,-10580
  80062c:	29000017 	ldw	r4,0(r5)
  800630:	1021883a 	mov	r16,r2
  800634:	1823883a 	mov	r17,r3
  800638:	080147c0 	call	80147c <__floatunsidf>
  80063c:	880b883a 	mov	r5,r17
  800640:	180f883a 	mov	r7,r3
  800644:	8009883a 	mov	r4,r16
  800648:	100d883a 	mov	r6,r2
  80064c:	08011ec0 	call	8011ec <__divdf3>
  800650:	180b883a 	mov	r5,r3
  800654:	01800284 	movi	r6,10
  800658:	d80f883a 	mov	r7,sp
  80065c:	1009883a 	mov	r4,r2
  800660:	0801d9c0 	call	801d9c <gcvt>
	alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" seconds \n");
  800664:	01002074 	movhi	r4,129
  800668:	2127da04 	addi	r4,r4,-24728
  80066c:	08073580 	call	807358 <alt_putstr>
  800670:	d809883a 	mov	r4,sp
  800674:	08073580 	call	807358 <alt_putstr>
  800678:	01002074 	movhi	r4,129
  80067c:	2127de04 	addi	r4,r4,-24712
  800680:	08073580 	call	807358 <alt_putstr>
  800684:	003fff06 	br	800684 <main+0x1b0>

00800688 <_fpadd_parts>:
  800688:	21c00017 	ldw	r7,0(r4)
  80068c:	02000044 	movi	r8,1
  800690:	41c0332e 	bgeu	r8,r7,800760 <_fpadd_parts+0xd8>
  800694:	28800017 	ldw	r2,0(r5)
  800698:	4080462e 	bgeu	r8,r2,8007b4 <_fpadd_parts+0x12c>
  80069c:	00c00104 	movi	r3,4
  8006a0:	38c06b26 	beq	r7,r3,800850 <_fpadd_parts+0x1c8>
  8006a4:	10c04326 	beq	r2,r3,8007b4 <_fpadd_parts+0x12c>
  8006a8:	00c00084 	movi	r3,2
  8006ac:	10c02e26 	beq	r2,r3,800768 <_fpadd_parts+0xe0>
  8006b0:	38c04026 	beq	r7,r3,8007b4 <_fpadd_parts+0x12c>
  8006b4:	22800217 	ldw	r10,8(r4)
  8006b8:	28c00217 	ldw	r3,8(r5)
  8006bc:	23000317 	ldw	r12,12(r4)
  8006c0:	2a400317 	ldw	r9,12(r5)
  8006c4:	50cfc83a 	sub	r7,r10,r3
  8006c8:	3817883a 	mov	r11,r7
  8006cc:	38004f16 	blt	r7,zero,80080c <_fpadd_parts+0x184>
  8006d0:	008007c4 	movi	r2,31
  8006d4:	11c03316 	blt	r2,r7,8007a4 <_fpadd_parts+0x11c>
  8006d8:	02c0540e 	bge	zero,r11,80082c <_fpadd_parts+0x1a4>
  8006dc:	41c4983a 	sll	r2,r8,r7
  8006e0:	49c6d83a 	srl	r3,r9,r7
  8006e4:	10bfffc4 	addi	r2,r2,-1
  8006e8:	4884703a 	and	r2,r9,r2
  8006ec:	1004c03a 	cmpne	r2,r2,zero
  8006f0:	1892b03a 	or	r9,r3,r2
  8006f4:	20c00117 	ldw	r3,4(r4)
  8006f8:	28800117 	ldw	r2,4(r5)
  8006fc:	18803c26 	beq	r3,r2,8007f0 <_fpadd_parts+0x168>
  800700:	18002f26 	beq	r3,zero,8007c0 <_fpadd_parts+0x138>
  800704:	4b05c83a 	sub	r2,r9,r12
  800708:	10004216 	blt	r2,zero,800814 <_fpadd_parts+0x18c>
  80070c:	32800215 	stw	r10,8(r6)
  800710:	30800315 	stw	r2,12(r6)
  800714:	30000115 	stw	zero,4(r6)
  800718:	31000317 	ldw	r4,12(r6)
  80071c:	01d00034 	movhi	r7,16384
  800720:	39ffff84 	addi	r7,r7,-2
  800724:	20bfffc4 	addi	r2,r4,-1
  800728:	2007883a 	mov	r3,r4
  80072c:	38800836 	bltu	r7,r2,800750 <_fpadd_parts+0xc8>
  800730:	31400217 	ldw	r5,8(r6)
  800734:	18c9883a 	add	r4,r3,r3
  800738:	20bfffc4 	addi	r2,r4,-1
  80073c:	297fffc4 	addi	r5,r5,-1
  800740:	2007883a 	mov	r3,r4
  800744:	38bffb2e 	bgeu	r7,r2,800734 <_fpadd_parts+0xac>
  800748:	31400215 	stw	r5,8(r6)
  80074c:	31000315 	stw	r4,12(r6)
  800750:	008000c4 	movi	r2,3
  800754:	30800015 	stw	r2,0(r6)
  800758:	20001b16 	blt	r4,zero,8007c8 <_fpadd_parts+0x140>
  80075c:	3009883a 	mov	r4,r6
  800760:	2005883a 	mov	r2,r4
  800764:	f800283a 	ret
  800768:	38fffd1e 	bne	r7,r3,800760 <_fpadd_parts+0xd8>
  80076c:	31c00015 	stw	r7,0(r6)
  800770:	20800117 	ldw	r2,4(r4)
  800774:	30800115 	stw	r2,4(r6)
  800778:	20c00217 	ldw	r3,8(r4)
  80077c:	30c00215 	stw	r3,8(r6)
  800780:	20800317 	ldw	r2,12(r4)
  800784:	30800315 	stw	r2,12(r6)
  800788:	20c00117 	ldw	r3,4(r4)
  80078c:	28800117 	ldw	r2,4(r5)
  800790:	3009883a 	mov	r4,r6
  800794:	1886703a 	and	r3,r3,r2
  800798:	2005883a 	mov	r2,r4
  80079c:	30c00115 	stw	r3,4(r6)
  8007a0:	f800283a 	ret
  8007a4:	1a801716 	blt	r3,r10,800804 <_fpadd_parts+0x17c>
  8007a8:	1815883a 	mov	r10,r3
  8007ac:	0019883a 	mov	r12,zero
  8007b0:	003fd006 	br	8006f4 <_fpadd_parts+0x6c>
  8007b4:	2809883a 	mov	r4,r5
  8007b8:	2005883a 	mov	r2,r4
  8007bc:	f800283a 	ret
  8007c0:	6245c83a 	sub	r2,r12,r9
  8007c4:	003fd006 	br	800708 <_fpadd_parts+0x80>
  8007c8:	30800217 	ldw	r2,8(r6)
  8007cc:	2006d07a 	srli	r3,r4,1
  8007d0:	2100004c 	andi	r4,r4,1
  8007d4:	10800044 	addi	r2,r2,1
  8007d8:	1906b03a 	or	r3,r3,r4
  8007dc:	3009883a 	mov	r4,r6
  8007e0:	30800215 	stw	r2,8(r6)
  8007e4:	2005883a 	mov	r2,r4
  8007e8:	30c00315 	stw	r3,12(r6)
  8007ec:	f800283a 	ret
  8007f0:	4b09883a 	add	r4,r9,r12
  8007f4:	30c00115 	stw	r3,4(r6)
  8007f8:	32800215 	stw	r10,8(r6)
  8007fc:	31000315 	stw	r4,12(r6)
  800800:	003fd306 	br	800750 <_fpadd_parts+0xc8>
  800804:	0013883a 	mov	r9,zero
  800808:	003fba06 	br	8006f4 <_fpadd_parts+0x6c>
  80080c:	01cfc83a 	sub	r7,zero,r7
  800810:	003faf06 	br	8006d0 <_fpadd_parts+0x48>
  800814:	0089c83a 	sub	r4,zero,r2
  800818:	00800044 	movi	r2,1
  80081c:	30800115 	stw	r2,4(r6)
  800820:	32800215 	stw	r10,8(r6)
  800824:	31000315 	stw	r4,12(r6)
  800828:	003fbb06 	br	800718 <_fpadd_parts+0x90>
  80082c:	583fb126 	beq	r11,zero,8006f4 <_fpadd_parts+0x6c>
  800830:	41c4983a 	sll	r2,r8,r7
  800834:	61c6d83a 	srl	r3,r12,r7
  800838:	51d5883a 	add	r10,r10,r7
  80083c:	10bfffc4 	addi	r2,r2,-1
  800840:	6084703a 	and	r2,r12,r2
  800844:	1004c03a 	cmpne	r2,r2,zero
  800848:	1898b03a 	or	r12,r3,r2
  80084c:	003fa906 	br	8006f4 <_fpadd_parts+0x6c>
  800850:	11ffc31e 	bne	r2,r7,800760 <_fpadd_parts+0xd8>
  800854:	28c00117 	ldw	r3,4(r5)
  800858:	20800117 	ldw	r2,4(r4)
  80085c:	10ffc026 	beq	r2,r3,800760 <_fpadd_parts+0xd8>
  800860:	01002074 	movhi	r4,129
  800864:	2127e104 	addi	r4,r4,-24700
  800868:	003fbd06 	br	800760 <_fpadd_parts+0xd8>

0080086c <__subsf3>:
  80086c:	deffef04 	addi	sp,sp,-68
  800870:	dcc00f15 	stw	r19,60(sp)
  800874:	dcc00204 	addi	r19,sp,8
  800878:	dc400e15 	stw	r17,56(sp)
  80087c:	d9000015 	stw	r4,0(sp)
  800880:	d9400115 	stw	r5,4(sp)
  800884:	d809883a 	mov	r4,sp
  800888:	980b883a 	mov	r5,r19
  80088c:	dc400604 	addi	r17,sp,24
  800890:	dfc01015 	stw	ra,64(sp)
  800894:	08018880 	call	801888 <__unpack_f>
  800898:	d9000104 	addi	r4,sp,4
  80089c:	880b883a 	mov	r5,r17
  8008a0:	08018880 	call	801888 <__unpack_f>
  8008a4:	d8800717 	ldw	r2,28(sp)
  8008a8:	9809883a 	mov	r4,r19
  8008ac:	880b883a 	mov	r5,r17
  8008b0:	d9800a04 	addi	r6,sp,40
  8008b4:	1080005c 	xori	r2,r2,1
  8008b8:	d8800715 	stw	r2,28(sp)
  8008bc:	08006880 	call	800688 <_fpadd_parts>
  8008c0:	1009883a 	mov	r4,r2
  8008c4:	08017280 	call	801728 <__pack_f>
  8008c8:	dfc01017 	ldw	ra,64(sp)
  8008cc:	dcc00f17 	ldw	r19,60(sp)
  8008d0:	dc400e17 	ldw	r17,56(sp)
  8008d4:	dec01104 	addi	sp,sp,68
  8008d8:	f800283a 	ret

008008dc <__addsf3>:
  8008dc:	deffef04 	addi	sp,sp,-68
  8008e0:	dcc00f15 	stw	r19,60(sp)
  8008e4:	dcc00204 	addi	r19,sp,8
  8008e8:	dc400e15 	stw	r17,56(sp)
  8008ec:	d9000015 	stw	r4,0(sp)
  8008f0:	d9400115 	stw	r5,4(sp)
  8008f4:	d809883a 	mov	r4,sp
  8008f8:	980b883a 	mov	r5,r19
  8008fc:	dc400604 	addi	r17,sp,24
  800900:	dfc01015 	stw	ra,64(sp)
  800904:	08018880 	call	801888 <__unpack_f>
  800908:	d9000104 	addi	r4,sp,4
  80090c:	880b883a 	mov	r5,r17
  800910:	08018880 	call	801888 <__unpack_f>
  800914:	d9800a04 	addi	r6,sp,40
  800918:	9809883a 	mov	r4,r19
  80091c:	880b883a 	mov	r5,r17
  800920:	08006880 	call	800688 <_fpadd_parts>
  800924:	1009883a 	mov	r4,r2
  800928:	08017280 	call	801728 <__pack_f>
  80092c:	dfc01017 	ldw	ra,64(sp)
  800930:	dcc00f17 	ldw	r19,60(sp)
  800934:	dc400e17 	ldw	r17,56(sp)
  800938:	dec01104 	addi	sp,sp,68
  80093c:	f800283a 	ret

00800940 <__mulsf3>:
  800940:	deffef04 	addi	sp,sp,-68
  800944:	dc400f15 	stw	r17,60(sp)
  800948:	dc400204 	addi	r17,sp,8
  80094c:	dc000e15 	stw	r16,56(sp)
  800950:	d9000015 	stw	r4,0(sp)
  800954:	d9400115 	stw	r5,4(sp)
  800958:	d809883a 	mov	r4,sp
  80095c:	880b883a 	mov	r5,r17
  800960:	dc000604 	addi	r16,sp,24
  800964:	dfc01015 	stw	ra,64(sp)
  800968:	08018880 	call	801888 <__unpack_f>
  80096c:	d9000104 	addi	r4,sp,4
  800970:	800b883a 	mov	r5,r16
  800974:	08018880 	call	801888 <__unpack_f>
  800978:	d9000217 	ldw	r4,8(sp)
  80097c:	00800044 	movi	r2,1
  800980:	01400104 	movi	r5,4
  800984:	1100142e 	bgeu	r2,r4,8009d8 <__mulsf3+0x98>
  800988:	d8c00617 	ldw	r3,24(sp)
  80098c:	10c0052e 	bgeu	r2,r3,8009a4 <__mulsf3+0x64>
  800990:	21400f26 	beq	r4,r5,8009d0 <__mulsf3+0x90>
  800994:	19405d26 	beq	r3,r5,800b0c <__mulsf3+0x1cc>
  800998:	00800084 	movi	r2,2
  80099c:	20800e26 	beq	r4,r2,8009d8 <__mulsf3+0x98>
  8009a0:	1880181e 	bne	r3,r2,800a04 <__mulsf3+0xc4>
  8009a4:	d8c00717 	ldw	r3,28(sp)
  8009a8:	d8800317 	ldw	r2,12(sp)
  8009ac:	8009883a 	mov	r4,r16
  8009b0:	10c4c03a 	cmpne	r2,r2,r3
  8009b4:	d8800715 	stw	r2,28(sp)
  8009b8:	08017280 	call	801728 <__pack_f>
  8009bc:	dfc01017 	ldw	ra,64(sp)
  8009c0:	dc400f17 	ldw	r17,60(sp)
  8009c4:	dc000e17 	ldw	r16,56(sp)
  8009c8:	dec01104 	addi	sp,sp,68
  8009cc:	f800283a 	ret
  8009d0:	00800084 	movi	r2,2
  8009d4:	18804f26 	beq	r3,r2,800b14 <__mulsf3+0x1d4>
  8009d8:	d8800317 	ldw	r2,12(sp)
  8009dc:	d8c00717 	ldw	r3,28(sp)
  8009e0:	8809883a 	mov	r4,r17
  8009e4:	10c4c03a 	cmpne	r2,r2,r3
  8009e8:	d8800315 	stw	r2,12(sp)
  8009ec:	08017280 	call	801728 <__pack_f>
  8009f0:	dfc01017 	ldw	ra,64(sp)
  8009f4:	dc400f17 	ldw	r17,60(sp)
  8009f8:	dc000e17 	ldw	r16,56(sp)
  8009fc:	dec01104 	addi	sp,sp,68
  800a00:	f800283a 	ret
  800a04:	d8800517 	ldw	r2,20(sp)
  800a08:	da000917 	ldw	r8,36(sp)
  800a0c:	0013883a 	mov	r9,zero
  800a10:	0007883a 	mov	r3,zero
  800a14:	480f883a 	mov	r7,r9
  800a18:	180b883a 	mov	r5,r3
  800a1c:	400d883a 	mov	r6,r8
  800a20:	1009883a 	mov	r4,r2
  800a24:	08016100 	call	801610 <__muldi3>
  800a28:	da800417 	ldw	r10,16(sp)
  800a2c:	d9800817 	ldw	r6,32(sp)
  800a30:	da400317 	ldw	r9,12(sp)
  800a34:	52800084 	addi	r10,r10,2
  800a38:	3295883a 	add	r10,r6,r10
  800a3c:	d9800717 	ldw	r6,28(sp)
  800a40:	180b883a 	mov	r5,r3
  800a44:	180f883a 	mov	r7,r3
  800a48:	4992c03a 	cmpne	r9,r9,r6
  800a4c:	da400b15 	stw	r9,44(sp)
  800a50:	1007883a 	mov	r3,r2
  800a54:	da800c15 	stw	r10,48(sp)
  800a58:	2800070e 	bge	r5,zero,800a78 <__mulsf3+0x138>
  800a5c:	2880004c 	andi	r2,r5,1
  800a60:	1005003a 	cmpeq	r2,r2,zero
  800a64:	500d883a 	mov	r6,r10
  800a68:	10001e26 	beq	r2,zero,800ae4 <__mulsf3+0x1a4>
  800a6c:	380ed07a 	srli	r7,r7,1
  800a70:	31800044 	addi	r6,r6,1
  800a74:	d9800c15 	stw	r6,48(sp)
  800a78:	01100034 	movhi	r4,16384
  800a7c:	213fffc4 	addi	r4,r4,-1
  800a80:	21c00b36 	bltu	r4,r7,800ab0 <__mulsf3+0x170>
  800a84:	d8800c17 	ldw	r2,48(sp)
  800a88:	00000206 	br	800a94 <__mulsf3+0x154>
  800a8c:	18c7883a 	add	r3,r3,r3
  800a90:	21c00636 	bltu	r4,r7,800aac <__mulsf3+0x16c>
  800a94:	10bfffc4 	addi	r2,r2,-1
  800a98:	39cf883a 	add	r7,r7,r7
  800a9c:	183ffb0e 	bge	r3,zero,800a8c <__mulsf3+0x14c>
  800aa0:	39c00054 	ori	r7,r7,1
  800aa4:	18c7883a 	add	r3,r3,r3
  800aa8:	21fffa2e 	bgeu	r4,r7,800a94 <__mulsf3+0x154>
  800aac:	d8800c15 	stw	r2,48(sp)
  800ab0:	39001fcc 	andi	r4,r7,127
  800ab4:	00801004 	movi	r2,64
  800ab8:	20800d26 	beq	r4,r2,800af0 <__mulsf3+0x1b0>
  800abc:	008000c4 	movi	r2,3
  800ac0:	d9000a04 	addi	r4,sp,40
  800ac4:	d9c00d15 	stw	r7,52(sp)
  800ac8:	d8800a15 	stw	r2,40(sp)
  800acc:	08017280 	call	801728 <__pack_f>
  800ad0:	dfc01017 	ldw	ra,64(sp)
  800ad4:	dc400f17 	ldw	r17,60(sp)
  800ad8:	dc000e17 	ldw	r16,56(sp)
  800adc:	dec01104 	addi	sp,sp,68
  800ae0:	f800283a 	ret
  800ae4:	1804d07a 	srli	r2,r3,1
  800ae8:	10e00034 	orhi	r3,r2,32768
  800aec:	003fdf06 	br	800a6c <__mulsf3+0x12c>
  800af0:	3880200c 	andi	r2,r7,128
  800af4:	103ff11e 	bne	r2,zero,800abc <__mulsf3+0x17c>
  800af8:	183ff026 	beq	r3,zero,800abc <__mulsf3+0x17c>
  800afc:	3907883a 	add	r3,r7,r4
  800b00:	00bfe004 	movi	r2,-128
  800b04:	188e703a 	and	r7,r3,r2
  800b08:	003fec06 	br	800abc <__mulsf3+0x17c>
  800b0c:	00800084 	movi	r2,2
  800b10:	20bfa41e 	bne	r4,r2,8009a4 <__mulsf3+0x64>
  800b14:	01002074 	movhi	r4,129
  800b18:	2127e104 	addi	r4,r4,-24700
  800b1c:	003fb306 	br	8009ec <__mulsf3+0xac>

00800b20 <__divsf3>:
  800b20:	defff304 	addi	sp,sp,-52
  800b24:	dc400b15 	stw	r17,44(sp)
  800b28:	dc400204 	addi	r17,sp,8
  800b2c:	dc000a15 	stw	r16,40(sp)
  800b30:	d9000015 	stw	r4,0(sp)
  800b34:	d9400115 	stw	r5,4(sp)
  800b38:	d809883a 	mov	r4,sp
  800b3c:	880b883a 	mov	r5,r17
  800b40:	dc000604 	addi	r16,sp,24
  800b44:	dfc00c15 	stw	ra,48(sp)
  800b48:	08018880 	call	801888 <__unpack_f>
  800b4c:	d9000104 	addi	r4,sp,4
  800b50:	800b883a 	mov	r5,r16
  800b54:	08018880 	call	801888 <__unpack_f>
  800b58:	d9000217 	ldw	r4,8(sp)
  800b5c:	00800044 	movi	r2,1
  800b60:	01800104 	movi	r6,4
  800b64:	11000a2e 	bgeu	r2,r4,800b90 <__divsf3+0x70>
  800b68:	d9400617 	ldw	r5,24(sp)
  800b6c:	1140432e 	bgeu	r2,r5,800c7c <__divsf3+0x15c>
  800b70:	d8800317 	ldw	r2,12(sp)
  800b74:	d8c00717 	ldw	r3,28(sp)
  800b78:	10c4f03a 	xor	r2,r2,r3
  800b7c:	d8800315 	stw	r2,12(sp)
  800b80:	21800226 	beq	r4,r6,800b8c <__divsf3+0x6c>
  800b84:	00800084 	movi	r2,2
  800b88:	2080101e 	bne	r4,r2,800bcc <__divsf3+0xac>
  800b8c:	29000726 	beq	r5,r4,800bac <__divsf3+0x8c>
  800b90:	8809883a 	mov	r4,r17
  800b94:	08017280 	call	801728 <__pack_f>
  800b98:	dfc00c17 	ldw	ra,48(sp)
  800b9c:	dc400b17 	ldw	r17,44(sp)
  800ba0:	dc000a17 	ldw	r16,40(sp)
  800ba4:	dec00d04 	addi	sp,sp,52
  800ba8:	f800283a 	ret
  800bac:	01002074 	movhi	r4,129
  800bb0:	2127e104 	addi	r4,r4,-24700
  800bb4:	08017280 	call	801728 <__pack_f>
  800bb8:	dfc00c17 	ldw	ra,48(sp)
  800bbc:	dc400b17 	ldw	r17,44(sp)
  800bc0:	dc000a17 	ldw	r16,40(sp)
  800bc4:	dec00d04 	addi	sp,sp,52
  800bc8:	f800283a 	ret
  800bcc:	29802d26 	beq	r5,r6,800c84 <__divsf3+0x164>
  800bd0:	28801a26 	beq	r5,r2,800c3c <__divsf3+0x11c>
  800bd4:	d8c00417 	ldw	r3,16(sp)
  800bd8:	d8800817 	ldw	r2,32(sp)
  800bdc:	d9000517 	ldw	r4,20(sp)
  800be0:	d9800917 	ldw	r6,36(sp)
  800be4:	1885c83a 	sub	r2,r3,r2
  800be8:	d8800415 	stw	r2,16(sp)
  800bec:	2180032e 	bgeu	r4,r6,800bfc <__divsf3+0xdc>
  800bf0:	10bfffc4 	addi	r2,r2,-1
  800bf4:	d8800415 	stw	r2,16(sp)
  800bf8:	2109883a 	add	r4,r4,r4
  800bfc:	01500034 	movhi	r5,16384
  800c00:	0007883a 	mov	r3,zero
  800c04:	0005883a 	mov	r2,zero
  800c08:	01c007c4 	movi	r7,31
  800c0c:	10800044 	addi	r2,r2,1
  800c10:	21800236 	bltu	r4,r6,800c1c <__divsf3+0xfc>
  800c14:	1946b03a 	or	r3,r3,r5
  800c18:	2189c83a 	sub	r4,r4,r6
  800c1c:	280ad07a 	srli	r5,r5,1
  800c20:	2109883a 	add	r4,r4,r4
  800c24:	11fff91e 	bne	r2,r7,800c0c <__divsf3+0xec>
  800c28:	19401fcc 	andi	r5,r3,127
  800c2c:	00801004 	movi	r2,64
  800c30:	28800a26 	beq	r5,r2,800c5c <__divsf3+0x13c>
  800c34:	d8c00515 	stw	r3,20(sp)
  800c38:	003fd506 	br	800b90 <__divsf3+0x70>
  800c3c:	8809883a 	mov	r4,r17
  800c40:	d9800215 	stw	r6,8(sp)
  800c44:	08017280 	call	801728 <__pack_f>
  800c48:	dfc00c17 	ldw	ra,48(sp)
  800c4c:	dc400b17 	ldw	r17,44(sp)
  800c50:	dc000a17 	ldw	r16,40(sp)
  800c54:	dec00d04 	addi	sp,sp,52
  800c58:	f800283a 	ret
  800c5c:	1880200c 	andi	r2,r3,128
  800c60:	103ff41e 	bne	r2,zero,800c34 <__divsf3+0x114>
  800c64:	203ff326 	beq	r4,zero,800c34 <__divsf3+0x114>
  800c68:	1947883a 	add	r3,r3,r5
  800c6c:	00bfe004 	movi	r2,-128
  800c70:	1886703a 	and	r3,r3,r2
  800c74:	d8c00515 	stw	r3,20(sp)
  800c78:	003fc506 	br	800b90 <__divsf3+0x70>
  800c7c:	8009883a 	mov	r4,r16
  800c80:	003fc406 	br	800b94 <__divsf3+0x74>
  800c84:	8809883a 	mov	r4,r17
  800c88:	d8000515 	stw	zero,20(sp)
  800c8c:	d8000415 	stw	zero,16(sp)
  800c90:	003fc006 	br	800b94 <__divsf3+0x74>

00800c94 <__extendsfdf2>:
  800c94:	defff904 	addi	sp,sp,-28
  800c98:	d9000115 	stw	r4,4(sp)
  800c9c:	d9400204 	addi	r5,sp,8
  800ca0:	d9000104 	addi	r4,sp,4
  800ca4:	dfc00615 	stw	ra,24(sp)
  800ca8:	08018880 	call	801888 <__unpack_f>
  800cac:	d9c00517 	ldw	r7,20(sp)
  800cb0:	0011883a 	mov	r8,zero
  800cb4:	400697ba 	slli	r3,r8,30
  800cb8:	3812d0ba 	srli	r9,r7,2
  800cbc:	380497ba 	slli	r2,r7,30
  800cc0:	d9000217 	ldw	r4,8(sp)
  800cc4:	d9400317 	ldw	r5,12(sp)
  800cc8:	d9800417 	ldw	r6,16(sp)
  800ccc:	48c6b03a 	or	r3,r9,r3
  800cd0:	100f883a 	mov	r7,r2
  800cd4:	d8c00015 	stw	r3,0(sp)
  800cd8:	08014440 	call	801444 <__make_dp>
  800cdc:	dfc00617 	ldw	ra,24(sp)
  800ce0:	dec00704 	addi	sp,sp,28
  800ce4:	f800283a 	ret

00800ce8 <_fpadd_parts>:
  800ce8:	defff804 	addi	sp,sp,-32
  800cec:	dcc00315 	stw	r19,12(sp)
  800cf0:	2027883a 	mov	r19,r4
  800cf4:	21000017 	ldw	r4,0(r4)
  800cf8:	00c00044 	movi	r3,1
  800cfc:	dd400515 	stw	r21,20(sp)
  800d00:	dd000415 	stw	r20,16(sp)
  800d04:	ddc00715 	stw	r23,28(sp)
  800d08:	dd800615 	stw	r22,24(sp)
  800d0c:	dc800215 	stw	r18,8(sp)
  800d10:	dc400115 	stw	r17,4(sp)
  800d14:	dc000015 	stw	r16,0(sp)
  800d18:	282b883a 	mov	r21,r5
  800d1c:	3029883a 	mov	r20,r6
  800d20:	1900632e 	bgeu	r3,r4,800eb0 <_fpadd_parts+0x1c8>
  800d24:	28800017 	ldw	r2,0(r5)
  800d28:	1880812e 	bgeu	r3,r2,800f30 <_fpadd_parts+0x248>
  800d2c:	00c00104 	movi	r3,4
  800d30:	20c0dc26 	beq	r4,r3,8010a4 <_fpadd_parts+0x3bc>
  800d34:	10c07e26 	beq	r2,r3,800f30 <_fpadd_parts+0x248>
  800d38:	00c00084 	movi	r3,2
  800d3c:	10c06726 	beq	r2,r3,800edc <_fpadd_parts+0x1f4>
  800d40:	20c07b26 	beq	r4,r3,800f30 <_fpadd_parts+0x248>
  800d44:	9dc00217 	ldw	r23,8(r19)
  800d48:	28c00217 	ldw	r3,8(r5)
  800d4c:	9c400317 	ldw	r17,12(r19)
  800d50:	2bc00317 	ldw	r15,12(r5)
  800d54:	b8cdc83a 	sub	r6,r23,r3
  800d58:	9c800417 	ldw	r18,16(r19)
  800d5c:	2c000417 	ldw	r16,16(r5)
  800d60:	3009883a 	mov	r4,r6
  800d64:	30009716 	blt	r6,zero,800fc4 <_fpadd_parts+0x2dc>
  800d68:	00800fc4 	movi	r2,63
  800d6c:	11806b16 	blt	r2,r6,800f1c <_fpadd_parts+0x234>
  800d70:	0100a40e 	bge	zero,r4,801004 <_fpadd_parts+0x31c>
  800d74:	35bff804 	addi	r22,r6,-32
  800d78:	b000bc16 	blt	r22,zero,80106c <_fpadd_parts+0x384>
  800d7c:	8596d83a 	srl	r11,r16,r22
  800d80:	0019883a 	mov	r12,zero
  800d84:	0013883a 	mov	r9,zero
  800d88:	01000044 	movi	r4,1
  800d8c:	0015883a 	mov	r10,zero
  800d90:	b000be16 	blt	r22,zero,80108c <_fpadd_parts+0x3a4>
  800d94:	2590983a 	sll	r8,r4,r22
  800d98:	000f883a 	mov	r7,zero
  800d9c:	00bfffc4 	movi	r2,-1
  800da0:	3889883a 	add	r4,r7,r2
  800da4:	408b883a 	add	r5,r8,r2
  800da8:	21cd803a 	cmpltu	r6,r4,r7
  800dac:	314b883a 	add	r5,r6,r5
  800db0:	7904703a 	and	r2,r15,r4
  800db4:	8146703a 	and	r3,r16,r5
  800db8:	10c4b03a 	or	r2,r2,r3
  800dbc:	10000226 	beq	r2,zero,800dc8 <_fpadd_parts+0xe0>
  800dc0:	02400044 	movi	r9,1
  800dc4:	0015883a 	mov	r10,zero
  800dc8:	5a5eb03a 	or	r15,r11,r9
  800dcc:	62a0b03a 	or	r16,r12,r10
  800dd0:	99400117 	ldw	r5,4(r19)
  800dd4:	a8800117 	ldw	r2,4(r21)
  800dd8:	28806e26 	beq	r5,r2,800f94 <_fpadd_parts+0x2ac>
  800ddc:	28006626 	beq	r5,zero,800f78 <_fpadd_parts+0x290>
  800de0:	7c45c83a 	sub	r2,r15,r17
  800de4:	7889803a 	cmpltu	r4,r15,r2
  800de8:	8487c83a 	sub	r3,r16,r18
  800dec:	1909c83a 	sub	r4,r3,r4
  800df0:	100d883a 	mov	r6,r2
  800df4:	200f883a 	mov	r7,r4
  800df8:	38007716 	blt	r7,zero,800fd8 <_fpadd_parts+0x2f0>
  800dfc:	a5c00215 	stw	r23,8(r20)
  800e00:	a1c00415 	stw	r7,16(r20)
  800e04:	a0000115 	stw	zero,4(r20)
  800e08:	a1800315 	stw	r6,12(r20)
  800e0c:	a2000317 	ldw	r8,12(r20)
  800e10:	a2400417 	ldw	r9,16(r20)
  800e14:	00bfffc4 	movi	r2,-1
  800e18:	408b883a 	add	r5,r8,r2
  800e1c:	2a09803a 	cmpltu	r4,r5,r8
  800e20:	488d883a 	add	r6,r9,r2
  800e24:	01c40034 	movhi	r7,4096
  800e28:	39ffffc4 	addi	r7,r7,-1
  800e2c:	218d883a 	add	r6,r4,r6
  800e30:	39801736 	bltu	r7,r6,800e90 <_fpadd_parts+0x1a8>
  800e34:	31c06526 	beq	r6,r7,800fcc <_fpadd_parts+0x2e4>
  800e38:	a3000217 	ldw	r12,8(r20)
  800e3c:	4209883a 	add	r4,r8,r8
  800e40:	00bfffc4 	movi	r2,-1
  800e44:	220f803a 	cmpltu	r7,r4,r8
  800e48:	4a4b883a 	add	r5,r9,r9
  800e4c:	394f883a 	add	r7,r7,r5
  800e50:	2095883a 	add	r10,r4,r2
  800e54:	3897883a 	add	r11,r7,r2
  800e58:	510d803a 	cmpltu	r6,r10,r4
  800e5c:	6099883a 	add	r12,r12,r2
  800e60:	32d7883a 	add	r11,r6,r11
  800e64:	00840034 	movhi	r2,4096
  800e68:	10bfffc4 	addi	r2,r2,-1
  800e6c:	2011883a 	mov	r8,r4
  800e70:	3813883a 	mov	r9,r7
  800e74:	a1000315 	stw	r4,12(r20)
  800e78:	a1c00415 	stw	r7,16(r20)
  800e7c:	a3000215 	stw	r12,8(r20)
  800e80:	12c00336 	bltu	r2,r11,800e90 <_fpadd_parts+0x1a8>
  800e84:	58bfed1e 	bne	r11,r2,800e3c <_fpadd_parts+0x154>
  800e88:	00bfff84 	movi	r2,-2
  800e8c:	12bfeb2e 	bgeu	r2,r10,800e3c <_fpadd_parts+0x154>
  800e90:	a2800417 	ldw	r10,16(r20)
  800e94:	008000c4 	movi	r2,3
  800e98:	00c80034 	movhi	r3,8192
  800e9c:	18ffffc4 	addi	r3,r3,-1
  800ea0:	a2400317 	ldw	r9,12(r20)
  800ea4:	a0800015 	stw	r2,0(r20)
  800ea8:	1a802336 	bltu	r3,r10,800f38 <_fpadd_parts+0x250>
  800eac:	a027883a 	mov	r19,r20
  800eb0:	9805883a 	mov	r2,r19
  800eb4:	ddc00717 	ldw	r23,28(sp)
  800eb8:	dd800617 	ldw	r22,24(sp)
  800ebc:	dd400517 	ldw	r21,20(sp)
  800ec0:	dd000417 	ldw	r20,16(sp)
  800ec4:	dcc00317 	ldw	r19,12(sp)
  800ec8:	dc800217 	ldw	r18,8(sp)
  800ecc:	dc400117 	ldw	r17,4(sp)
  800ed0:	dc000017 	ldw	r16,0(sp)
  800ed4:	dec00804 	addi	sp,sp,32
  800ed8:	f800283a 	ret
  800edc:	20fff41e 	bne	r4,r3,800eb0 <_fpadd_parts+0x1c8>
  800ee0:	31000015 	stw	r4,0(r6)
  800ee4:	98800117 	ldw	r2,4(r19)
  800ee8:	30800115 	stw	r2,4(r6)
  800eec:	98c00217 	ldw	r3,8(r19)
  800ef0:	30c00215 	stw	r3,8(r6)
  800ef4:	98800317 	ldw	r2,12(r19)
  800ef8:	30800315 	stw	r2,12(r6)
  800efc:	98c00417 	ldw	r3,16(r19)
  800f00:	30c00415 	stw	r3,16(r6)
  800f04:	98800117 	ldw	r2,4(r19)
  800f08:	28c00117 	ldw	r3,4(r5)
  800f0c:	3027883a 	mov	r19,r6
  800f10:	10c4703a 	and	r2,r2,r3
  800f14:	30800115 	stw	r2,4(r6)
  800f18:	003fe506 	br	800eb0 <_fpadd_parts+0x1c8>
  800f1c:	1dc02616 	blt	r3,r23,800fb8 <_fpadd_parts+0x2d0>
  800f20:	0023883a 	mov	r17,zero
  800f24:	182f883a 	mov	r23,r3
  800f28:	0025883a 	mov	r18,zero
  800f2c:	003fa806 	br	800dd0 <_fpadd_parts+0xe8>
  800f30:	a827883a 	mov	r19,r21
  800f34:	003fde06 	br	800eb0 <_fpadd_parts+0x1c8>
  800f38:	01800044 	movi	r6,1
  800f3c:	500497fa 	slli	r2,r10,31
  800f40:	4808d07a 	srli	r4,r9,1
  800f44:	518ad83a 	srl	r5,r10,r6
  800f48:	a2000217 	ldw	r8,8(r20)
  800f4c:	1108b03a 	or	r4,r2,r4
  800f50:	0007883a 	mov	r3,zero
  800f54:	4984703a 	and	r2,r9,r6
  800f58:	208cb03a 	or	r6,r4,r2
  800f5c:	28ceb03a 	or	r7,r5,r3
  800f60:	42000044 	addi	r8,r8,1
  800f64:	a027883a 	mov	r19,r20
  800f68:	a1c00415 	stw	r7,16(r20)
  800f6c:	a2000215 	stw	r8,8(r20)
  800f70:	a1800315 	stw	r6,12(r20)
  800f74:	003fce06 	br	800eb0 <_fpadd_parts+0x1c8>
  800f78:	8bc5c83a 	sub	r2,r17,r15
  800f7c:	8889803a 	cmpltu	r4,r17,r2
  800f80:	9407c83a 	sub	r3,r18,r16
  800f84:	1909c83a 	sub	r4,r3,r4
  800f88:	100d883a 	mov	r6,r2
  800f8c:	200f883a 	mov	r7,r4
  800f90:	003f9906 	br	800df8 <_fpadd_parts+0x110>
  800f94:	7c45883a 	add	r2,r15,r17
  800f98:	13c9803a 	cmpltu	r4,r2,r15
  800f9c:	8487883a 	add	r3,r16,r18
  800fa0:	20c9883a 	add	r4,r4,r3
  800fa4:	a1400115 	stw	r5,4(r20)
  800fa8:	a5c00215 	stw	r23,8(r20)
  800fac:	a0800315 	stw	r2,12(r20)
  800fb0:	a1000415 	stw	r4,16(r20)
  800fb4:	003fb606 	br	800e90 <_fpadd_parts+0x1a8>
  800fb8:	001f883a 	mov	r15,zero
  800fbc:	0021883a 	mov	r16,zero
  800fc0:	003f8306 	br	800dd0 <_fpadd_parts+0xe8>
  800fc4:	018dc83a 	sub	r6,zero,r6
  800fc8:	003f6706 	br	800d68 <_fpadd_parts+0x80>
  800fcc:	00bfff84 	movi	r2,-2
  800fd0:	117faf36 	bltu	r2,r5,800e90 <_fpadd_parts+0x1a8>
  800fd4:	003f9806 	br	800e38 <_fpadd_parts+0x150>
  800fd8:	0005883a 	mov	r2,zero
  800fdc:	1189c83a 	sub	r4,r2,r6
  800fe0:	1105803a 	cmpltu	r2,r2,r4
  800fe4:	01cbc83a 	sub	r5,zero,r7
  800fe8:	2885c83a 	sub	r2,r5,r2
  800fec:	01800044 	movi	r6,1
  800ff0:	a1800115 	stw	r6,4(r20)
  800ff4:	a5c00215 	stw	r23,8(r20)
  800ff8:	a1000315 	stw	r4,12(r20)
  800ffc:	a0800415 	stw	r2,16(r20)
  801000:	003f8206 	br	800e0c <_fpadd_parts+0x124>
  801004:	203f7226 	beq	r4,zero,800dd0 <_fpadd_parts+0xe8>
  801008:	35bff804 	addi	r22,r6,-32
  80100c:	b9af883a 	add	r23,r23,r6
  801010:	b0003116 	blt	r22,zero,8010d8 <_fpadd_parts+0x3f0>
  801014:	959ad83a 	srl	r13,r18,r22
  801018:	001d883a 	mov	r14,zero
  80101c:	000f883a 	mov	r7,zero
  801020:	01000044 	movi	r4,1
  801024:	0011883a 	mov	r8,zero
  801028:	b0002516 	blt	r22,zero,8010c0 <_fpadd_parts+0x3d8>
  80102c:	2594983a 	sll	r10,r4,r22
  801030:	0013883a 	mov	r9,zero
  801034:	00bfffc4 	movi	r2,-1
  801038:	4889883a 	add	r4,r9,r2
  80103c:	508b883a 	add	r5,r10,r2
  801040:	224d803a 	cmpltu	r6,r4,r9
  801044:	314b883a 	add	r5,r6,r5
  801048:	8904703a 	and	r2,r17,r4
  80104c:	9146703a 	and	r3,r18,r5
  801050:	10c4b03a 	or	r2,r2,r3
  801054:	10000226 	beq	r2,zero,801060 <_fpadd_parts+0x378>
  801058:	01c00044 	movi	r7,1
  80105c:	0011883a 	mov	r8,zero
  801060:	69e2b03a 	or	r17,r13,r7
  801064:	7224b03a 	or	r18,r14,r8
  801068:	003f5906 	br	800dd0 <_fpadd_parts+0xe8>
  80106c:	8407883a 	add	r3,r16,r16
  801070:	008007c4 	movi	r2,31
  801074:	1185c83a 	sub	r2,r2,r6
  801078:	1886983a 	sll	r3,r3,r2
  80107c:	7996d83a 	srl	r11,r15,r6
  801080:	8198d83a 	srl	r12,r16,r6
  801084:	1ad6b03a 	or	r11,r3,r11
  801088:	003f3e06 	br	800d84 <_fpadd_parts+0x9c>
  80108c:	2006d07a 	srli	r3,r4,1
  801090:	008007c4 	movi	r2,31
  801094:	1185c83a 	sub	r2,r2,r6
  801098:	1890d83a 	srl	r8,r3,r2
  80109c:	218e983a 	sll	r7,r4,r6
  8010a0:	003f3e06 	br	800d9c <_fpadd_parts+0xb4>
  8010a4:	113f821e 	bne	r2,r4,800eb0 <_fpadd_parts+0x1c8>
  8010a8:	28c00117 	ldw	r3,4(r5)
  8010ac:	98800117 	ldw	r2,4(r19)
  8010b0:	10ff7f26 	beq	r2,r3,800eb0 <_fpadd_parts+0x1c8>
  8010b4:	04c02074 	movhi	r19,129
  8010b8:	9ce7e504 	addi	r19,r19,-24684
  8010bc:	003f7c06 	br	800eb0 <_fpadd_parts+0x1c8>
  8010c0:	2006d07a 	srli	r3,r4,1
  8010c4:	008007c4 	movi	r2,31
  8010c8:	1185c83a 	sub	r2,r2,r6
  8010cc:	1894d83a 	srl	r10,r3,r2
  8010d0:	2192983a 	sll	r9,r4,r6
  8010d4:	003fd706 	br	801034 <_fpadd_parts+0x34c>
  8010d8:	9487883a 	add	r3,r18,r18
  8010dc:	008007c4 	movi	r2,31
  8010e0:	1185c83a 	sub	r2,r2,r6
  8010e4:	1886983a 	sll	r3,r3,r2
  8010e8:	899ad83a 	srl	r13,r17,r6
  8010ec:	919cd83a 	srl	r14,r18,r6
  8010f0:	1b5ab03a 	or	r13,r3,r13
  8010f4:	003fc906 	br	80101c <_fpadd_parts+0x334>

008010f8 <__subdf3>:
  8010f8:	deffea04 	addi	sp,sp,-88
  8010fc:	dcc01415 	stw	r19,80(sp)
  801100:	dcc00404 	addi	r19,sp,16
  801104:	2011883a 	mov	r8,r4
  801108:	2813883a 	mov	r9,r5
  80110c:	dc401315 	stw	r17,76(sp)
  801110:	d809883a 	mov	r4,sp
  801114:	980b883a 	mov	r5,r19
  801118:	dc400904 	addi	r17,sp,36
  80111c:	dfc01515 	stw	ra,84(sp)
  801120:	da400115 	stw	r9,4(sp)
  801124:	d9c00315 	stw	r7,12(sp)
  801128:	da000015 	stw	r8,0(sp)
  80112c:	d9800215 	stw	r6,8(sp)
  801130:	0801c640 	call	801c64 <__unpack_d>
  801134:	d9000204 	addi	r4,sp,8
  801138:	880b883a 	mov	r5,r17
  80113c:	0801c640 	call	801c64 <__unpack_d>
  801140:	d8800a17 	ldw	r2,40(sp)
  801144:	880b883a 	mov	r5,r17
  801148:	9809883a 	mov	r4,r19
  80114c:	d9800e04 	addi	r6,sp,56
  801150:	1080005c 	xori	r2,r2,1
  801154:	d8800a15 	stw	r2,40(sp)
  801158:	0800ce80 	call	800ce8 <_fpadd_parts>
  80115c:	1009883a 	mov	r4,r2
  801160:	08019500 	call	801950 <__pack_d>
  801164:	dfc01517 	ldw	ra,84(sp)
  801168:	dcc01417 	ldw	r19,80(sp)
  80116c:	dc401317 	ldw	r17,76(sp)
  801170:	dec01604 	addi	sp,sp,88
  801174:	f800283a 	ret

00801178 <__adddf3>:
  801178:	deffea04 	addi	sp,sp,-88
  80117c:	dcc01415 	stw	r19,80(sp)
  801180:	dcc00404 	addi	r19,sp,16
  801184:	2011883a 	mov	r8,r4
  801188:	2813883a 	mov	r9,r5
  80118c:	dc401315 	stw	r17,76(sp)
  801190:	d809883a 	mov	r4,sp
  801194:	980b883a 	mov	r5,r19
  801198:	dc400904 	addi	r17,sp,36
  80119c:	dfc01515 	stw	ra,84(sp)
  8011a0:	da400115 	stw	r9,4(sp)
  8011a4:	d9c00315 	stw	r7,12(sp)
  8011a8:	da000015 	stw	r8,0(sp)
  8011ac:	d9800215 	stw	r6,8(sp)
  8011b0:	0801c640 	call	801c64 <__unpack_d>
  8011b4:	d9000204 	addi	r4,sp,8
  8011b8:	880b883a 	mov	r5,r17
  8011bc:	0801c640 	call	801c64 <__unpack_d>
  8011c0:	d9800e04 	addi	r6,sp,56
  8011c4:	9809883a 	mov	r4,r19
  8011c8:	880b883a 	mov	r5,r17
  8011cc:	0800ce80 	call	800ce8 <_fpadd_parts>
  8011d0:	1009883a 	mov	r4,r2
  8011d4:	08019500 	call	801950 <__pack_d>
  8011d8:	dfc01517 	ldw	ra,84(sp)
  8011dc:	dcc01417 	ldw	r19,80(sp)
  8011e0:	dc401317 	ldw	r17,76(sp)
  8011e4:	dec01604 	addi	sp,sp,88
  8011e8:	f800283a 	ret

008011ec <__divdf3>:
  8011ec:	deffed04 	addi	sp,sp,-76
  8011f0:	dcc01115 	stw	r19,68(sp)
  8011f4:	dcc00404 	addi	r19,sp,16
  8011f8:	2011883a 	mov	r8,r4
  8011fc:	2813883a 	mov	r9,r5
  801200:	dc000e15 	stw	r16,56(sp)
  801204:	d809883a 	mov	r4,sp
  801208:	980b883a 	mov	r5,r19
  80120c:	dc000904 	addi	r16,sp,36
  801210:	dfc01215 	stw	ra,72(sp)
  801214:	da400115 	stw	r9,4(sp)
  801218:	d9c00315 	stw	r7,12(sp)
  80121c:	da000015 	stw	r8,0(sp)
  801220:	d9800215 	stw	r6,8(sp)
  801224:	dc801015 	stw	r18,64(sp)
  801228:	dc400f15 	stw	r17,60(sp)
  80122c:	0801c640 	call	801c64 <__unpack_d>
  801230:	d9000204 	addi	r4,sp,8
  801234:	800b883a 	mov	r5,r16
  801238:	0801c640 	call	801c64 <__unpack_d>
  80123c:	d9000417 	ldw	r4,16(sp)
  801240:	00800044 	movi	r2,1
  801244:	11000b2e 	bgeu	r2,r4,801274 <__divdf3+0x88>
  801248:	d9400917 	ldw	r5,36(sp)
  80124c:	1140762e 	bgeu	r2,r5,801428 <__divdf3+0x23c>
  801250:	d8800517 	ldw	r2,20(sp)
  801254:	d8c00a17 	ldw	r3,40(sp)
  801258:	01800104 	movi	r6,4
  80125c:	10c4f03a 	xor	r2,r2,r3
  801260:	d8800515 	stw	r2,20(sp)
  801264:	21800226 	beq	r4,r6,801270 <__divdf3+0x84>
  801268:	00800084 	movi	r2,2
  80126c:	2080141e 	bne	r4,r2,8012c0 <__divdf3+0xd4>
  801270:	29000926 	beq	r5,r4,801298 <__divdf3+0xac>
  801274:	9809883a 	mov	r4,r19
  801278:	08019500 	call	801950 <__pack_d>
  80127c:	dfc01217 	ldw	ra,72(sp)
  801280:	dcc01117 	ldw	r19,68(sp)
  801284:	dc801017 	ldw	r18,64(sp)
  801288:	dc400f17 	ldw	r17,60(sp)
  80128c:	dc000e17 	ldw	r16,56(sp)
  801290:	dec01304 	addi	sp,sp,76
  801294:	f800283a 	ret
  801298:	01002074 	movhi	r4,129
  80129c:	2127e504 	addi	r4,r4,-24684
  8012a0:	08019500 	call	801950 <__pack_d>
  8012a4:	dfc01217 	ldw	ra,72(sp)
  8012a8:	dcc01117 	ldw	r19,68(sp)
  8012ac:	dc801017 	ldw	r18,64(sp)
  8012b0:	dc400f17 	ldw	r17,60(sp)
  8012b4:	dc000e17 	ldw	r16,56(sp)
  8012b8:	dec01304 	addi	sp,sp,76
  8012bc:	f800283a 	ret
  8012c0:	29805b26 	beq	r5,r6,801430 <__divdf3+0x244>
  8012c4:	28802d26 	beq	r5,r2,80137c <__divdf3+0x190>
  8012c8:	d8c00617 	ldw	r3,24(sp)
  8012cc:	d8800b17 	ldw	r2,44(sp)
  8012d0:	d9c00817 	ldw	r7,32(sp)
  8012d4:	dc400d17 	ldw	r17,52(sp)
  8012d8:	188bc83a 	sub	r5,r3,r2
  8012dc:	d9800717 	ldw	r6,28(sp)
  8012e0:	dc000c17 	ldw	r16,48(sp)
  8012e4:	d9400615 	stw	r5,24(sp)
  8012e8:	3c403836 	bltu	r7,r17,8013cc <__divdf3+0x1e0>
  8012ec:	89c03626 	beq	r17,r7,8013c8 <__divdf3+0x1dc>
  8012f0:	0015883a 	mov	r10,zero
  8012f4:	001d883a 	mov	r14,zero
  8012f8:	02c40034 	movhi	r11,4096
  8012fc:	001f883a 	mov	r15,zero
  801300:	003f883a 	mov	ra,zero
  801304:	04800f44 	movi	r18,61
  801308:	00000f06 	br	801348 <__divdf3+0x15c>
  80130c:	601d883a 	mov	r14,r12
  801310:	681f883a 	mov	r15,r13
  801314:	400d883a 	mov	r6,r8
  801318:	100f883a 	mov	r7,r2
  80131c:	3191883a 	add	r8,r6,r6
  801320:	5808d07a 	srli	r4,r11,1
  801324:	4185803a 	cmpltu	r2,r8,r6
  801328:	39d3883a 	add	r9,r7,r7
  80132c:	28c6b03a 	or	r3,r5,r3
  801330:	1245883a 	add	r2,r2,r9
  801334:	1815883a 	mov	r10,r3
  801338:	2017883a 	mov	r11,r4
  80133c:	400d883a 	mov	r6,r8
  801340:	100f883a 	mov	r7,r2
  801344:	fc801726 	beq	ra,r18,8013a4 <__divdf3+0x1b8>
  801348:	580a97fa 	slli	r5,r11,31
  80134c:	5006d07a 	srli	r3,r10,1
  801350:	ffc00044 	addi	ra,ra,1
  801354:	3c7ff136 	bltu	r7,r17,80131c <__divdf3+0x130>
  801358:	3411c83a 	sub	r8,r6,r16
  80135c:	3205803a 	cmpltu	r2,r6,r8
  801360:	3c53c83a 	sub	r9,r7,r17
  801364:	7298b03a 	or	r12,r14,r10
  801368:	7adab03a 	or	r13,r15,r11
  80136c:	4885c83a 	sub	r2,r9,r2
  801370:	89ffe61e 	bne	r17,r7,80130c <__divdf3+0x120>
  801374:	343fe936 	bltu	r6,r16,80131c <__divdf3+0x130>
  801378:	003fe406 	br	80130c <__divdf3+0x120>
  80137c:	9809883a 	mov	r4,r19
  801380:	d9800415 	stw	r6,16(sp)
  801384:	08019500 	call	801950 <__pack_d>
  801388:	dfc01217 	ldw	ra,72(sp)
  80138c:	dcc01117 	ldw	r19,68(sp)
  801390:	dc801017 	ldw	r18,64(sp)
  801394:	dc400f17 	ldw	r17,60(sp)
  801398:	dc000e17 	ldw	r16,56(sp)
  80139c:	dec01304 	addi	sp,sp,76
  8013a0:	f800283a 	ret
  8013a4:	00803fc4 	movi	r2,255
  8013a8:	7090703a 	and	r8,r14,r2
  8013ac:	00802004 	movi	r2,128
  8013b0:	0007883a 	mov	r3,zero
  8013b4:	0013883a 	mov	r9,zero
  8013b8:	40800d26 	beq	r8,r2,8013f0 <__divdf3+0x204>
  8013bc:	dbc00815 	stw	r15,32(sp)
  8013c0:	db800715 	stw	r14,28(sp)
  8013c4:	003fab06 	br	801274 <__divdf3+0x88>
  8013c8:	343fc92e 	bgeu	r6,r16,8012f0 <__divdf3+0x104>
  8013cc:	3185883a 	add	r2,r6,r6
  8013d0:	1189803a 	cmpltu	r4,r2,r6
  8013d4:	39c7883a 	add	r3,r7,r7
  8013d8:	20c9883a 	add	r4,r4,r3
  8013dc:	297fffc4 	addi	r5,r5,-1
  8013e0:	100d883a 	mov	r6,r2
  8013e4:	200f883a 	mov	r7,r4
  8013e8:	d9400615 	stw	r5,24(sp)
  8013ec:	003fc006 	br	8012f0 <__divdf3+0x104>
  8013f0:	483ff21e 	bne	r9,zero,8013bc <__divdf3+0x1d0>
  8013f4:	01004004 	movi	r4,256
  8013f8:	7104703a 	and	r2,r14,r4
  8013fc:	10c4b03a 	or	r2,r2,r3
  801400:	103fee1e 	bne	r2,zero,8013bc <__divdf3+0x1d0>
  801404:	31c4b03a 	or	r2,r6,r7
  801408:	103fec26 	beq	r2,zero,8013bc <__divdf3+0x1d0>
  80140c:	7205883a 	add	r2,r14,r8
  801410:	1391803a 	cmpltu	r8,r2,r14
  801414:	43d1883a 	add	r8,r8,r15
  801418:	013fc004 	movi	r4,-256
  80141c:	111c703a 	and	r14,r2,r4
  801420:	401f883a 	mov	r15,r8
  801424:	003fe506 	br	8013bc <__divdf3+0x1d0>
  801428:	8009883a 	mov	r4,r16
  80142c:	003f9206 	br	801278 <__divdf3+0x8c>
  801430:	9809883a 	mov	r4,r19
  801434:	d8000715 	stw	zero,28(sp)
  801438:	d8000815 	stw	zero,32(sp)
  80143c:	d8000615 	stw	zero,24(sp)
  801440:	003f8d06 	br	801278 <__divdf3+0x8c>

00801444 <__make_dp>:
  801444:	defff904 	addi	sp,sp,-28
  801448:	d8c00717 	ldw	r3,28(sp)
  80144c:	d9000015 	stw	r4,0(sp)
  801450:	d809883a 	mov	r4,sp
  801454:	dfc00515 	stw	ra,20(sp)
  801458:	d9c00615 	stw	r7,24(sp)
  80145c:	d9400115 	stw	r5,4(sp)
  801460:	d9800215 	stw	r6,8(sp)
  801464:	d8c00415 	stw	r3,16(sp)
  801468:	d9c00315 	stw	r7,12(sp)
  80146c:	08019500 	call	801950 <__pack_d>
  801470:	dfc00517 	ldw	ra,20(sp)
  801474:	dec00704 	addi	sp,sp,28
  801478:	f800283a 	ret

0080147c <__floatunsidf>:
  80147c:	defff204 	addi	sp,sp,-56
  801480:	dfc00d15 	stw	ra,52(sp)
  801484:	ddc00c15 	stw	r23,48(sp)
  801488:	dd800b15 	stw	r22,44(sp)
  80148c:	dd400a15 	stw	r21,40(sp)
  801490:	dd000915 	stw	r20,36(sp)
  801494:	dcc00815 	stw	r19,32(sp)
  801498:	dc800715 	stw	r18,28(sp)
  80149c:	dc400615 	stw	r17,24(sp)
  8014a0:	dc000515 	stw	r16,20(sp)
  8014a4:	d8000115 	stw	zero,4(sp)
  8014a8:	20000f1e 	bne	r4,zero,8014e8 <__floatunsidf+0x6c>
  8014ac:	00800084 	movi	r2,2
  8014b0:	d8800015 	stw	r2,0(sp)
  8014b4:	d809883a 	mov	r4,sp
  8014b8:	08019500 	call	801950 <__pack_d>
  8014bc:	dfc00d17 	ldw	ra,52(sp)
  8014c0:	ddc00c17 	ldw	r23,48(sp)
  8014c4:	dd800b17 	ldw	r22,44(sp)
  8014c8:	dd400a17 	ldw	r21,40(sp)
  8014cc:	dd000917 	ldw	r20,36(sp)
  8014d0:	dcc00817 	ldw	r19,32(sp)
  8014d4:	dc800717 	ldw	r18,28(sp)
  8014d8:	dc400617 	ldw	r17,24(sp)
  8014dc:	dc000517 	ldw	r16,20(sp)
  8014e0:	dec00e04 	addi	sp,sp,56
  8014e4:	f800283a 	ret
  8014e8:	008000c4 	movi	r2,3
  8014ec:	00c00f04 	movi	r3,60
  8014f0:	002f883a 	mov	r23,zero
  8014f4:	202d883a 	mov	r22,r4
  8014f8:	d8800015 	stw	r2,0(sp)
  8014fc:	d8c00215 	stw	r3,8(sp)
  801500:	d9000315 	stw	r4,12(sp)
  801504:	ddc00415 	stw	r23,16(sp)
  801508:	08016a80 	call	8016a8 <__clzsi2>
  80150c:	12400744 	addi	r9,r2,29
  801510:	48000b16 	blt	r9,zero,801540 <__floatunsidf+0xc4>
  801514:	483fe726 	beq	r9,zero,8014b4 <__floatunsidf+0x38>
  801518:	10bfff44 	addi	r2,r2,-3
  80151c:	10002e16 	blt	r2,zero,8015d8 <__floatunsidf+0x15c>
  801520:	b0a2983a 	sll	r17,r22,r2
  801524:	0021883a 	mov	r16,zero
  801528:	d8800217 	ldw	r2,8(sp)
  80152c:	dc400415 	stw	r17,16(sp)
  801530:	dc000315 	stw	r16,12(sp)
  801534:	1245c83a 	sub	r2,r2,r9
  801538:	d8800215 	stw	r2,8(sp)
  80153c:	003fdd06 	br	8014b4 <__floatunsidf+0x38>
  801540:	0255c83a 	sub	r10,zero,r9
  801544:	51bff804 	addi	r6,r10,-32
  801548:	30001b16 	blt	r6,zero,8015b8 <__floatunsidf+0x13c>
  80154c:	b9a8d83a 	srl	r20,r23,r6
  801550:	002b883a 	mov	r21,zero
  801554:	000f883a 	mov	r7,zero
  801558:	01000044 	movi	r4,1
  80155c:	0011883a 	mov	r8,zero
  801560:	30002516 	blt	r6,zero,8015f8 <__floatunsidf+0x17c>
  801564:	21a6983a 	sll	r19,r4,r6
  801568:	0025883a 	mov	r18,zero
  80156c:	00bfffc4 	movi	r2,-1
  801570:	9089883a 	add	r4,r18,r2
  801574:	988b883a 	add	r5,r19,r2
  801578:	248d803a 	cmpltu	r6,r4,r18
  80157c:	314b883a 	add	r5,r6,r5
  801580:	b104703a 	and	r2,r22,r4
  801584:	b946703a 	and	r3,r23,r5
  801588:	10c4b03a 	or	r2,r2,r3
  80158c:	10000226 	beq	r2,zero,801598 <__floatunsidf+0x11c>
  801590:	01c00044 	movi	r7,1
  801594:	0011883a 	mov	r8,zero
  801598:	d9000217 	ldw	r4,8(sp)
  80159c:	a1c4b03a 	or	r2,r20,r7
  8015a0:	aa06b03a 	or	r3,r21,r8
  8015a4:	2249c83a 	sub	r4,r4,r9
  8015a8:	d8c00415 	stw	r3,16(sp)
  8015ac:	d9000215 	stw	r4,8(sp)
  8015b0:	d8800315 	stw	r2,12(sp)
  8015b4:	003fbf06 	br	8014b4 <__floatunsidf+0x38>
  8015b8:	bdc7883a 	add	r3,r23,r23
  8015bc:	008007c4 	movi	r2,31
  8015c0:	1285c83a 	sub	r2,r2,r10
  8015c4:	1886983a 	sll	r3,r3,r2
  8015c8:	b2a8d83a 	srl	r20,r22,r10
  8015cc:	baaad83a 	srl	r21,r23,r10
  8015d0:	1d28b03a 	or	r20,r3,r20
  8015d4:	003fdf06 	br	801554 <__floatunsidf+0xd8>
  8015d8:	b006d07a 	srli	r3,r22,1
  8015dc:	008007c4 	movi	r2,31
  8015e0:	1245c83a 	sub	r2,r2,r9
  8015e4:	1886d83a 	srl	r3,r3,r2
  8015e8:	ba62983a 	sll	r17,r23,r9
  8015ec:	b260983a 	sll	r16,r22,r9
  8015f0:	1c62b03a 	or	r17,r3,r17
  8015f4:	003fcc06 	br	801528 <__floatunsidf+0xac>
  8015f8:	2006d07a 	srli	r3,r4,1
  8015fc:	008007c4 	movi	r2,31
  801600:	1285c83a 	sub	r2,r2,r10
  801604:	18a6d83a 	srl	r19,r3,r2
  801608:	22a4983a 	sll	r18,r4,r10
  80160c:	003fd706 	br	80156c <__floatunsidf+0xf0>

00801610 <__muldi3>:
  801610:	2011883a 	mov	r8,r4
  801614:	427fffcc 	andi	r9,r8,65535
  801618:	4018d43a 	srli	r12,r8,16
  80161c:	32bfffcc 	andi	r10,r6,65535
  801620:	3016d43a 	srli	r11,r6,16
  801624:	4a85383a 	mul	r2,r9,r10
  801628:	6295383a 	mul	r10,r12,r10
  80162c:	4ad3383a 	mul	r9,r9,r11
  801630:	113fffcc 	andi	r4,r2,65535
  801634:	1004d43a 	srli	r2,r2,16
  801638:	4a93883a 	add	r9,r9,r10
  80163c:	3807883a 	mov	r3,r7
  801640:	1245883a 	add	r2,r2,r9
  801644:	280f883a 	mov	r7,r5
  801648:	180b883a 	mov	r5,r3
  80164c:	1006943a 	slli	r3,r2,16
  801650:	defffd04 	addi	sp,sp,-12
  801654:	dc800215 	stw	r18,8(sp)
  801658:	1907883a 	add	r3,r3,r4
  80165c:	dc400115 	stw	r17,4(sp)
  801660:	dc000015 	stw	r16,0(sp)
  801664:	4165383a 	mul	r18,r8,r5
  801668:	31e3383a 	mul	r17,r6,r7
  80166c:	1012d43a 	srli	r9,r2,16
  801670:	62d9383a 	mul	r12,r12,r11
  801674:	181f883a 	mov	r15,r3
  801678:	1280022e 	bgeu	r2,r10,801684 <__muldi3+0x74>
  80167c:	00800074 	movhi	r2,1
  801680:	6099883a 	add	r12,r12,r2
  801684:	624d883a 	add	r6,r12,r9
  801688:	9187883a 	add	r3,r18,r6
  80168c:	88c7883a 	add	r3,r17,r3
  801690:	7805883a 	mov	r2,r15
  801694:	dc800217 	ldw	r18,8(sp)
  801698:	dc400117 	ldw	r17,4(sp)
  80169c:	dc000017 	ldw	r16,0(sp)
  8016a0:	dec00304 	addi	sp,sp,12
  8016a4:	f800283a 	ret

008016a8 <__clzsi2>:
  8016a8:	00bfffd4 	movui	r2,65535
  8016ac:	11000e36 	bltu	r2,r4,8016e8 <__clzsi2+0x40>
  8016b0:	00803fc4 	movi	r2,255
  8016b4:	01400204 	movi	r5,8
  8016b8:	0007883a 	mov	r3,zero
  8016bc:	11001036 	bltu	r2,r4,801700 <__clzsi2+0x58>
  8016c0:	000b883a 	mov	r5,zero
  8016c4:	20c6d83a 	srl	r3,r4,r3
  8016c8:	00802074 	movhi	r2,129
  8016cc:	10a7ea04 	addi	r2,r2,-24664
  8016d0:	1887883a 	add	r3,r3,r2
  8016d4:	18800003 	ldbu	r2,0(r3)
  8016d8:	00c00804 	movi	r3,32
  8016dc:	2885883a 	add	r2,r5,r2
  8016e0:	1885c83a 	sub	r2,r3,r2
  8016e4:	f800283a 	ret
  8016e8:	01400404 	movi	r5,16
  8016ec:	00804034 	movhi	r2,256
  8016f0:	10bfffc4 	addi	r2,r2,-1
  8016f4:	2807883a 	mov	r3,r5
  8016f8:	113ff22e 	bgeu	r2,r4,8016c4 <__clzsi2+0x1c>
  8016fc:	01400604 	movi	r5,24
  801700:	2807883a 	mov	r3,r5
  801704:	20c6d83a 	srl	r3,r4,r3
  801708:	00802074 	movhi	r2,129
  80170c:	10a7ea04 	addi	r2,r2,-24664
  801710:	1887883a 	add	r3,r3,r2
  801714:	18800003 	ldbu	r2,0(r3)
  801718:	00c00804 	movi	r3,32
  80171c:	2885883a 	add	r2,r5,r2
  801720:	1885c83a 	sub	r2,r3,r2
  801724:	f800283a 	ret

00801728 <__pack_f>:
  801728:	20c00017 	ldw	r3,0(r4)
  80172c:	01c00044 	movi	r7,1
  801730:	21800317 	ldw	r6,12(r4)
  801734:	21400117 	ldw	r5,4(r4)
  801738:	38c02d2e 	bgeu	r7,r3,8017f0 <__pack_f+0xc8>
  80173c:	00800104 	movi	r2,4
  801740:	18802826 	beq	r3,r2,8017e4 <__pack_f+0xbc>
  801744:	00800084 	movi	r2,2
  801748:	18800126 	beq	r3,r2,801750 <__pack_f+0x28>
  80174c:	3000101e 	bne	r6,zero,801790 <__pack_f+0x68>
  801750:	000d883a 	mov	r6,zero
  801754:	0007883a 	mov	r3,zero
  801758:	19003fcc 	andi	r4,r3,255
  80175c:	200895fa 	slli	r4,r4,23
  801760:	00c02034 	movhi	r3,128
  801764:	18ffffc4 	addi	r3,r3,-1
  801768:	30c6703a 	and	r3,r6,r3
  80176c:	10a0002c 	andhi	r2,r2,32768
  801770:	10c4b03a 	or	r2,r2,r3
  801774:	280a97fa 	slli	r5,r5,31
  801778:	1104b03a 	or	r2,r2,r4
  80177c:	00e00034 	movhi	r3,32768
  801780:	18ffffc4 	addi	r3,r3,-1
  801784:	10c4703a 	and	r2,r2,r3
  801788:	1144b03a 	or	r2,r2,r5
  80178c:	f800283a 	ret
  801790:	21000217 	ldw	r4,8(r4)
  801794:	00bfe084 	movi	r2,-126
  801798:	20801b16 	blt	r4,r2,801808 <__pack_f+0xe0>
  80179c:	00801fc4 	movi	r2,127
  8017a0:	11001016 	blt	r2,r4,8017e4 <__pack_f+0xbc>
  8017a4:	308e703a 	and	r7,r6,r2
  8017a8:	2087883a 	add	r3,r4,r2
  8017ac:	00801004 	movi	r2,64
  8017b0:	38800526 	beq	r7,r2,8017c8 <__pack_f+0xa0>
  8017b4:	31800fc4 	addi	r6,r6,63
  8017b8:	30000716 	blt	r6,zero,8017d8 <__pack_f+0xb0>
  8017bc:	300490ba 	slli	r2,r6,2
  8017c0:	100cd27a 	srli	r6,r2,9
  8017c4:	003fe406 	br	801758 <__pack_f+0x30>
  8017c8:	3080200c 	andi	r2,r6,128
  8017cc:	103ffa26 	beq	r2,zero,8017b8 <__pack_f+0x90>
  8017d0:	31cd883a 	add	r6,r6,r7
  8017d4:	003ff806 	br	8017b8 <__pack_f+0x90>
  8017d8:	300cd07a 	srli	r6,r6,1
  8017dc:	18c00044 	addi	r3,r3,1
  8017e0:	003ff606 	br	8017bc <__pack_f+0x94>
  8017e4:	000d883a 	mov	r6,zero
  8017e8:	00ffffc4 	movi	r3,-1
  8017ec:	003fda06 	br	801758 <__pack_f+0x30>
  8017f0:	31800434 	orhi	r6,r6,16
  8017f4:	00802034 	movhi	r2,128
  8017f8:	10bfffc4 	addi	r2,r2,-1
  8017fc:	308c703a 	and	r6,r6,r2
  801800:	00ffffc4 	movi	r3,-1
  801804:	003fd406 	br	801758 <__pack_f+0x30>
  801808:	1109c83a 	sub	r4,r2,r4
  80180c:	00800644 	movi	r2,25
  801810:	11001216 	blt	r2,r4,80185c <__pack_f+0x134>
  801814:	3904983a 	sll	r2,r7,r4
  801818:	3106d83a 	srl	r3,r6,r4
  80181c:	10bfffc4 	addi	r2,r2,-1
  801820:	3084703a 	and	r2,r6,r2
  801824:	1004c03a 	cmpne	r2,r2,zero
  801828:	1886b03a 	or	r3,r3,r2
  80182c:	19001fcc 	andi	r4,r3,127
  801830:	00801004 	movi	r2,64
  801834:	20800c26 	beq	r4,r2,801868 <__pack_f+0x140>
  801838:	18c00fc4 	addi	r3,r3,63
  80183c:	00900034 	movhi	r2,16384
  801840:	10bfffc4 	addi	r2,r2,-1
  801844:	180cd1fa 	srli	r6,r3,7
  801848:	10c7803a 	cmpltu	r3,r2,r3
  80184c:	00802034 	movhi	r2,128
  801850:	10bfffc4 	addi	r2,r2,-1
  801854:	308c703a 	and	r6,r6,r2
  801858:	003fbf06 	br	801758 <__pack_f+0x30>
  80185c:	0007883a 	mov	r3,zero
  801860:	000d883a 	mov	r6,zero
  801864:	003ff906 	br	80184c <__pack_f+0x124>
  801868:	1880200c 	andi	r2,r3,128
  80186c:	10000126 	beq	r2,zero,801874 <__pack_f+0x14c>
  801870:	1907883a 	add	r3,r3,r4
  801874:	180cd1fa 	srli	r6,r3,7
  801878:	00900034 	movhi	r2,16384
  80187c:	10bfffc4 	addi	r2,r2,-1
  801880:	10c7803a 	cmpltu	r3,r2,r3
  801884:	003ff106 	br	80184c <__pack_f+0x124>

00801888 <__unpack_f>:
  801888:	21800017 	ldw	r6,0(r4)
  80188c:	00c02034 	movhi	r3,128
  801890:	18ffffc4 	addi	r3,r3,-1
  801894:	3004d5fa 	srli	r2,r6,23
  801898:	3008d7fa 	srli	r4,r6,31
  80189c:	30ce703a 	and	r7,r6,r3
  8018a0:	10c03fcc 	andi	r3,r2,255
  8018a4:	29000115 	stw	r4,4(r5)
  8018a8:	1800131e 	bne	r3,zero,8018f8 <__unpack_f+0x70>
  8018ac:	38000f26 	beq	r7,zero,8018ec <__unpack_f+0x64>
  8018b0:	380691fa 	slli	r3,r7,7
  8018b4:	01bfe084 	movi	r6,-126
  8018b8:	008000c4 	movi	r2,3
  8018bc:	01100034 	movhi	r4,16384
  8018c0:	213fffc4 	addi	r4,r4,-1
  8018c4:	28800015 	stw	r2,0(r5)
  8018c8:	29800215 	stw	r6,8(r5)
  8018cc:	20c00536 	bltu	r4,r3,8018e4 <__unpack_f+0x5c>
  8018d0:	3005883a 	mov	r2,r6
  8018d4:	18c7883a 	add	r3,r3,r3
  8018d8:	10bfffc4 	addi	r2,r2,-1
  8018dc:	20fffd2e 	bgeu	r4,r3,8018d4 <__unpack_f+0x4c>
  8018e0:	28800215 	stw	r2,8(r5)
  8018e4:	28c00315 	stw	r3,12(r5)
  8018e8:	f800283a 	ret
  8018ec:	00800084 	movi	r2,2
  8018f0:	28800015 	stw	r2,0(r5)
  8018f4:	f800283a 	ret
  8018f8:	00803fc4 	movi	r2,255
  8018fc:	18800826 	beq	r3,r2,801920 <__unpack_f+0x98>
  801900:	380491fa 	slli	r2,r7,7
  801904:	18ffe044 	addi	r3,r3,-127
  801908:	28c00215 	stw	r3,8(r5)
  80190c:	10900034 	orhi	r2,r2,16384
  801910:	28800315 	stw	r2,12(r5)
  801914:	008000c4 	movi	r2,3
  801918:	28800015 	stw	r2,0(r5)
  80191c:	f800283a 	ret
  801920:	3800031e 	bne	r7,zero,801930 <__unpack_f+0xa8>
  801924:	00800104 	movi	r2,4
  801928:	28800015 	stw	r2,0(r5)
  80192c:	f800283a 	ret
  801930:	3080042c 	andhi	r2,r6,16
  801934:	10000426 	beq	r2,zero,801948 <__unpack_f+0xc0>
  801938:	00800044 	movi	r2,1
  80193c:	28800015 	stw	r2,0(r5)
  801940:	29c00315 	stw	r7,12(r5)
  801944:	f800283a 	ret
  801948:	28000015 	stw	zero,0(r5)
  80194c:	003ffc06 	br	801940 <__unpack_f+0xb8>

00801950 <__pack_d>:
  801950:	20c00017 	ldw	r3,0(r4)
  801954:	defffd04 	addi	sp,sp,-12
  801958:	dc000015 	stw	r16,0(sp)
  80195c:	dc800215 	stw	r18,8(sp)
  801960:	dc400115 	stw	r17,4(sp)
  801964:	00800044 	movi	r2,1
  801968:	22000317 	ldw	r8,12(r4)
  80196c:	001f883a 	mov	r15,zero
  801970:	22400417 	ldw	r9,16(r4)
  801974:	24000117 	ldw	r16,4(r4)
  801978:	10c0552e 	bgeu	r2,r3,801ad0 <__pack_d+0x180>
  80197c:	00800104 	movi	r2,4
  801980:	18804f26 	beq	r3,r2,801ac0 <__pack_d+0x170>
  801984:	00800084 	movi	r2,2
  801988:	18800226 	beq	r3,r2,801994 <__pack_d+0x44>
  80198c:	4244b03a 	or	r2,r8,r9
  801990:	10001a1e 	bne	r2,zero,8019fc <__pack_d+0xac>
  801994:	000d883a 	mov	r6,zero
  801998:	000f883a 	mov	r7,zero
  80199c:	0011883a 	mov	r8,zero
  8019a0:	00800434 	movhi	r2,16
  8019a4:	10bfffc4 	addi	r2,r2,-1
  8019a8:	301d883a 	mov	r14,r6
  8019ac:	3884703a 	and	r2,r7,r2
  8019b0:	400a953a 	slli	r5,r8,20
  8019b4:	79bffc2c 	andhi	r6,r15,65520
  8019b8:	308cb03a 	or	r6,r6,r2
  8019bc:	00e00434 	movhi	r3,32784
  8019c0:	18ffffc4 	addi	r3,r3,-1
  8019c4:	800497fa 	slli	r2,r16,31
  8019c8:	30c6703a 	and	r3,r6,r3
  8019cc:	1946b03a 	or	r3,r3,r5
  8019d0:	01600034 	movhi	r5,32768
  8019d4:	297fffc4 	addi	r5,r5,-1
  8019d8:	194a703a 	and	r5,r3,r5
  8019dc:	288ab03a 	or	r5,r5,r2
  8019e0:	2807883a 	mov	r3,r5
  8019e4:	7005883a 	mov	r2,r14
  8019e8:	dc800217 	ldw	r18,8(sp)
  8019ec:	dc400117 	ldw	r17,4(sp)
  8019f0:	dc000017 	ldw	r16,0(sp)
  8019f4:	dec00304 	addi	sp,sp,12
  8019f8:	f800283a 	ret
  8019fc:	21000217 	ldw	r4,8(r4)
  801a00:	00bf0084 	movi	r2,-1022
  801a04:	20803f16 	blt	r4,r2,801b04 <__pack_d+0x1b4>
  801a08:	0080ffc4 	movi	r2,1023
  801a0c:	11002c16 	blt	r2,r4,801ac0 <__pack_d+0x170>
  801a10:	00803fc4 	movi	r2,255
  801a14:	408c703a 	and	r6,r8,r2
  801a18:	00802004 	movi	r2,128
  801a1c:	0007883a 	mov	r3,zero
  801a20:	000f883a 	mov	r7,zero
  801a24:	2280ffc4 	addi	r10,r4,1023
  801a28:	30801e26 	beq	r6,r2,801aa4 <__pack_d+0x154>
  801a2c:	00801fc4 	movi	r2,127
  801a30:	4089883a 	add	r4,r8,r2
  801a34:	220d803a 	cmpltu	r6,r4,r8
  801a38:	324d883a 	add	r6,r6,r9
  801a3c:	2011883a 	mov	r8,r4
  801a40:	3013883a 	mov	r9,r6
  801a44:	00880034 	movhi	r2,8192
  801a48:	10bfffc4 	addi	r2,r2,-1
  801a4c:	12400d36 	bltu	r2,r9,801a84 <__pack_d+0x134>
  801a50:	4804963a 	slli	r2,r9,24
  801a54:	400cd23a 	srli	r6,r8,8
  801a58:	480ed23a 	srli	r7,r9,8
  801a5c:	013fffc4 	movi	r4,-1
  801a60:	118cb03a 	or	r6,r2,r6
  801a64:	01400434 	movhi	r5,16
  801a68:	297fffc4 	addi	r5,r5,-1
  801a6c:	3104703a 	and	r2,r6,r4
  801a70:	3946703a 	and	r3,r7,r5
  801a74:	5201ffcc 	andi	r8,r10,2047
  801a78:	100d883a 	mov	r6,r2
  801a7c:	180f883a 	mov	r7,r3
  801a80:	003fc706 	br	8019a0 <__pack_d+0x50>
  801a84:	480897fa 	slli	r4,r9,31
  801a88:	4004d07a 	srli	r2,r8,1
  801a8c:	4806d07a 	srli	r3,r9,1
  801a90:	52800044 	addi	r10,r10,1
  801a94:	2084b03a 	or	r2,r4,r2
  801a98:	1011883a 	mov	r8,r2
  801a9c:	1813883a 	mov	r9,r3
  801aa0:	003feb06 	br	801a50 <__pack_d+0x100>
  801aa4:	383fe11e 	bne	r7,zero,801a2c <__pack_d+0xdc>
  801aa8:	01004004 	movi	r4,256
  801aac:	4104703a 	and	r2,r8,r4
  801ab0:	10c4b03a 	or	r2,r2,r3
  801ab4:	103fe326 	beq	r2,zero,801a44 <__pack_d+0xf4>
  801ab8:	3005883a 	mov	r2,r6
  801abc:	003fdc06 	br	801a30 <__pack_d+0xe0>
  801ac0:	000d883a 	mov	r6,zero
  801ac4:	000f883a 	mov	r7,zero
  801ac8:	0201ffc4 	movi	r8,2047
  801acc:	003fb406 	br	8019a0 <__pack_d+0x50>
  801ad0:	0005883a 	mov	r2,zero
  801ad4:	00c00234 	movhi	r3,8
  801ad8:	408cb03a 	or	r6,r8,r2
  801adc:	48ceb03a 	or	r7,r9,r3
  801ae0:	013fffc4 	movi	r4,-1
  801ae4:	01400434 	movhi	r5,16
  801ae8:	297fffc4 	addi	r5,r5,-1
  801aec:	3104703a 	and	r2,r6,r4
  801af0:	3946703a 	and	r3,r7,r5
  801af4:	100d883a 	mov	r6,r2
  801af8:	180f883a 	mov	r7,r3
  801afc:	0201ffc4 	movi	r8,2047
  801b00:	003fa706 	br	8019a0 <__pack_d+0x50>
  801b04:	1109c83a 	sub	r4,r2,r4
  801b08:	00800e04 	movi	r2,56
  801b0c:	11004316 	blt	r2,r4,801c1c <__pack_d+0x2cc>
  801b10:	21fff804 	addi	r7,r4,-32
  801b14:	38004516 	blt	r7,zero,801c2c <__pack_d+0x2dc>
  801b18:	49d8d83a 	srl	r12,r9,r7
  801b1c:	001b883a 	mov	r13,zero
  801b20:	0023883a 	mov	r17,zero
  801b24:	01400044 	movi	r5,1
  801b28:	0025883a 	mov	r18,zero
  801b2c:	38004716 	blt	r7,zero,801c4c <__pack_d+0x2fc>
  801b30:	29d6983a 	sll	r11,r5,r7
  801b34:	0015883a 	mov	r10,zero
  801b38:	00bfffc4 	movi	r2,-1
  801b3c:	5089883a 	add	r4,r10,r2
  801b40:	588b883a 	add	r5,r11,r2
  801b44:	228d803a 	cmpltu	r6,r4,r10
  801b48:	314b883a 	add	r5,r6,r5
  801b4c:	4104703a 	and	r2,r8,r4
  801b50:	4946703a 	and	r3,r9,r5
  801b54:	10c4b03a 	or	r2,r2,r3
  801b58:	10000226 	beq	r2,zero,801b64 <__pack_d+0x214>
  801b5c:	04400044 	movi	r17,1
  801b60:	0025883a 	mov	r18,zero
  801b64:	00803fc4 	movi	r2,255
  801b68:	644eb03a 	or	r7,r12,r17
  801b6c:	3892703a 	and	r9,r7,r2
  801b70:	00802004 	movi	r2,128
  801b74:	6c90b03a 	or	r8,r13,r18
  801b78:	0015883a 	mov	r10,zero
  801b7c:	48801626 	beq	r9,r2,801bd8 <__pack_d+0x288>
  801b80:	01001fc4 	movi	r4,127
  801b84:	3905883a 	add	r2,r7,r4
  801b88:	11cd803a 	cmpltu	r6,r2,r7
  801b8c:	320d883a 	add	r6,r6,r8
  801b90:	100f883a 	mov	r7,r2
  801b94:	00840034 	movhi	r2,4096
  801b98:	10bfffc4 	addi	r2,r2,-1
  801b9c:	3011883a 	mov	r8,r6
  801ba0:	0007883a 	mov	r3,zero
  801ba4:	11801b36 	bltu	r2,r6,801c14 <__pack_d+0x2c4>
  801ba8:	4004963a 	slli	r2,r8,24
  801bac:	3808d23a 	srli	r4,r7,8
  801bb0:	400ad23a 	srli	r5,r8,8
  801bb4:	1813883a 	mov	r9,r3
  801bb8:	1108b03a 	or	r4,r2,r4
  801bbc:	00bfffc4 	movi	r2,-1
  801bc0:	00c00434 	movhi	r3,16
  801bc4:	18ffffc4 	addi	r3,r3,-1
  801bc8:	208c703a 	and	r6,r4,r2
  801bcc:	28ce703a 	and	r7,r5,r3
  801bd0:	4a01ffcc 	andi	r8,r9,2047
  801bd4:	003f7206 	br	8019a0 <__pack_d+0x50>
  801bd8:	503fe91e 	bne	r10,zero,801b80 <__pack_d+0x230>
  801bdc:	01004004 	movi	r4,256
  801be0:	3904703a 	and	r2,r7,r4
  801be4:	0007883a 	mov	r3,zero
  801be8:	10c4b03a 	or	r2,r2,r3
  801bec:	10000626 	beq	r2,zero,801c08 <__pack_d+0x2b8>
  801bf0:	3a45883a 	add	r2,r7,r9
  801bf4:	11cd803a 	cmpltu	r6,r2,r7
  801bf8:	320d883a 	add	r6,r6,r8
  801bfc:	100f883a 	mov	r7,r2
  801c00:	3011883a 	mov	r8,r6
  801c04:	0007883a 	mov	r3,zero
  801c08:	00840034 	movhi	r2,4096
  801c0c:	10bfffc4 	addi	r2,r2,-1
  801c10:	123fe52e 	bgeu	r2,r8,801ba8 <__pack_d+0x258>
  801c14:	00c00044 	movi	r3,1
  801c18:	003fe306 	br	801ba8 <__pack_d+0x258>
  801c1c:	0009883a 	mov	r4,zero
  801c20:	0013883a 	mov	r9,zero
  801c24:	000b883a 	mov	r5,zero
  801c28:	003fe406 	br	801bbc <__pack_d+0x26c>
  801c2c:	4a47883a 	add	r3,r9,r9
  801c30:	008007c4 	movi	r2,31
  801c34:	1105c83a 	sub	r2,r2,r4
  801c38:	1886983a 	sll	r3,r3,r2
  801c3c:	4118d83a 	srl	r12,r8,r4
  801c40:	491ad83a 	srl	r13,r9,r4
  801c44:	1b18b03a 	or	r12,r3,r12
  801c48:	003fb506 	br	801b20 <__pack_d+0x1d0>
  801c4c:	2806d07a 	srli	r3,r5,1
  801c50:	008007c4 	movi	r2,31
  801c54:	1105c83a 	sub	r2,r2,r4
  801c58:	1896d83a 	srl	r11,r3,r2
  801c5c:	2914983a 	sll	r10,r5,r4
  801c60:	003fb506 	br	801b38 <__pack_d+0x1e8>

00801c64 <__unpack_d>:
  801c64:	20c00117 	ldw	r3,4(r4)
  801c68:	22400017 	ldw	r9,0(r4)
  801c6c:	00800434 	movhi	r2,16
  801c70:	10bfffc4 	addi	r2,r2,-1
  801c74:	1808d53a 	srli	r4,r3,20
  801c78:	180cd7fa 	srli	r6,r3,31
  801c7c:	1894703a 	and	r10,r3,r2
  801c80:	2201ffcc 	andi	r8,r4,2047
  801c84:	281b883a 	mov	r13,r5
  801c88:	4817883a 	mov	r11,r9
  801c8c:	29800115 	stw	r6,4(r5)
  801c90:	5019883a 	mov	r12,r10
  801c94:	40001e1e 	bne	r8,zero,801d10 <__unpack_d+0xac>
  801c98:	4a84b03a 	or	r2,r9,r10
  801c9c:	10001926 	beq	r2,zero,801d04 <__unpack_d+0xa0>
  801ca0:	4804d63a 	srli	r2,r9,24
  801ca4:	500c923a 	slli	r6,r10,8
  801ca8:	013f0084 	movi	r4,-1022
  801cac:	00c40034 	movhi	r3,4096
  801cb0:	18ffffc4 	addi	r3,r3,-1
  801cb4:	118cb03a 	or	r6,r2,r6
  801cb8:	008000c4 	movi	r2,3
  801cbc:	480a923a 	slli	r5,r9,8
  801cc0:	68800015 	stw	r2,0(r13)
  801cc4:	69000215 	stw	r4,8(r13)
  801cc8:	19800b36 	bltu	r3,r6,801cf8 <__unpack_d+0x94>
  801ccc:	200f883a 	mov	r7,r4
  801cd0:	1811883a 	mov	r8,r3
  801cd4:	2945883a 	add	r2,r5,r5
  801cd8:	1149803a 	cmpltu	r4,r2,r5
  801cdc:	3187883a 	add	r3,r6,r6
  801ce0:	20c9883a 	add	r4,r4,r3
  801ce4:	100b883a 	mov	r5,r2
  801ce8:	200d883a 	mov	r6,r4
  801cec:	39ffffc4 	addi	r7,r7,-1
  801cf0:	413ff82e 	bgeu	r8,r4,801cd4 <__unpack_d+0x70>
  801cf4:	69c00215 	stw	r7,8(r13)
  801cf8:	69800415 	stw	r6,16(r13)
  801cfc:	69400315 	stw	r5,12(r13)
  801d00:	f800283a 	ret
  801d04:	00800084 	movi	r2,2
  801d08:	28800015 	stw	r2,0(r5)
  801d0c:	f800283a 	ret
  801d10:	0081ffc4 	movi	r2,2047
  801d14:	40800f26 	beq	r8,r2,801d54 <__unpack_d+0xf0>
  801d18:	480cd63a 	srli	r6,r9,24
  801d1c:	5006923a 	slli	r3,r10,8
  801d20:	4804923a 	slli	r2,r9,8
  801d24:	0009883a 	mov	r4,zero
  801d28:	30c6b03a 	or	r3,r6,r3
  801d2c:	01440034 	movhi	r5,4096
  801d30:	110cb03a 	or	r6,r2,r4
  801d34:	423f0044 	addi	r8,r8,-1023
  801d38:	194eb03a 	or	r7,r3,r5
  801d3c:	008000c4 	movi	r2,3
  801d40:	69c00415 	stw	r7,16(r13)
  801d44:	6a000215 	stw	r8,8(r13)
  801d48:	68800015 	stw	r2,0(r13)
  801d4c:	69800315 	stw	r6,12(r13)
  801d50:	f800283a 	ret
  801d54:	4a84b03a 	or	r2,r9,r10
  801d58:	1000031e 	bne	r2,zero,801d68 <__unpack_d+0x104>
  801d5c:	00800104 	movi	r2,4
  801d60:	28800015 	stw	r2,0(r5)
  801d64:	f800283a 	ret
  801d68:	0009883a 	mov	r4,zero
  801d6c:	01400234 	movhi	r5,8
  801d70:	4904703a 	and	r2,r9,r4
  801d74:	5146703a 	and	r3,r10,r5
  801d78:	10c4b03a 	or	r2,r2,r3
  801d7c:	10000526 	beq	r2,zero,801d94 <__unpack_d+0x130>
  801d80:	00800044 	movi	r2,1
  801d84:	68800015 	stw	r2,0(r13)
  801d88:	6b000415 	stw	r12,16(r13)
  801d8c:	6ac00315 	stw	r11,12(r13)
  801d90:	f800283a 	ret
  801d94:	68000015 	stw	zero,0(r13)
  801d98:	003ffb06 	br	801d88 <__unpack_d+0x124>

00801d9c <gcvt>:
  801d9c:	defff804 	addi	sp,sp,-32
  801da0:	0005883a 	mov	r2,zero
  801da4:	dcc00615 	stw	r19,24(sp)
  801da8:	dc800515 	stw	r18,20(sp)
  801dac:	3027883a 	mov	r19,r6
  801db0:	3825883a 	mov	r18,r7
  801db4:	100d883a 	mov	r6,r2
  801db8:	000f883a 	mov	r7,zero
  801dbc:	dc400415 	stw	r17,16(sp)
  801dc0:	dc000315 	stw	r16,12(sp)
  801dc4:	dfc00715 	stw	ra,28(sp)
  801dc8:	2021883a 	mov	r16,r4
  801dcc:	2823883a 	mov	r17,r5
  801dd0:	0806d580 	call	806d58 <__ltdf2>
  801dd4:	9007883a 	mov	r3,r18
  801dd8:	10001516 	blt	r2,zero,801e30 <gcvt+0x94>
  801ddc:	00802074 	movhi	r2,129
  801de0:	10af0404 	addi	r2,r2,-17392
  801de4:	11000017 	ldw	r4,0(r2)
  801de8:	980f883a 	mov	r7,r19
  801dec:	008019c4 	movi	r2,103
  801df0:	880d883a 	mov	r6,r17
  801df4:	800b883a 	mov	r5,r16
  801df8:	d8c00015 	stw	r3,0(sp)
  801dfc:	d8800115 	stw	r2,4(sp)
  801e00:	d8000215 	stw	zero,8(sp)
  801e04:	0802a000 	call	802a00 <_gcvt>
  801e08:	900f883a 	mov	r7,r18
  801e0c:	10000d26 	beq	r2,zero,801e44 <gcvt+0xa8>
  801e10:	3805883a 	mov	r2,r7
  801e14:	dfc00717 	ldw	ra,28(sp)
  801e18:	dcc00617 	ldw	r19,24(sp)
  801e1c:	dc800517 	ldw	r18,20(sp)
  801e20:	dc400417 	ldw	r17,16(sp)
  801e24:	dc000317 	ldw	r16,12(sp)
  801e28:	dec00804 	addi	sp,sp,32
  801e2c:	f800283a 	ret
  801e30:	00800b44 	movi	r2,45
  801e34:	9cffffc4 	addi	r19,r19,-1
  801e38:	90c00044 	addi	r3,r18,1
  801e3c:	90800005 	stb	r2,0(r18)
  801e40:	003fe606 	br	801ddc <gcvt+0x40>
  801e44:	000f883a 	mov	r7,zero
  801e48:	3805883a 	mov	r2,r7
  801e4c:	dfc00717 	ldw	ra,28(sp)
  801e50:	dcc00617 	ldw	r19,24(sp)
  801e54:	dc800517 	ldw	r18,20(sp)
  801e58:	dc400417 	ldw	r17,16(sp)
  801e5c:	dc000317 	ldw	r16,12(sp)
  801e60:	dec00804 	addi	sp,sp,32
  801e64:	f800283a 	ret

00801e68 <gcvtf>:
  801e68:	defffd04 	addi	sp,sp,-12
  801e6c:	dcc00115 	stw	r19,4(sp)
  801e70:	dc400015 	stw	r17,0(sp)
  801e74:	3027883a 	mov	r19,r6
  801e78:	2823883a 	mov	r17,r5
  801e7c:	dfc00215 	stw	ra,8(sp)
  801e80:	0800c940 	call	800c94 <__extendsfdf2>
  801e84:	180b883a 	mov	r5,r3
  801e88:	880d883a 	mov	r6,r17
  801e8c:	980f883a 	mov	r7,r19
  801e90:	1009883a 	mov	r4,r2
  801e94:	dfc00217 	ldw	ra,8(sp)
  801e98:	dcc00117 	ldw	r19,4(sp)
  801e9c:	dc400017 	ldw	r17,0(sp)
  801ea0:	dec00304 	addi	sp,sp,12
  801ea4:	0801d9c1 	jmpi	801d9c <gcvt>

00801ea8 <ecvt>:
  801ea8:	defffd04 	addi	sp,sp,-12
  801eac:	da000317 	ldw	r8,12(sp)
  801eb0:	dfc00215 	stw	ra,8(sp)
  801eb4:	d8000115 	stw	zero,4(sp)
  801eb8:	da000015 	stw	r8,0(sp)
  801ebc:	0802fd80 	call	802fd8 <ecvtbuf>
  801ec0:	dfc00217 	ldw	ra,8(sp)
  801ec4:	dec00304 	addi	sp,sp,12
  801ec8:	f800283a 	ret

00801ecc <ecvtf>:
  801ecc:	defffb04 	addi	sp,sp,-20
  801ed0:	dfc00415 	stw	ra,16(sp)
  801ed4:	dd400315 	stw	r21,12(sp)
  801ed8:	dcc00215 	stw	r19,8(sp)
  801edc:	382b883a 	mov	r21,r7
  801ee0:	3027883a 	mov	r19,r6
  801ee4:	dc400115 	stw	r17,4(sp)
  801ee8:	2823883a 	mov	r17,r5
  801eec:	0800c940 	call	800c94 <__extendsfdf2>
  801ef0:	180b883a 	mov	r5,r3
  801ef4:	880d883a 	mov	r6,r17
  801ef8:	980f883a 	mov	r7,r19
  801efc:	1009883a 	mov	r4,r2
  801f00:	dd400015 	stw	r21,0(sp)
  801f04:	0801ea80 	call	801ea8 <ecvt>
  801f08:	dfc00417 	ldw	ra,16(sp)
  801f0c:	dd400317 	ldw	r21,12(sp)
  801f10:	dcc00217 	ldw	r19,8(sp)
  801f14:	dc400117 	ldw	r17,4(sp)
  801f18:	dec00504 	addi	sp,sp,20
  801f1c:	f800283a 	ret

00801f20 <fcvt>:
  801f20:	defffd04 	addi	sp,sp,-12
  801f24:	da000317 	ldw	r8,12(sp)
  801f28:	dfc00215 	stw	ra,8(sp)
  801f2c:	d8000115 	stw	zero,4(sp)
  801f30:	da000015 	stw	r8,0(sp)
  801f34:	08031200 	call	803120 <fcvtbuf>
  801f38:	dfc00217 	ldw	ra,8(sp)
  801f3c:	dec00304 	addi	sp,sp,12
  801f40:	f800283a 	ret

00801f44 <fcvtf>:
  801f44:	defffb04 	addi	sp,sp,-20
  801f48:	dfc00415 	stw	ra,16(sp)
  801f4c:	dd400315 	stw	r21,12(sp)
  801f50:	dcc00215 	stw	r19,8(sp)
  801f54:	382b883a 	mov	r21,r7
  801f58:	3027883a 	mov	r19,r6
  801f5c:	dc400115 	stw	r17,4(sp)
  801f60:	2823883a 	mov	r17,r5
  801f64:	0800c940 	call	800c94 <__extendsfdf2>
  801f68:	180b883a 	mov	r5,r3
  801f6c:	880d883a 	mov	r6,r17
  801f70:	980f883a 	mov	r7,r19
  801f74:	1009883a 	mov	r4,r2
  801f78:	dd400015 	stw	r21,0(sp)
  801f7c:	0801f200 	call	801f20 <fcvt>
  801f80:	dfc00417 	ldw	ra,16(sp)
  801f84:	dd400317 	ldw	r21,12(sp)
  801f88:	dcc00217 	ldw	r19,8(sp)
  801f8c:	dc400117 	ldw	r17,4(sp)
  801f90:	dec00504 	addi	sp,sp,20
  801f94:	f800283a 	ret

00801f98 <free>:
  801f98:	00802074 	movhi	r2,129
  801f9c:	10af0404 	addi	r2,r2,-17392
  801fa0:	200b883a 	mov	r5,r4
  801fa4:	11000017 	ldw	r4,0(r2)
  801fa8:	08033f41 	jmpi	8033f4 <_free_r>

00801fac <malloc>:
  801fac:	00802074 	movhi	r2,129
  801fb0:	10af0404 	addi	r2,r2,-17392
  801fb4:	200b883a 	mov	r5,r4
  801fb8:	11000017 	ldw	r4,0(r2)
  801fbc:	0801fc01 	jmpi	801fc0 <_malloc_r>

00801fc0 <_malloc_r>:
  801fc0:	defff604 	addi	sp,sp,-40
  801fc4:	28c002c4 	addi	r3,r5,11
  801fc8:	00800584 	movi	r2,22
  801fcc:	dc800215 	stw	r18,8(sp)
  801fd0:	dfc00915 	stw	ra,36(sp)
  801fd4:	df000815 	stw	fp,32(sp)
  801fd8:	ddc00715 	stw	r23,28(sp)
  801fdc:	dd800615 	stw	r22,24(sp)
  801fe0:	dd400515 	stw	r21,20(sp)
  801fe4:	dd000415 	stw	r20,16(sp)
  801fe8:	dcc00315 	stw	r19,12(sp)
  801fec:	dc400115 	stw	r17,4(sp)
  801ff0:	dc000015 	stw	r16,0(sp)
  801ff4:	2025883a 	mov	r18,r4
  801ff8:	10c01236 	bltu	r2,r3,802044 <_malloc_r+0x84>
  801ffc:	04400404 	movi	r17,16
  802000:	8940142e 	bgeu	r17,r5,802054 <_malloc_r+0x94>
  802004:	00800304 	movi	r2,12
  802008:	0007883a 	mov	r3,zero
  80200c:	90800015 	stw	r2,0(r18)
  802010:	1805883a 	mov	r2,r3
  802014:	dfc00917 	ldw	ra,36(sp)
  802018:	df000817 	ldw	fp,32(sp)
  80201c:	ddc00717 	ldw	r23,28(sp)
  802020:	dd800617 	ldw	r22,24(sp)
  802024:	dd400517 	ldw	r21,20(sp)
  802028:	dd000417 	ldw	r20,16(sp)
  80202c:	dcc00317 	ldw	r19,12(sp)
  802030:	dc800217 	ldw	r18,8(sp)
  802034:	dc400117 	ldw	r17,4(sp)
  802038:	dc000017 	ldw	r16,0(sp)
  80203c:	dec00a04 	addi	sp,sp,40
  802040:	f800283a 	ret
  802044:	00bffe04 	movi	r2,-8
  802048:	18a2703a 	and	r17,r3,r2
  80204c:	883fed16 	blt	r17,zero,802004 <_malloc_r+0x44>
  802050:	897fec36 	bltu	r17,r5,802004 <_malloc_r+0x44>
  802054:	9009883a 	mov	r4,r18
  802058:	08073500 	call	807350 <__malloc_lock>
  80205c:	00807dc4 	movi	r2,503
  802060:	14402b2e 	bgeu	r2,r17,802110 <_malloc_r+0x150>
  802064:	8806d27a 	srli	r3,r17,9
  802068:	18003f1e 	bne	r3,zero,802168 <_malloc_r+0x1a8>
  80206c:	880cd0fa 	srli	r6,r17,3
  802070:	300490fa 	slli	r2,r6,3
  802074:	02c02074 	movhi	r11,129
  802078:	5ae98004 	addi	r11,r11,-23040
  80207c:	12cb883a 	add	r5,r2,r11
  802080:	2c000317 	ldw	r16,12(r5)
  802084:	580f883a 	mov	r7,r11
  802088:	2c00041e 	bne	r5,r16,80209c <_malloc_r+0xdc>
  80208c:	00000a06 	br	8020b8 <_malloc_r+0xf8>
  802090:	1800860e 	bge	r3,zero,8022ac <_malloc_r+0x2ec>
  802094:	84000317 	ldw	r16,12(r16)
  802098:	2c000726 	beq	r5,r16,8020b8 <_malloc_r+0xf8>
  80209c:	80800117 	ldw	r2,4(r16)
  8020a0:	00ffff04 	movi	r3,-4
  8020a4:	10c8703a 	and	r4,r2,r3
  8020a8:	2447c83a 	sub	r3,r4,r17
  8020ac:	008003c4 	movi	r2,15
  8020b0:	10fff70e 	bge	r2,r3,802090 <_malloc_r+0xd0>
  8020b4:	31bfffc4 	addi	r6,r6,-1
  8020b8:	32400044 	addi	r9,r6,1
  8020bc:	02802074 	movhi	r10,129
  8020c0:	52a98204 	addi	r10,r10,-23032
  8020c4:	54000217 	ldw	r16,8(r10)
  8020c8:	8280a026 	beq	r16,r10,80234c <_malloc_r+0x38c>
  8020cc:	80800117 	ldw	r2,4(r16)
  8020d0:	00ffff04 	movi	r3,-4
  8020d4:	10ca703a 	and	r5,r2,r3
  8020d8:	2c4dc83a 	sub	r6,r5,r17
  8020dc:	008003c4 	movi	r2,15
  8020e0:	11808316 	blt	r2,r6,8022f0 <_malloc_r+0x330>
  8020e4:	52800315 	stw	r10,12(r10)
  8020e8:	52800215 	stw	r10,8(r10)
  8020ec:	30002916 	blt	r6,zero,802194 <_malloc_r+0x1d4>
  8020f0:	8147883a 	add	r3,r16,r5
  8020f4:	18800117 	ldw	r2,4(r3)
  8020f8:	9009883a 	mov	r4,r18
  8020fc:	10800054 	ori	r2,r2,1
  802100:	18800115 	stw	r2,4(r3)
  802104:	08073540 	call	807354 <__malloc_unlock>
  802108:	80c00204 	addi	r3,r16,8
  80210c:	003fc006 	br	802010 <_malloc_r+0x50>
  802110:	02c02074 	movhi	r11,129
  802114:	5ae98004 	addi	r11,r11,-23040
  802118:	8ac5883a 	add	r2,r17,r11
  80211c:	14000317 	ldw	r16,12(r2)
  802120:	580f883a 	mov	r7,r11
  802124:	8806d0fa 	srli	r3,r17,3
  802128:	14006c26 	beq	r2,r16,8022dc <_malloc_r+0x31c>
  80212c:	80c00117 	ldw	r3,4(r16)
  802130:	00bfff04 	movi	r2,-4
  802134:	81800317 	ldw	r6,12(r16)
  802138:	1886703a 	and	r3,r3,r2
  80213c:	80c7883a 	add	r3,r16,r3
  802140:	18800117 	ldw	r2,4(r3)
  802144:	81400217 	ldw	r5,8(r16)
  802148:	9009883a 	mov	r4,r18
  80214c:	10800054 	ori	r2,r2,1
  802150:	18800115 	stw	r2,4(r3)
  802154:	31400215 	stw	r5,8(r6)
  802158:	29800315 	stw	r6,12(r5)
  80215c:	08073540 	call	807354 <__malloc_unlock>
  802160:	80c00204 	addi	r3,r16,8
  802164:	003faa06 	br	802010 <_malloc_r+0x50>
  802168:	00800104 	movi	r2,4
  80216c:	10c0052e 	bgeu	r2,r3,802184 <_malloc_r+0x1c4>
  802170:	00800504 	movi	r2,20
  802174:	10c07836 	bltu	r2,r3,802358 <_malloc_r+0x398>
  802178:	198016c4 	addi	r6,r3,91
  80217c:	300490fa 	slli	r2,r6,3
  802180:	003fbc06 	br	802074 <_malloc_r+0xb4>
  802184:	8804d1ba 	srli	r2,r17,6
  802188:	11800e04 	addi	r6,r2,56
  80218c:	300490fa 	slli	r2,r6,3
  802190:	003fb806 	br	802074 <_malloc_r+0xb4>
  802194:	00807fc4 	movi	r2,511
  802198:	1140bb36 	bltu	r2,r5,802488 <_malloc_r+0x4c8>
  80219c:	2806d0fa 	srli	r3,r5,3
  8021a0:	573ffe04 	addi	fp,r10,-8
  8021a4:	00800044 	movi	r2,1
  8021a8:	180890fa 	slli	r4,r3,3
  8021ac:	1807d0ba 	srai	r3,r3,2
  8021b0:	e1c00117 	ldw	r7,4(fp)
  8021b4:	5909883a 	add	r4,r11,r4
  8021b8:	21400217 	ldw	r5,8(r4)
  8021bc:	10c4983a 	sll	r2,r2,r3
  8021c0:	81000315 	stw	r4,12(r16)
  8021c4:	81400215 	stw	r5,8(r16)
  8021c8:	388eb03a 	or	r7,r7,r2
  8021cc:	2c000315 	stw	r16,12(r5)
  8021d0:	24000215 	stw	r16,8(r4)
  8021d4:	e1c00115 	stw	r7,4(fp)
  8021d8:	4807883a 	mov	r3,r9
  8021dc:	4800cd16 	blt	r9,zero,802514 <_malloc_r+0x554>
  8021e0:	1807d0ba 	srai	r3,r3,2
  8021e4:	00800044 	movi	r2,1
  8021e8:	10c8983a 	sll	r4,r2,r3
  8021ec:	39004436 	bltu	r7,r4,802300 <_malloc_r+0x340>
  8021f0:	21c4703a 	and	r2,r4,r7
  8021f4:	10000a1e 	bne	r2,zero,802220 <_malloc_r+0x260>
  8021f8:	2109883a 	add	r4,r4,r4
  8021fc:	00bfff04 	movi	r2,-4
  802200:	4884703a 	and	r2,r9,r2
  802204:	3906703a 	and	r3,r7,r4
  802208:	12400104 	addi	r9,r2,4
  80220c:	1800041e 	bne	r3,zero,802220 <_malloc_r+0x260>
  802210:	2109883a 	add	r4,r4,r4
  802214:	3904703a 	and	r2,r7,r4
  802218:	4a400104 	addi	r9,r9,4
  80221c:	103ffc26 	beq	r2,zero,802210 <_malloc_r+0x250>
  802220:	480490fa 	slli	r2,r9,3
  802224:	4819883a 	mov	r12,r9
  802228:	023fff04 	movi	r8,-4
  80222c:	589b883a 	add	r13,r11,r2
  802230:	6807883a 	mov	r3,r13
  802234:	014003c4 	movi	r5,15
  802238:	1c000317 	ldw	r16,12(r3)
  80223c:	1c00041e 	bne	r3,r16,802250 <_malloc_r+0x290>
  802240:	0000a706 	br	8024e0 <_malloc_r+0x520>
  802244:	3000ab0e 	bge	r6,zero,8024f4 <_malloc_r+0x534>
  802248:	84000317 	ldw	r16,12(r16)
  80224c:	1c00a426 	beq	r3,r16,8024e0 <_malloc_r+0x520>
  802250:	80800117 	ldw	r2,4(r16)
  802254:	1204703a 	and	r2,r2,r8
  802258:	144dc83a 	sub	r6,r2,r17
  80225c:	29bff90e 	bge	r5,r6,802244 <_malloc_r+0x284>
  802260:	81000317 	ldw	r4,12(r16)
  802264:	80c00217 	ldw	r3,8(r16)
  802268:	89400054 	ori	r5,r17,1
  80226c:	8445883a 	add	r2,r16,r17
  802270:	20c00215 	stw	r3,8(r4)
  802274:	19000315 	stw	r4,12(r3)
  802278:	81400115 	stw	r5,4(r16)
  80227c:	1187883a 	add	r3,r2,r6
  802280:	31000054 	ori	r4,r6,1
  802284:	50800315 	stw	r2,12(r10)
  802288:	50800215 	stw	r2,8(r10)
  80228c:	19800015 	stw	r6,0(r3)
  802290:	11000115 	stw	r4,4(r2)
  802294:	12800215 	stw	r10,8(r2)
  802298:	12800315 	stw	r10,12(r2)
  80229c:	9009883a 	mov	r4,r18
  8022a0:	08073540 	call	807354 <__malloc_unlock>
  8022a4:	80c00204 	addi	r3,r16,8
  8022a8:	003f5906 	br	802010 <_malloc_r+0x50>
  8022ac:	8109883a 	add	r4,r16,r4
  8022b0:	20800117 	ldw	r2,4(r4)
  8022b4:	80c00217 	ldw	r3,8(r16)
  8022b8:	81400317 	ldw	r5,12(r16)
  8022bc:	10800054 	ori	r2,r2,1
  8022c0:	20800115 	stw	r2,4(r4)
  8022c4:	28c00215 	stw	r3,8(r5)
  8022c8:	19400315 	stw	r5,12(r3)
  8022cc:	9009883a 	mov	r4,r18
  8022d0:	08073540 	call	807354 <__malloc_unlock>
  8022d4:	80c00204 	addi	r3,r16,8
  8022d8:	003f4d06 	br	802010 <_malloc_r+0x50>
  8022dc:	80800204 	addi	r2,r16,8
  8022e0:	14000317 	ldw	r16,12(r2)
  8022e4:	143f911e 	bne	r2,r16,80212c <_malloc_r+0x16c>
  8022e8:	1a400084 	addi	r9,r3,2
  8022ec:	003f7306 	br	8020bc <_malloc_r+0xfc>
  8022f0:	88c00054 	ori	r3,r17,1
  8022f4:	8445883a 	add	r2,r16,r17
  8022f8:	80c00115 	stw	r3,4(r16)
  8022fc:	003fdf06 	br	80227c <_malloc_r+0x2bc>
  802300:	e4000217 	ldw	r16,8(fp)
  802304:	00bfff04 	movi	r2,-4
  802308:	80c00117 	ldw	r3,4(r16)
  80230c:	802d883a 	mov	r22,r16
  802310:	18aa703a 	and	r21,r3,r2
  802314:	ac401636 	bltu	r21,r17,802370 <_malloc_r+0x3b0>
  802318:	ac49c83a 	sub	r4,r21,r17
  80231c:	008003c4 	movi	r2,15
  802320:	1100130e 	bge	r2,r4,802370 <_malloc_r+0x3b0>
  802324:	88800054 	ori	r2,r17,1
  802328:	8447883a 	add	r3,r16,r17
  80232c:	80800115 	stw	r2,4(r16)
  802330:	20800054 	ori	r2,r4,1
  802334:	18800115 	stw	r2,4(r3)
  802338:	e0c00215 	stw	r3,8(fp)
  80233c:	9009883a 	mov	r4,r18
  802340:	08073540 	call	807354 <__malloc_unlock>
  802344:	80c00204 	addi	r3,r16,8
  802348:	003f3106 	br	802010 <_malloc_r+0x50>
  80234c:	39c00117 	ldw	r7,4(r7)
  802350:	573ffe04 	addi	fp,r10,-8
  802354:	003fa006 	br	8021d8 <_malloc_r+0x218>
  802358:	00801504 	movi	r2,84
  80235c:	10c06736 	bltu	r2,r3,8024fc <_malloc_r+0x53c>
  802360:	8804d33a 	srli	r2,r17,12
  802364:	11801b84 	addi	r6,r2,110
  802368:	300490fa 	slli	r2,r6,3
  80236c:	003f4106 	br	802074 <_malloc_r+0xb4>
  802370:	d0a6a017 	ldw	r2,-25984(gp)
  802374:	d0e00317 	ldw	r3,-32756(gp)
  802378:	053fffc4 	movi	r20,-1
  80237c:	10800404 	addi	r2,r2,16
  802380:	88a7883a 	add	r19,r17,r2
  802384:	1d000326 	beq	r3,r20,802394 <_malloc_r+0x3d4>
  802388:	98c3ffc4 	addi	r3,r19,4095
  80238c:	00bc0004 	movi	r2,-4096
  802390:	18a6703a 	and	r19,r3,r2
  802394:	9009883a 	mov	r4,r18
  802398:	980b883a 	mov	r5,r19
  80239c:	08027a00 	call	8027a0 <_sbrk_r>
  8023a0:	1009883a 	mov	r4,r2
  8023a4:	15000426 	beq	r2,r20,8023b8 <_malloc_r+0x3f8>
  8023a8:	854b883a 	add	r5,r16,r21
  8023ac:	1029883a 	mov	r20,r2
  8023b0:	11405a2e 	bgeu	r2,r5,80251c <_malloc_r+0x55c>
  8023b4:	87000c26 	beq	r16,fp,8023e8 <_malloc_r+0x428>
  8023b8:	e4000217 	ldw	r16,8(fp)
  8023bc:	80c00117 	ldw	r3,4(r16)
  8023c0:	00bfff04 	movi	r2,-4
  8023c4:	1884703a 	and	r2,r3,r2
  8023c8:	14400336 	bltu	r2,r17,8023d8 <_malloc_r+0x418>
  8023cc:	1449c83a 	sub	r4,r2,r17
  8023d0:	008003c4 	movi	r2,15
  8023d4:	113fd316 	blt	r2,r4,802324 <_malloc_r+0x364>
  8023d8:	9009883a 	mov	r4,r18
  8023dc:	08073540 	call	807354 <__malloc_unlock>
  8023e0:	0007883a 	mov	r3,zero
  8023e4:	003f0a06 	br	802010 <_malloc_r+0x50>
  8023e8:	05c02074 	movhi	r23,129
  8023ec:	bdf5ae04 	addi	r23,r23,-10568
  8023f0:	b8800017 	ldw	r2,0(r23)
  8023f4:	988d883a 	add	r6,r19,r2
  8023f8:	b9800015 	stw	r6,0(r23)
  8023fc:	d0e00317 	ldw	r3,-32756(gp)
  802400:	00bfffc4 	movi	r2,-1
  802404:	18808e26 	beq	r3,r2,802640 <_malloc_r+0x680>
  802408:	2145c83a 	sub	r2,r4,r5
  80240c:	3085883a 	add	r2,r6,r2
  802410:	b8800015 	stw	r2,0(r23)
  802414:	20c001cc 	andi	r3,r4,7
  802418:	18005f1e 	bne	r3,zero,802598 <_malloc_r+0x5d8>
  80241c:	000b883a 	mov	r5,zero
  802420:	a4c5883a 	add	r2,r20,r19
  802424:	1083ffcc 	andi	r2,r2,4095
  802428:	00c40004 	movi	r3,4096
  80242c:	1887c83a 	sub	r3,r3,r2
  802430:	28e7883a 	add	r19,r5,r3
  802434:	9009883a 	mov	r4,r18
  802438:	980b883a 	mov	r5,r19
  80243c:	08027a00 	call	8027a0 <_sbrk_r>
  802440:	1007883a 	mov	r3,r2
  802444:	00bfffc4 	movi	r2,-1
  802448:	18807a26 	beq	r3,r2,802634 <_malloc_r+0x674>
  80244c:	1d05c83a 	sub	r2,r3,r20
  802450:	9885883a 	add	r2,r19,r2
  802454:	10c00054 	ori	r3,r2,1
  802458:	b8800017 	ldw	r2,0(r23)
  80245c:	a021883a 	mov	r16,r20
  802460:	a0c00115 	stw	r3,4(r20)
  802464:	9885883a 	add	r2,r19,r2
  802468:	b8800015 	stw	r2,0(r23)
  80246c:	e5000215 	stw	r20,8(fp)
  802470:	b7003626 	beq	r22,fp,80254c <_malloc_r+0x58c>
  802474:	018003c4 	movi	r6,15
  802478:	35404b36 	bltu	r6,r21,8025a8 <_malloc_r+0x5e8>
  80247c:	00800044 	movi	r2,1
  802480:	a0800115 	stw	r2,4(r20)
  802484:	003fcd06 	br	8023bc <_malloc_r+0x3fc>
  802488:	2808d27a 	srli	r4,r5,9
  80248c:	2000371e 	bne	r4,zero,80256c <_malloc_r+0x5ac>
  802490:	2808d0fa 	srli	r4,r5,3
  802494:	200690fa 	slli	r3,r4,3
  802498:	1ad1883a 	add	r8,r3,r11
  80249c:	41800217 	ldw	r6,8(r8)
  8024a0:	41805b26 	beq	r8,r6,802610 <_malloc_r+0x650>
  8024a4:	30800117 	ldw	r2,4(r6)
  8024a8:	00ffff04 	movi	r3,-4
  8024ac:	10c4703a 	and	r2,r2,r3
  8024b0:	2880022e 	bgeu	r5,r2,8024bc <_malloc_r+0x4fc>
  8024b4:	31800217 	ldw	r6,8(r6)
  8024b8:	41bffa1e 	bne	r8,r6,8024a4 <_malloc_r+0x4e4>
  8024bc:	32000317 	ldw	r8,12(r6)
  8024c0:	39c00117 	ldw	r7,4(r7)
  8024c4:	82000315 	stw	r8,12(r16)
  8024c8:	81800215 	stw	r6,8(r16)
  8024cc:	07002074 	movhi	fp,129
  8024d0:	e7298004 	addi	fp,fp,-23040
  8024d4:	34000315 	stw	r16,12(r6)
  8024d8:	44000215 	stw	r16,8(r8)
  8024dc:	003f3e06 	br	8021d8 <_malloc_r+0x218>
  8024e0:	63000044 	addi	r12,r12,1
  8024e4:	608000cc 	andi	r2,r12,3
  8024e8:	10005d26 	beq	r2,zero,802660 <_malloc_r+0x6a0>
  8024ec:	18c00204 	addi	r3,r3,8
  8024f0:	003f5106 	br	802238 <_malloc_r+0x278>
  8024f4:	8089883a 	add	r4,r16,r2
  8024f8:	003f6d06 	br	8022b0 <_malloc_r+0x2f0>
  8024fc:	00805504 	movi	r2,340
  802500:	10c02036 	bltu	r2,r3,802584 <_malloc_r+0x5c4>
  802504:	8804d3fa 	srli	r2,r17,15
  802508:	11801dc4 	addi	r6,r2,119
  80250c:	300490fa 	slli	r2,r6,3
  802510:	003ed806 	br	802074 <_malloc_r+0xb4>
  802514:	48c000c4 	addi	r3,r9,3
  802518:	003f3106 	br	8021e0 <_malloc_r+0x220>
  80251c:	05c02074 	movhi	r23,129
  802520:	bdf5ae04 	addi	r23,r23,-10568
  802524:	b8800017 	ldw	r2,0(r23)
  802528:	988d883a 	add	r6,r19,r2
  80252c:	b9800015 	stw	r6,0(r23)
  802530:	293fb21e 	bne	r5,r4,8023fc <_malloc_r+0x43c>
  802534:	2083ffcc 	andi	r2,r4,4095
  802538:	103fb01e 	bne	r2,zero,8023fc <_malloc_r+0x43c>
  80253c:	e4000217 	ldw	r16,8(fp)
  802540:	9d45883a 	add	r2,r19,r21
  802544:	10800054 	ori	r2,r2,1
  802548:	80800115 	stw	r2,4(r16)
  80254c:	b8c00017 	ldw	r3,0(r23)
  802550:	d0a6a117 	ldw	r2,-25980(gp)
  802554:	10c0012e 	bgeu	r2,r3,80255c <_malloc_r+0x59c>
  802558:	d0e6a115 	stw	r3,-25980(gp)
  80255c:	d0a6a217 	ldw	r2,-25976(gp)
  802560:	10ff962e 	bgeu	r2,r3,8023bc <_malloc_r+0x3fc>
  802564:	d0e6a215 	stw	r3,-25976(gp)
  802568:	003f9406 	br	8023bc <_malloc_r+0x3fc>
  80256c:	00800104 	movi	r2,4
  802570:	11001e36 	bltu	r2,r4,8025ec <_malloc_r+0x62c>
  802574:	2804d1ba 	srli	r2,r5,6
  802578:	11000e04 	addi	r4,r2,56
  80257c:	200690fa 	slli	r3,r4,3
  802580:	003fc506 	br	802498 <_malloc_r+0x4d8>
  802584:	00815504 	movi	r2,1364
  802588:	10c01d2e 	bgeu	r2,r3,802600 <_malloc_r+0x640>
  80258c:	01801f84 	movi	r6,126
  802590:	0080fc04 	movi	r2,1008
  802594:	003eb706 	br	802074 <_malloc_r+0xb4>
  802598:	00800204 	movi	r2,8
  80259c:	10cbc83a 	sub	r5,r2,r3
  8025a0:	2169883a 	add	r20,r4,r5
  8025a4:	003f9e06 	br	802420 <_malloc_r+0x460>
  8025a8:	00bffe04 	movi	r2,-8
  8025ac:	a93ffd04 	addi	r4,r21,-12
  8025b0:	2088703a 	and	r4,r4,r2
  8025b4:	b10b883a 	add	r5,r22,r4
  8025b8:	00c00144 	movi	r3,5
  8025bc:	28c00215 	stw	r3,8(r5)
  8025c0:	28c00115 	stw	r3,4(r5)
  8025c4:	b0800117 	ldw	r2,4(r22)
  8025c8:	1080004c 	andi	r2,r2,1
  8025cc:	2084b03a 	or	r2,r4,r2
  8025d0:	b0800115 	stw	r2,4(r22)
  8025d4:	313fdd2e 	bgeu	r6,r4,80254c <_malloc_r+0x58c>
  8025d8:	b1400204 	addi	r5,r22,8
  8025dc:	9009883a 	mov	r4,r18
  8025e0:	08033f40 	call	8033f4 <_free_r>
  8025e4:	e4000217 	ldw	r16,8(fp)
  8025e8:	003fd806 	br	80254c <_malloc_r+0x58c>
  8025ec:	00800504 	movi	r2,20
  8025f0:	11001536 	bltu	r2,r4,802648 <_malloc_r+0x688>
  8025f4:	210016c4 	addi	r4,r4,91
  8025f8:	200690fa 	slli	r3,r4,3
  8025fc:	003fa606 	br	802498 <_malloc_r+0x4d8>
  802600:	8804d4ba 	srli	r2,r17,18
  802604:	11801f04 	addi	r6,r2,124
  802608:	300490fa 	slli	r2,r6,3
  80260c:	003e9906 	br	802074 <_malloc_r+0xb4>
  802610:	2009d0ba 	srai	r4,r4,2
  802614:	01402074 	movhi	r5,129
  802618:	29698004 	addi	r5,r5,-23040
  80261c:	00c00044 	movi	r3,1
  802620:	28800117 	ldw	r2,4(r5)
  802624:	1906983a 	sll	r3,r3,r4
  802628:	10c4b03a 	or	r2,r2,r3
  80262c:	28800115 	stw	r2,4(r5)
  802630:	003fa306 	br	8024c0 <_malloc_r+0x500>
  802634:	0027883a 	mov	r19,zero
  802638:	00c00044 	movi	r3,1
  80263c:	003f8606 	br	802458 <_malloc_r+0x498>
  802640:	d1200315 	stw	r4,-32756(gp)
  802644:	003f7306 	br	802414 <_malloc_r+0x454>
  802648:	00801504 	movi	r2,84
  80264c:	11001936 	bltu	r2,r4,8026b4 <_malloc_r+0x6f4>
  802650:	2804d33a 	srli	r2,r5,12
  802654:	11001b84 	addi	r4,r2,110
  802658:	200690fa 	slli	r3,r4,3
  80265c:	003f8e06 	br	802498 <_malloc_r+0x4d8>
  802660:	480b883a 	mov	r5,r9
  802664:	6807883a 	mov	r3,r13
  802668:	288000cc 	andi	r2,r5,3
  80266c:	18fffe04 	addi	r3,r3,-8
  802670:	297fffc4 	addi	r5,r5,-1
  802674:	10001526 	beq	r2,zero,8026cc <_malloc_r+0x70c>
  802678:	18800217 	ldw	r2,8(r3)
  80267c:	10fffa26 	beq	r2,r3,802668 <_malloc_r+0x6a8>
  802680:	2109883a 	add	r4,r4,r4
  802684:	393f1e36 	bltu	r7,r4,802300 <_malloc_r+0x340>
  802688:	203f1d26 	beq	r4,zero,802300 <_malloc_r+0x340>
  80268c:	21c4703a 	and	r2,r4,r7
  802690:	10000226 	beq	r2,zero,80269c <_malloc_r+0x6dc>
  802694:	6013883a 	mov	r9,r12
  802698:	003ee106 	br	802220 <_malloc_r+0x260>
  80269c:	2109883a 	add	r4,r4,r4
  8026a0:	3904703a 	and	r2,r7,r4
  8026a4:	63000104 	addi	r12,r12,4
  8026a8:	103ffc26 	beq	r2,zero,80269c <_malloc_r+0x6dc>
  8026ac:	6013883a 	mov	r9,r12
  8026b0:	003edb06 	br	802220 <_malloc_r+0x260>
  8026b4:	00805504 	movi	r2,340
  8026b8:	11000836 	bltu	r2,r4,8026dc <_malloc_r+0x71c>
  8026bc:	2804d3fa 	srli	r2,r5,15
  8026c0:	11001dc4 	addi	r4,r2,119
  8026c4:	200690fa 	slli	r3,r4,3
  8026c8:	003f7306 	br	802498 <_malloc_r+0x4d8>
  8026cc:	0104303a 	nor	r2,zero,r4
  8026d0:	388e703a 	and	r7,r7,r2
  8026d4:	e1c00115 	stw	r7,4(fp)
  8026d8:	003fe906 	br	802680 <_malloc_r+0x6c0>
  8026dc:	00815504 	movi	r2,1364
  8026e0:	1100032e 	bgeu	r2,r4,8026f0 <_malloc_r+0x730>
  8026e4:	01001f84 	movi	r4,126
  8026e8:	00c0fc04 	movi	r3,1008
  8026ec:	003f6a06 	br	802498 <_malloc_r+0x4d8>
  8026f0:	2804d4ba 	srli	r2,r5,18
  8026f4:	11001f04 	addi	r4,r2,124
  8026f8:	200690fa 	slli	r3,r4,3
  8026fc:	003f6606 	br	802498 <_malloc_r+0x4d8>

00802700 <memcpy>:
  802700:	01c003c4 	movi	r7,15
  802704:	2007883a 	mov	r3,r4
  802708:	3980032e 	bgeu	r7,r6,802718 <memcpy+0x18>
  80270c:	2904b03a 	or	r2,r5,r4
  802710:	108000cc 	andi	r2,r2,3
  802714:	10000926 	beq	r2,zero,80273c <memcpy+0x3c>
  802718:	30000626 	beq	r6,zero,802734 <memcpy+0x34>
  80271c:	30cd883a 	add	r6,r6,r3
  802720:	28800003 	ldbu	r2,0(r5)
  802724:	29400044 	addi	r5,r5,1
  802728:	18800005 	stb	r2,0(r3)
  80272c:	18c00044 	addi	r3,r3,1
  802730:	30fffb1e 	bne	r6,r3,802720 <memcpy+0x20>
  802734:	2005883a 	mov	r2,r4
  802738:	f800283a 	ret
  80273c:	3811883a 	mov	r8,r7
  802740:	200f883a 	mov	r7,r4
  802744:	28c00017 	ldw	r3,0(r5)
  802748:	31bffc04 	addi	r6,r6,-16
  80274c:	38c00015 	stw	r3,0(r7)
  802750:	28800117 	ldw	r2,4(r5)
  802754:	38800115 	stw	r2,4(r7)
  802758:	28c00217 	ldw	r3,8(r5)
  80275c:	38c00215 	stw	r3,8(r7)
  802760:	28800317 	ldw	r2,12(r5)
  802764:	29400404 	addi	r5,r5,16
  802768:	38800315 	stw	r2,12(r7)
  80276c:	39c00404 	addi	r7,r7,16
  802770:	41bff436 	bltu	r8,r6,802744 <memcpy+0x44>
  802774:	008000c4 	movi	r2,3
  802778:	1180072e 	bgeu	r2,r6,802798 <memcpy+0x98>
  80277c:	1007883a 	mov	r3,r2
  802780:	28800017 	ldw	r2,0(r5)
  802784:	31bfff04 	addi	r6,r6,-4
  802788:	29400104 	addi	r5,r5,4
  80278c:	38800015 	stw	r2,0(r7)
  802790:	39c00104 	addi	r7,r7,4
  802794:	19bffa36 	bltu	r3,r6,802780 <memcpy+0x80>
  802798:	3807883a 	mov	r3,r7
  80279c:	003fde06 	br	802718 <memcpy+0x18>

008027a0 <_sbrk_r>:
  8027a0:	defffd04 	addi	sp,sp,-12
  8027a4:	dc000015 	stw	r16,0(sp)
  8027a8:	04002074 	movhi	r16,129
  8027ac:	8435a704 	addi	r16,r16,-10596
  8027b0:	dc400115 	stw	r17,4(sp)
  8027b4:	80000015 	stw	zero,0(r16)
  8027b8:	2023883a 	mov	r17,r4
  8027bc:	2809883a 	mov	r4,r5
  8027c0:	dfc00215 	stw	ra,8(sp)
  8027c4:	080736c0 	call	80736c <sbrk>
  8027c8:	1007883a 	mov	r3,r2
  8027cc:	00bfffc4 	movi	r2,-1
  8027d0:	18800626 	beq	r3,r2,8027ec <_sbrk_r+0x4c>
  8027d4:	1805883a 	mov	r2,r3
  8027d8:	dfc00217 	ldw	ra,8(sp)
  8027dc:	dc400117 	ldw	r17,4(sp)
  8027e0:	dc000017 	ldw	r16,0(sp)
  8027e4:	dec00304 	addi	sp,sp,12
  8027e8:	f800283a 	ret
  8027ec:	80800017 	ldw	r2,0(r16)
  8027f0:	103ff826 	beq	r2,zero,8027d4 <_sbrk_r+0x34>
  8027f4:	88800015 	stw	r2,0(r17)
  8027f8:	1805883a 	mov	r2,r3
  8027fc:	dfc00217 	ldw	ra,8(sp)
  802800:	dc400117 	ldw	r17,4(sp)
  802804:	dc000017 	ldw	r16,0(sp)
  802808:	dec00304 	addi	sp,sp,12
  80280c:	f800283a 	ret

00802810 <print_e>:
  802810:	defff404 	addi	sp,sp,-48
  802814:	dcc00a15 	stw	r19,40(sp)
  802818:	dcc00c17 	ldw	r19,48(sp)
  80281c:	3005883a 	mov	r2,r6
  802820:	dc400815 	stw	r17,32(sp)
  802824:	2823883a 	mov	r17,r5
  802828:	100b883a 	mov	r5,r2
  80282c:	d8800604 	addi	r2,sp,24
  802830:	380d883a 	mov	r6,r7
  802834:	9a000044 	addi	r8,r19,1
  802838:	d8800115 	stw	r2,4(sp)
  80283c:	d8c00504 	addi	r3,sp,20
  802840:	d8800404 	addi	r2,sp,16
  802844:	01c00084 	movi	r7,2
  802848:	dc800915 	stw	r18,36(sp)
  80284c:	dc000715 	stw	r16,28(sp)
  802850:	dfc00b15 	stw	ra,44(sp)
  802854:	da000015 	stw	r8,0(sp)
  802858:	d8c00315 	stw	r3,12(sp)
  80285c:	d8800215 	stw	r2,8(sp)
  802860:	dc800d03 	ldbu	r18,52(sp)
  802864:	08050480 	call	805048 <_dtoa_r>
  802868:	dc000617 	ldw	r16,24(sp)
  80286c:	100b883a 	mov	r5,r2
  802870:	0089c3c4 	movi	r2,9999
  802874:	80805926 	beq	r16,r2,8029dc <print_e+0x1cc>
  802878:	28c00003 	ldbu	r3,0(r5)
  80287c:	89000044 	addi	r4,r17,1
  802880:	29400044 	addi	r5,r5,1
  802884:	88c00005 	stb	r3,0(r17)
  802888:	d8800e17 	ldw	r2,56(sp)
  80288c:	10004326 	beq	r2,zero,80299c <print_e+0x18c>
  802890:	00800b84 	movi	r2,46
  802894:	20800005 	stb	r2,0(r4)
  802898:	9811883a 	mov	r8,r19
  80289c:	21000044 	addi	r4,r4,1
  8028a0:	28800003 	ldbu	r2,0(r5)
  8028a4:	10000926 	beq	r2,zero,8028cc <print_e+0xbc>
  8028a8:	02000216 	blt	zero,r8,8028b4 <print_e+0xa4>
  8028ac:	00000706 	br	8028cc <print_e+0xbc>
  8028b0:	40000626 	beq	r8,zero,8028cc <print_e+0xbc>
  8028b4:	20800005 	stb	r2,0(r4)
  8028b8:	29400044 	addi	r5,r5,1
  8028bc:	28800003 	ldbu	r2,0(r5)
  8028c0:	423fffc4 	addi	r8,r8,-1
  8028c4:	21000044 	addi	r4,r4,1
  8028c8:	103ff91e 	bne	r2,zero,8028b0 <print_e+0xa0>
  8028cc:	90c03fcc 	andi	r3,r18,255
  8028d0:	18c0201c 	xori	r3,r3,128
  8028d4:	18ffe004 	addi	r3,r3,-128
  8028d8:	008019c4 	movi	r2,103
  8028dc:	18803226 	beq	r3,r2,8029a8 <print_e+0x198>
  8028e0:	008011c4 	movi	r2,71
  8028e4:	18803b26 	beq	r3,r2,8029d4 <print_e+0x1c4>
  8028e8:	0200080e 	bge	zero,r8,80290c <print_e+0xfc>
  8028ec:	2007883a 	mov	r3,r4
  8028f0:	4005883a 	mov	r2,r8
  8028f4:	01400c04 	movi	r5,48
  8028f8:	10bfffc4 	addi	r2,r2,-1
  8028fc:	19400005 	stb	r5,0(r3)
  802900:	18c00044 	addi	r3,r3,1
  802904:	103ffc1e 	bne	r2,zero,8028f8 <print_e+0xe8>
  802908:	2209883a 	add	r4,r4,r8
  80290c:	843fffc4 	addi	r16,r16,-1
  802910:	24800005 	stb	r18,0(r4)
  802914:	dc000615 	stw	r16,24(sp)
  802918:	80002816 	blt	r16,zero,8029bc <print_e+0x1ac>
  80291c:	00800ac4 	movi	r2,43
  802920:	20800045 	stb	r2,1(r4)
  802924:	24400084 	addi	r17,r4,2
  802928:	008018c4 	movi	r2,99
  80292c:	1400090e 	bge	r2,r16,802954 <print_e+0x144>
  802930:	8009883a 	mov	r4,r16
  802934:	01401904 	movi	r5,100
  802938:	08070b40 	call	8070b4 <__divsi3>
  80293c:	10c01924 	muli	r3,r2,100
  802940:	10800c04 	addi	r2,r2,48
  802944:	88800005 	stb	r2,0(r17)
  802948:	80e1c83a 	sub	r16,r16,r3
  80294c:	8c400044 	addi	r17,r17,1
  802950:	dc000615 	stw	r16,24(sp)
  802954:	8009883a 	mov	r4,r16
  802958:	01400284 	movi	r5,10
  80295c:	08070b40 	call	8070b4 <__divsi3>
  802960:	10c002a4 	muli	r3,r2,10
  802964:	10800c04 	addi	r2,r2,48
  802968:	88800005 	stb	r2,0(r17)
  80296c:	80c7c83a 	sub	r3,r16,r3
  802970:	18800c04 	addi	r2,r3,48
  802974:	88800045 	stb	r2,1(r17)
  802978:	88000085 	stb	zero,2(r17)
  80297c:	d8c00615 	stw	r3,24(sp)
  802980:	dfc00b17 	ldw	ra,44(sp)
  802984:	dcc00a17 	ldw	r19,40(sp)
  802988:	dc800917 	ldw	r18,36(sp)
  80298c:	dc400817 	ldw	r17,32(sp)
  802990:	dc000717 	ldw	r16,28(sp)
  802994:	dec00c04 	addi	sp,sp,48
  802998:	f800283a 	ret
  80299c:	983fbc1e 	bne	r19,zero,802890 <print_e+0x80>
  8029a0:	0011883a 	mov	r8,zero
  8029a4:	003fbe06 	br	8028a0 <print_e+0x90>
  8029a8:	04801944 	movi	r18,101
  8029ac:	843fffc4 	addi	r16,r16,-1
  8029b0:	24800005 	stb	r18,0(r4)
  8029b4:	dc000615 	stw	r16,24(sp)
  8029b8:	803fd80e 	bge	r16,zero,80291c <print_e+0x10c>
  8029bc:	00800b44 	movi	r2,45
  8029c0:	0421c83a 	sub	r16,zero,r16
  8029c4:	20800045 	stb	r2,1(r4)
  8029c8:	24400084 	addi	r17,r4,2
  8029cc:	dc000615 	stw	r16,24(sp)
  8029d0:	003fd506 	br	802928 <print_e+0x118>
  8029d4:	04801144 	movi	r18,69
  8029d8:	003fcc06 	br	80290c <print_e+0xfc>
  8029dc:	8809883a 	mov	r4,r17
  8029e0:	0804cf00 	call	804cf0 <strcpy>
  8029e4:	dfc00b17 	ldw	ra,44(sp)
  8029e8:	dcc00a17 	ldw	r19,40(sp)
  8029ec:	dc800917 	ldw	r18,36(sp)
  8029f0:	dc400817 	ldw	r17,32(sp)
  8029f4:	dc000717 	ldw	r16,28(sp)
  8029f8:	dec00c04 	addi	sp,sp,48
  8029fc:	f800283a 	ret

00802a00 <_gcvt>:
  802a00:	defff104 	addi	sp,sp,-60
  802a04:	dc400815 	stw	r17,32(sp)
  802a08:	0005883a 	mov	r2,zero
  802a0c:	3023883a 	mov	r17,r6
  802a10:	dcc00a15 	stw	r19,40(sp)
  802a14:	dc800915 	stw	r18,36(sp)
  802a18:	dc000715 	stw	r16,28(sp)
  802a1c:	2027883a 	mov	r19,r4
  802a20:	2821883a 	mov	r16,r5
  802a24:	3825883a 	mov	r18,r7
  802a28:	2809883a 	mov	r4,r5
  802a2c:	100d883a 	mov	r6,r2
  802a30:	880b883a 	mov	r5,r17
  802a34:	000f883a 	mov	r7,zero
  802a38:	dd800d15 	stw	r22,52(sp)
  802a3c:	dd400c15 	stw	r21,48(sp)
  802a40:	dd000b15 	stw	r20,44(sp)
  802a44:	dfc00e15 	stw	ra,56(sp)
  802a48:	dd400f17 	ldw	r21,60(sp)
  802a4c:	dd801117 	ldw	r22,68(sp)
  802a50:	dd001003 	ldbu	r20,64(sp)
  802a54:	0806d580 	call	806d58 <__ltdf2>
  802a58:	10008e16 	blt	r2,zero,802c94 <_gcvt+0x294>
  802a5c:	000d883a 	mov	r6,zero
  802a60:	000f883a 	mov	r7,zero
  802a64:	8009883a 	mov	r4,r16
  802a68:	880b883a 	mov	r5,r17
  802a6c:	0806b380 	call	806b38 <__eqdf2>
  802a70:	10000e1e 	bne	r2,zero,802aac <_gcvt+0xac>
  802a74:	00800c04 	movi	r2,48
  802a78:	a8800005 	stb	r2,0(r21)
  802a7c:	a8000045 	stb	zero,1(r21)
  802a80:	a805883a 	mov	r2,r21
  802a84:	dfc00e17 	ldw	ra,56(sp)
  802a88:	dd800d17 	ldw	r22,52(sp)
  802a8c:	dd400c17 	ldw	r21,48(sp)
  802a90:	dd000b17 	ldw	r20,44(sp)
  802a94:	dcc00a17 	ldw	r19,40(sp)
  802a98:	dc800917 	ldw	r18,36(sp)
  802a9c:	dc400817 	ldw	r17,32(sp)
  802aa0:	dc000717 	ldw	r16,28(sp)
  802aa4:	dec00f04 	addi	sp,sp,60
  802aa8:	f800283a 	ret
  802aac:	00bac734 	movhi	r2,60188
  802ab0:	1090cb44 	addi	r2,r2,17197
  802ab4:	00cfc6b4 	movhi	r3,16154
  802ab8:	18cdb884 	addi	r3,r3,14050
  802abc:	180f883a 	mov	r7,r3
  802ac0:	8009883a 	mov	r4,r16
  802ac4:	880b883a 	mov	r5,r17
  802ac8:	100d883a 	mov	r6,r2
  802acc:	0806de00 	call	806de0 <__ledf2>
  802ad0:	00800d16 	blt	zero,r2,802b08 <_gcvt+0x108>
  802ad4:	a0c03fcc 	andi	r3,r20,255
  802ad8:	18c0201c 	xori	r3,r3,128
  802adc:	90bfffc4 	addi	r2,r18,-1
  802ae0:	18ffe004 	addi	r3,r3,-128
  802ae4:	9809883a 	mov	r4,r19
  802ae8:	880f883a 	mov	r7,r17
  802aec:	a80b883a 	mov	r5,r21
  802af0:	800d883a 	mov	r6,r16
  802af4:	d8800015 	stw	r2,0(sp)
  802af8:	d8c00115 	stw	r3,4(sp)
  802afc:	dd800215 	stw	r22,8(sp)
  802b00:	08028100 	call	802810 <print_e>
  802b04:	003fde06 	br	802a80 <_gcvt+0x80>
  802b08:	9009883a 	mov	r4,r18
  802b0c:	0803b140 	call	803b14 <_mprec_log10>
  802b10:	180f883a 	mov	r7,r3
  802b14:	8009883a 	mov	r4,r16
  802b18:	880b883a 	mov	r5,r17
  802b1c:	100d883a 	mov	r6,r2
  802b20:	0806cd00 	call	806cd0 <__gedf2>
  802b24:	103feb0e 	bge	r2,zero,802ad4 <_gcvt+0xd4>
  802b28:	0005883a 	mov	r2,zero
  802b2c:	00cffc34 	movhi	r3,16368
  802b30:	180f883a 	mov	r7,r3
  802b34:	8009883a 	mov	r4,r16
  802b38:	880b883a 	mov	r5,r17
  802b3c:	100d883a 	mov	r6,r2
  802b40:	0806d580 	call	806d58 <__ltdf2>
  802b44:	10005616 	blt	r2,zero,802ca0 <_gcvt+0x2a0>
  802b48:	9809883a 	mov	r4,r19
  802b4c:	880d883a 	mov	r6,r17
  802b50:	800b883a 	mov	r5,r16
  802b54:	01c00084 	movi	r7,2
  802b58:	d8800504 	addi	r2,sp,20
  802b5c:	d8800215 	stw	r2,8(sp)
  802b60:	d8c00604 	addi	r3,sp,24
  802b64:	d8800404 	addi	r2,sp,16
  802b68:	d8c00315 	stw	r3,12(sp)
  802b6c:	dc800015 	stw	r18,0(sp)
  802b70:	d8800115 	stw	r2,4(sp)
  802b74:	08050480 	call	805048 <_dtoa_r>
  802b78:	d9000417 	ldw	r4,16(sp)
  802b7c:	100b883a 	mov	r5,r2
  802b80:	0089c3c4 	movi	r2,9999
  802b84:	20804b26 	beq	r4,r2,802cb4 <_gcvt+0x2b4>
  802b88:	28800003 	ldbu	r2,0(r5)
  802b8c:	10005026 	beq	r2,zero,802cd0 <_gcvt+0x2d0>
  802b90:	0100510e 	bge	zero,r4,802cd8 <_gcvt+0x2d8>
  802b94:	a807883a 	mov	r3,r21
  802b98:	00000106 	br	802ba0 <_gcvt+0x1a0>
  802b9c:	0100130e 	bge	zero,r4,802bec <_gcvt+0x1ec>
  802ba0:	18800005 	stb	r2,0(r3)
  802ba4:	213fffc4 	addi	r4,r4,-1
  802ba8:	d9000415 	stw	r4,16(sp)
  802bac:	29400044 	addi	r5,r5,1
  802bb0:	28800003 	ldbu	r2,0(r5)
  802bb4:	18c00044 	addi	r3,r3,1
  802bb8:	94bfffc4 	addi	r18,r18,-1
  802bbc:	103ff71e 	bne	r2,zero,802b9c <_gcvt+0x19c>
  802bc0:	01000a0e 	bge	zero,r4,802bec <_gcvt+0x1ec>
  802bc4:	0480090e 	bge	zero,r18,802bec <_gcvt+0x1ec>
  802bc8:	00800c04 	movi	r2,48
  802bcc:	00000106 	br	802bd4 <_gcvt+0x1d4>
  802bd0:	90000526 	beq	r18,zero,802be8 <_gcvt+0x1e8>
  802bd4:	213fffc4 	addi	r4,r4,-1
  802bd8:	18800005 	stb	r2,0(r3)
  802bdc:	94bfffc4 	addi	r18,r18,-1
  802be0:	18c00044 	addi	r3,r3,1
  802be4:	013ffa16 	blt	zero,r4,802bd0 <_gcvt+0x1d0>
  802be8:	d9000415 	stw	r4,16(sp)
  802bec:	b000021e 	bne	r22,zero,802bf8 <_gcvt+0x1f8>
  802bf0:	28800007 	ldb	r2,0(r5)
  802bf4:	10002526 	beq	r2,zero,802c8c <_gcvt+0x28c>
  802bf8:	a8c03126 	beq	r21,r3,802cc0 <_gcvt+0x2c0>
  802bfc:	00800b84 	movi	r2,46
  802c00:	18800005 	stb	r2,0(r3)
  802c04:	18c00044 	addi	r3,r3,1
  802c08:	20000b0e 	bge	r4,zero,802c38 <_gcvt+0x238>
  802c0c:	04800a0e 	bge	zero,r18,802c38 <_gcvt+0x238>
  802c10:	01800c04 	movi	r6,48
  802c14:	00000106 	br	802c1c <_gcvt+0x21c>
  802c18:	90000626 	beq	r18,zero,802c34 <_gcvt+0x234>
  802c1c:	20800044 	addi	r2,r4,1
  802c20:	19800005 	stb	r6,0(r3)
  802c24:	94bfffc4 	addi	r18,r18,-1
  802c28:	18c00044 	addi	r3,r3,1
  802c2c:	1009883a 	mov	r4,r2
  802c30:	103ff916 	blt	r2,zero,802c18 <_gcvt+0x218>
  802c34:	d8800415 	stw	r2,16(sp)
  802c38:	28800003 	ldbu	r2,0(r5)
  802c3c:	10000926 	beq	r2,zero,802c64 <_gcvt+0x264>
  802c40:	04800216 	blt	zero,r18,802c4c <_gcvt+0x24c>
  802c44:	00000706 	br	802c64 <_gcvt+0x264>
  802c48:	90000626 	beq	r18,zero,802c64 <_gcvt+0x264>
  802c4c:	18800005 	stb	r2,0(r3)
  802c50:	29400044 	addi	r5,r5,1
  802c54:	28800003 	ldbu	r2,0(r5)
  802c58:	94bfffc4 	addi	r18,r18,-1
  802c5c:	18c00044 	addi	r3,r3,1
  802c60:	103ff91e 	bne	r2,zero,802c48 <_gcvt+0x248>
  802c64:	b0000926 	beq	r22,zero,802c8c <_gcvt+0x28c>
  802c68:	0480080e 	bge	zero,r18,802c8c <_gcvt+0x28c>
  802c6c:	9009883a 	mov	r4,r18
  802c70:	1805883a 	mov	r2,r3
  802c74:	01400c04 	movi	r5,48
  802c78:	213fffc4 	addi	r4,r4,-1
  802c7c:	11400005 	stb	r5,0(r2)
  802c80:	10800044 	addi	r2,r2,1
  802c84:	203ffc1e 	bne	r4,zero,802c78 <_gcvt+0x278>
  802c88:	1c87883a 	add	r3,r3,r18
  802c8c:	18000005 	stb	zero,0(r3)
  802c90:	003f7b06 	br	802a80 <_gcvt+0x80>
  802c94:	88e0003c 	xorhi	r3,r17,32768
  802c98:	1823883a 	mov	r17,r3
  802c9c:	003f6f06 	br	802a5c <_gcvt+0x5c>
  802ca0:	9809883a 	mov	r4,r19
  802ca4:	880d883a 	mov	r6,r17
  802ca8:	800b883a 	mov	r5,r16
  802cac:	01c000c4 	movi	r7,3
  802cb0:	003fa906 	br	802b58 <_gcvt+0x158>
  802cb4:	a809883a 	mov	r4,r21
  802cb8:	0804cf00 	call	804cf0 <strcpy>
  802cbc:	003f7006 	br	802a80 <_gcvt+0x80>
  802cc0:	00800c04 	movi	r2,48
  802cc4:	a8c00044 	addi	r3,r21,1
  802cc8:	a8800005 	stb	r2,0(r21)
  802ccc:	003fcb06 	br	802bfc <_gcvt+0x1fc>
  802cd0:	a807883a 	mov	r3,r21
  802cd4:	003fba06 	br	802bc0 <_gcvt+0x1c0>
  802cd8:	a807883a 	mov	r3,r21
  802cdc:	003fc306 	br	802bec <_gcvt+0x1ec>

00802ce0 <_dcvt>:
  802ce0:	defff504 	addi	sp,sp,-44
  802ce4:	d8800d17 	ldw	r2,52(sp)
  802ce8:	3011883a 	mov	r8,r6
  802cec:	dc800915 	stw	r18,36(sp)
  802cf0:	10ffeec4 	addi	r3,r2,-69
  802cf4:	12c03fcc 	andi	r11,r2,255
  802cf8:	19803fcc 	andi	r6,r3,255
  802cfc:	5ac0201c 	xori	r11,r11,128
  802d00:	00c00884 	movi	r3,34
  802d04:	dc400815 	stw	r17,32(sp)
  802d08:	dc000715 	stw	r16,28(sp)
  802d0c:	dfc00a15 	stw	ra,40(sp)
  802d10:	2015883a 	mov	r10,r4
  802d14:	2823883a 	mov	r17,r5
  802d18:	3813883a 	mov	r9,r7
  802d1c:	dc000b17 	ldw	r16,44(sp)
  802d20:	dc800e17 	ldw	r18,56(sp)
  802d24:	5affe004 	addi	r11,r11,-128
  802d28:	19803436 	bltu	r3,r6,802dfc <_dcvt+0x11c>
  802d2c:	3185883a 	add	r2,r6,r6
  802d30:	1085883a 	add	r2,r2,r2
  802d34:	00c02034 	movhi	r3,128
  802d38:	18cb5204 	addi	r3,r3,11592
  802d3c:	10c5883a 	add	r2,r2,r3
  802d40:	11000017 	ldw	r4,0(r2)
  802d44:	2000683a 	jmp	r4
  802d48:	00802e18 	cmpnei	r2,zero,184
  802d4c:	00802e4c 	andi	r2,zero,185
  802d50:	00802dd4 	movui	r2,183
  802d54:	00802dfc 	xorhi	r2,zero,183
  802d58:	00802dfc 	xorhi	r2,zero,183
  802d5c:	00802dfc 	xorhi	r2,zero,183
  802d60:	00802dfc 	xorhi	r2,zero,183
  802d64:	00802dfc 	xorhi	r2,zero,183
  802d68:	00802dfc 	xorhi	r2,zero,183
  802d6c:	00802dfc 	xorhi	r2,zero,183
  802d70:	00802dfc 	xorhi	r2,zero,183
  802d74:	00802dfc 	xorhi	r2,zero,183
  802d78:	00802dfc 	xorhi	r2,zero,183
  802d7c:	00802dfc 	xorhi	r2,zero,183
  802d80:	00802dfc 	xorhi	r2,zero,183
  802d84:	00802dfc 	xorhi	r2,zero,183
  802d88:	00802dfc 	xorhi	r2,zero,183
  802d8c:	00802dfc 	xorhi	r2,zero,183
  802d90:	00802dfc 	xorhi	r2,zero,183
  802d94:	00802dfc 	xorhi	r2,zero,183
  802d98:	00802dfc 	xorhi	r2,zero,183
  802d9c:	00802dfc 	xorhi	r2,zero,183
  802da0:	00802dfc 	xorhi	r2,zero,183
  802da4:	00802dfc 	xorhi	r2,zero,183
  802da8:	00802dfc 	xorhi	r2,zero,183
  802dac:	00802dfc 	xorhi	r2,zero,183
  802db0:	00802dfc 	xorhi	r2,zero,183
  802db4:	00802dfc 	xorhi	r2,zero,183
  802db8:	00802dfc 	xorhi	r2,zero,183
  802dbc:	00802dfc 	xorhi	r2,zero,183
  802dc0:	00802dfc 	xorhi	r2,zero,183
  802dc4:	00802dfc 	xorhi	r2,zero,183
  802dc8:	00802e18 	cmpnei	r2,zero,184
  802dcc:	00802e4c 	andi	r2,zero,185
  802dd0:	00802dd4 	movui	r2,183
  802dd4:	8000011e 	bne	r16,zero,802ddc <_dcvt+0xfc>
  802dd8:	04000044 	movi	r16,1
  802ddc:	5009883a 	mov	r4,r10
  802de0:	480d883a 	mov	r6,r9
  802de4:	800f883a 	mov	r7,r16
  802de8:	400b883a 	mov	r5,r8
  802dec:	dac00115 	stw	r11,4(sp)
  802df0:	dc800215 	stw	r18,8(sp)
  802df4:	dc400015 	stw	r17,0(sp)
  802df8:	0802a000 	call	802a00 <_gcvt>
  802dfc:	8805883a 	mov	r2,r17
  802e00:	dfc00a17 	ldw	ra,40(sp)
  802e04:	dc800917 	ldw	r18,36(sp)
  802e08:	dc400817 	ldw	r17,32(sp)
  802e0c:	dc000717 	ldw	r16,28(sp)
  802e10:	dec00b04 	addi	sp,sp,44
  802e14:	f800283a 	ret
  802e18:	5009883a 	mov	r4,r10
  802e1c:	400d883a 	mov	r6,r8
  802e20:	dc000015 	stw	r16,0(sp)
  802e24:	dac00115 	stw	r11,4(sp)
  802e28:	dc800215 	stw	r18,8(sp)
  802e2c:	08028100 	call	802810 <print_e>
  802e30:	8805883a 	mov	r2,r17
  802e34:	dfc00a17 	ldw	ra,40(sp)
  802e38:	dc800917 	ldw	r18,36(sp)
  802e3c:	dc400817 	ldw	r17,32(sp)
  802e40:	dc000717 	ldw	r16,28(sp)
  802e44:	dec00b04 	addi	sp,sp,44
  802e48:	f800283a 	ret
  802e4c:	80000126 	beq	r16,zero,802e54 <_dcvt+0x174>
  802e50:	04800044 	movi	r18,1
  802e54:	d8800504 	addi	r2,sp,20
  802e58:	d8c00604 	addi	r3,sp,24
  802e5c:	400b883a 	mov	r5,r8
  802e60:	d8800215 	stw	r2,8(sp)
  802e64:	5009883a 	mov	r4,r10
  802e68:	d8800404 	addi	r2,sp,16
  802e6c:	480d883a 	mov	r6,r9
  802e70:	01c000c4 	movi	r7,3
  802e74:	d8c00315 	stw	r3,12(sp)
  802e78:	dc000015 	stw	r16,0(sp)
  802e7c:	d8800115 	stw	r2,4(sp)
  802e80:	08050480 	call	805048 <_dtoa_r>
  802e84:	d9400417 	ldw	r5,16(sp)
  802e88:	1007883a 	mov	r3,r2
  802e8c:	0089c3c4 	movi	r2,9999
  802e90:	28804626 	beq	r5,r2,802fac <_dcvt+0x2cc>
  802e94:	18800003 	ldbu	r2,0(r3)
  802e98:	10004c26 	beq	r2,zero,802fcc <_dcvt+0x2ec>
  802e9c:	0140120e 	bge	zero,r5,802ee8 <_dcvt+0x208>
  802ea0:	8809883a 	mov	r4,r17
  802ea4:	180d883a 	mov	r6,r3
  802ea8:	00000106 	br	802eb0 <_dcvt+0x1d0>
  802eac:	0140100e 	bge	zero,r5,802ef0 <_dcvt+0x210>
  802eb0:	20800005 	stb	r2,0(r4)
  802eb4:	297fffc4 	addi	r5,r5,-1
  802eb8:	31800044 	addi	r6,r6,1
  802ebc:	d9400415 	stw	r5,16(sp)
  802ec0:	30800003 	ldbu	r2,0(r6)
  802ec4:	21000044 	addi	r4,r4,1
  802ec8:	103ff81e 	bne	r2,zero,802eac <_dcvt+0x1cc>
  802ecc:	0140080e 	bge	zero,r5,802ef0 <_dcvt+0x210>
  802ed0:	00800c04 	movi	r2,48
  802ed4:	20800005 	stb	r2,0(r4)
  802ed8:	297fffc4 	addi	r5,r5,-1
  802edc:	21000044 	addi	r4,r4,1
  802ee0:	d9400415 	stw	r5,16(sp)
  802ee4:	003ff906 	br	802ecc <_dcvt+0x1ec>
  802ee8:	8809883a 	mov	r4,r17
  802eec:	180d883a 	mov	r6,r3
  802ef0:	9000021e 	bne	r18,zero,802efc <_dcvt+0x21c>
  802ef4:	30800007 	ldb	r2,0(r6)
  802ef8:	10002426 	beq	r2,zero,802f8c <_dcvt+0x2ac>
  802efc:	19802f26 	beq	r3,r6,802fbc <_dcvt+0x2dc>
  802f00:	00800b84 	movi	r2,46
  802f04:	20800005 	stb	r2,0(r4)
  802f08:	21000044 	addi	r4,r4,1
  802f0c:	28000b0e 	bge	r5,zero,802f3c <_dcvt+0x25c>
  802f10:	04000216 	blt	zero,r16,802f1c <_dcvt+0x23c>
  802f14:	00000906 	br	802f3c <_dcvt+0x25c>
  802f18:	80000826 	beq	r16,zero,802f3c <_dcvt+0x25c>
  802f1c:	00800c04 	movi	r2,48
  802f20:	28c00044 	addi	r3,r5,1
  802f24:	20800005 	stb	r2,0(r4)
  802f28:	d8c00415 	stw	r3,16(sp)
  802f2c:	21000044 	addi	r4,r4,1
  802f30:	843fffc4 	addi	r16,r16,-1
  802f34:	180b883a 	mov	r5,r3
  802f38:	183ff716 	blt	r3,zero,802f18 <_dcvt+0x238>
  802f3c:	30800003 	ldbu	r2,0(r6)
  802f40:	10000926 	beq	r2,zero,802f68 <_dcvt+0x288>
  802f44:	04000216 	blt	zero,r16,802f50 <_dcvt+0x270>
  802f48:	00001006 	br	802f8c <_dcvt+0x2ac>
  802f4c:	80000f26 	beq	r16,zero,802f8c <_dcvt+0x2ac>
  802f50:	20800005 	stb	r2,0(r4)
  802f54:	31800044 	addi	r6,r6,1
  802f58:	30800003 	ldbu	r2,0(r6)
  802f5c:	21000044 	addi	r4,r4,1
  802f60:	843fffc4 	addi	r16,r16,-1
  802f64:	103ff91e 	bne	r2,zero,802f4c <_dcvt+0x26c>
  802f68:	0400080e 	bge	zero,r16,802f8c <_dcvt+0x2ac>
  802f6c:	2007883a 	mov	r3,r4
  802f70:	8005883a 	mov	r2,r16
  802f74:	01400c04 	movi	r5,48
  802f78:	10bfffc4 	addi	r2,r2,-1
  802f7c:	19400005 	stb	r5,0(r3)
  802f80:	18c00044 	addi	r3,r3,1
  802f84:	103ffc1e 	bne	r2,zero,802f78 <_dcvt+0x298>
  802f88:	2409883a 	add	r4,r4,r16
  802f8c:	8805883a 	mov	r2,r17
  802f90:	20000005 	stb	zero,0(r4)
  802f94:	dfc00a17 	ldw	ra,40(sp)
  802f98:	dc800917 	ldw	r18,36(sp)
  802f9c:	dc400817 	ldw	r17,32(sp)
  802fa0:	dc000717 	ldw	r16,28(sp)
  802fa4:	dec00b04 	addi	sp,sp,44
  802fa8:	f800283a 	ret
  802fac:	180b883a 	mov	r5,r3
  802fb0:	8809883a 	mov	r4,r17
  802fb4:	0804cf00 	call	804cf0 <strcpy>
  802fb8:	003f9006 	br	802dfc <_dcvt+0x11c>
  802fbc:	00800c04 	movi	r2,48
  802fc0:	20800005 	stb	r2,0(r4)
  802fc4:	21000044 	addi	r4,r4,1
  802fc8:	003fcd06 	br	802f00 <_dcvt+0x220>
  802fcc:	8809883a 	mov	r4,r17
  802fd0:	180d883a 	mov	r6,r3
  802fd4:	003fbd06 	br	802ecc <_dcvt+0x1ec>

00802fd8 <ecvtbuf>:
  802fd8:	defff404 	addi	sp,sp,-48
  802fdc:	dc800715 	stw	r18,28(sp)
  802fe0:	dc800d17 	ldw	r18,52(sp)
  802fe4:	dd000915 	stw	r20,36(sp)
  802fe8:	dcc00815 	stw	r19,32(sp)
  802fec:	dc400615 	stw	r17,24(sp)
  802ff0:	dc000515 	stw	r16,20(sp)
  802ff4:	dfc00b15 	stw	ra,44(sp)
  802ff8:	dd400a15 	stw	r21,40(sp)
  802ffc:	2021883a 	mov	r16,r4
  803000:	2823883a 	mov	r17,r5
  803004:	3027883a 	mov	r19,r6
  803008:	3829883a 	mov	r20,r7
  80300c:	90002d26 	beq	r18,zero,8030c4 <ecvtbuf+0xec>
  803010:	05402074 	movhi	r21,129
  803014:	ad6f0404 	addi	r21,r21,-17392
  803018:	d8800c17 	ldw	r2,48(sp)
  80301c:	a9000017 	ldw	r4,0(r21)
  803020:	880d883a 	mov	r6,r17
  803024:	d8800215 	stw	r2,8(sp)
  803028:	800b883a 	mov	r5,r16
  80302c:	d8800404 	addi	r2,sp,16
  803030:	01c00084 	movi	r7,2
  803034:	dd000115 	stw	r20,4(sp)
  803038:	dcc00015 	stw	r19,0(sp)
  80303c:	d8800315 	stw	r2,12(sp)
  803040:	08050480 	call	805048 <_dtoa_r>
  803044:	1007883a 	mov	r3,r2
  803048:	d8800417 	ldw	r2,16(sp)
  80304c:	1880252e 	bgeu	r3,r2,8030e4 <ecvtbuf+0x10c>
  803050:	900d883a 	mov	r6,r18
  803054:	0009883a 	mov	r4,zero
  803058:	18800003 	ldbu	r2,0(r3)
  80305c:	18c00044 	addi	r3,r3,1
  803060:	21000044 	addi	r4,r4,1
  803064:	30800005 	stb	r2,0(r6)
  803068:	d8800417 	ldw	r2,16(sp)
  80306c:	31800044 	addi	r6,r6,1
  803070:	18bff936 	bltu	r3,r2,803058 <ecvtbuf+0x80>
  803074:	24c0080e 	bge	r4,r19,803098 <ecvtbuf+0xc0>
  803078:	9905c83a 	sub	r2,r19,r4
  80307c:	3007883a 	mov	r3,r6
  803080:	1185883a 	add	r2,r2,r6
  803084:	01000c04 	movi	r4,48
  803088:	19000005 	stb	r4,0(r3)
  80308c:	18c00044 	addi	r3,r3,1
  803090:	10fffd1e 	bne	r2,r3,803088 <ecvtbuf+0xb0>
  803094:	100d883a 	mov	r6,r2
  803098:	30000005 	stb	zero,0(r6)
  80309c:	9005883a 	mov	r2,r18
  8030a0:	dfc00b17 	ldw	ra,44(sp)
  8030a4:	dd400a17 	ldw	r21,40(sp)
  8030a8:	dd000917 	ldw	r20,36(sp)
  8030ac:	dcc00817 	ldw	r19,32(sp)
  8030b0:	dc800717 	ldw	r18,28(sp)
  8030b4:	dc400617 	ldw	r17,24(sp)
  8030b8:	dc000517 	ldw	r16,20(sp)
  8030bc:	dec00c04 	addi	sp,sp,48
  8030c0:	f800283a 	ret
  8030c4:	05402074 	movhi	r21,129
  8030c8:	ad6f0404 	addi	r21,r21,-17392
  8030cc:	a9000017 	ldw	r4,0(r21)
  8030d0:	20801417 	ldw	r2,80(r4)
  8030d4:	3080060e 	bge	r6,r2,8030f0 <ecvtbuf+0x118>
  8030d8:	a8800017 	ldw	r2,0(r21)
  8030dc:	14801517 	ldw	r18,84(r2)
  8030e0:	003fcd06 	br	803018 <ecvtbuf+0x40>
  8030e4:	900d883a 	mov	r6,r18
  8030e8:	0009883a 	mov	r4,zero
  8030ec:	003fe106 	br	803074 <ecvtbuf+0x9c>
  8030f0:	21401517 	ldw	r5,84(r4)
  8030f4:	34800044 	addi	r18,r6,1
  8030f8:	900d883a 	mov	r6,r18
  8030fc:	08046fc0 	call	8046fc <_realloc_r>
  803100:	1007883a 	mov	r3,r2
  803104:	10000426 	beq	r2,zero,803118 <ecvtbuf+0x140>
  803108:	a8800017 	ldw	r2,0(r21)
  80310c:	10c01515 	stw	r3,84(r2)
  803110:	14801415 	stw	r18,80(r2)
  803114:	003ff006 	br	8030d8 <ecvtbuf+0x100>
  803118:	0005883a 	mov	r2,zero
  80311c:	003fe006 	br	8030a0 <ecvtbuf+0xc8>

00803120 <fcvtbuf>:
  803120:	defff304 	addi	sp,sp,-52
  803124:	dc800715 	stw	r18,28(sp)
  803128:	dc800e17 	ldw	r18,56(sp)
  80312c:	dd800b15 	stw	r22,44(sp)
  803130:	dd000915 	stw	r20,36(sp)
  803134:	dcc00815 	stw	r19,32(sp)
  803138:	dc400615 	stw	r17,24(sp)
  80313c:	dc000515 	stw	r16,20(sp)
  803140:	dfc00c15 	stw	ra,48(sp)
  803144:	dd400a15 	stw	r21,40(sp)
  803148:	2021883a 	mov	r16,r4
  80314c:	2823883a 	mov	r17,r5
  803150:	3027883a 	mov	r19,r6
  803154:	3829883a 	mov	r20,r7
  803158:	dd800d17 	ldw	r22,52(sp)
  80315c:	90004326 	beq	r18,zero,80326c <fcvtbuf+0x14c>
  803160:	05402074 	movhi	r21,129
  803164:	ad6f0404 	addi	r21,r21,-17392
  803168:	0005883a 	mov	r2,zero
  80316c:	00cffc34 	movhi	r3,16368
  803170:	180f883a 	mov	r7,r3
  803174:	8009883a 	mov	r4,r16
  803178:	880b883a 	mov	r5,r17
  80317c:	100d883a 	mov	r6,r2
  803180:	0806d580 	call	806d58 <__ltdf2>
  803184:	1000080e 	bge	r2,zero,8031a8 <fcvtbuf+0x88>
  803188:	0005883a 	mov	r2,zero
  80318c:	00effc34 	movhi	r3,49136
  803190:	180f883a 	mov	r7,r3
  803194:	8009883a 	mov	r4,r16
  803198:	880b883a 	mov	r5,r17
  80319c:	100d883a 	mov	r6,r2
  8031a0:	0806c480 	call	806c48 <__gtdf2>
  8031a4:	00802c16 	blt	zero,r2,803258 <fcvtbuf+0x138>
  8031a8:	a9000017 	ldw	r4,0(r21)
  8031ac:	880d883a 	mov	r6,r17
  8031b0:	800b883a 	mov	r5,r16
  8031b4:	01c000c4 	movi	r7,3
  8031b8:	d8800404 	addi	r2,sp,16
  8031bc:	dd800215 	stw	r22,8(sp)
  8031c0:	dcc00015 	stw	r19,0(sp)
  8031c4:	dd000115 	stw	r20,4(sp)
  8031c8:	d8800315 	stw	r2,12(sp)
  8031cc:	08050480 	call	805048 <_dtoa_r>
  8031d0:	1009883a 	mov	r4,r2
  8031d4:	d8c00417 	ldw	r3,16(sp)
  8031d8:	a0800017 	ldw	r2,0(r20)
  8031dc:	008dc83a 	sub	r6,zero,r2
  8031e0:	20c02b2e 	bgeu	r4,r3,803290 <fcvtbuf+0x170>
  8031e4:	9007883a 	mov	r3,r18
  8031e8:	20800003 	ldbu	r2,0(r4)
  8031ec:	21000044 	addi	r4,r4,1
  8031f0:	31800044 	addi	r6,r6,1
  8031f4:	18800005 	stb	r2,0(r3)
  8031f8:	d8800417 	ldw	r2,16(sp)
  8031fc:	18c00044 	addi	r3,r3,1
  803200:	20bff936 	bltu	r4,r2,8031e8 <fcvtbuf+0xc8>
  803204:	34c0080e 	bge	r6,r19,803228 <fcvtbuf+0x108>
  803208:	9985c83a 	sub	r2,r19,r6
  80320c:	1809883a 	mov	r4,r3
  803210:	10c5883a 	add	r2,r2,r3
  803214:	00c00c04 	movi	r3,48
  803218:	20c00005 	stb	r3,0(r4)
  80321c:	21000044 	addi	r4,r4,1
  803220:	113ffd1e 	bne	r2,r4,803218 <fcvtbuf+0xf8>
  803224:	1007883a 	mov	r3,r2
  803228:	18000005 	stb	zero,0(r3)
  80322c:	9005883a 	mov	r2,r18
  803230:	dfc00c17 	ldw	ra,48(sp)
  803234:	dd800b17 	ldw	r22,44(sp)
  803238:	dd400a17 	ldw	r21,40(sp)
  80323c:	dd000917 	ldw	r20,36(sp)
  803240:	dcc00817 	ldw	r19,32(sp)
  803244:	dc800717 	ldw	r18,28(sp)
  803248:	dc400617 	ldw	r17,24(sp)
  80324c:	dc000517 	ldw	r16,20(sp)
  803250:	dec00d04 	addi	sp,sp,52
  803254:	f800283a 	ret
  803258:	a9000017 	ldw	r4,0(r21)
  80325c:	880d883a 	mov	r6,r17
  803260:	800b883a 	mov	r5,r16
  803264:	01c00084 	movi	r7,2
  803268:	003fd306 	br	8031b8 <fcvtbuf+0x98>
  80326c:	05402074 	movhi	r21,129
  803270:	ad6f0404 	addi	r21,r21,-17392
  803274:	a9000017 	ldw	r4,0(r21)
  803278:	30c008c4 	addi	r3,r6,35
  80327c:	20801417 	ldw	r2,80(r4)
  803280:	1880050e 	bge	r3,r2,803298 <fcvtbuf+0x178>
  803284:	a8800017 	ldw	r2,0(r21)
  803288:	14801517 	ldw	r18,84(r2)
  80328c:	003fb606 	br	803168 <fcvtbuf+0x48>
  803290:	9007883a 	mov	r3,r18
  803294:	003fdb06 	br	803204 <fcvtbuf+0xe4>
  803298:	21401517 	ldw	r5,84(r4)
  80329c:	34800904 	addi	r18,r6,36
  8032a0:	900d883a 	mov	r6,r18
  8032a4:	08046fc0 	call	8046fc <_realloc_r>
  8032a8:	1007883a 	mov	r3,r2
  8032ac:	10000426 	beq	r2,zero,8032c0 <fcvtbuf+0x1a0>
  8032b0:	a8800017 	ldw	r2,0(r21)
  8032b4:	10c01515 	stw	r3,84(r2)
  8032b8:	14801415 	stw	r18,80(r2)
  8032bc:	003ff106 	br	803284 <fcvtbuf+0x164>
  8032c0:	0005883a 	mov	r2,zero
  8032c4:	003fda06 	br	803230 <fcvtbuf+0x110>

008032c8 <_malloc_trim_r>:
  8032c8:	defffb04 	addi	sp,sp,-20
  8032cc:	dcc00315 	stw	r19,12(sp)
  8032d0:	04c02074 	movhi	r19,129
  8032d4:	9ce98004 	addi	r19,r19,-23040
  8032d8:	dc800215 	stw	r18,8(sp)
  8032dc:	dc400115 	stw	r17,4(sp)
  8032e0:	dc000015 	stw	r16,0(sp)
  8032e4:	2823883a 	mov	r17,r5
  8032e8:	2025883a 	mov	r18,r4
  8032ec:	dfc00415 	stw	ra,16(sp)
  8032f0:	08073500 	call	807350 <__malloc_lock>
  8032f4:	98800217 	ldw	r2,8(r19)
  8032f8:	9009883a 	mov	r4,r18
  8032fc:	000b883a 	mov	r5,zero
  803300:	10c00117 	ldw	r3,4(r2)
  803304:	00bfff04 	movi	r2,-4
  803308:	18a0703a 	and	r16,r3,r2
  80330c:	8463c83a 	sub	r17,r16,r17
  803310:	8c43fbc4 	addi	r17,r17,4079
  803314:	8822d33a 	srli	r17,r17,12
  803318:	0083ffc4 	movi	r2,4095
  80331c:	8c7fffc4 	addi	r17,r17,-1
  803320:	8822933a 	slli	r17,r17,12
  803324:	1440060e 	bge	r2,r17,803340 <_malloc_trim_r+0x78>
  803328:	08027a00 	call	8027a0 <_sbrk_r>
  80332c:	98c00217 	ldw	r3,8(r19)
  803330:	9009883a 	mov	r4,r18
  803334:	044bc83a 	sub	r5,zero,r17
  803338:	80c7883a 	add	r3,r16,r3
  80333c:	10c00926 	beq	r2,r3,803364 <_malloc_trim_r+0x9c>
  803340:	08073540 	call	807354 <__malloc_unlock>
  803344:	0005883a 	mov	r2,zero
  803348:	dfc00417 	ldw	ra,16(sp)
  80334c:	dcc00317 	ldw	r19,12(sp)
  803350:	dc800217 	ldw	r18,8(sp)
  803354:	dc400117 	ldw	r17,4(sp)
  803358:	dc000017 	ldw	r16,0(sp)
  80335c:	dec00504 	addi	sp,sp,20
  803360:	f800283a 	ret
  803364:	9009883a 	mov	r4,r18
  803368:	08027a00 	call	8027a0 <_sbrk_r>
  80336c:	844dc83a 	sub	r6,r16,r17
  803370:	00ffffc4 	movi	r3,-1
  803374:	9009883a 	mov	r4,r18
  803378:	000b883a 	mov	r5,zero
  80337c:	01c02074 	movhi	r7,129
  803380:	39f5ae04 	addi	r7,r7,-10568
  803384:	31800054 	ori	r6,r6,1
  803388:	10c00926 	beq	r2,r3,8033b0 <_malloc_trim_r+0xe8>
  80338c:	38800017 	ldw	r2,0(r7)
  803390:	98c00217 	ldw	r3,8(r19)
  803394:	9009883a 	mov	r4,r18
  803398:	1445c83a 	sub	r2,r2,r17
  80339c:	38800015 	stw	r2,0(r7)
  8033a0:	19800115 	stw	r6,4(r3)
  8033a4:	08073540 	call	807354 <__malloc_unlock>
  8033a8:	00800044 	movi	r2,1
  8033ac:	003fe606 	br	803348 <_malloc_trim_r+0x80>
  8033b0:	08027a00 	call	8027a0 <_sbrk_r>
  8033b4:	99800217 	ldw	r6,8(r19)
  8033b8:	100f883a 	mov	r7,r2
  8033bc:	9009883a 	mov	r4,r18
  8033c0:	1187c83a 	sub	r3,r2,r6
  8033c4:	008003c4 	movi	r2,15
  8033c8:	19400054 	ori	r5,r3,1
  8033cc:	10ffdc0e 	bge	r2,r3,803340 <_malloc_trim_r+0x78>
  8033d0:	00802074 	movhi	r2,129
  8033d4:	10af0704 	addi	r2,r2,-17380
  8033d8:	10c00017 	ldw	r3,0(r2)
  8033dc:	00802074 	movhi	r2,129
  8033e0:	10b5ae04 	addi	r2,r2,-10568
  8033e4:	31400115 	stw	r5,4(r6)
  8033e8:	38c7c83a 	sub	r3,r7,r3
  8033ec:	10c00015 	stw	r3,0(r2)
  8033f0:	003fd306 	br	803340 <_malloc_trim_r+0x78>

008033f4 <_free_r>:
  8033f4:	defffd04 	addi	sp,sp,-12
  8033f8:	dc400115 	stw	r17,4(sp)
  8033fc:	dc000015 	stw	r16,0(sp)
  803400:	dfc00215 	stw	ra,8(sp)
  803404:	2821883a 	mov	r16,r5
  803408:	2023883a 	mov	r17,r4
  80340c:	28005a26 	beq	r5,zero,803578 <_free_r+0x184>
  803410:	08073500 	call	807350 <__malloc_lock>
  803414:	823ffe04 	addi	r8,r16,-8
  803418:	41400117 	ldw	r5,4(r8)
  80341c:	00bfff84 	movi	r2,-2
  803420:	02802074 	movhi	r10,129
  803424:	52a98004 	addi	r10,r10,-23040
  803428:	288e703a 	and	r7,r5,r2
  80342c:	41cd883a 	add	r6,r8,r7
  803430:	30c00117 	ldw	r3,4(r6)
  803434:	51000217 	ldw	r4,8(r10)
  803438:	00bfff04 	movi	r2,-4
  80343c:	1892703a 	and	r9,r3,r2
  803440:	5017883a 	mov	r11,r10
  803444:	31006726 	beq	r6,r4,8035e4 <_free_r+0x1f0>
  803448:	2880004c 	andi	r2,r5,1
  80344c:	1005003a 	cmpeq	r2,r2,zero
  803450:	32400115 	stw	r9,4(r6)
  803454:	10001a1e 	bne	r2,zero,8034c0 <_free_r+0xcc>
  803458:	000b883a 	mov	r5,zero
  80345c:	3247883a 	add	r3,r6,r9
  803460:	18800117 	ldw	r2,4(r3)
  803464:	1080004c 	andi	r2,r2,1
  803468:	1000231e 	bne	r2,zero,8034f8 <_free_r+0x104>
  80346c:	280ac03a 	cmpne	r5,r5,zero
  803470:	3a4f883a 	add	r7,r7,r9
  803474:	2800451e 	bne	r5,zero,80358c <_free_r+0x198>
  803478:	31000217 	ldw	r4,8(r6)
  80347c:	00802074 	movhi	r2,129
  803480:	10a98204 	addi	r2,r2,-23032
  803484:	20807b26 	beq	r4,r2,803674 <_free_r+0x280>
  803488:	30800317 	ldw	r2,12(r6)
  80348c:	3a07883a 	add	r3,r7,r8
  803490:	19c00015 	stw	r7,0(r3)
  803494:	11000215 	stw	r4,8(r2)
  803498:	20800315 	stw	r2,12(r4)
  80349c:	38800054 	ori	r2,r7,1
  8034a0:	40800115 	stw	r2,4(r8)
  8034a4:	28001a26 	beq	r5,zero,803510 <_free_r+0x11c>
  8034a8:	8809883a 	mov	r4,r17
  8034ac:	dfc00217 	ldw	ra,8(sp)
  8034b0:	dc400117 	ldw	r17,4(sp)
  8034b4:	dc000017 	ldw	r16,0(sp)
  8034b8:	dec00304 	addi	sp,sp,12
  8034bc:	08073541 	jmpi	807354 <__malloc_unlock>
  8034c0:	80bffe17 	ldw	r2,-8(r16)
  8034c4:	50c00204 	addi	r3,r10,8
  8034c8:	4091c83a 	sub	r8,r8,r2
  8034cc:	41000217 	ldw	r4,8(r8)
  8034d0:	388f883a 	add	r7,r7,r2
  8034d4:	20c06126 	beq	r4,r3,80365c <_free_r+0x268>
  8034d8:	40800317 	ldw	r2,12(r8)
  8034dc:	3247883a 	add	r3,r6,r9
  8034e0:	000b883a 	mov	r5,zero
  8034e4:	11000215 	stw	r4,8(r2)
  8034e8:	20800315 	stw	r2,12(r4)
  8034ec:	18800117 	ldw	r2,4(r3)
  8034f0:	1080004c 	andi	r2,r2,1
  8034f4:	103fdd26 	beq	r2,zero,80346c <_free_r+0x78>
  8034f8:	38800054 	ori	r2,r7,1
  8034fc:	3a07883a 	add	r3,r7,r8
  803500:	280ac03a 	cmpne	r5,r5,zero
  803504:	40800115 	stw	r2,4(r8)
  803508:	19c00015 	stw	r7,0(r3)
  80350c:	283fe61e 	bne	r5,zero,8034a8 <_free_r+0xb4>
  803510:	00807fc4 	movi	r2,511
  803514:	11c01f2e 	bgeu	r2,r7,803594 <_free_r+0x1a0>
  803518:	3806d27a 	srli	r3,r7,9
  80351c:	1800481e 	bne	r3,zero,803640 <_free_r+0x24c>
  803520:	3804d0fa 	srli	r2,r7,3
  803524:	100690fa 	slli	r3,r2,3
  803528:	1acd883a 	add	r6,r3,r11
  80352c:	31400217 	ldw	r5,8(r6)
  803530:	31405926 	beq	r6,r5,803698 <_free_r+0x2a4>
  803534:	28800117 	ldw	r2,4(r5)
  803538:	00ffff04 	movi	r3,-4
  80353c:	10c4703a 	and	r2,r2,r3
  803540:	3880022e 	bgeu	r7,r2,80354c <_free_r+0x158>
  803544:	29400217 	ldw	r5,8(r5)
  803548:	317ffa1e 	bne	r6,r5,803534 <_free_r+0x140>
  80354c:	29800317 	ldw	r6,12(r5)
  803550:	41800315 	stw	r6,12(r8)
  803554:	41400215 	stw	r5,8(r8)
  803558:	8809883a 	mov	r4,r17
  80355c:	2a000315 	stw	r8,12(r5)
  803560:	32000215 	stw	r8,8(r6)
  803564:	dfc00217 	ldw	ra,8(sp)
  803568:	dc400117 	ldw	r17,4(sp)
  80356c:	dc000017 	ldw	r16,0(sp)
  803570:	dec00304 	addi	sp,sp,12
  803574:	08073541 	jmpi	807354 <__malloc_unlock>
  803578:	dfc00217 	ldw	ra,8(sp)
  80357c:	dc400117 	ldw	r17,4(sp)
  803580:	dc000017 	ldw	r16,0(sp)
  803584:	dec00304 	addi	sp,sp,12
  803588:	f800283a 	ret
  80358c:	31000217 	ldw	r4,8(r6)
  803590:	003fbd06 	br	803488 <_free_r+0x94>
  803594:	3806d0fa 	srli	r3,r7,3
  803598:	00800044 	movi	r2,1
  80359c:	51400117 	ldw	r5,4(r10)
  8035a0:	180890fa 	slli	r4,r3,3
  8035a4:	1807d0ba 	srai	r3,r3,2
  8035a8:	22c9883a 	add	r4,r4,r11
  8035ac:	21800217 	ldw	r6,8(r4)
  8035b0:	10c4983a 	sll	r2,r2,r3
  8035b4:	41000315 	stw	r4,12(r8)
  8035b8:	41800215 	stw	r6,8(r8)
  8035bc:	288ab03a 	or	r5,r5,r2
  8035c0:	22000215 	stw	r8,8(r4)
  8035c4:	8809883a 	mov	r4,r17
  8035c8:	51400115 	stw	r5,4(r10)
  8035cc:	32000315 	stw	r8,12(r6)
  8035d0:	dfc00217 	ldw	ra,8(sp)
  8035d4:	dc400117 	ldw	r17,4(sp)
  8035d8:	dc000017 	ldw	r16,0(sp)
  8035dc:	dec00304 	addi	sp,sp,12
  8035e0:	08073541 	jmpi	807354 <__malloc_unlock>
  8035e4:	2880004c 	andi	r2,r5,1
  8035e8:	3a4d883a 	add	r6,r7,r9
  8035ec:	1000071e 	bne	r2,zero,80360c <_free_r+0x218>
  8035f0:	80bffe17 	ldw	r2,-8(r16)
  8035f4:	4091c83a 	sub	r8,r8,r2
  8035f8:	41000317 	ldw	r4,12(r8)
  8035fc:	40c00217 	ldw	r3,8(r8)
  803600:	308d883a 	add	r6,r6,r2
  803604:	20c00215 	stw	r3,8(r4)
  803608:	19000315 	stw	r4,12(r3)
  80360c:	00802074 	movhi	r2,129
  803610:	10af0604 	addi	r2,r2,-17384
  803614:	11000017 	ldw	r4,0(r2)
  803618:	30c00054 	ori	r3,r6,1
  80361c:	52000215 	stw	r8,8(r10)
  803620:	40c00115 	stw	r3,4(r8)
  803624:	313fa036 	bltu	r6,r4,8034a8 <_free_r+0xb4>
  803628:	00802074 	movhi	r2,129
  80362c:	10b5a404 	addi	r2,r2,-10608
  803630:	11400017 	ldw	r5,0(r2)
  803634:	8809883a 	mov	r4,r17
  803638:	08032c80 	call	8032c8 <_malloc_trim_r>
  80363c:	003f9a06 	br	8034a8 <_free_r+0xb4>
  803640:	00800104 	movi	r2,4
  803644:	10c0072e 	bgeu	r2,r3,803664 <_free_r+0x270>
  803648:	00800504 	movi	r2,20
  80364c:	10c01936 	bltu	r2,r3,8036b4 <_free_r+0x2c0>
  803650:	188016c4 	addi	r2,r3,91
  803654:	100690fa 	slli	r3,r2,3
  803658:	003fb306 	br	803528 <_free_r+0x134>
  80365c:	01400044 	movi	r5,1
  803660:	003f7e06 	br	80345c <_free_r+0x68>
  803664:	3804d1ba 	srli	r2,r7,6
  803668:	10800e04 	addi	r2,r2,56
  80366c:	100690fa 	slli	r3,r2,3
  803670:	003fad06 	br	803528 <_free_r+0x134>
  803674:	22000315 	stw	r8,12(r4)
  803678:	22000215 	stw	r8,8(r4)
  80367c:	3a05883a 	add	r2,r7,r8
  803680:	38c00054 	ori	r3,r7,1
  803684:	11c00015 	stw	r7,0(r2)
  803688:	41000215 	stw	r4,8(r8)
  80368c:	40c00115 	stw	r3,4(r8)
  803690:	41000315 	stw	r4,12(r8)
  803694:	003f8406 	br	8034a8 <_free_r+0xb4>
  803698:	1005d0ba 	srai	r2,r2,2
  80369c:	00c00044 	movi	r3,1
  8036a0:	51000117 	ldw	r4,4(r10)
  8036a4:	1886983a 	sll	r3,r3,r2
  8036a8:	20c8b03a 	or	r4,r4,r3
  8036ac:	51000115 	stw	r4,4(r10)
  8036b0:	003fa706 	br	803550 <_free_r+0x15c>
  8036b4:	00801504 	movi	r2,84
  8036b8:	10c00436 	bltu	r2,r3,8036cc <_free_r+0x2d8>
  8036bc:	3804d33a 	srli	r2,r7,12
  8036c0:	10801b84 	addi	r2,r2,110
  8036c4:	100690fa 	slli	r3,r2,3
  8036c8:	003f9706 	br	803528 <_free_r+0x134>
  8036cc:	00805504 	movi	r2,340
  8036d0:	10c00436 	bltu	r2,r3,8036e4 <_free_r+0x2f0>
  8036d4:	3804d3fa 	srli	r2,r7,15
  8036d8:	10801dc4 	addi	r2,r2,119
  8036dc:	100690fa 	slli	r3,r2,3
  8036e0:	003f9106 	br	803528 <_free_r+0x134>
  8036e4:	00815504 	movi	r2,1364
  8036e8:	10c0032e 	bgeu	r2,r3,8036f8 <_free_r+0x304>
  8036ec:	00801f84 	movi	r2,126
  8036f0:	00c0fc04 	movi	r3,1008
  8036f4:	003f8c06 	br	803528 <_free_r+0x134>
  8036f8:	3804d4ba 	srli	r2,r7,18
  8036fc:	10801f04 	addi	r2,r2,124
  803700:	100690fa 	slli	r3,r2,3
  803704:	003f8806 	br	803528 <_free_r+0x134>

00803708 <_Bfree>:
  803708:	28000826 	beq	r5,zero,80372c <_Bfree+0x24>
  80370c:	28800117 	ldw	r2,4(r5)
  803710:	21001317 	ldw	r4,76(r4)
  803714:	1085883a 	add	r2,r2,r2
  803718:	1085883a 	add	r2,r2,r2
  80371c:	1105883a 	add	r2,r2,r4
  803720:	10c00017 	ldw	r3,0(r2)
  803724:	28c00015 	stw	r3,0(r5)
  803728:	11400015 	stw	r5,0(r2)
  80372c:	f800283a 	ret

00803730 <__hi0bits>:
  803730:	20bfffec 	andhi	r2,r4,65535
  803734:	10001426 	beq	r2,zero,803788 <__hi0bits+0x58>
  803738:	0007883a 	mov	r3,zero
  80373c:	20bfc02c 	andhi	r2,r4,65280
  803740:	1000021e 	bne	r2,zero,80374c <__hi0bits+0x1c>
  803744:	2008923a 	slli	r4,r4,8
  803748:	18c00204 	addi	r3,r3,8
  80374c:	20bc002c 	andhi	r2,r4,61440
  803750:	1000021e 	bne	r2,zero,80375c <__hi0bits+0x2c>
  803754:	2008913a 	slli	r4,r4,4
  803758:	18c00104 	addi	r3,r3,4
  80375c:	20b0002c 	andhi	r2,r4,49152
  803760:	1000031e 	bne	r2,zero,803770 <__hi0bits+0x40>
  803764:	2105883a 	add	r2,r4,r4
  803768:	18c00084 	addi	r3,r3,2
  80376c:	1089883a 	add	r4,r2,r2
  803770:	20000316 	blt	r4,zero,803780 <__hi0bits+0x50>
  803774:	2090002c 	andhi	r2,r4,16384
  803778:	10000626 	beq	r2,zero,803794 <__hi0bits+0x64>
  80377c:	18c00044 	addi	r3,r3,1
  803780:	1805883a 	mov	r2,r3
  803784:	f800283a 	ret
  803788:	2008943a 	slli	r4,r4,16
  80378c:	00c00404 	movi	r3,16
  803790:	003fea06 	br	80373c <__hi0bits+0xc>
  803794:	00c00804 	movi	r3,32
  803798:	1805883a 	mov	r2,r3
  80379c:	f800283a 	ret

008037a0 <__lo0bits>:
  8037a0:	20c00017 	ldw	r3,0(r4)
  8037a4:	188001cc 	andi	r2,r3,7
  8037a8:	10000a26 	beq	r2,zero,8037d4 <__lo0bits+0x34>
  8037ac:	1880004c 	andi	r2,r3,1
  8037b0:	1005003a 	cmpeq	r2,r2,zero
  8037b4:	10002126 	beq	r2,zero,80383c <__lo0bits+0x9c>
  8037b8:	1880008c 	andi	r2,r3,2
  8037bc:	1000251e 	bne	r2,zero,803854 <__lo0bits+0xb4>
  8037c0:	1804d0ba 	srli	r2,r3,2
  8037c4:	01400084 	movi	r5,2
  8037c8:	20800015 	stw	r2,0(r4)
  8037cc:	2805883a 	mov	r2,r5
  8037d0:	f800283a 	ret
  8037d4:	18bfffcc 	andi	r2,r3,65535
  8037d8:	10001526 	beq	r2,zero,803830 <__lo0bits+0x90>
  8037dc:	000b883a 	mov	r5,zero
  8037e0:	18803fcc 	andi	r2,r3,255
  8037e4:	1000021e 	bne	r2,zero,8037f0 <__lo0bits+0x50>
  8037e8:	1806d23a 	srli	r3,r3,8
  8037ec:	29400204 	addi	r5,r5,8
  8037f0:	188003cc 	andi	r2,r3,15
  8037f4:	1000021e 	bne	r2,zero,803800 <__lo0bits+0x60>
  8037f8:	1806d13a 	srli	r3,r3,4
  8037fc:	29400104 	addi	r5,r5,4
  803800:	188000cc 	andi	r2,r3,3
  803804:	1000021e 	bne	r2,zero,803810 <__lo0bits+0x70>
  803808:	1806d0ba 	srli	r3,r3,2
  80380c:	29400084 	addi	r5,r5,2
  803810:	1880004c 	andi	r2,r3,1
  803814:	1000031e 	bne	r2,zero,803824 <__lo0bits+0x84>
  803818:	1806d07a 	srli	r3,r3,1
  80381c:	18000a26 	beq	r3,zero,803848 <__lo0bits+0xa8>
  803820:	29400044 	addi	r5,r5,1
  803824:	2805883a 	mov	r2,r5
  803828:	20c00015 	stw	r3,0(r4)
  80382c:	f800283a 	ret
  803830:	1806d43a 	srli	r3,r3,16
  803834:	01400404 	movi	r5,16
  803838:	003fe906 	br	8037e0 <__lo0bits+0x40>
  80383c:	000b883a 	mov	r5,zero
  803840:	2805883a 	mov	r2,r5
  803844:	f800283a 	ret
  803848:	01400804 	movi	r5,32
  80384c:	2805883a 	mov	r2,r5
  803850:	f800283a 	ret
  803854:	1804d07a 	srli	r2,r3,1
  803858:	01400044 	movi	r5,1
  80385c:	20800015 	stw	r2,0(r4)
  803860:	003fda06 	br	8037cc <__lo0bits+0x2c>

00803864 <__mcmp>:
  803864:	20800417 	ldw	r2,16(r4)
  803868:	28c00417 	ldw	r3,16(r5)
  80386c:	10cfc83a 	sub	r7,r2,r3
  803870:	38000c1e 	bne	r7,zero,8038a4 <__mcmp+0x40>
  803874:	18c5883a 	add	r2,r3,r3
  803878:	1085883a 	add	r2,r2,r2
  80387c:	10c00504 	addi	r3,r2,20
  803880:	21000504 	addi	r4,r4,20
  803884:	28cb883a 	add	r5,r5,r3
  803888:	2085883a 	add	r2,r4,r2
  80388c:	10bfff04 	addi	r2,r2,-4
  803890:	297fff04 	addi	r5,r5,-4
  803894:	11800017 	ldw	r6,0(r2)
  803898:	28c00017 	ldw	r3,0(r5)
  80389c:	30c0031e 	bne	r6,r3,8038ac <__mcmp+0x48>
  8038a0:	20bffa36 	bltu	r4,r2,80388c <__mcmp+0x28>
  8038a4:	3805883a 	mov	r2,r7
  8038a8:	f800283a 	ret
  8038ac:	30c00336 	bltu	r6,r3,8038bc <__mcmp+0x58>
  8038b0:	01c00044 	movi	r7,1
  8038b4:	3805883a 	mov	r2,r7
  8038b8:	f800283a 	ret
  8038bc:	01ffffc4 	movi	r7,-1
  8038c0:	003ff806 	br	8038a4 <__mcmp+0x40>

008038c4 <__ulp>:
  8038c4:	295ffc2c 	andhi	r5,r5,32752
  8038c8:	013f3034 	movhi	r4,64704
  8038cc:	290b883a 	add	r5,r5,r4
  8038d0:	0145c83a 	sub	r2,zero,r5
  8038d4:	1007d53a 	srai	r3,r2,20
  8038d8:	000d883a 	mov	r6,zero
  8038dc:	0140040e 	bge	zero,r5,8038f0 <__ulp+0x2c>
  8038e0:	280f883a 	mov	r7,r5
  8038e4:	3807883a 	mov	r3,r7
  8038e8:	3005883a 	mov	r2,r6
  8038ec:	f800283a 	ret
  8038f0:	008004c4 	movi	r2,19
  8038f4:	193ffb04 	addi	r4,r3,-20
  8038f8:	10c00c0e 	bge	r2,r3,80392c <__ulp+0x68>
  8038fc:	008007c4 	movi	r2,31
  803900:	1107c83a 	sub	r3,r2,r4
  803904:	00800784 	movi	r2,30
  803908:	01400044 	movi	r5,1
  80390c:	11000216 	blt	r2,r4,803918 <__ulp+0x54>
  803910:	00800044 	movi	r2,1
  803914:	10ca983a 	sll	r5,r2,r3
  803918:	000f883a 	mov	r7,zero
  80391c:	280d883a 	mov	r6,r5
  803920:	3807883a 	mov	r3,r7
  803924:	3005883a 	mov	r2,r6
  803928:	f800283a 	ret
  80392c:	00800234 	movhi	r2,8
  803930:	10cfd83a 	sra	r7,r2,r3
  803934:	000d883a 	mov	r6,zero
  803938:	3005883a 	mov	r2,r6
  80393c:	3807883a 	mov	r3,r7
  803940:	f800283a 	ret

00803944 <__b2d>:
  803944:	20800417 	ldw	r2,16(r4)
  803948:	defff904 	addi	sp,sp,-28
  80394c:	dd000415 	stw	r20,16(sp)
  803950:	1085883a 	add	r2,r2,r2
  803954:	25000504 	addi	r20,r4,20
  803958:	1085883a 	add	r2,r2,r2
  80395c:	dc000015 	stw	r16,0(sp)
  803960:	a0a1883a 	add	r16,r20,r2
  803964:	dd400515 	stw	r21,20(sp)
  803968:	857fff17 	ldw	r21,-4(r16)
  80396c:	dc400115 	stw	r17,4(sp)
  803970:	dfc00615 	stw	ra,24(sp)
  803974:	a809883a 	mov	r4,r21
  803978:	2823883a 	mov	r17,r5
  80397c:	dcc00315 	stw	r19,12(sp)
  803980:	dc800215 	stw	r18,8(sp)
  803984:	08037300 	call	803730 <__hi0bits>
  803988:	100b883a 	mov	r5,r2
  80398c:	00800804 	movi	r2,32
  803990:	1145c83a 	sub	r2,r2,r5
  803994:	88800015 	stw	r2,0(r17)
  803998:	00800284 	movi	r2,10
  80399c:	80ffff04 	addi	r3,r16,-4
  8039a0:	11401416 	blt	r2,r5,8039f4 <__b2d+0xb0>
  8039a4:	008002c4 	movi	r2,11
  8039a8:	1149c83a 	sub	r4,r2,r5
  8039ac:	a0c02736 	bltu	r20,r3,803a4c <__b2d+0x108>
  8039b0:	000d883a 	mov	r6,zero
  8039b4:	28800544 	addi	r2,r5,21
  8039b8:	a906d83a 	srl	r3,r21,r4
  8039bc:	a884983a 	sll	r2,r21,r2
  8039c0:	1ccffc34 	orhi	r19,r3,16368
  8039c4:	11a4b03a 	or	r18,r2,r6
  8039c8:	9005883a 	mov	r2,r18
  8039cc:	9807883a 	mov	r3,r19
  8039d0:	dfc00617 	ldw	ra,24(sp)
  8039d4:	dd400517 	ldw	r21,20(sp)
  8039d8:	dd000417 	ldw	r20,16(sp)
  8039dc:	dcc00317 	ldw	r19,12(sp)
  8039e0:	dc800217 	ldw	r18,8(sp)
  8039e4:	dc400117 	ldw	r17,4(sp)
  8039e8:	dc000017 	ldw	r16,0(sp)
  8039ec:	dec00704 	addi	sp,sp,28
  8039f0:	f800283a 	ret
  8039f4:	a0c00e36 	bltu	r20,r3,803a30 <__b2d+0xec>
  8039f8:	293ffd44 	addi	r4,r5,-11
  8039fc:	000d883a 	mov	r6,zero
  803a00:	20000f26 	beq	r4,zero,803a40 <__b2d+0xfc>
  803a04:	00800804 	movi	r2,32
  803a08:	110bc83a 	sub	r5,r2,r4
  803a0c:	a0c01236 	bltu	r20,r3,803a58 <__b2d+0x114>
  803a10:	000f883a 	mov	r7,zero
  803a14:	a904983a 	sll	r2,r21,r4
  803a18:	3146d83a 	srl	r3,r6,r5
  803a1c:	3108983a 	sll	r4,r6,r4
  803a20:	108ffc34 	orhi	r2,r2,16368
  803a24:	18a6b03a 	or	r19,r3,r2
  803a28:	3924b03a 	or	r18,r7,r4
  803a2c:	003fe606 	br	8039c8 <__b2d+0x84>
  803a30:	293ffd44 	addi	r4,r5,-11
  803a34:	81bffe17 	ldw	r6,-8(r16)
  803a38:	80fffe04 	addi	r3,r16,-8
  803a3c:	203ff11e 	bne	r4,zero,803a04 <__b2d+0xc0>
  803a40:	accffc34 	orhi	r19,r21,16368
  803a44:	3025883a 	mov	r18,r6
  803a48:	003fdf06 	br	8039c8 <__b2d+0x84>
  803a4c:	18bfff17 	ldw	r2,-4(r3)
  803a50:	110cd83a 	srl	r6,r2,r4
  803a54:	003fd706 	br	8039b4 <__b2d+0x70>
  803a58:	18bfff17 	ldw	r2,-4(r3)
  803a5c:	114ed83a 	srl	r7,r2,r5
  803a60:	003fec06 	br	803a14 <__b2d+0xd0>

00803a64 <__ratio>:
  803a64:	defff904 	addi	sp,sp,-28
  803a68:	dc400215 	stw	r17,8(sp)
  803a6c:	2823883a 	mov	r17,r5
  803a70:	d80b883a 	mov	r5,sp
  803a74:	dfc00615 	stw	ra,24(sp)
  803a78:	dd000515 	stw	r20,20(sp)
  803a7c:	dcc00415 	stw	r19,16(sp)
  803a80:	dc800315 	stw	r18,12(sp)
  803a84:	2025883a 	mov	r18,r4
  803a88:	08039440 	call	803944 <__b2d>
  803a8c:	8809883a 	mov	r4,r17
  803a90:	d9400104 	addi	r5,sp,4
  803a94:	1027883a 	mov	r19,r2
  803a98:	1829883a 	mov	r20,r3
  803a9c:	08039440 	call	803944 <__b2d>
  803aa0:	89000417 	ldw	r4,16(r17)
  803aa4:	91c00417 	ldw	r7,16(r18)
  803aa8:	d9800117 	ldw	r6,4(sp)
  803aac:	180b883a 	mov	r5,r3
  803ab0:	390fc83a 	sub	r7,r7,r4
  803ab4:	1009883a 	mov	r4,r2
  803ab8:	d8800017 	ldw	r2,0(sp)
  803abc:	380e917a 	slli	r7,r7,5
  803ac0:	2011883a 	mov	r8,r4
  803ac4:	1185c83a 	sub	r2,r2,r6
  803ac8:	11c5883a 	add	r2,r2,r7
  803acc:	1006953a 	slli	r3,r2,20
  803ad0:	2813883a 	mov	r9,r5
  803ad4:	00800d0e 	bge	zero,r2,803b0c <__ratio+0xa8>
  803ad8:	1d29883a 	add	r20,r3,r20
  803adc:	a00b883a 	mov	r5,r20
  803ae0:	480f883a 	mov	r7,r9
  803ae4:	9809883a 	mov	r4,r19
  803ae8:	400d883a 	mov	r6,r8
  803aec:	08011ec0 	call	8011ec <__divdf3>
  803af0:	dfc00617 	ldw	ra,24(sp)
  803af4:	dd000517 	ldw	r20,20(sp)
  803af8:	dcc00417 	ldw	r19,16(sp)
  803afc:	dc800317 	ldw	r18,12(sp)
  803b00:	dc400217 	ldw	r17,8(sp)
  803b04:	dec00704 	addi	sp,sp,28
  803b08:	f800283a 	ret
  803b0c:	28d3c83a 	sub	r9,r5,r3
  803b10:	003ff206 	br	803adc <__ratio+0x78>

00803b14 <_mprec_log10>:
  803b14:	defffe04 	addi	sp,sp,-8
  803b18:	008005c4 	movi	r2,23
  803b1c:	dc000015 	stw	r16,0(sp)
  803b20:	dfc00115 	stw	ra,4(sp)
  803b24:	2021883a 	mov	r16,r4
  803b28:	11000c16 	blt	r2,r4,803b5c <_mprec_log10+0x48>
  803b2c:	200490fa 	slli	r2,r4,3
  803b30:	00c02074 	movhi	r3,129
  803b34:	18e82b04 	addi	r3,r3,-24404
  803b38:	10c5883a 	add	r2,r2,r3
  803b3c:	12400117 	ldw	r9,4(r2)
  803b40:	12000017 	ldw	r8,0(r2)
  803b44:	4807883a 	mov	r3,r9
  803b48:	4005883a 	mov	r2,r8
  803b4c:	dfc00117 	ldw	ra,4(sp)
  803b50:	dc000017 	ldw	r16,0(sp)
  803b54:	dec00204 	addi	sp,sp,8
  803b58:	f800283a 	ret
  803b5c:	0011883a 	mov	r8,zero
  803b60:	024ffc34 	movhi	r9,16368
  803b64:	0005883a 	mov	r2,zero
  803b68:	00d00934 	movhi	r3,16420
  803b6c:	480b883a 	mov	r5,r9
  803b70:	4009883a 	mov	r4,r8
  803b74:	180f883a 	mov	r7,r3
  803b78:	100d883a 	mov	r6,r2
  803b7c:	08067740 	call	806774 <__muldf3>
  803b80:	843fffc4 	addi	r16,r16,-1
  803b84:	1011883a 	mov	r8,r2
  803b88:	1813883a 	mov	r9,r3
  803b8c:	803ff51e 	bne	r16,zero,803b64 <_mprec_log10+0x50>
  803b90:	4005883a 	mov	r2,r8
  803b94:	4807883a 	mov	r3,r9
  803b98:	dfc00117 	ldw	ra,4(sp)
  803b9c:	dc000017 	ldw	r16,0(sp)
  803ba0:	dec00204 	addi	sp,sp,8
  803ba4:	f800283a 	ret

00803ba8 <__copybits>:
  803ba8:	297fffc4 	addi	r5,r5,-1
  803bac:	30800417 	ldw	r2,16(r6)
  803bb0:	280bd17a 	srai	r5,r5,5
  803bb4:	31800504 	addi	r6,r6,20
  803bb8:	1085883a 	add	r2,r2,r2
  803bbc:	294b883a 	add	r5,r5,r5
  803bc0:	294b883a 	add	r5,r5,r5
  803bc4:	1085883a 	add	r2,r2,r2
  803bc8:	290b883a 	add	r5,r5,r4
  803bcc:	3087883a 	add	r3,r6,r2
  803bd0:	29400104 	addi	r5,r5,4
  803bd4:	30c0052e 	bgeu	r6,r3,803bec <__copybits+0x44>
  803bd8:	30800017 	ldw	r2,0(r6)
  803bdc:	31800104 	addi	r6,r6,4
  803be0:	20800015 	stw	r2,0(r4)
  803be4:	21000104 	addi	r4,r4,4
  803be8:	30fffb36 	bltu	r6,r3,803bd8 <__copybits+0x30>
  803bec:	2140032e 	bgeu	r4,r5,803bfc <__copybits+0x54>
  803bf0:	20000015 	stw	zero,0(r4)
  803bf4:	21000104 	addi	r4,r4,4
  803bf8:	217ffd36 	bltu	r4,r5,803bf0 <__copybits+0x48>
  803bfc:	f800283a 	ret

00803c00 <__any_on>:
  803c00:	20800417 	ldw	r2,16(r4)
  803c04:	2807d17a 	srai	r3,r5,5
  803c08:	21000504 	addi	r4,r4,20
  803c0c:	10c00d0e 	bge	r2,r3,803c44 <__any_on+0x44>
  803c10:	1085883a 	add	r2,r2,r2
  803c14:	1085883a 	add	r2,r2,r2
  803c18:	208d883a 	add	r6,r4,r2
  803c1c:	2180182e 	bgeu	r4,r6,803c80 <__any_on+0x80>
  803c20:	30bfff17 	ldw	r2,-4(r6)
  803c24:	30ffff04 	addi	r3,r6,-4
  803c28:	1000041e 	bne	r2,zero,803c3c <__any_on+0x3c>
  803c2c:	20c0142e 	bgeu	r4,r3,803c80 <__any_on+0x80>
  803c30:	18ffff04 	addi	r3,r3,-4
  803c34:	18800017 	ldw	r2,0(r3)
  803c38:	103ffc26 	beq	r2,zero,803c2c <__any_on+0x2c>
  803c3c:	00800044 	movi	r2,1
  803c40:	f800283a 	ret
  803c44:	18800a0e 	bge	r3,r2,803c70 <__any_on+0x70>
  803c48:	294007cc 	andi	r5,r5,31
  803c4c:	28000826 	beq	r5,zero,803c70 <__any_on+0x70>
  803c50:	18c5883a 	add	r2,r3,r3
  803c54:	1085883a 	add	r2,r2,r2
  803c58:	208d883a 	add	r6,r4,r2
  803c5c:	30c00017 	ldw	r3,0(r6)
  803c60:	1944d83a 	srl	r2,r3,r5
  803c64:	1144983a 	sll	r2,r2,r5
  803c68:	18bff41e 	bne	r3,r2,803c3c <__any_on+0x3c>
  803c6c:	003feb06 	br	803c1c <__any_on+0x1c>
  803c70:	18c5883a 	add	r2,r3,r3
  803c74:	1085883a 	add	r2,r2,r2
  803c78:	208d883a 	add	r6,r4,r2
  803c7c:	003fe706 	br	803c1c <__any_on+0x1c>
  803c80:	0005883a 	mov	r2,zero
  803c84:	f800283a 	ret

00803c88 <_Balloc>:
  803c88:	20c01317 	ldw	r3,76(r4)
  803c8c:	defffb04 	addi	sp,sp,-20
  803c90:	dcc00315 	stw	r19,12(sp)
  803c94:	dc800215 	stw	r18,8(sp)
  803c98:	dfc00415 	stw	ra,16(sp)
  803c9c:	2825883a 	mov	r18,r5
  803ca0:	dc400115 	stw	r17,4(sp)
  803ca4:	dc000015 	stw	r16,0(sp)
  803ca8:	2027883a 	mov	r19,r4
  803cac:	01800404 	movi	r6,16
  803cb0:	01400104 	movi	r5,4
  803cb4:	18001726 	beq	r3,zero,803d14 <_Balloc+0x8c>
  803cb8:	01400044 	movi	r5,1
  803cbc:	9485883a 	add	r2,r18,r18
  803cc0:	2ca2983a 	sll	r17,r5,r18
  803cc4:	1085883a 	add	r2,r2,r2
  803cc8:	10c7883a 	add	r3,r2,r3
  803ccc:	1c000017 	ldw	r16,0(r3)
  803cd0:	8c4d883a 	add	r6,r17,r17
  803cd4:	318d883a 	add	r6,r6,r6
  803cd8:	9809883a 	mov	r4,r19
  803cdc:	31800504 	addi	r6,r6,20
  803ce0:	80001226 	beq	r16,zero,803d2c <_Balloc+0xa4>
  803ce4:	80800017 	ldw	r2,0(r16)
  803ce8:	18800015 	stw	r2,0(r3)
  803cec:	80000415 	stw	zero,16(r16)
  803cf0:	80000315 	stw	zero,12(r16)
  803cf4:	8005883a 	mov	r2,r16
  803cf8:	dfc00417 	ldw	ra,16(sp)
  803cfc:	dcc00317 	ldw	r19,12(sp)
  803d00:	dc800217 	ldw	r18,8(sp)
  803d04:	dc400117 	ldw	r17,4(sp)
  803d08:	dc000017 	ldw	r16,0(sp)
  803d0c:	dec00504 	addi	sp,sp,20
  803d10:	f800283a 	ret
  803d14:	0804d7c0 	call	804d7c <_calloc_r>
  803d18:	1007883a 	mov	r3,r2
  803d1c:	0021883a 	mov	r16,zero
  803d20:	98801315 	stw	r2,76(r19)
  803d24:	103fe41e 	bne	r2,zero,803cb8 <_Balloc+0x30>
  803d28:	003ff206 	br	803cf4 <_Balloc+0x6c>
  803d2c:	0804d7c0 	call	804d7c <_calloc_r>
  803d30:	103ff026 	beq	r2,zero,803cf4 <_Balloc+0x6c>
  803d34:	1021883a 	mov	r16,r2
  803d38:	14800115 	stw	r18,4(r2)
  803d3c:	14400215 	stw	r17,8(r2)
  803d40:	003fea06 	br	803cec <_Balloc+0x64>

00803d44 <__d2b>:
  803d44:	defff504 	addi	sp,sp,-44
  803d48:	dcc00515 	stw	r19,20(sp)
  803d4c:	04c00044 	movi	r19,1
  803d50:	dc000215 	stw	r16,8(sp)
  803d54:	2821883a 	mov	r16,r5
  803d58:	980b883a 	mov	r5,r19
  803d5c:	ddc00915 	stw	r23,36(sp)
  803d60:	dd800815 	stw	r22,32(sp)
  803d64:	dd400715 	stw	r21,28(sp)
  803d68:	dd000615 	stw	r20,24(sp)
  803d6c:	dc800415 	stw	r18,16(sp)
  803d70:	dc400315 	stw	r17,12(sp)
  803d74:	dfc00a15 	stw	ra,40(sp)
  803d78:	3023883a 	mov	r17,r6
  803d7c:	382d883a 	mov	r22,r7
  803d80:	ddc00b17 	ldw	r23,44(sp)
  803d84:	0803c880 	call	803c88 <_Balloc>
  803d88:	1025883a 	mov	r18,r2
  803d8c:	00a00034 	movhi	r2,32768
  803d90:	10bfffc4 	addi	r2,r2,-1
  803d94:	8888703a 	and	r4,r17,r2
  803d98:	202ad53a 	srli	r21,r4,20
  803d9c:	00800434 	movhi	r2,16
  803da0:	10bfffc4 	addi	r2,r2,-1
  803da4:	8886703a 	and	r3,r17,r2
  803da8:	a829003a 	cmpeq	r20,r21,zero
  803dac:	800b883a 	mov	r5,r16
  803db0:	d8c00115 	stw	r3,4(sp)
  803db4:	94000504 	addi	r16,r18,20
  803db8:	a000021e 	bne	r20,zero,803dc4 <__d2b+0x80>
  803dbc:	18c00434 	orhi	r3,r3,16
  803dc0:	d8c00115 	stw	r3,4(sp)
  803dc4:	28002726 	beq	r5,zero,803e64 <__d2b+0x120>
  803dc8:	d809883a 	mov	r4,sp
  803dcc:	d9400015 	stw	r5,0(sp)
  803dd0:	08037a00 	call	8037a0 <__lo0bits>
  803dd4:	100d883a 	mov	r6,r2
  803dd8:	10003526 	beq	r2,zero,803eb0 <__d2b+0x16c>
  803ddc:	d8c00117 	ldw	r3,4(sp)
  803de0:	00800804 	movi	r2,32
  803de4:	1185c83a 	sub	r2,r2,r6
  803de8:	d9000017 	ldw	r4,0(sp)
  803dec:	1886983a 	sll	r3,r3,r2
  803df0:	1906b03a 	or	r3,r3,r4
  803df4:	90c00515 	stw	r3,20(r18)
  803df8:	d8c00117 	ldw	r3,4(sp)
  803dfc:	1986d83a 	srl	r3,r3,r6
  803e00:	d8c00115 	stw	r3,4(sp)
  803e04:	180b003a 	cmpeq	r5,r3,zero
  803e08:	00800084 	movi	r2,2
  803e0c:	114bc83a 	sub	r5,r2,r5
  803e10:	80c00115 	stw	r3,4(r16)
  803e14:	91400415 	stw	r5,16(r18)
  803e18:	a0001a1e 	bne	r20,zero,803e84 <__d2b+0x140>
  803e1c:	3545883a 	add	r2,r6,r21
  803e20:	10bef344 	addi	r2,r2,-1075
  803e24:	00c00d44 	movi	r3,53
  803e28:	b0800015 	stw	r2,0(r22)
  803e2c:	1987c83a 	sub	r3,r3,r6
  803e30:	b8c00015 	stw	r3,0(r23)
  803e34:	9005883a 	mov	r2,r18
  803e38:	dfc00a17 	ldw	ra,40(sp)
  803e3c:	ddc00917 	ldw	r23,36(sp)
  803e40:	dd800817 	ldw	r22,32(sp)
  803e44:	dd400717 	ldw	r21,28(sp)
  803e48:	dd000617 	ldw	r20,24(sp)
  803e4c:	dcc00517 	ldw	r19,20(sp)
  803e50:	dc800417 	ldw	r18,16(sp)
  803e54:	dc400317 	ldw	r17,12(sp)
  803e58:	dc000217 	ldw	r16,8(sp)
  803e5c:	dec00b04 	addi	sp,sp,44
  803e60:	f800283a 	ret
  803e64:	d9000104 	addi	r4,sp,4
  803e68:	08037a00 	call	8037a0 <__lo0bits>
  803e6c:	11800804 	addi	r6,r2,32
  803e70:	d8800117 	ldw	r2,4(sp)
  803e74:	94c00415 	stw	r19,16(r18)
  803e78:	980b883a 	mov	r5,r19
  803e7c:	90800515 	stw	r2,20(r18)
  803e80:	a03fe626 	beq	r20,zero,803e1c <__d2b+0xd8>
  803e84:	2945883a 	add	r2,r5,r5
  803e88:	1085883a 	add	r2,r2,r2
  803e8c:	1405883a 	add	r2,r2,r16
  803e90:	113fff17 	ldw	r4,-4(r2)
  803e94:	30fef384 	addi	r3,r6,-1074
  803e98:	2820917a 	slli	r16,r5,5
  803e9c:	b0c00015 	stw	r3,0(r22)
  803ea0:	08037300 	call	803730 <__hi0bits>
  803ea4:	80a1c83a 	sub	r16,r16,r2
  803ea8:	bc000015 	stw	r16,0(r23)
  803eac:	003fe106 	br	803e34 <__d2b+0xf0>
  803eb0:	d8800017 	ldw	r2,0(sp)
  803eb4:	90800515 	stw	r2,20(r18)
  803eb8:	d8c00117 	ldw	r3,4(sp)
  803ebc:	003fd106 	br	803e04 <__d2b+0xc0>

00803ec0 <__mdiff>:
  803ec0:	defffb04 	addi	sp,sp,-20
  803ec4:	dc000015 	stw	r16,0(sp)
  803ec8:	2821883a 	mov	r16,r5
  803ecc:	dc800215 	stw	r18,8(sp)
  803ed0:	300b883a 	mov	r5,r6
  803ed4:	2025883a 	mov	r18,r4
  803ed8:	8009883a 	mov	r4,r16
  803edc:	dc400115 	stw	r17,4(sp)
  803ee0:	dfc00415 	stw	ra,16(sp)
  803ee4:	dcc00315 	stw	r19,12(sp)
  803ee8:	3023883a 	mov	r17,r6
  803eec:	08038640 	call	803864 <__mcmp>
  803ef0:	10004226 	beq	r2,zero,803ffc <__mdiff+0x13c>
  803ef4:	10005016 	blt	r2,zero,804038 <__mdiff+0x178>
  803ef8:	0027883a 	mov	r19,zero
  803efc:	81400117 	ldw	r5,4(r16)
  803f00:	9009883a 	mov	r4,r18
  803f04:	0803c880 	call	803c88 <_Balloc>
  803f08:	1019883a 	mov	r12,r2
  803f0c:	82800417 	ldw	r10,16(r16)
  803f10:	88800417 	ldw	r2,16(r17)
  803f14:	81800504 	addi	r6,r16,20
  803f18:	5287883a 	add	r3,r10,r10
  803f1c:	1085883a 	add	r2,r2,r2
  803f20:	18c7883a 	add	r3,r3,r3
  803f24:	1085883a 	add	r2,r2,r2
  803f28:	8a000504 	addi	r8,r17,20
  803f2c:	64c00315 	stw	r19,12(r12)
  803f30:	30db883a 	add	r13,r6,r3
  803f34:	4097883a 	add	r11,r8,r2
  803f38:	61c00504 	addi	r7,r12,20
  803f3c:	0013883a 	mov	r9,zero
  803f40:	31000017 	ldw	r4,0(r6)
  803f44:	41400017 	ldw	r5,0(r8)
  803f48:	42000104 	addi	r8,r8,4
  803f4c:	20bfffcc 	andi	r2,r4,65535
  803f50:	28ffffcc 	andi	r3,r5,65535
  803f54:	10c5c83a 	sub	r2,r2,r3
  803f58:	1245883a 	add	r2,r2,r9
  803f5c:	2008d43a 	srli	r4,r4,16
  803f60:	280ad43a 	srli	r5,r5,16
  803f64:	1007d43a 	srai	r3,r2,16
  803f68:	3880000d 	sth	r2,0(r7)
  803f6c:	2149c83a 	sub	r4,r4,r5
  803f70:	20c9883a 	add	r4,r4,r3
  803f74:	3900008d 	sth	r4,2(r7)
  803f78:	31800104 	addi	r6,r6,4
  803f7c:	39c00104 	addi	r7,r7,4
  803f80:	2013d43a 	srai	r9,r4,16
  803f84:	42ffee36 	bltu	r8,r11,803f40 <__mdiff+0x80>
  803f88:	33400c2e 	bgeu	r6,r13,803fbc <__mdiff+0xfc>
  803f8c:	30800017 	ldw	r2,0(r6)
  803f90:	31800104 	addi	r6,r6,4
  803f94:	10ffffcc 	andi	r3,r2,65535
  803f98:	1a47883a 	add	r3,r3,r9
  803f9c:	1004d43a 	srli	r2,r2,16
  803fa0:	1809d43a 	srai	r4,r3,16
  803fa4:	38c0000d 	sth	r3,0(r7)
  803fa8:	1105883a 	add	r2,r2,r4
  803fac:	3880008d 	sth	r2,2(r7)
  803fb0:	1013d43a 	srai	r9,r2,16
  803fb4:	39c00104 	addi	r7,r7,4
  803fb8:	337ff436 	bltu	r6,r13,803f8c <__mdiff+0xcc>
  803fbc:	38bfff17 	ldw	r2,-4(r7)
  803fc0:	38ffff04 	addi	r3,r7,-4
  803fc4:	1000041e 	bne	r2,zero,803fd8 <__mdiff+0x118>
  803fc8:	18ffff04 	addi	r3,r3,-4
  803fcc:	18800017 	ldw	r2,0(r3)
  803fd0:	52bfffc4 	addi	r10,r10,-1
  803fd4:	103ffc26 	beq	r2,zero,803fc8 <__mdiff+0x108>
  803fd8:	6005883a 	mov	r2,r12
  803fdc:	62800415 	stw	r10,16(r12)
  803fe0:	dfc00417 	ldw	ra,16(sp)
  803fe4:	dcc00317 	ldw	r19,12(sp)
  803fe8:	dc800217 	ldw	r18,8(sp)
  803fec:	dc400117 	ldw	r17,4(sp)
  803ff0:	dc000017 	ldw	r16,0(sp)
  803ff4:	dec00504 	addi	sp,sp,20
  803ff8:	f800283a 	ret
  803ffc:	9009883a 	mov	r4,r18
  804000:	000b883a 	mov	r5,zero
  804004:	0803c880 	call	803c88 <_Balloc>
  804008:	1019883a 	mov	r12,r2
  80400c:	00800044 	movi	r2,1
  804010:	60800415 	stw	r2,16(r12)
  804014:	6005883a 	mov	r2,r12
  804018:	60000515 	stw	zero,20(r12)
  80401c:	dfc00417 	ldw	ra,16(sp)
  804020:	dcc00317 	ldw	r19,12(sp)
  804024:	dc800217 	ldw	r18,8(sp)
  804028:	dc400117 	ldw	r17,4(sp)
  80402c:	dc000017 	ldw	r16,0(sp)
  804030:	dec00504 	addi	sp,sp,20
  804034:	f800283a 	ret
  804038:	880d883a 	mov	r6,r17
  80403c:	04c00044 	movi	r19,1
  804040:	8023883a 	mov	r17,r16
  804044:	3021883a 	mov	r16,r6
  804048:	003fac06 	br	803efc <__mdiff+0x3c>

0080404c <__lshift>:
  80404c:	defff904 	addi	sp,sp,-28
  804050:	28800417 	ldw	r2,16(r5)
  804054:	dc000015 	stw	r16,0(sp)
  804058:	3021d17a 	srai	r16,r6,5
  80405c:	28c00217 	ldw	r3,8(r5)
  804060:	10800044 	addi	r2,r2,1
  804064:	dc400115 	stw	r17,4(sp)
  804068:	80a3883a 	add	r17,r16,r2
  80406c:	dd400515 	stw	r21,20(sp)
  804070:	dd000415 	stw	r20,16(sp)
  804074:	dc800215 	stw	r18,8(sp)
  804078:	dfc00615 	stw	ra,24(sp)
  80407c:	2825883a 	mov	r18,r5
  804080:	dcc00315 	stw	r19,12(sp)
  804084:	3029883a 	mov	r20,r6
  804088:	202b883a 	mov	r21,r4
  80408c:	29400117 	ldw	r5,4(r5)
  804090:	1c40030e 	bge	r3,r17,8040a0 <__lshift+0x54>
  804094:	18c7883a 	add	r3,r3,r3
  804098:	29400044 	addi	r5,r5,1
  80409c:	1c7ffd16 	blt	r3,r17,804094 <__lshift+0x48>
  8040a0:	a809883a 	mov	r4,r21
  8040a4:	0803c880 	call	803c88 <_Balloc>
  8040a8:	1027883a 	mov	r19,r2
  8040ac:	11400504 	addi	r5,r2,20
  8040b0:	0400090e 	bge	zero,r16,8040d8 <__lshift+0x8c>
  8040b4:	2805883a 	mov	r2,r5
  8040b8:	0007883a 	mov	r3,zero
  8040bc:	18c00044 	addi	r3,r3,1
  8040c0:	10000015 	stw	zero,0(r2)
  8040c4:	10800104 	addi	r2,r2,4
  8040c8:	80fffc1e 	bne	r16,r3,8040bc <__lshift+0x70>
  8040cc:	8405883a 	add	r2,r16,r16
  8040d0:	1085883a 	add	r2,r2,r2
  8040d4:	288b883a 	add	r5,r5,r2
  8040d8:	90800417 	ldw	r2,16(r18)
  8040dc:	91000504 	addi	r4,r18,20
  8040e0:	a18007cc 	andi	r6,r20,31
  8040e4:	1085883a 	add	r2,r2,r2
  8040e8:	1085883a 	add	r2,r2,r2
  8040ec:	208f883a 	add	r7,r4,r2
  8040f0:	30001e26 	beq	r6,zero,80416c <__lshift+0x120>
  8040f4:	00800804 	movi	r2,32
  8040f8:	1191c83a 	sub	r8,r2,r6
  8040fc:	0007883a 	mov	r3,zero
  804100:	20800017 	ldw	r2,0(r4)
  804104:	1184983a 	sll	r2,r2,r6
  804108:	1884b03a 	or	r2,r3,r2
  80410c:	28800015 	stw	r2,0(r5)
  804110:	20c00017 	ldw	r3,0(r4)
  804114:	21000104 	addi	r4,r4,4
  804118:	29400104 	addi	r5,r5,4
  80411c:	1a06d83a 	srl	r3,r3,r8
  804120:	21fff736 	bltu	r4,r7,804100 <__lshift+0xb4>
  804124:	28c00015 	stw	r3,0(r5)
  804128:	18000126 	beq	r3,zero,804130 <__lshift+0xe4>
  80412c:	8c400044 	addi	r17,r17,1
  804130:	88bfffc4 	addi	r2,r17,-1
  804134:	98800415 	stw	r2,16(r19)
  804138:	a809883a 	mov	r4,r21
  80413c:	900b883a 	mov	r5,r18
  804140:	08037080 	call	803708 <_Bfree>
  804144:	9805883a 	mov	r2,r19
  804148:	dfc00617 	ldw	ra,24(sp)
  80414c:	dd400517 	ldw	r21,20(sp)
  804150:	dd000417 	ldw	r20,16(sp)
  804154:	dcc00317 	ldw	r19,12(sp)
  804158:	dc800217 	ldw	r18,8(sp)
  80415c:	dc400117 	ldw	r17,4(sp)
  804160:	dc000017 	ldw	r16,0(sp)
  804164:	dec00704 	addi	sp,sp,28
  804168:	f800283a 	ret
  80416c:	20800017 	ldw	r2,0(r4)
  804170:	21000104 	addi	r4,r4,4
  804174:	28800015 	stw	r2,0(r5)
  804178:	29400104 	addi	r5,r5,4
  80417c:	21ffec2e 	bgeu	r4,r7,804130 <__lshift+0xe4>
  804180:	20800017 	ldw	r2,0(r4)
  804184:	21000104 	addi	r4,r4,4
  804188:	28800015 	stw	r2,0(r5)
  80418c:	29400104 	addi	r5,r5,4
  804190:	21fff636 	bltu	r4,r7,80416c <__lshift+0x120>
  804194:	003fe606 	br	804130 <__lshift+0xe4>

00804198 <__multiply>:
  804198:	defff904 	addi	sp,sp,-28
  80419c:	dcc00315 	stw	r19,12(sp)
  8041a0:	dc800215 	stw	r18,8(sp)
  8041a4:	2cc00417 	ldw	r19,16(r5)
  8041a8:	34800417 	ldw	r18,16(r6)
  8041ac:	dd000415 	stw	r20,16(sp)
  8041b0:	dc400115 	stw	r17,4(sp)
  8041b4:	dfc00615 	stw	ra,24(sp)
  8041b8:	dd400515 	stw	r21,20(sp)
  8041bc:	dc000015 	stw	r16,0(sp)
  8041c0:	2823883a 	mov	r17,r5
  8041c4:	3029883a 	mov	r20,r6
  8041c8:	9c80040e 	bge	r19,r18,8041dc <__multiply+0x44>
  8041cc:	9027883a 	mov	r19,r18
  8041d0:	2c800417 	ldw	r18,16(r5)
  8041d4:	2829883a 	mov	r20,r5
  8041d8:	3023883a 	mov	r17,r6
  8041dc:	88800217 	ldw	r2,8(r17)
  8041e0:	9ca1883a 	add	r16,r19,r18
  8041e4:	89400117 	ldw	r5,4(r17)
  8041e8:	1400010e 	bge	r2,r16,8041f0 <__multiply+0x58>
  8041ec:	29400044 	addi	r5,r5,1
  8041f0:	0803c880 	call	803c88 <_Balloc>
  8041f4:	102b883a 	mov	r21,r2
  8041f8:	8405883a 	add	r2,r16,r16
  8041fc:	1085883a 	add	r2,r2,r2
  804200:	a9000504 	addi	r4,r21,20
  804204:	209d883a 	add	r14,r4,r2
  804208:	2380042e 	bgeu	r4,r14,80421c <__multiply+0x84>
  80420c:	2005883a 	mov	r2,r4
  804210:	10000015 	stw	zero,0(r2)
  804214:	10800104 	addi	r2,r2,4
  804218:	13bffd36 	bltu	r2,r14,804210 <__multiply+0x78>
  80421c:	9485883a 	add	r2,r18,r18
  804220:	9cc7883a 	add	r3,r19,r19
  804224:	a1800504 	addi	r6,r20,20
  804228:	1085883a 	add	r2,r2,r2
  80422c:	8b400504 	addi	r13,r17,20
  804230:	18c7883a 	add	r3,r3,r3
  804234:	309f883a 	add	r15,r6,r2
  804238:	68d7883a 	add	r11,r13,r3
  80423c:	33c03b2e 	bgeu	r6,r15,80432c <__multiply+0x194>
  804240:	2019883a 	mov	r12,r4
  804244:	30800017 	ldw	r2,0(r6)
  804248:	127fffcc 	andi	r9,r2,65535
  80424c:	48001826 	beq	r9,zero,8042b0 <__multiply+0x118>
  804250:	6811883a 	mov	r8,r13
  804254:	600f883a 	mov	r7,r12
  804258:	0015883a 	mov	r10,zero
  80425c:	40c00017 	ldw	r3,0(r8)
  804260:	39400017 	ldw	r5,0(r7)
  804264:	42000104 	addi	r8,r8,4
  804268:	193fffcc 	andi	r4,r3,65535
  80426c:	4909383a 	mul	r4,r9,r4
  804270:	1806d43a 	srli	r3,r3,16
  804274:	28bfffcc 	andi	r2,r5,65535
  804278:	5085883a 	add	r2,r10,r2
  80427c:	2089883a 	add	r4,r4,r2
  804280:	48c7383a 	mul	r3,r9,r3
  804284:	280ad43a 	srli	r5,r5,16
  804288:	2004d43a 	srli	r2,r4,16
  80428c:	3900000d 	sth	r4,0(r7)
  804290:	1947883a 	add	r3,r3,r5
  804294:	10c5883a 	add	r2,r2,r3
  804298:	3880008d 	sth	r2,2(r7)
  80429c:	1014d43a 	srli	r10,r2,16
  8042a0:	39c00104 	addi	r7,r7,4
  8042a4:	42ffed36 	bltu	r8,r11,80425c <__multiply+0xc4>
  8042a8:	3a800015 	stw	r10,0(r7)
  8042ac:	30800017 	ldw	r2,0(r6)
  8042b0:	1012d43a 	srli	r9,r2,16
  8042b4:	48001926 	beq	r9,zero,80431c <__multiply+0x184>
  8042b8:	60800017 	ldw	r2,0(r12)
  8042bc:	6811883a 	mov	r8,r13
  8042c0:	600f883a 	mov	r7,r12
  8042c4:	0015883a 	mov	r10,zero
  8042c8:	100b883a 	mov	r5,r2
  8042cc:	41000017 	ldw	r4,0(r8)
  8042d0:	2806d43a 	srli	r3,r5,16
  8042d4:	3880000d 	sth	r2,0(r7)
  8042d8:	20bfffcc 	andi	r2,r4,65535
  8042dc:	4885383a 	mul	r2,r9,r2
  8042e0:	50c7883a 	add	r3,r10,r3
  8042e4:	2008d43a 	srli	r4,r4,16
  8042e8:	10c5883a 	add	r2,r2,r3
  8042ec:	3880008d 	sth	r2,2(r7)
  8042f0:	39c00104 	addi	r7,r7,4
  8042f4:	39400017 	ldw	r5,0(r7)
  8042f8:	4909383a 	mul	r4,r9,r4
  8042fc:	1004d43a 	srli	r2,r2,16
  804300:	28ffffcc 	andi	r3,r5,65535
  804304:	20c9883a 	add	r4,r4,r3
  804308:	1105883a 	add	r2,r2,r4
  80430c:	42000104 	addi	r8,r8,4
  804310:	1014d43a 	srli	r10,r2,16
  804314:	42ffed36 	bltu	r8,r11,8042cc <__multiply+0x134>
  804318:	38800015 	stw	r2,0(r7)
  80431c:	31800104 	addi	r6,r6,4
  804320:	33c0022e 	bgeu	r6,r15,80432c <__multiply+0x194>
  804324:	63000104 	addi	r12,r12,4
  804328:	003fc606 	br	804244 <__multiply+0xac>
  80432c:	0400090e 	bge	zero,r16,804354 <__multiply+0x1bc>
  804330:	70bfff17 	ldw	r2,-4(r14)
  804334:	70ffff04 	addi	r3,r14,-4
  804338:	10000326 	beq	r2,zero,804348 <__multiply+0x1b0>
  80433c:	00000506 	br	804354 <__multiply+0x1bc>
  804340:	18800017 	ldw	r2,0(r3)
  804344:	1000031e 	bne	r2,zero,804354 <__multiply+0x1bc>
  804348:	843fffc4 	addi	r16,r16,-1
  80434c:	18ffff04 	addi	r3,r3,-4
  804350:	803ffb1e 	bne	r16,zero,804340 <__multiply+0x1a8>
  804354:	a805883a 	mov	r2,r21
  804358:	ac000415 	stw	r16,16(r21)
  80435c:	dfc00617 	ldw	ra,24(sp)
  804360:	dd400517 	ldw	r21,20(sp)
  804364:	dd000417 	ldw	r20,16(sp)
  804368:	dcc00317 	ldw	r19,12(sp)
  80436c:	dc800217 	ldw	r18,8(sp)
  804370:	dc400117 	ldw	r17,4(sp)
  804374:	dc000017 	ldw	r16,0(sp)
  804378:	dec00704 	addi	sp,sp,28
  80437c:	f800283a 	ret

00804380 <__i2b>:
  804380:	defffd04 	addi	sp,sp,-12
  804384:	dc000015 	stw	r16,0(sp)
  804388:	04000044 	movi	r16,1
  80438c:	dc800115 	stw	r18,4(sp)
  804390:	2825883a 	mov	r18,r5
  804394:	800b883a 	mov	r5,r16
  804398:	dfc00215 	stw	ra,8(sp)
  80439c:	0803c880 	call	803c88 <_Balloc>
  8043a0:	14000415 	stw	r16,16(r2)
  8043a4:	14800515 	stw	r18,20(r2)
  8043a8:	dfc00217 	ldw	ra,8(sp)
  8043ac:	dc800117 	ldw	r18,4(sp)
  8043b0:	dc000017 	ldw	r16,0(sp)
  8043b4:	dec00304 	addi	sp,sp,12
  8043b8:	f800283a 	ret

008043bc <__multadd>:
  8043bc:	defffa04 	addi	sp,sp,-24
  8043c0:	dc800215 	stw	r18,8(sp)
  8043c4:	2c800417 	ldw	r18,16(r5)
  8043c8:	dd000415 	stw	r20,16(sp)
  8043cc:	dcc00315 	stw	r19,12(sp)
  8043d0:	dc000015 	stw	r16,0(sp)
  8043d4:	dfc00515 	stw	ra,20(sp)
  8043d8:	3821883a 	mov	r16,r7
  8043dc:	dc400115 	stw	r17,4(sp)
  8043e0:	2827883a 	mov	r19,r5
  8043e4:	2029883a 	mov	r20,r4
  8043e8:	2a000504 	addi	r8,r5,20
  8043ec:	000f883a 	mov	r7,zero
  8043f0:	40800017 	ldw	r2,0(r8)
  8043f4:	39c00044 	addi	r7,r7,1
  8043f8:	10ffffcc 	andi	r3,r2,65535
  8043fc:	1987383a 	mul	r3,r3,r6
  804400:	1004d43a 	srli	r2,r2,16
  804404:	1c07883a 	add	r3,r3,r16
  804408:	180ad43a 	srli	r5,r3,16
  80440c:	1185383a 	mul	r2,r2,r6
  804410:	18ffffcc 	andi	r3,r3,65535
  804414:	1145883a 	add	r2,r2,r5
  804418:	1008943a 	slli	r4,r2,16
  80441c:	1020d43a 	srli	r16,r2,16
  804420:	20c9883a 	add	r4,r4,r3
  804424:	41000015 	stw	r4,0(r8)
  804428:	42000104 	addi	r8,r8,4
  80442c:	3cbff016 	blt	r7,r18,8043f0 <__multadd+0x34>
  804430:	80000826 	beq	r16,zero,804454 <__multadd+0x98>
  804434:	98800217 	ldw	r2,8(r19)
  804438:	90800f0e 	bge	r18,r2,804478 <__multadd+0xbc>
  80443c:	9485883a 	add	r2,r18,r18
  804440:	1085883a 	add	r2,r2,r2
  804444:	14c5883a 	add	r2,r2,r19
  804448:	90c00044 	addi	r3,r18,1
  80444c:	14000515 	stw	r16,20(r2)
  804450:	98c00415 	stw	r3,16(r19)
  804454:	9805883a 	mov	r2,r19
  804458:	dfc00517 	ldw	ra,20(sp)
  80445c:	dd000417 	ldw	r20,16(sp)
  804460:	dcc00317 	ldw	r19,12(sp)
  804464:	dc800217 	ldw	r18,8(sp)
  804468:	dc400117 	ldw	r17,4(sp)
  80446c:	dc000017 	ldw	r16,0(sp)
  804470:	dec00604 	addi	sp,sp,24
  804474:	f800283a 	ret
  804478:	99400117 	ldw	r5,4(r19)
  80447c:	a009883a 	mov	r4,r20
  804480:	29400044 	addi	r5,r5,1
  804484:	0803c880 	call	803c88 <_Balloc>
  804488:	99800417 	ldw	r6,16(r19)
  80448c:	99400304 	addi	r5,r19,12
  804490:	11000304 	addi	r4,r2,12
  804494:	318d883a 	add	r6,r6,r6
  804498:	318d883a 	add	r6,r6,r6
  80449c:	31800204 	addi	r6,r6,8
  8044a0:	1023883a 	mov	r17,r2
  8044a4:	08027000 	call	802700 <memcpy>
  8044a8:	980b883a 	mov	r5,r19
  8044ac:	a009883a 	mov	r4,r20
  8044b0:	08037080 	call	803708 <_Bfree>
  8044b4:	8827883a 	mov	r19,r17
  8044b8:	003fe006 	br	80443c <__multadd+0x80>

008044bc <__pow5mult>:
  8044bc:	defffa04 	addi	sp,sp,-24
  8044c0:	308000cc 	andi	r2,r6,3
  8044c4:	dd000415 	stw	r20,16(sp)
  8044c8:	dcc00315 	stw	r19,12(sp)
  8044cc:	dc000015 	stw	r16,0(sp)
  8044d0:	dfc00515 	stw	ra,20(sp)
  8044d4:	dc800215 	stw	r18,8(sp)
  8044d8:	dc400115 	stw	r17,4(sp)
  8044dc:	3021883a 	mov	r16,r6
  8044e0:	2027883a 	mov	r19,r4
  8044e4:	2829883a 	mov	r20,r5
  8044e8:	10002b1e 	bne	r2,zero,804598 <__pow5mult+0xdc>
  8044ec:	8025d0ba 	srai	r18,r16,2
  8044f0:	90001b26 	beq	r18,zero,804560 <__pow5mult+0xa4>
  8044f4:	9c001217 	ldw	r16,72(r19)
  8044f8:	8000081e 	bne	r16,zero,80451c <__pow5mult+0x60>
  8044fc:	00003006 	br	8045c0 <__pow5mult+0x104>
  804500:	800b883a 	mov	r5,r16
  804504:	800d883a 	mov	r6,r16
  804508:	9809883a 	mov	r4,r19
  80450c:	90001426 	beq	r18,zero,804560 <__pow5mult+0xa4>
  804510:	80800017 	ldw	r2,0(r16)
  804514:	10001b26 	beq	r2,zero,804584 <__pow5mult+0xc8>
  804518:	1021883a 	mov	r16,r2
  80451c:	9080004c 	andi	r2,r18,1
  804520:	1005003a 	cmpeq	r2,r2,zero
  804524:	9025d07a 	srai	r18,r18,1
  804528:	800d883a 	mov	r6,r16
  80452c:	9809883a 	mov	r4,r19
  804530:	a00b883a 	mov	r5,r20
  804534:	103ff21e 	bne	r2,zero,804500 <__pow5mult+0x44>
  804538:	08041980 	call	804198 <__multiply>
  80453c:	a00b883a 	mov	r5,r20
  804540:	9809883a 	mov	r4,r19
  804544:	1023883a 	mov	r17,r2
  804548:	08037080 	call	803708 <_Bfree>
  80454c:	8829883a 	mov	r20,r17
  804550:	800b883a 	mov	r5,r16
  804554:	800d883a 	mov	r6,r16
  804558:	9809883a 	mov	r4,r19
  80455c:	903fec1e 	bne	r18,zero,804510 <__pow5mult+0x54>
  804560:	a005883a 	mov	r2,r20
  804564:	dfc00517 	ldw	ra,20(sp)
  804568:	dd000417 	ldw	r20,16(sp)
  80456c:	dcc00317 	ldw	r19,12(sp)
  804570:	dc800217 	ldw	r18,8(sp)
  804574:	dc400117 	ldw	r17,4(sp)
  804578:	dc000017 	ldw	r16,0(sp)
  80457c:	dec00604 	addi	sp,sp,24
  804580:	f800283a 	ret
  804584:	08041980 	call	804198 <__multiply>
  804588:	80800015 	stw	r2,0(r16)
  80458c:	1021883a 	mov	r16,r2
  804590:	10000015 	stw	zero,0(r2)
  804594:	003fe106 	br	80451c <__pow5mult+0x60>
  804598:	1085883a 	add	r2,r2,r2
  80459c:	00c02074 	movhi	r3,129
  8045a0:	18e87104 	addi	r3,r3,-24124
  8045a4:	1085883a 	add	r2,r2,r2
  8045a8:	10c5883a 	add	r2,r2,r3
  8045ac:	11bfff17 	ldw	r6,-4(r2)
  8045b0:	000f883a 	mov	r7,zero
  8045b4:	08043bc0 	call	8043bc <__multadd>
  8045b8:	1029883a 	mov	r20,r2
  8045bc:	003fcb06 	br	8044ec <__pow5mult+0x30>
  8045c0:	9809883a 	mov	r4,r19
  8045c4:	01409c44 	movi	r5,625
  8045c8:	08043800 	call	804380 <__i2b>
  8045cc:	98801215 	stw	r2,72(r19)
  8045d0:	1021883a 	mov	r16,r2
  8045d4:	10000015 	stw	zero,0(r2)
  8045d8:	003fd006 	br	80451c <__pow5mult+0x60>

008045dc <__s2b>:
  8045dc:	defff904 	addi	sp,sp,-28
  8045e0:	dcc00315 	stw	r19,12(sp)
  8045e4:	dc800215 	stw	r18,8(sp)
  8045e8:	2827883a 	mov	r19,r5
  8045ec:	2025883a 	mov	r18,r4
  8045f0:	01400244 	movi	r5,9
  8045f4:	39000204 	addi	r4,r7,8
  8045f8:	dd000415 	stw	r20,16(sp)
  8045fc:	dc400115 	stw	r17,4(sp)
  804600:	dfc00615 	stw	ra,24(sp)
  804604:	dd400515 	stw	r21,20(sp)
  804608:	dc000015 	stw	r16,0(sp)
  80460c:	3829883a 	mov	r20,r7
  804610:	3023883a 	mov	r17,r6
  804614:	08070b40 	call	8070b4 <__divsi3>
  804618:	00c00044 	movi	r3,1
  80461c:	1880350e 	bge	r3,r2,8046f4 <__s2b+0x118>
  804620:	000b883a 	mov	r5,zero
  804624:	18c7883a 	add	r3,r3,r3
  804628:	29400044 	addi	r5,r5,1
  80462c:	18bffd16 	blt	r3,r2,804624 <__s2b+0x48>
  804630:	9009883a 	mov	r4,r18
  804634:	0803c880 	call	803c88 <_Balloc>
  804638:	1011883a 	mov	r8,r2
  80463c:	d8800717 	ldw	r2,28(sp)
  804640:	00c00044 	movi	r3,1
  804644:	01800244 	movi	r6,9
  804648:	40800515 	stw	r2,20(r8)
  80464c:	40c00415 	stw	r3,16(r8)
  804650:	3440260e 	bge	r6,r17,8046ec <__s2b+0x110>
  804654:	3021883a 	mov	r16,r6
  804658:	99ab883a 	add	r21,r19,r6
  80465c:	9c05883a 	add	r2,r19,r16
  804660:	11c00007 	ldb	r7,0(r2)
  804664:	400b883a 	mov	r5,r8
  804668:	9009883a 	mov	r4,r18
  80466c:	39fff404 	addi	r7,r7,-48
  804670:	01800284 	movi	r6,10
  804674:	08043bc0 	call	8043bc <__multadd>
  804678:	84000044 	addi	r16,r16,1
  80467c:	1011883a 	mov	r8,r2
  804680:	8c3ff61e 	bne	r17,r16,80465c <__s2b+0x80>
  804684:	ac45883a 	add	r2,r21,r17
  804688:	117ffe04 	addi	r5,r2,-8
  80468c:	880d883a 	mov	r6,r17
  804690:	35000c0e 	bge	r6,r20,8046c4 <__s2b+0xe8>
  804694:	a185c83a 	sub	r2,r20,r6
  804698:	2821883a 	mov	r16,r5
  80469c:	28a3883a 	add	r17,r5,r2
  8046a0:	81c00007 	ldb	r7,0(r16)
  8046a4:	400b883a 	mov	r5,r8
  8046a8:	9009883a 	mov	r4,r18
  8046ac:	39fff404 	addi	r7,r7,-48
  8046b0:	01800284 	movi	r6,10
  8046b4:	08043bc0 	call	8043bc <__multadd>
  8046b8:	84000044 	addi	r16,r16,1
  8046bc:	1011883a 	mov	r8,r2
  8046c0:	847ff71e 	bne	r16,r17,8046a0 <__s2b+0xc4>
  8046c4:	4005883a 	mov	r2,r8
  8046c8:	dfc00617 	ldw	ra,24(sp)
  8046cc:	dd400517 	ldw	r21,20(sp)
  8046d0:	dd000417 	ldw	r20,16(sp)
  8046d4:	dcc00317 	ldw	r19,12(sp)
  8046d8:	dc800217 	ldw	r18,8(sp)
  8046dc:	dc400117 	ldw	r17,4(sp)
  8046e0:	dc000017 	ldw	r16,0(sp)
  8046e4:	dec00704 	addi	sp,sp,28
  8046e8:	f800283a 	ret
  8046ec:	99400284 	addi	r5,r19,10
  8046f0:	003fe706 	br	804690 <__s2b+0xb4>
  8046f4:	000b883a 	mov	r5,zero
  8046f8:	003fcd06 	br	804630 <__s2b+0x54>

008046fc <_realloc_r>:
  8046fc:	defff404 	addi	sp,sp,-48
  804700:	dd800815 	stw	r22,32(sp)
  804704:	dc800415 	stw	r18,16(sp)
  804708:	dc400315 	stw	r17,12(sp)
  80470c:	dfc00b15 	stw	ra,44(sp)
  804710:	df000a15 	stw	fp,40(sp)
  804714:	ddc00915 	stw	r23,36(sp)
  804718:	dd400715 	stw	r21,28(sp)
  80471c:	dd000615 	stw	r20,24(sp)
  804720:	dcc00515 	stw	r19,20(sp)
  804724:	dc000215 	stw	r16,8(sp)
  804728:	2825883a 	mov	r18,r5
  80472c:	3023883a 	mov	r17,r6
  804730:	202d883a 	mov	r22,r4
  804734:	2800c926 	beq	r5,zero,804a5c <_realloc_r+0x360>
  804738:	08073500 	call	807350 <__malloc_lock>
  80473c:	943ffe04 	addi	r16,r18,-8
  804740:	88c002c4 	addi	r3,r17,11
  804744:	00800584 	movi	r2,22
  804748:	82000117 	ldw	r8,4(r16)
  80474c:	10c01b2e 	bgeu	r2,r3,8047bc <_realloc_r+0xc0>
  804750:	00bffe04 	movi	r2,-8
  804754:	188e703a 	and	r7,r3,r2
  804758:	3839883a 	mov	fp,r7
  80475c:	38001a16 	blt	r7,zero,8047c8 <_realloc_r+0xcc>
  804760:	e4401936 	bltu	fp,r17,8047c8 <_realloc_r+0xcc>
  804764:	013fff04 	movi	r4,-4
  804768:	4126703a 	and	r19,r8,r4
  80476c:	99c02616 	blt	r19,r7,804808 <_realloc_r+0x10c>
  804770:	802b883a 	mov	r21,r16
  804774:	9829883a 	mov	r20,r19
  804778:	84000204 	addi	r16,r16,8
  80477c:	a80f883a 	mov	r7,r21
  804780:	a70dc83a 	sub	r6,r20,fp
  804784:	008003c4 	movi	r2,15
  804788:	1180c136 	bltu	r2,r6,804a90 <_realloc_r+0x394>
  80478c:	38800117 	ldw	r2,4(r7)
  804790:	a549883a 	add	r4,r20,r21
  804794:	1080004c 	andi	r2,r2,1
  804798:	a084b03a 	or	r2,r20,r2
  80479c:	38800115 	stw	r2,4(r7)
  8047a0:	20c00117 	ldw	r3,4(r4)
  8047a4:	18c00054 	ori	r3,r3,1
  8047a8:	20c00115 	stw	r3,4(r4)
  8047ac:	b009883a 	mov	r4,r22
  8047b0:	08073540 	call	807354 <__malloc_unlock>
  8047b4:	8023883a 	mov	r17,r16
  8047b8:	00000606 	br	8047d4 <_realloc_r+0xd8>
  8047bc:	01c00404 	movi	r7,16
  8047c0:	3839883a 	mov	fp,r7
  8047c4:	e47fe72e 	bgeu	fp,r17,804764 <_realloc_r+0x68>
  8047c8:	00800304 	movi	r2,12
  8047cc:	0023883a 	mov	r17,zero
  8047d0:	b0800015 	stw	r2,0(r22)
  8047d4:	8805883a 	mov	r2,r17
  8047d8:	dfc00b17 	ldw	ra,44(sp)
  8047dc:	df000a17 	ldw	fp,40(sp)
  8047e0:	ddc00917 	ldw	r23,36(sp)
  8047e4:	dd800817 	ldw	r22,32(sp)
  8047e8:	dd400717 	ldw	r21,28(sp)
  8047ec:	dd000617 	ldw	r20,24(sp)
  8047f0:	dcc00517 	ldw	r19,20(sp)
  8047f4:	dc800417 	ldw	r18,16(sp)
  8047f8:	dc400317 	ldw	r17,12(sp)
  8047fc:	dc000217 	ldw	r16,8(sp)
  804800:	dec00c04 	addi	sp,sp,48
  804804:	f800283a 	ret
  804808:	00802074 	movhi	r2,129
  80480c:	10a98004 	addi	r2,r2,-23040
  804810:	12400217 	ldw	r9,8(r2)
  804814:	84cd883a 	add	r6,r16,r19
  804818:	802b883a 	mov	r21,r16
  80481c:	3240b926 	beq	r6,r9,804b04 <_realloc_r+0x408>
  804820:	31400117 	ldw	r5,4(r6)
  804824:	00bfff84 	movi	r2,-2
  804828:	2884703a 	and	r2,r5,r2
  80482c:	1185883a 	add	r2,r2,r6
  804830:	10c00117 	ldw	r3,4(r2)
  804834:	18c0004c 	andi	r3,r3,1
  804838:	1807003a 	cmpeq	r3,r3,zero
  80483c:	1800a326 	beq	r3,zero,804acc <_realloc_r+0x3d0>
  804840:	2908703a 	and	r4,r5,r4
  804844:	9929883a 	add	r20,r19,r4
  804848:	a1c0a30e 	bge	r20,r7,804ad8 <_realloc_r+0x3dc>
  80484c:	4080004c 	andi	r2,r8,1
  804850:	1000551e 	bne	r2,zero,8049a8 <_realloc_r+0x2ac>
  804854:	80800017 	ldw	r2,0(r16)
  804858:	80afc83a 	sub	r23,r16,r2
  80485c:	b8c00117 	ldw	r3,4(r23)
  804860:	00bfff04 	movi	r2,-4
  804864:	1884703a 	and	r2,r3,r2
  804868:	30002e26 	beq	r6,zero,804924 <_realloc_r+0x228>
  80486c:	3240b926 	beq	r6,r9,804b54 <_realloc_r+0x458>
  804870:	98a9883a 	add	r20,r19,r2
  804874:	2509883a 	add	r4,r4,r20
  804878:	d9000015 	stw	r4,0(sp)
  80487c:	21c02a16 	blt	r4,r7,804928 <_realloc_r+0x22c>
  804880:	30800317 	ldw	r2,12(r6)
  804884:	30c00217 	ldw	r3,8(r6)
  804888:	01400904 	movi	r5,36
  80488c:	99bfff04 	addi	r6,r19,-4
  804890:	18800315 	stw	r2,12(r3)
  804894:	10c00215 	stw	r3,8(r2)
  804898:	b9000317 	ldw	r4,12(r23)
  80489c:	b8800217 	ldw	r2,8(r23)
  8048a0:	b82b883a 	mov	r21,r23
  8048a4:	bc000204 	addi	r16,r23,8
  8048a8:	20800215 	stw	r2,8(r4)
  8048ac:	11000315 	stw	r4,12(r2)
  8048b0:	2980e436 	bltu	r5,r6,804c44 <_realloc_r+0x548>
  8048b4:	008004c4 	movi	r2,19
  8048b8:	9009883a 	mov	r4,r18
  8048bc:	8011883a 	mov	r8,r16
  8048c0:	11800f2e 	bgeu	r2,r6,804900 <_realloc_r+0x204>
  8048c4:	90800017 	ldw	r2,0(r18)
  8048c8:	ba000404 	addi	r8,r23,16
  8048cc:	91000204 	addi	r4,r18,8
  8048d0:	b8800215 	stw	r2,8(r23)
  8048d4:	90c00117 	ldw	r3,4(r18)
  8048d8:	008006c4 	movi	r2,27
  8048dc:	b8c00315 	stw	r3,12(r23)
  8048e0:	1180072e 	bgeu	r2,r6,804900 <_realloc_r+0x204>
  8048e4:	90c00217 	ldw	r3,8(r18)
  8048e8:	ba000604 	addi	r8,r23,24
  8048ec:	91000404 	addi	r4,r18,16
  8048f0:	b8c00415 	stw	r3,16(r23)
  8048f4:	90800317 	ldw	r2,12(r18)
  8048f8:	b8800515 	stw	r2,20(r23)
  8048fc:	3140e726 	beq	r6,r5,804c9c <_realloc_r+0x5a0>
  804900:	20800017 	ldw	r2,0(r4)
  804904:	dd000017 	ldw	r20,0(sp)
  804908:	b80f883a 	mov	r7,r23
  80490c:	40800015 	stw	r2,0(r8)
  804910:	20c00117 	ldw	r3,4(r4)
  804914:	40c00115 	stw	r3,4(r8)
  804918:	20800217 	ldw	r2,8(r4)
  80491c:	40800215 	stw	r2,8(r8)
  804920:	003f9706 	br	804780 <_realloc_r+0x84>
  804924:	98a9883a 	add	r20,r19,r2
  804928:	a1c01f16 	blt	r20,r7,8049a8 <_realloc_r+0x2ac>
  80492c:	b8c00317 	ldw	r3,12(r23)
  804930:	b8800217 	ldw	r2,8(r23)
  804934:	99bfff04 	addi	r6,r19,-4
  804938:	01400904 	movi	r5,36
  80493c:	b82b883a 	mov	r21,r23
  804940:	18800215 	stw	r2,8(r3)
  804944:	10c00315 	stw	r3,12(r2)
  804948:	bc000204 	addi	r16,r23,8
  80494c:	2980c336 	bltu	r5,r6,804c5c <_realloc_r+0x560>
  804950:	008004c4 	movi	r2,19
  804954:	9009883a 	mov	r4,r18
  804958:	8011883a 	mov	r8,r16
  80495c:	11800f2e 	bgeu	r2,r6,80499c <_realloc_r+0x2a0>
  804960:	90800017 	ldw	r2,0(r18)
  804964:	ba000404 	addi	r8,r23,16
  804968:	91000204 	addi	r4,r18,8
  80496c:	b8800215 	stw	r2,8(r23)
  804970:	90c00117 	ldw	r3,4(r18)
  804974:	008006c4 	movi	r2,27
  804978:	b8c00315 	stw	r3,12(r23)
  80497c:	1180072e 	bgeu	r2,r6,80499c <_realloc_r+0x2a0>
  804980:	90c00217 	ldw	r3,8(r18)
  804984:	ba000604 	addi	r8,r23,24
  804988:	91000404 	addi	r4,r18,16
  80498c:	b8c00415 	stw	r3,16(r23)
  804990:	90800317 	ldw	r2,12(r18)
  804994:	b8800515 	stw	r2,20(r23)
  804998:	3140c726 	beq	r6,r5,804cb8 <_realloc_r+0x5bc>
  80499c:	20800017 	ldw	r2,0(r4)
  8049a0:	b80f883a 	mov	r7,r23
  8049a4:	003fd906 	br	80490c <_realloc_r+0x210>
  8049a8:	880b883a 	mov	r5,r17
  8049ac:	b009883a 	mov	r4,r22
  8049b0:	0801fc00 	call	801fc0 <_malloc_r>
  8049b4:	1023883a 	mov	r17,r2
  8049b8:	10002526 	beq	r2,zero,804a50 <_realloc_r+0x354>
  8049bc:	80800117 	ldw	r2,4(r16)
  8049c0:	00ffff84 	movi	r3,-2
  8049c4:	893ffe04 	addi	r4,r17,-8
  8049c8:	10c4703a 	and	r2,r2,r3
  8049cc:	8085883a 	add	r2,r16,r2
  8049d0:	20809526 	beq	r4,r2,804c28 <_realloc_r+0x52c>
  8049d4:	99bfff04 	addi	r6,r19,-4
  8049d8:	01c00904 	movi	r7,36
  8049dc:	39804536 	bltu	r7,r6,804af4 <_realloc_r+0x3f8>
  8049e0:	008004c4 	movi	r2,19
  8049e4:	9009883a 	mov	r4,r18
  8049e8:	880b883a 	mov	r5,r17
  8049ec:	11800f2e 	bgeu	r2,r6,804a2c <_realloc_r+0x330>
  8049f0:	90800017 	ldw	r2,0(r18)
  8049f4:	89400204 	addi	r5,r17,8
  8049f8:	91000204 	addi	r4,r18,8
  8049fc:	88800015 	stw	r2,0(r17)
  804a00:	90c00117 	ldw	r3,4(r18)
  804a04:	008006c4 	movi	r2,27
  804a08:	88c00115 	stw	r3,4(r17)
  804a0c:	1180072e 	bgeu	r2,r6,804a2c <_realloc_r+0x330>
  804a10:	90c00217 	ldw	r3,8(r18)
  804a14:	89400404 	addi	r5,r17,16
  804a18:	91000404 	addi	r4,r18,16
  804a1c:	88c00215 	stw	r3,8(r17)
  804a20:	90800317 	ldw	r2,12(r18)
  804a24:	88800315 	stw	r2,12(r17)
  804a28:	31c09126 	beq	r6,r7,804c70 <_realloc_r+0x574>
  804a2c:	20800017 	ldw	r2,0(r4)
  804a30:	28800015 	stw	r2,0(r5)
  804a34:	20c00117 	ldw	r3,4(r4)
  804a38:	28c00115 	stw	r3,4(r5)
  804a3c:	20800217 	ldw	r2,8(r4)
  804a40:	28800215 	stw	r2,8(r5)
  804a44:	900b883a 	mov	r5,r18
  804a48:	b009883a 	mov	r4,r22
  804a4c:	08033f40 	call	8033f4 <_free_r>
  804a50:	b009883a 	mov	r4,r22
  804a54:	08073540 	call	807354 <__malloc_unlock>
  804a58:	003f5e06 	br	8047d4 <_realloc_r+0xd8>
  804a5c:	300b883a 	mov	r5,r6
  804a60:	dfc00b17 	ldw	ra,44(sp)
  804a64:	df000a17 	ldw	fp,40(sp)
  804a68:	ddc00917 	ldw	r23,36(sp)
  804a6c:	dd800817 	ldw	r22,32(sp)
  804a70:	dd400717 	ldw	r21,28(sp)
  804a74:	dd000617 	ldw	r20,24(sp)
  804a78:	dcc00517 	ldw	r19,20(sp)
  804a7c:	dc800417 	ldw	r18,16(sp)
  804a80:	dc400317 	ldw	r17,12(sp)
  804a84:	dc000217 	ldw	r16,8(sp)
  804a88:	dec00c04 	addi	sp,sp,48
  804a8c:	0801fc01 	jmpi	801fc0 <_malloc_r>
  804a90:	38800117 	ldw	r2,4(r7)
  804a94:	e54b883a 	add	r5,fp,r21
  804a98:	31000054 	ori	r4,r6,1
  804a9c:	1080004c 	andi	r2,r2,1
  804aa0:	1704b03a 	or	r2,r2,fp
  804aa4:	38800115 	stw	r2,4(r7)
  804aa8:	29000115 	stw	r4,4(r5)
  804aac:	2987883a 	add	r3,r5,r6
  804ab0:	18800117 	ldw	r2,4(r3)
  804ab4:	29400204 	addi	r5,r5,8
  804ab8:	b009883a 	mov	r4,r22
  804abc:	10800054 	ori	r2,r2,1
  804ac0:	18800115 	stw	r2,4(r3)
  804ac4:	08033f40 	call	8033f4 <_free_r>
  804ac8:	003f3806 	br	8047ac <_realloc_r+0xb0>
  804acc:	000d883a 	mov	r6,zero
  804ad0:	0009883a 	mov	r4,zero
  804ad4:	003f5d06 	br	80484c <_realloc_r+0x150>
  804ad8:	30c00217 	ldw	r3,8(r6)
  804adc:	30800317 	ldw	r2,12(r6)
  804ae0:	800f883a 	mov	r7,r16
  804ae4:	84000204 	addi	r16,r16,8
  804ae8:	10c00215 	stw	r3,8(r2)
  804aec:	18800315 	stw	r2,12(r3)
  804af0:	003f2306 	br	804780 <_realloc_r+0x84>
  804af4:	8809883a 	mov	r4,r17
  804af8:	900b883a 	mov	r5,r18
  804afc:	08065fc0 	call	8065fc <memmove>
  804b00:	003fd006 	br	804a44 <_realloc_r+0x348>
  804b04:	30800117 	ldw	r2,4(r6)
  804b08:	e0c00404 	addi	r3,fp,16
  804b0c:	1108703a 	and	r4,r2,r4
  804b10:	9905883a 	add	r2,r19,r4
  804b14:	10ff4d16 	blt	r2,r3,80484c <_realloc_r+0x150>
  804b18:	1705c83a 	sub	r2,r2,fp
  804b1c:	870b883a 	add	r5,r16,fp
  804b20:	10800054 	ori	r2,r2,1
  804b24:	28800115 	stw	r2,4(r5)
  804b28:	80c00117 	ldw	r3,4(r16)
  804b2c:	00802074 	movhi	r2,129
  804b30:	10a98004 	addi	r2,r2,-23040
  804b34:	b009883a 	mov	r4,r22
  804b38:	18c0004c 	andi	r3,r3,1
  804b3c:	e0c6b03a 	or	r3,fp,r3
  804b40:	11400215 	stw	r5,8(r2)
  804b44:	80c00115 	stw	r3,4(r16)
  804b48:	08073540 	call	807354 <__malloc_unlock>
  804b4c:	84400204 	addi	r17,r16,8
  804b50:	003f2006 	br	8047d4 <_realloc_r+0xd8>
  804b54:	98a9883a 	add	r20,r19,r2
  804b58:	2509883a 	add	r4,r4,r20
  804b5c:	e0800404 	addi	r2,fp,16
  804b60:	d9000115 	stw	r4,4(sp)
  804b64:	20bf7016 	blt	r4,r2,804928 <_realloc_r+0x22c>
  804b68:	b8c00317 	ldw	r3,12(r23)
  804b6c:	b8800217 	ldw	r2,8(r23)
  804b70:	99bfff04 	addi	r6,r19,-4
  804b74:	01400904 	movi	r5,36
  804b78:	18800215 	stw	r2,8(r3)
  804b7c:	10c00315 	stw	r3,12(r2)
  804b80:	bc400204 	addi	r17,r23,8
  804b84:	29804136 	bltu	r5,r6,804c8c <_realloc_r+0x590>
  804b88:	008004c4 	movi	r2,19
  804b8c:	9009883a 	mov	r4,r18
  804b90:	880f883a 	mov	r7,r17
  804b94:	11800f2e 	bgeu	r2,r6,804bd4 <_realloc_r+0x4d8>
  804b98:	90800017 	ldw	r2,0(r18)
  804b9c:	b9c00404 	addi	r7,r23,16
  804ba0:	91000204 	addi	r4,r18,8
  804ba4:	b8800215 	stw	r2,8(r23)
  804ba8:	90c00117 	ldw	r3,4(r18)
  804bac:	008006c4 	movi	r2,27
  804bb0:	b8c00315 	stw	r3,12(r23)
  804bb4:	1180072e 	bgeu	r2,r6,804bd4 <_realloc_r+0x4d8>
  804bb8:	90c00217 	ldw	r3,8(r18)
  804bbc:	b9c00604 	addi	r7,r23,24
  804bc0:	91000404 	addi	r4,r18,16
  804bc4:	b8c00415 	stw	r3,16(r23)
  804bc8:	90800317 	ldw	r2,12(r18)
  804bcc:	b8800515 	stw	r2,20(r23)
  804bd0:	31404026 	beq	r6,r5,804cd4 <_realloc_r+0x5d8>
  804bd4:	20800017 	ldw	r2,0(r4)
  804bd8:	38800015 	stw	r2,0(r7)
  804bdc:	20c00117 	ldw	r3,4(r4)
  804be0:	38c00115 	stw	r3,4(r7)
  804be4:	20800217 	ldw	r2,8(r4)
  804be8:	38800215 	stw	r2,8(r7)
  804bec:	d8c00117 	ldw	r3,4(sp)
  804bf0:	bf0b883a 	add	r5,r23,fp
  804bf4:	b009883a 	mov	r4,r22
  804bf8:	1f05c83a 	sub	r2,r3,fp
  804bfc:	10800054 	ori	r2,r2,1
  804c00:	28800115 	stw	r2,4(r5)
  804c04:	b8c00117 	ldw	r3,4(r23)
  804c08:	00802074 	movhi	r2,129
  804c0c:	10a98004 	addi	r2,r2,-23040
  804c10:	11400215 	stw	r5,8(r2)
  804c14:	18c0004c 	andi	r3,r3,1
  804c18:	e0c6b03a 	or	r3,fp,r3
  804c1c:	b8c00115 	stw	r3,4(r23)
  804c20:	08073540 	call	807354 <__malloc_unlock>
  804c24:	003eeb06 	br	8047d4 <_realloc_r+0xd8>
  804c28:	20800117 	ldw	r2,4(r4)
  804c2c:	00ffff04 	movi	r3,-4
  804c30:	800f883a 	mov	r7,r16
  804c34:	10c4703a 	and	r2,r2,r3
  804c38:	98a9883a 	add	r20,r19,r2
  804c3c:	84000204 	addi	r16,r16,8
  804c40:	003ecf06 	br	804780 <_realloc_r+0x84>
  804c44:	900b883a 	mov	r5,r18
  804c48:	8009883a 	mov	r4,r16
  804c4c:	08065fc0 	call	8065fc <memmove>
  804c50:	dd000017 	ldw	r20,0(sp)
  804c54:	b80f883a 	mov	r7,r23
  804c58:	003ec906 	br	804780 <_realloc_r+0x84>
  804c5c:	900b883a 	mov	r5,r18
  804c60:	8009883a 	mov	r4,r16
  804c64:	08065fc0 	call	8065fc <memmove>
  804c68:	b80f883a 	mov	r7,r23
  804c6c:	003ec406 	br	804780 <_realloc_r+0x84>
  804c70:	90c00417 	ldw	r3,16(r18)
  804c74:	89400604 	addi	r5,r17,24
  804c78:	91000604 	addi	r4,r18,24
  804c7c:	88c00415 	stw	r3,16(r17)
  804c80:	90800517 	ldw	r2,20(r18)
  804c84:	88800515 	stw	r2,20(r17)
  804c88:	003f6806 	br	804a2c <_realloc_r+0x330>
  804c8c:	900b883a 	mov	r5,r18
  804c90:	8809883a 	mov	r4,r17
  804c94:	08065fc0 	call	8065fc <memmove>
  804c98:	003fd406 	br	804bec <_realloc_r+0x4f0>
  804c9c:	90c00417 	ldw	r3,16(r18)
  804ca0:	91000604 	addi	r4,r18,24
  804ca4:	ba000804 	addi	r8,r23,32
  804ca8:	b8c00615 	stw	r3,24(r23)
  804cac:	90800517 	ldw	r2,20(r18)
  804cb0:	b8800715 	stw	r2,28(r23)
  804cb4:	003f1206 	br	804900 <_realloc_r+0x204>
  804cb8:	90c00417 	ldw	r3,16(r18)
  804cbc:	91000604 	addi	r4,r18,24
  804cc0:	ba000804 	addi	r8,r23,32
  804cc4:	b8c00615 	stw	r3,24(r23)
  804cc8:	90800517 	ldw	r2,20(r18)
  804ccc:	b8800715 	stw	r2,28(r23)
  804cd0:	003f3206 	br	80499c <_realloc_r+0x2a0>
  804cd4:	90c00417 	ldw	r3,16(r18)
  804cd8:	91000604 	addi	r4,r18,24
  804cdc:	b9c00804 	addi	r7,r23,32
  804ce0:	b8c00615 	stw	r3,24(r23)
  804ce4:	90800517 	ldw	r2,20(r18)
  804ce8:	b8800715 	stw	r2,28(r23)
  804cec:	003fb906 	br	804bd4 <_realloc_r+0x4d8>

00804cf0 <strcpy>:
  804cf0:	2904b03a 	or	r2,r5,r4
  804cf4:	108000cc 	andi	r2,r2,3
  804cf8:	10000826 	beq	r2,zero,804d1c <strcpy+0x2c>
  804cfc:	2007883a 	mov	r3,r4
  804d00:	28800003 	ldbu	r2,0(r5)
  804d04:	29400044 	addi	r5,r5,1
  804d08:	18800005 	stb	r2,0(r3)
  804d0c:	18c00044 	addi	r3,r3,1
  804d10:	103ffb1e 	bne	r2,zero,804d00 <strcpy+0x10>
  804d14:	2005883a 	mov	r2,r4
  804d18:	f800283a 	ret
  804d1c:	29800017 	ldw	r6,0(r5)
  804d20:	023fbff4 	movhi	r8,65279
  804d24:	423fbfc4 	addi	r8,r8,-257
  804d28:	02a02074 	movhi	r10,32897
  804d2c:	52a02004 	addi	r10,r10,-32640
  804d30:	3205883a 	add	r2,r6,r8
  804d34:	0186303a 	nor	r3,zero,r6
  804d38:	10c4703a 	and	r2,r2,r3
  804d3c:	1284703a 	and	r2,r2,r10
  804d40:	200f883a 	mov	r7,r4
  804d44:	10000b1e 	bne	r2,zero,804d74 <strcpy+0x84>
  804d48:	4013883a 	mov	r9,r8
  804d4c:	5011883a 	mov	r8,r10
  804d50:	39800015 	stw	r6,0(r7)
  804d54:	29400104 	addi	r5,r5,4
  804d58:	29800017 	ldw	r6,0(r5)
  804d5c:	39c00104 	addi	r7,r7,4
  804d60:	3245883a 	add	r2,r6,r9
  804d64:	0186303a 	nor	r3,zero,r6
  804d68:	10c4703a 	and	r2,r2,r3
  804d6c:	1204703a 	and	r2,r2,r8
  804d70:	103ff726 	beq	r2,zero,804d50 <strcpy+0x60>
  804d74:	3807883a 	mov	r3,r7
  804d78:	003fe106 	br	804d00 <strcpy+0x10>

00804d7c <_calloc_r>:
  804d7c:	298b383a 	mul	r5,r5,r6
  804d80:	defffe04 	addi	sp,sp,-8
  804d84:	dc000015 	stw	r16,0(sp)
  804d88:	dfc00115 	stw	ra,4(sp)
  804d8c:	0801fc00 	call	801fc0 <_malloc_r>
  804d90:	1021883a 	mov	r16,r2
  804d94:	01c00904 	movi	r7,36
  804d98:	10000d26 	beq	r2,zero,804dd0 <_calloc_r+0x54>
  804d9c:	10ffff17 	ldw	r3,-4(r2)
  804da0:	1009883a 	mov	r4,r2
  804da4:	00bfff04 	movi	r2,-4
  804da8:	1886703a 	and	r3,r3,r2
  804dac:	1887883a 	add	r3,r3,r2
  804db0:	180d883a 	mov	r6,r3
  804db4:	000b883a 	mov	r5,zero
  804db8:	38c01736 	bltu	r7,r3,804e18 <_calloc_r+0x9c>
  804dbc:	008004c4 	movi	r2,19
  804dc0:	10c00836 	bltu	r2,r3,804de4 <_calloc_r+0x68>
  804dc4:	20000215 	stw	zero,8(r4)
  804dc8:	20000015 	stw	zero,0(r4)
  804dcc:	20000115 	stw	zero,4(r4)
  804dd0:	8005883a 	mov	r2,r16
  804dd4:	dfc00117 	ldw	ra,4(sp)
  804dd8:	dc000017 	ldw	r16,0(sp)
  804ddc:	dec00204 	addi	sp,sp,8
  804de0:	f800283a 	ret
  804de4:	008006c4 	movi	r2,27
  804de8:	80000015 	stw	zero,0(r16)
  804dec:	80000115 	stw	zero,4(r16)
  804df0:	81000204 	addi	r4,r16,8
  804df4:	10fff32e 	bgeu	r2,r3,804dc4 <_calloc_r+0x48>
  804df8:	80000215 	stw	zero,8(r16)
  804dfc:	80000315 	stw	zero,12(r16)
  804e00:	81000404 	addi	r4,r16,16
  804e04:	19ffef1e 	bne	r3,r7,804dc4 <_calloc_r+0x48>
  804e08:	81000604 	addi	r4,r16,24
  804e0c:	80000415 	stw	zero,16(r16)
  804e10:	80000515 	stw	zero,20(r16)
  804e14:	003feb06 	br	804dc4 <_calloc_r+0x48>
  804e18:	08066dc0 	call	8066dc <memset>
  804e1c:	8005883a 	mov	r2,r16
  804e20:	dfc00117 	ldw	ra,4(sp)
  804e24:	dc000017 	ldw	r16,0(sp)
  804e28:	dec00204 	addi	sp,sp,8
  804e2c:	f800283a 	ret

00804e30 <quorem>:
  804e30:	28c00417 	ldw	r3,16(r5)
  804e34:	20800417 	ldw	r2,16(r4)
  804e38:	defff604 	addi	sp,sp,-40
  804e3c:	ddc00715 	stw	r23,28(sp)
  804e40:	dd400515 	stw	r21,20(sp)
  804e44:	dfc00915 	stw	ra,36(sp)
  804e48:	df000815 	stw	fp,32(sp)
  804e4c:	dd800615 	stw	r22,24(sp)
  804e50:	dd000415 	stw	r20,16(sp)
  804e54:	dcc00315 	stw	r19,12(sp)
  804e58:	dc800215 	stw	r18,8(sp)
  804e5c:	dc400115 	stw	r17,4(sp)
  804e60:	dc000015 	stw	r16,0(sp)
  804e64:	202f883a 	mov	r23,r4
  804e68:	282b883a 	mov	r21,r5
  804e6c:	10c07416 	blt	r2,r3,805040 <quorem+0x210>
  804e70:	1c7fffc4 	addi	r17,r3,-1
  804e74:	8c45883a 	add	r2,r17,r17
  804e78:	1085883a 	add	r2,r2,r2
  804e7c:	2c000504 	addi	r16,r5,20
  804e80:	24c00504 	addi	r19,r4,20
  804e84:	14ed883a 	add	r22,r2,r19
  804e88:	80a5883a 	add	r18,r16,r2
  804e8c:	b7000017 	ldw	fp,0(r22)
  804e90:	91400017 	ldw	r5,0(r18)
  804e94:	e009883a 	mov	r4,fp
  804e98:	29400044 	addi	r5,r5,1
  804e9c:	08071740 	call	807174 <__udivsi3>
  804ea0:	1029883a 	mov	r20,r2
  804ea4:	10003c1e 	bne	r2,zero,804f98 <quorem+0x168>
  804ea8:	a80b883a 	mov	r5,r21
  804eac:	b809883a 	mov	r4,r23
  804eb0:	08038640 	call	803864 <__mcmp>
  804eb4:	10002b16 	blt	r2,zero,804f64 <quorem+0x134>
  804eb8:	a5000044 	addi	r20,r20,1
  804ebc:	980f883a 	mov	r7,r19
  804ec0:	0011883a 	mov	r8,zero
  804ec4:	0009883a 	mov	r4,zero
  804ec8:	81400017 	ldw	r5,0(r16)
  804ecc:	38c00017 	ldw	r3,0(r7)
  804ed0:	84000104 	addi	r16,r16,4
  804ed4:	28bfffcc 	andi	r2,r5,65535
  804ed8:	2085883a 	add	r2,r4,r2
  804edc:	11bfffcc 	andi	r6,r2,65535
  804ee0:	193fffcc 	andi	r4,r3,65535
  804ee4:	1004d43a 	srli	r2,r2,16
  804ee8:	280ad43a 	srli	r5,r5,16
  804eec:	2189c83a 	sub	r4,r4,r6
  804ef0:	2209883a 	add	r4,r4,r8
  804ef4:	1806d43a 	srli	r3,r3,16
  804ef8:	288b883a 	add	r5,r5,r2
  804efc:	200dd43a 	srai	r6,r4,16
  804f00:	28bfffcc 	andi	r2,r5,65535
  804f04:	1887c83a 	sub	r3,r3,r2
  804f08:	1987883a 	add	r3,r3,r6
  804f0c:	3900000d 	sth	r4,0(r7)
  804f10:	38c0008d 	sth	r3,2(r7)
  804f14:	2808d43a 	srli	r4,r5,16
  804f18:	39c00104 	addi	r7,r7,4
  804f1c:	1811d43a 	srai	r8,r3,16
  804f20:	943fe92e 	bgeu	r18,r16,804ec8 <quorem+0x98>
  804f24:	8c45883a 	add	r2,r17,r17
  804f28:	1085883a 	add	r2,r2,r2
  804f2c:	9885883a 	add	r2,r19,r2
  804f30:	10c00017 	ldw	r3,0(r2)
  804f34:	18000b1e 	bne	r3,zero,804f64 <quorem+0x134>
  804f38:	113fff04 	addi	r4,r2,-4
  804f3c:	9900082e 	bgeu	r19,r4,804f60 <quorem+0x130>
  804f40:	10bfff17 	ldw	r2,-4(r2)
  804f44:	10000326 	beq	r2,zero,804f54 <quorem+0x124>
  804f48:	00000506 	br	804f60 <quorem+0x130>
  804f4c:	20800017 	ldw	r2,0(r4)
  804f50:	1000031e 	bne	r2,zero,804f60 <quorem+0x130>
  804f54:	213fff04 	addi	r4,r4,-4
  804f58:	8c7fffc4 	addi	r17,r17,-1
  804f5c:	993ffb36 	bltu	r19,r4,804f4c <quorem+0x11c>
  804f60:	bc400415 	stw	r17,16(r23)
  804f64:	a005883a 	mov	r2,r20
  804f68:	dfc00917 	ldw	ra,36(sp)
  804f6c:	df000817 	ldw	fp,32(sp)
  804f70:	ddc00717 	ldw	r23,28(sp)
  804f74:	dd800617 	ldw	r22,24(sp)
  804f78:	dd400517 	ldw	r21,20(sp)
  804f7c:	dd000417 	ldw	r20,16(sp)
  804f80:	dcc00317 	ldw	r19,12(sp)
  804f84:	dc800217 	ldw	r18,8(sp)
  804f88:	dc400117 	ldw	r17,4(sp)
  804f8c:	dc000017 	ldw	r16,0(sp)
  804f90:	dec00a04 	addi	sp,sp,40
  804f94:	f800283a 	ret
  804f98:	980f883a 	mov	r7,r19
  804f9c:	8011883a 	mov	r8,r16
  804fa0:	0013883a 	mov	r9,zero
  804fa4:	000d883a 	mov	r6,zero
  804fa8:	40c00017 	ldw	r3,0(r8)
  804fac:	39000017 	ldw	r4,0(r7)
  804fb0:	42000104 	addi	r8,r8,4
  804fb4:	18bfffcc 	andi	r2,r3,65535
  804fb8:	a085383a 	mul	r2,r20,r2
  804fbc:	1806d43a 	srli	r3,r3,16
  804fc0:	217fffcc 	andi	r5,r4,65535
  804fc4:	3085883a 	add	r2,r6,r2
  804fc8:	11bfffcc 	andi	r6,r2,65535
  804fcc:	a0c7383a 	mul	r3,r20,r3
  804fd0:	1004d43a 	srli	r2,r2,16
  804fd4:	298bc83a 	sub	r5,r5,r6
  804fd8:	2a4b883a 	add	r5,r5,r9
  804fdc:	2008d43a 	srli	r4,r4,16
  804fe0:	1887883a 	add	r3,r3,r2
  804fe4:	280dd43a 	srai	r6,r5,16
  804fe8:	18bfffcc 	andi	r2,r3,65535
  804fec:	2089c83a 	sub	r4,r4,r2
  804ff0:	2189883a 	add	r4,r4,r6
  804ff4:	3900008d 	sth	r4,2(r7)
  804ff8:	3940000d 	sth	r5,0(r7)
  804ffc:	180cd43a 	srli	r6,r3,16
  805000:	39c00104 	addi	r7,r7,4
  805004:	2013d43a 	srai	r9,r4,16
  805008:	923fe72e 	bgeu	r18,r8,804fa8 <quorem+0x178>
  80500c:	e03fa61e 	bne	fp,zero,804ea8 <quorem+0x78>
  805010:	b0ffff04 	addi	r3,r22,-4
  805014:	98c0082e 	bgeu	r19,r3,805038 <quorem+0x208>
  805018:	b0bfff17 	ldw	r2,-4(r22)
  80501c:	10000326 	beq	r2,zero,80502c <quorem+0x1fc>
  805020:	00000506 	br	805038 <quorem+0x208>
  805024:	18800017 	ldw	r2,0(r3)
  805028:	1000031e 	bne	r2,zero,805038 <quorem+0x208>
  80502c:	18ffff04 	addi	r3,r3,-4
  805030:	8c7fffc4 	addi	r17,r17,-1
  805034:	98fffb36 	bltu	r19,r3,805024 <quorem+0x1f4>
  805038:	bc400415 	stw	r17,16(r23)
  80503c:	003f9a06 	br	804ea8 <quorem+0x78>
  805040:	0005883a 	mov	r2,zero
  805044:	003fc806 	br	804f68 <quorem+0x138>

00805048 <_dtoa_r>:
  805048:	22001017 	ldw	r8,64(r4)
  80504c:	deffda04 	addi	sp,sp,-152
  805050:	dd402115 	stw	r21,132(sp)
  805054:	dd002015 	stw	r20,128(sp)
  805058:	dc801e15 	stw	r18,120(sp)
  80505c:	dc401d15 	stw	r17,116(sp)
  805060:	dfc02515 	stw	ra,148(sp)
  805064:	df002415 	stw	fp,144(sp)
  805068:	ddc02315 	stw	r23,140(sp)
  80506c:	dd802215 	stw	r22,136(sp)
  805070:	dcc01f15 	stw	r19,124(sp)
  805074:	dc001c15 	stw	r16,112(sp)
  805078:	d9001615 	stw	r4,88(sp)
  80507c:	3023883a 	mov	r17,r6
  805080:	2829883a 	mov	r20,r5
  805084:	d9c01715 	stw	r7,92(sp)
  805088:	dc802817 	ldw	r18,160(sp)
  80508c:	302b883a 	mov	r21,r6
  805090:	40000a26 	beq	r8,zero,8050bc <_dtoa_r+0x74>
  805094:	20801117 	ldw	r2,68(r4)
  805098:	400b883a 	mov	r5,r8
  80509c:	40800115 	stw	r2,4(r8)
  8050a0:	20c01117 	ldw	r3,68(r4)
  8050a4:	00800044 	movi	r2,1
  8050a8:	10c4983a 	sll	r2,r2,r3
  8050ac:	40800215 	stw	r2,8(r8)
  8050b0:	08037080 	call	803708 <_Bfree>
  8050b4:	d8c01617 	ldw	r3,88(sp)
  8050b8:	18001015 	stw	zero,64(r3)
  8050bc:	8800a316 	blt	r17,zero,80534c <_dtoa_r+0x304>
  8050c0:	90000015 	stw	zero,0(r18)
  8050c4:	a8dffc2c 	andhi	r3,r21,32752
  8050c8:	009ffc34 	movhi	r2,32752
  8050cc:	18809126 	beq	r3,r2,805314 <_dtoa_r+0x2cc>
  8050d0:	000d883a 	mov	r6,zero
  8050d4:	000f883a 	mov	r7,zero
  8050d8:	a009883a 	mov	r4,r20
  8050dc:	a80b883a 	mov	r5,r21
  8050e0:	dd001215 	stw	r20,72(sp)
  8050e4:	dd401315 	stw	r21,76(sp)
  8050e8:	0806bc00 	call	806bc0 <__nedf2>
  8050ec:	1000171e 	bne	r2,zero,80514c <_dtoa_r+0x104>
  8050f0:	d9802717 	ldw	r6,156(sp)
  8050f4:	00800044 	movi	r2,1
  8050f8:	30800015 	stw	r2,0(r6)
  8050fc:	d8802917 	ldw	r2,164(sp)
  805100:	10029b26 	beq	r2,zero,805b70 <_dtoa_r+0xb28>
  805104:	d9002917 	ldw	r4,164(sp)
  805108:	00802074 	movhi	r2,129
  80510c:	10a87844 	addi	r2,r2,-24095
  805110:	10ffffc4 	addi	r3,r2,-1
  805114:	20800015 	stw	r2,0(r4)
  805118:	1805883a 	mov	r2,r3
  80511c:	dfc02517 	ldw	ra,148(sp)
  805120:	df002417 	ldw	fp,144(sp)
  805124:	ddc02317 	ldw	r23,140(sp)
  805128:	dd802217 	ldw	r22,136(sp)
  80512c:	dd402117 	ldw	r21,132(sp)
  805130:	dd002017 	ldw	r20,128(sp)
  805134:	dcc01f17 	ldw	r19,124(sp)
  805138:	dc801e17 	ldw	r18,120(sp)
  80513c:	dc401d17 	ldw	r17,116(sp)
  805140:	dc001c17 	ldw	r16,112(sp)
  805144:	dec02604 	addi	sp,sp,152
  805148:	f800283a 	ret
  80514c:	d9001617 	ldw	r4,88(sp)
  805150:	d9401217 	ldw	r5,72(sp)
  805154:	d8800104 	addi	r2,sp,4
  805158:	a80d883a 	mov	r6,r21
  80515c:	d9c00204 	addi	r7,sp,8
  805160:	d8800015 	stw	r2,0(sp)
  805164:	0803d440 	call	803d44 <__d2b>
  805168:	d8800715 	stw	r2,28(sp)
  80516c:	a804d53a 	srli	r2,r21,20
  805170:	1101ffcc 	andi	r4,r2,2047
  805174:	20008626 	beq	r4,zero,805390 <_dtoa_r+0x348>
  805178:	d8c01217 	ldw	r3,72(sp)
  80517c:	00800434 	movhi	r2,16
  805180:	10bfffc4 	addi	r2,r2,-1
  805184:	ddc00117 	ldw	r23,4(sp)
  805188:	a884703a 	and	r2,r21,r2
  80518c:	1811883a 	mov	r8,r3
  805190:	124ffc34 	orhi	r9,r2,16368
  805194:	25bf0044 	addi	r22,r4,-1023
  805198:	d8000815 	stw	zero,32(sp)
  80519c:	0005883a 	mov	r2,zero
  8051a0:	00cffe34 	movhi	r3,16376
  8051a4:	480b883a 	mov	r5,r9
  8051a8:	4009883a 	mov	r4,r8
  8051ac:	180f883a 	mov	r7,r3
  8051b0:	100d883a 	mov	r6,r2
  8051b4:	08010f80 	call	8010f8 <__subdf3>
  8051b8:	0218dbf4 	movhi	r8,25455
  8051bc:	4210d844 	addi	r8,r8,17249
  8051c0:	024ff4f4 	movhi	r9,16339
  8051c4:	4a61e9c4 	addi	r9,r9,-30809
  8051c8:	480f883a 	mov	r7,r9
  8051cc:	400d883a 	mov	r6,r8
  8051d0:	180b883a 	mov	r5,r3
  8051d4:	1009883a 	mov	r4,r2
  8051d8:	08067740 	call	806774 <__muldf3>
  8051dc:	0222d874 	movhi	r8,35681
  8051e0:	42322cc4 	addi	r8,r8,-14157
  8051e4:	024ff1f4 	movhi	r9,16327
  8051e8:	4a628a04 	addi	r9,r9,-30168
  8051ec:	480f883a 	mov	r7,r9
  8051f0:	400d883a 	mov	r6,r8
  8051f4:	180b883a 	mov	r5,r3
  8051f8:	1009883a 	mov	r4,r2
  8051fc:	08011780 	call	801178 <__adddf3>
  805200:	b009883a 	mov	r4,r22
  805204:	1021883a 	mov	r16,r2
  805208:	1823883a 	mov	r17,r3
  80520c:	0806e680 	call	806e68 <__floatsidf>
  805210:	021427f4 	movhi	r8,20639
  805214:	421e7ec4 	addi	r8,r8,31227
  805218:	024ff4f4 	movhi	r9,16339
  80521c:	4a5104c4 	addi	r9,r9,17427
  805220:	480f883a 	mov	r7,r9
  805224:	400d883a 	mov	r6,r8
  805228:	180b883a 	mov	r5,r3
  80522c:	1009883a 	mov	r4,r2
  805230:	08067740 	call	806774 <__muldf3>
  805234:	180f883a 	mov	r7,r3
  805238:	880b883a 	mov	r5,r17
  80523c:	100d883a 	mov	r6,r2
  805240:	8009883a 	mov	r4,r16
  805244:	08011780 	call	801178 <__adddf3>
  805248:	1009883a 	mov	r4,r2
  80524c:	180b883a 	mov	r5,r3
  805250:	1021883a 	mov	r16,r2
  805254:	1823883a 	mov	r17,r3
  805258:	0806f600 	call	806f60 <__fixdfsi>
  80525c:	000d883a 	mov	r6,zero
  805260:	000f883a 	mov	r7,zero
  805264:	8009883a 	mov	r4,r16
  805268:	880b883a 	mov	r5,r17
  80526c:	d8800d15 	stw	r2,52(sp)
  805270:	0806d580 	call	806d58 <__ltdf2>
  805274:	10031716 	blt	r2,zero,805ed4 <_dtoa_r+0xe8c>
  805278:	d8c00d17 	ldw	r3,52(sp)
  80527c:	00800584 	movi	r2,22
  805280:	10c1482e 	bgeu	r2,r3,8057a4 <_dtoa_r+0x75c>
  805284:	01000044 	movi	r4,1
  805288:	d9000c15 	stw	r4,48(sp)
  80528c:	bd85c83a 	sub	r2,r23,r22
  805290:	11bfffc4 	addi	r6,r2,-1
  805294:	30030b16 	blt	r6,zero,805ec4 <_dtoa_r+0xe7c>
  805298:	d9800a15 	stw	r6,40(sp)
  80529c:	d8001115 	stw	zero,68(sp)
  8052a0:	d8c00d17 	ldw	r3,52(sp)
  8052a4:	1802ff16 	blt	r3,zero,805ea4 <_dtoa_r+0xe5c>
  8052a8:	d9000a17 	ldw	r4,40(sp)
  8052ac:	d8c00915 	stw	r3,36(sp)
  8052b0:	d8001015 	stw	zero,64(sp)
  8052b4:	20c9883a 	add	r4,r4,r3
  8052b8:	d9000a15 	stw	r4,40(sp)
  8052bc:	d9001717 	ldw	r4,92(sp)
  8052c0:	00800244 	movi	r2,9
  8052c4:	11004636 	bltu	r2,r4,8053e0 <_dtoa_r+0x398>
  8052c8:	00800144 	movi	r2,5
  8052cc:	11020416 	blt	r2,r4,805ae0 <_dtoa_r+0xa98>
  8052d0:	04400044 	movi	r17,1
  8052d4:	d8c01717 	ldw	r3,92(sp)
  8052d8:	00800144 	movi	r2,5
  8052dc:	10c1ed36 	bltu	r2,r3,805a94 <_dtoa_r+0xa4c>
  8052e0:	18c5883a 	add	r2,r3,r3
  8052e4:	1085883a 	add	r2,r2,r2
  8052e8:	00c02034 	movhi	r3,128
  8052ec:	18d4bf04 	addi	r3,r3,21244
  8052f0:	10c5883a 	add	r2,r2,r3
  8052f4:	11000017 	ldw	r4,0(r2)
  8052f8:	2000683a 	jmp	r4
  8052fc:	008053e8 	cmpgeui	r2,zero,335
  805300:	008053e8 	cmpgeui	r2,zero,335
  805304:	00805de8 	cmpgeui	r2,zero,375
  805308:	00805dc0 	call	805dc <__alt_mem_sdram-0x77fa24>
  80530c:	00805e04 	movi	r2,376
  805310:	00805e10 	cmplti	r2,zero,376
  805314:	d9002717 	ldw	r4,156(sp)
  805318:	0089c3c4 	movi	r2,9999
  80531c:	20800015 	stw	r2,0(r4)
  805320:	a0001026 	beq	r20,zero,805364 <_dtoa_r+0x31c>
  805324:	00c02074 	movhi	r3,129
  805328:	18e87704 	addi	r3,r3,-24100
  80532c:	d9802917 	ldw	r6,164(sp)
  805330:	303f7926 	beq	r6,zero,805118 <_dtoa_r+0xd0>
  805334:	188000c7 	ldb	r2,3(r3)
  805338:	190000c4 	addi	r4,r3,3
  80533c:	1000101e 	bne	r2,zero,805380 <_dtoa_r+0x338>
  805340:	d8802917 	ldw	r2,164(sp)
  805344:	11000015 	stw	r4,0(r2)
  805348:	003f7306 	br	805118 <_dtoa_r+0xd0>
  80534c:	00a00034 	movhi	r2,32768
  805350:	10bfffc4 	addi	r2,r2,-1
  805354:	00c00044 	movi	r3,1
  805358:	88aa703a 	and	r21,r17,r2
  80535c:	90c00015 	stw	r3,0(r18)
  805360:	003f5806 	br	8050c4 <_dtoa_r+0x7c>
  805364:	00800434 	movhi	r2,16
  805368:	10bfffc4 	addi	r2,r2,-1
  80536c:	a884703a 	and	r2,r21,r2
  805370:	103fec1e 	bne	r2,zero,805324 <_dtoa_r+0x2dc>
  805374:	00c02074 	movhi	r3,129
  805378:	18e87404 	addi	r3,r3,-24112
  80537c:	003feb06 	br	80532c <_dtoa_r+0x2e4>
  805380:	d8802917 	ldw	r2,164(sp)
  805384:	19000204 	addi	r4,r3,8
  805388:	11000015 	stw	r4,0(r2)
  80538c:	003f6206 	br	805118 <_dtoa_r+0xd0>
  805390:	ddc00117 	ldw	r23,4(sp)
  805394:	d8800217 	ldw	r2,8(sp)
  805398:	01000804 	movi	r4,32
  80539c:	b8c10c84 	addi	r3,r23,1074
  8053a0:	18a3883a 	add	r17,r3,r2
  8053a4:	2441b80e 	bge	r4,r17,805a88 <_dtoa_r+0xa40>
  8053a8:	00c01004 	movi	r3,64
  8053ac:	1c47c83a 	sub	r3,r3,r17
  8053b0:	88bff804 	addi	r2,r17,-32
  8053b4:	a8c6983a 	sll	r3,r21,r3
  8053b8:	a084d83a 	srl	r2,r20,r2
  8053bc:	1888b03a 	or	r4,r3,r2
  8053c0:	080147c0 	call	80147c <__floatunsidf>
  8053c4:	1011883a 	mov	r8,r2
  8053c8:	00bf8434 	movhi	r2,65040
  8053cc:	01000044 	movi	r4,1
  8053d0:	10d3883a 	add	r9,r2,r3
  8053d4:	8dbef344 	addi	r22,r17,-1075
  8053d8:	d9000815 	stw	r4,32(sp)
  8053dc:	003f6f06 	br	80519c <_dtoa_r+0x154>
  8053e0:	d8001715 	stw	zero,92(sp)
  8053e4:	04400044 	movi	r17,1
  8053e8:	00bfffc4 	movi	r2,-1
  8053ec:	00c00044 	movi	r3,1
  8053f0:	d8800e15 	stw	r2,56(sp)
  8053f4:	d8002615 	stw	zero,152(sp)
  8053f8:	d8800f15 	stw	r2,60(sp)
  8053fc:	d8c00b15 	stw	r3,44(sp)
  805400:	1021883a 	mov	r16,r2
  805404:	d8801617 	ldw	r2,88(sp)
  805408:	10001115 	stw	zero,68(r2)
  80540c:	d8801617 	ldw	r2,88(sp)
  805410:	11401117 	ldw	r5,68(r2)
  805414:	1009883a 	mov	r4,r2
  805418:	0803c880 	call	803c88 <_Balloc>
  80541c:	d8c01617 	ldw	r3,88(sp)
  805420:	d8800515 	stw	r2,20(sp)
  805424:	18801015 	stw	r2,64(r3)
  805428:	00800384 	movi	r2,14
  80542c:	14006836 	bltu	r2,r16,8055d0 <_dtoa_r+0x588>
  805430:	8805003a 	cmpeq	r2,r17,zero
  805434:	1000661e 	bne	r2,zero,8055d0 <_dtoa_r+0x588>
  805438:	d9000d17 	ldw	r4,52(sp)
  80543c:	0102300e 	bge	zero,r4,805d00 <_dtoa_r+0xcb8>
  805440:	208003cc 	andi	r2,r4,15
  805444:	100490fa 	slli	r2,r2,3
  805448:	2025d13a 	srai	r18,r4,4
  80544c:	00c02074 	movhi	r3,129
  805450:	18e82b04 	addi	r3,r3,-24404
  805454:	10c5883a 	add	r2,r2,r3
  805458:	90c0040c 	andi	r3,r18,16
  80545c:	14000017 	ldw	r16,0(r2)
  805460:	14400117 	ldw	r17,4(r2)
  805464:	18036a1e 	bne	r3,zero,806210 <_dtoa_r+0x11c8>
  805468:	05800084 	movi	r22,2
  80546c:	90001026 	beq	r18,zero,8054b0 <_dtoa_r+0x468>
  805470:	04c02074 	movhi	r19,129
  805474:	9ce85d04 	addi	r19,r19,-24204
  805478:	9080004c 	andi	r2,r18,1
  80547c:	1005003a 	cmpeq	r2,r2,zero
  805480:	1000081e 	bne	r2,zero,8054a4 <_dtoa_r+0x45c>
  805484:	99800017 	ldw	r6,0(r19)
  805488:	99c00117 	ldw	r7,4(r19)
  80548c:	880b883a 	mov	r5,r17
  805490:	8009883a 	mov	r4,r16
  805494:	08067740 	call	806774 <__muldf3>
  805498:	1021883a 	mov	r16,r2
  80549c:	b5800044 	addi	r22,r22,1
  8054a0:	1823883a 	mov	r17,r3
  8054a4:	9025d07a 	srai	r18,r18,1
  8054a8:	9cc00204 	addi	r19,r19,8
  8054ac:	903ff21e 	bne	r18,zero,805478 <_dtoa_r+0x430>
  8054b0:	a80b883a 	mov	r5,r21
  8054b4:	a009883a 	mov	r4,r20
  8054b8:	880f883a 	mov	r7,r17
  8054bc:	800d883a 	mov	r6,r16
  8054c0:	08011ec0 	call	8011ec <__divdf3>
  8054c4:	1029883a 	mov	r20,r2
  8054c8:	182b883a 	mov	r21,r3
  8054cc:	d8c00c17 	ldw	r3,48(sp)
  8054d0:	1805003a 	cmpeq	r2,r3,zero
  8054d4:	1000081e 	bne	r2,zero,8054f8 <_dtoa_r+0x4b0>
  8054d8:	0005883a 	mov	r2,zero
  8054dc:	00cffc34 	movhi	r3,16368
  8054e0:	180f883a 	mov	r7,r3
  8054e4:	a009883a 	mov	r4,r20
  8054e8:	a80b883a 	mov	r5,r21
  8054ec:	100d883a 	mov	r6,r2
  8054f0:	0806d580 	call	806d58 <__ltdf2>
  8054f4:	1003fe16 	blt	r2,zero,8064f0 <_dtoa_r+0x14a8>
  8054f8:	b009883a 	mov	r4,r22
  8054fc:	0806e680 	call	806e68 <__floatsidf>
  805500:	180b883a 	mov	r5,r3
  805504:	1009883a 	mov	r4,r2
  805508:	a00d883a 	mov	r6,r20
  80550c:	a80f883a 	mov	r7,r21
  805510:	08067740 	call	806774 <__muldf3>
  805514:	0011883a 	mov	r8,zero
  805518:	02500734 	movhi	r9,16412
  80551c:	1009883a 	mov	r4,r2
  805520:	180b883a 	mov	r5,r3
  805524:	480f883a 	mov	r7,r9
  805528:	400d883a 	mov	r6,r8
  80552c:	08011780 	call	801178 <__adddf3>
  805530:	d9000f17 	ldw	r4,60(sp)
  805534:	102d883a 	mov	r22,r2
  805538:	00bf3034 	movhi	r2,64704
  80553c:	18b9883a 	add	fp,r3,r2
  805540:	e02f883a 	mov	r23,fp
  805544:	20028f1e 	bne	r4,zero,805f84 <_dtoa_r+0xf3c>
  805548:	0005883a 	mov	r2,zero
  80554c:	00d00534 	movhi	r3,16404
  805550:	a009883a 	mov	r4,r20
  805554:	a80b883a 	mov	r5,r21
  805558:	180f883a 	mov	r7,r3
  80555c:	100d883a 	mov	r6,r2
  805560:	08010f80 	call	8010f8 <__subdf3>
  805564:	1009883a 	mov	r4,r2
  805568:	e00f883a 	mov	r7,fp
  80556c:	180b883a 	mov	r5,r3
  805570:	b00d883a 	mov	r6,r22
  805574:	1025883a 	mov	r18,r2
  805578:	1827883a 	mov	r19,r3
  80557c:	0806c480 	call	806c48 <__gtdf2>
  805580:	00834f16 	blt	zero,r2,8062c0 <_dtoa_r+0x1278>
  805584:	e0e0003c 	xorhi	r3,fp,32768
  805588:	9009883a 	mov	r4,r18
  80558c:	980b883a 	mov	r5,r19
  805590:	180f883a 	mov	r7,r3
  805594:	b00d883a 	mov	r6,r22
  805598:	0806d580 	call	806d58 <__ltdf2>
  80559c:	1000080e 	bge	r2,zero,8055c0 <_dtoa_r+0x578>
  8055a0:	0027883a 	mov	r19,zero
  8055a4:	0025883a 	mov	r18,zero
  8055a8:	d8802617 	ldw	r2,152(sp)
  8055ac:	df000517 	ldw	fp,20(sp)
  8055b0:	d8000615 	stw	zero,24(sp)
  8055b4:	0084303a 	nor	r2,zero,r2
  8055b8:	d8800d15 	stw	r2,52(sp)
  8055bc:	00019b06 	br	805c2c <_dtoa_r+0xbe4>
  8055c0:	d9801217 	ldw	r6,72(sp)
  8055c4:	d8801317 	ldw	r2,76(sp)
  8055c8:	3029883a 	mov	r20,r6
  8055cc:	102b883a 	mov	r21,r2
  8055d0:	d8c00217 	ldw	r3,8(sp)
  8055d4:	18008516 	blt	r3,zero,8057ec <_dtoa_r+0x7a4>
  8055d8:	d9000d17 	ldw	r4,52(sp)
  8055dc:	00800384 	movi	r2,14
  8055e0:	11008216 	blt	r2,r4,8057ec <_dtoa_r+0x7a4>
  8055e4:	200490fa 	slli	r2,r4,3
  8055e8:	d9802617 	ldw	r6,152(sp)
  8055ec:	00c02074 	movhi	r3,129
  8055f0:	18e82b04 	addi	r3,r3,-24404
  8055f4:	10c5883a 	add	r2,r2,r3
  8055f8:	14800017 	ldw	r18,0(r2)
  8055fc:	14c00117 	ldw	r19,4(r2)
  805600:	30031e16 	blt	r6,zero,80627c <_dtoa_r+0x1234>
  805604:	d9000517 	ldw	r4,20(sp)
  805608:	d8c00f17 	ldw	r3,60(sp)
  80560c:	a823883a 	mov	r17,r21
  805610:	a021883a 	mov	r16,r20
  805614:	192b883a 	add	r21,r3,r4
  805618:	2039883a 	mov	fp,r4
  80561c:	00000f06 	br	80565c <_dtoa_r+0x614>
  805620:	0005883a 	mov	r2,zero
  805624:	00d00934 	movhi	r3,16420
  805628:	5009883a 	mov	r4,r10
  80562c:	580b883a 	mov	r5,r11
  805630:	180f883a 	mov	r7,r3
  805634:	100d883a 	mov	r6,r2
  805638:	08067740 	call	806774 <__muldf3>
  80563c:	180b883a 	mov	r5,r3
  805640:	000d883a 	mov	r6,zero
  805644:	000f883a 	mov	r7,zero
  805648:	1009883a 	mov	r4,r2
  80564c:	1021883a 	mov	r16,r2
  805650:	1823883a 	mov	r17,r3
  805654:	0806bc00 	call	806bc0 <__nedf2>
  805658:	10004526 	beq	r2,zero,805770 <_dtoa_r+0x728>
  80565c:	900d883a 	mov	r6,r18
  805660:	980f883a 	mov	r7,r19
  805664:	8009883a 	mov	r4,r16
  805668:	880b883a 	mov	r5,r17
  80566c:	08011ec0 	call	8011ec <__divdf3>
  805670:	180b883a 	mov	r5,r3
  805674:	1009883a 	mov	r4,r2
  805678:	0806f600 	call	806f60 <__fixdfsi>
  80567c:	1009883a 	mov	r4,r2
  805680:	1029883a 	mov	r20,r2
  805684:	0806e680 	call	806e68 <__floatsidf>
  805688:	180f883a 	mov	r7,r3
  80568c:	9009883a 	mov	r4,r18
  805690:	980b883a 	mov	r5,r19
  805694:	100d883a 	mov	r6,r2
  805698:	08067740 	call	806774 <__muldf3>
  80569c:	180f883a 	mov	r7,r3
  8056a0:	880b883a 	mov	r5,r17
  8056a4:	8009883a 	mov	r4,r16
  8056a8:	100d883a 	mov	r6,r2
  8056ac:	08010f80 	call	8010f8 <__subdf3>
  8056b0:	1015883a 	mov	r10,r2
  8056b4:	a0800c04 	addi	r2,r20,48
  8056b8:	e0800005 	stb	r2,0(fp)
  8056bc:	e7000044 	addi	fp,fp,1
  8056c0:	1817883a 	mov	r11,r3
  8056c4:	e57fd61e 	bne	fp,r21,805620 <_dtoa_r+0x5d8>
  8056c8:	500d883a 	mov	r6,r10
  8056cc:	180f883a 	mov	r7,r3
  8056d0:	5009883a 	mov	r4,r10
  8056d4:	180b883a 	mov	r5,r3
  8056d8:	08011780 	call	801178 <__adddf3>
  8056dc:	100d883a 	mov	r6,r2
  8056e0:	9009883a 	mov	r4,r18
  8056e4:	980b883a 	mov	r5,r19
  8056e8:	180f883a 	mov	r7,r3
  8056ec:	1021883a 	mov	r16,r2
  8056f0:	1823883a 	mov	r17,r3
  8056f4:	0806d580 	call	806d58 <__ltdf2>
  8056f8:	10000816 	blt	r2,zero,80571c <_dtoa_r+0x6d4>
  8056fc:	980b883a 	mov	r5,r19
  805700:	800d883a 	mov	r6,r16
  805704:	880f883a 	mov	r7,r17
  805708:	9009883a 	mov	r4,r18
  80570c:	0806b380 	call	806b38 <__eqdf2>
  805710:	1000171e 	bne	r2,zero,805770 <_dtoa_r+0x728>
  805714:	a080004c 	andi	r2,r20,1
  805718:	10001526 	beq	r2,zero,805770 <_dtoa_r+0x728>
  80571c:	d8800d17 	ldw	r2,52(sp)
  805720:	d8800415 	stw	r2,16(sp)
  805724:	e009883a 	mov	r4,fp
  805728:	213fffc4 	addi	r4,r4,-1
  80572c:	20c00007 	ldb	r3,0(r4)
  805730:	00800e44 	movi	r2,57
  805734:	1880081e 	bne	r3,r2,805758 <_dtoa_r+0x710>
  805738:	d8800517 	ldw	r2,20(sp)
  80573c:	113ffa1e 	bne	r2,r4,805728 <_dtoa_r+0x6e0>
  805740:	d8c00417 	ldw	r3,16(sp)
  805744:	d9800517 	ldw	r6,20(sp)
  805748:	00800c04 	movi	r2,48
  80574c:	18c00044 	addi	r3,r3,1
  805750:	d8c00415 	stw	r3,16(sp)
  805754:	30800005 	stb	r2,0(r6)
  805758:	20800003 	ldbu	r2,0(r4)
  80575c:	d8c00417 	ldw	r3,16(sp)
  805760:	27000044 	addi	fp,r4,1
  805764:	10800044 	addi	r2,r2,1
  805768:	d8c00d15 	stw	r3,52(sp)
  80576c:	20800005 	stb	r2,0(r4)
  805770:	d9001617 	ldw	r4,88(sp)
  805774:	d9400717 	ldw	r5,28(sp)
  805778:	08037080 	call	803708 <_Bfree>
  80577c:	e0000005 	stb	zero,0(fp)
  805780:	d9800d17 	ldw	r6,52(sp)
  805784:	d8c02717 	ldw	r3,156(sp)
  805788:	d9002917 	ldw	r4,164(sp)
  80578c:	30800044 	addi	r2,r6,1
  805790:	18800015 	stw	r2,0(r3)
  805794:	20029c26 	beq	r4,zero,806208 <_dtoa_r+0x11c0>
  805798:	d8c00517 	ldw	r3,20(sp)
  80579c:	27000015 	stw	fp,0(r4)
  8057a0:	003e5d06 	br	805118 <_dtoa_r+0xd0>
  8057a4:	d9800d17 	ldw	r6,52(sp)
  8057a8:	00c02074 	movhi	r3,129
  8057ac:	18e82b04 	addi	r3,r3,-24404
  8057b0:	d9001217 	ldw	r4,72(sp)
  8057b4:	300490fa 	slli	r2,r6,3
  8057b8:	d9401317 	ldw	r5,76(sp)
  8057bc:	10c5883a 	add	r2,r2,r3
  8057c0:	12000017 	ldw	r8,0(r2)
  8057c4:	12400117 	ldw	r9,4(r2)
  8057c8:	400d883a 	mov	r6,r8
  8057cc:	480f883a 	mov	r7,r9
  8057d0:	0806d580 	call	806d58 <__ltdf2>
  8057d4:	1000030e 	bge	r2,zero,8057e4 <_dtoa_r+0x79c>
  8057d8:	d8800d17 	ldw	r2,52(sp)
  8057dc:	10bfffc4 	addi	r2,r2,-1
  8057e0:	d8800d15 	stw	r2,52(sp)
  8057e4:	d8000c15 	stw	zero,48(sp)
  8057e8:	003ea806 	br	80528c <_dtoa_r+0x244>
  8057ec:	d9000b17 	ldw	r4,44(sp)
  8057f0:	202cc03a 	cmpne	r22,r4,zero
  8057f4:	b000c71e 	bne	r22,zero,805b14 <_dtoa_r+0xacc>
  8057f8:	dc001117 	ldw	r16,68(sp)
  8057fc:	dc801017 	ldw	r18,64(sp)
  805800:	0027883a 	mov	r19,zero
  805804:	04000b0e 	bge	zero,r16,805834 <_dtoa_r+0x7ec>
  805808:	d8c00a17 	ldw	r3,40(sp)
  80580c:	00c0090e 	bge	zero,r3,805834 <_dtoa_r+0x7ec>
  805810:	8005883a 	mov	r2,r16
  805814:	1c011316 	blt	r3,r16,805c64 <_dtoa_r+0xc1c>
  805818:	d9000a17 	ldw	r4,40(sp)
  80581c:	d9801117 	ldw	r6,68(sp)
  805820:	80a1c83a 	sub	r16,r16,r2
  805824:	2089c83a 	sub	r4,r4,r2
  805828:	308dc83a 	sub	r6,r6,r2
  80582c:	d9000a15 	stw	r4,40(sp)
  805830:	d9801115 	stw	r6,68(sp)
  805834:	d8801017 	ldw	r2,64(sp)
  805838:	0080150e 	bge	zero,r2,805890 <_dtoa_r+0x848>
  80583c:	d8c00b17 	ldw	r3,44(sp)
  805840:	1805003a 	cmpeq	r2,r3,zero
  805844:	1001c91e 	bne	r2,zero,805f6c <_dtoa_r+0xf24>
  805848:	04800e0e 	bge	zero,r18,805884 <_dtoa_r+0x83c>
  80584c:	d9001617 	ldw	r4,88(sp)
  805850:	980b883a 	mov	r5,r19
  805854:	900d883a 	mov	r6,r18
  805858:	08044bc0 	call	8044bc <__pow5mult>
  80585c:	d9001617 	ldw	r4,88(sp)
  805860:	d9800717 	ldw	r6,28(sp)
  805864:	100b883a 	mov	r5,r2
  805868:	1027883a 	mov	r19,r2
  80586c:	08041980 	call	804198 <__multiply>
  805870:	d9001617 	ldw	r4,88(sp)
  805874:	d9400717 	ldw	r5,28(sp)
  805878:	1023883a 	mov	r17,r2
  80587c:	08037080 	call	803708 <_Bfree>
  805880:	dc400715 	stw	r17,28(sp)
  805884:	d9001017 	ldw	r4,64(sp)
  805888:	248dc83a 	sub	r6,r4,r18
  80588c:	30010e1e 	bne	r6,zero,805cc8 <_dtoa_r+0xc80>
  805890:	d9001617 	ldw	r4,88(sp)
  805894:	04400044 	movi	r17,1
  805898:	880b883a 	mov	r5,r17
  80589c:	08043800 	call	804380 <__i2b>
  8058a0:	d9800917 	ldw	r6,36(sp)
  8058a4:	1025883a 	mov	r18,r2
  8058a8:	0180040e 	bge	zero,r6,8058bc <_dtoa_r+0x874>
  8058ac:	d9001617 	ldw	r4,88(sp)
  8058b0:	100b883a 	mov	r5,r2
  8058b4:	08044bc0 	call	8044bc <__pow5mult>
  8058b8:	1025883a 	mov	r18,r2
  8058bc:	d8801717 	ldw	r2,92(sp)
  8058c0:	8880f30e 	bge	r17,r2,805c90 <_dtoa_r+0xc48>
  8058c4:	0023883a 	mov	r17,zero
  8058c8:	d9800917 	ldw	r6,36(sp)
  8058cc:	30019e1e 	bne	r6,zero,805f48 <_dtoa_r+0xf00>
  8058d0:	00c00044 	movi	r3,1
  8058d4:	d9000a17 	ldw	r4,40(sp)
  8058d8:	20c5883a 	add	r2,r4,r3
  8058dc:	10c007cc 	andi	r3,r2,31
  8058e0:	1800841e 	bne	r3,zero,805af4 <_dtoa_r+0xaac>
  8058e4:	00800704 	movi	r2,28
  8058e8:	d9000a17 	ldw	r4,40(sp)
  8058ec:	d9801117 	ldw	r6,68(sp)
  8058f0:	80a1883a 	add	r16,r16,r2
  8058f4:	2089883a 	add	r4,r4,r2
  8058f8:	308d883a 	add	r6,r6,r2
  8058fc:	d9000a15 	stw	r4,40(sp)
  805900:	d9801115 	stw	r6,68(sp)
  805904:	d8801117 	ldw	r2,68(sp)
  805908:	0080050e 	bge	zero,r2,805920 <_dtoa_r+0x8d8>
  80590c:	d9400717 	ldw	r5,28(sp)
  805910:	d9001617 	ldw	r4,88(sp)
  805914:	100d883a 	mov	r6,r2
  805918:	080404c0 	call	80404c <__lshift>
  80591c:	d8800715 	stw	r2,28(sp)
  805920:	d8c00a17 	ldw	r3,40(sp)
  805924:	00c0050e 	bge	zero,r3,80593c <_dtoa_r+0x8f4>
  805928:	d9001617 	ldw	r4,88(sp)
  80592c:	900b883a 	mov	r5,r18
  805930:	180d883a 	mov	r6,r3
  805934:	080404c0 	call	80404c <__lshift>
  805938:	1025883a 	mov	r18,r2
  80593c:	d9000c17 	ldw	r4,48(sp)
  805940:	2005003a 	cmpeq	r2,r4,zero
  805944:	10016f26 	beq	r2,zero,805f04 <_dtoa_r+0xebc>
  805948:	d9000f17 	ldw	r4,60(sp)
  80594c:	0102170e 	bge	zero,r4,8061ac <_dtoa_r+0x1164>
  805950:	d9800b17 	ldw	r6,44(sp)
  805954:	3005003a 	cmpeq	r2,r6,zero
  805958:	1000881e 	bne	r2,zero,805b7c <_dtoa_r+0xb34>
  80595c:	0400050e 	bge	zero,r16,805974 <_dtoa_r+0x92c>
  805960:	d9001617 	ldw	r4,88(sp)
  805964:	980b883a 	mov	r5,r19
  805968:	800d883a 	mov	r6,r16
  80596c:	080404c0 	call	80404c <__lshift>
  805970:	1027883a 	mov	r19,r2
  805974:	8804c03a 	cmpne	r2,r17,zero
  805978:	1002541e 	bne	r2,zero,8062cc <_dtoa_r+0x1284>
  80597c:	980b883a 	mov	r5,r19
  805980:	dd800517 	ldw	r22,20(sp)
  805984:	dcc00615 	stw	r19,24(sp)
  805988:	a700004c 	andi	fp,r20,1
  80598c:	2827883a 	mov	r19,r5
  805990:	d9000717 	ldw	r4,28(sp)
  805994:	900b883a 	mov	r5,r18
  805998:	0804e300 	call	804e30 <quorem>
  80599c:	d9000717 	ldw	r4,28(sp)
  8059a0:	d9400617 	ldw	r5,24(sp)
  8059a4:	1023883a 	mov	r17,r2
  8059a8:	8dc00c04 	addi	r23,r17,48
  8059ac:	08038640 	call	803864 <__mcmp>
  8059b0:	d9001617 	ldw	r4,88(sp)
  8059b4:	900b883a 	mov	r5,r18
  8059b8:	980d883a 	mov	r6,r19
  8059bc:	1029883a 	mov	r20,r2
  8059c0:	0803ec00 	call	803ec0 <__mdiff>
  8059c4:	102b883a 	mov	r21,r2
  8059c8:	10800317 	ldw	r2,12(r2)
  8059cc:	1001281e 	bne	r2,zero,805e70 <_dtoa_r+0xe28>
  8059d0:	d9000717 	ldw	r4,28(sp)
  8059d4:	a80b883a 	mov	r5,r21
  8059d8:	08038640 	call	803864 <__mcmp>
  8059dc:	d9001617 	ldw	r4,88(sp)
  8059e0:	1021883a 	mov	r16,r2
  8059e4:	a80b883a 	mov	r5,r21
  8059e8:	08037080 	call	803708 <_Bfree>
  8059ec:	8000041e 	bne	r16,zero,805a00 <_dtoa_r+0x9b8>
  8059f0:	d8801717 	ldw	r2,92(sp)
  8059f4:	1000021e 	bne	r2,zero,805a00 <_dtoa_r+0x9b8>
  8059f8:	e004c03a 	cmpne	r2,fp,zero
  8059fc:	10011726 	beq	r2,zero,805e5c <_dtoa_r+0xe14>
  805a00:	a0010616 	blt	r20,zero,805e1c <_dtoa_r+0xdd4>
  805a04:	a000041e 	bne	r20,zero,805a18 <_dtoa_r+0x9d0>
  805a08:	d8c01717 	ldw	r3,92(sp)
  805a0c:	1800021e 	bne	r3,zero,805a18 <_dtoa_r+0x9d0>
  805a10:	e004c03a 	cmpne	r2,fp,zero
  805a14:	10010126 	beq	r2,zero,805e1c <_dtoa_r+0xdd4>
  805a18:	04023d16 	blt	zero,r16,806310 <_dtoa_r+0x12c8>
  805a1c:	b5c00005 	stb	r23,0(r22)
  805a20:	d9800517 	ldw	r6,20(sp)
  805a24:	d9000f17 	ldw	r4,60(sp)
  805a28:	b5800044 	addi	r22,r22,1
  805a2c:	3105883a 	add	r2,r6,r4
  805a30:	b0806526 	beq	r22,r2,805bc8 <_dtoa_r+0xb80>
  805a34:	d9400717 	ldw	r5,28(sp)
  805a38:	d9001617 	ldw	r4,88(sp)
  805a3c:	01800284 	movi	r6,10
  805a40:	000f883a 	mov	r7,zero
  805a44:	08043bc0 	call	8043bc <__multadd>
  805a48:	d8800715 	stw	r2,28(sp)
  805a4c:	d8800617 	ldw	r2,24(sp)
  805a50:	14c10c26 	beq	r2,r19,805e84 <_dtoa_r+0xe3c>
  805a54:	d9400617 	ldw	r5,24(sp)
  805a58:	d9001617 	ldw	r4,88(sp)
  805a5c:	01800284 	movi	r6,10
  805a60:	000f883a 	mov	r7,zero
  805a64:	08043bc0 	call	8043bc <__multadd>
  805a68:	d9001617 	ldw	r4,88(sp)
  805a6c:	980b883a 	mov	r5,r19
  805a70:	01800284 	movi	r6,10
  805a74:	000f883a 	mov	r7,zero
  805a78:	d8800615 	stw	r2,24(sp)
  805a7c:	08043bc0 	call	8043bc <__multadd>
  805a80:	1027883a 	mov	r19,r2
  805a84:	003fc206 	br	805990 <_dtoa_r+0x948>
  805a88:	2445c83a 	sub	r2,r4,r17
  805a8c:	a088983a 	sll	r4,r20,r2
  805a90:	003e4b06 	br	8053c0 <_dtoa_r+0x378>
  805a94:	01bfffc4 	movi	r6,-1
  805a98:	00800044 	movi	r2,1
  805a9c:	d9800e15 	stw	r6,56(sp)
  805aa0:	d9800f15 	stw	r6,60(sp)
  805aa4:	d8800b15 	stw	r2,44(sp)
  805aa8:	d8c01617 	ldw	r3,88(sp)
  805aac:	008005c4 	movi	r2,23
  805ab0:	18001115 	stw	zero,68(r3)
  805ab4:	1580082e 	bgeu	r2,r22,805ad8 <_dtoa_r+0xa90>
  805ab8:	00c00104 	movi	r3,4
  805abc:	0009883a 	mov	r4,zero
  805ac0:	18c7883a 	add	r3,r3,r3
  805ac4:	18800504 	addi	r2,r3,20
  805ac8:	21000044 	addi	r4,r4,1
  805acc:	b0bffc2e 	bgeu	r22,r2,805ac0 <_dtoa_r+0xa78>
  805ad0:	d9801617 	ldw	r6,88(sp)
  805ad4:	31001115 	stw	r4,68(r6)
  805ad8:	dc000f17 	ldw	r16,60(sp)
  805adc:	003e4b06 	br	80540c <_dtoa_r+0x3c4>
  805ae0:	d9801717 	ldw	r6,92(sp)
  805ae4:	0023883a 	mov	r17,zero
  805ae8:	31bfff04 	addi	r6,r6,-4
  805aec:	d9801715 	stw	r6,92(sp)
  805af0:	003df806 	br	8052d4 <_dtoa_r+0x28c>
  805af4:	00800804 	movi	r2,32
  805af8:	10c9c83a 	sub	r4,r2,r3
  805afc:	00c00104 	movi	r3,4
  805b00:	19005a16 	blt	r3,r4,805c6c <_dtoa_r+0xc24>
  805b04:	008000c4 	movi	r2,3
  805b08:	113f7e16 	blt	r2,r4,805904 <_dtoa_r+0x8bc>
  805b0c:	20800704 	addi	r2,r4,28
  805b10:	003f7506 	br	8058e8 <_dtoa_r+0x8a0>
  805b14:	d9801717 	ldw	r6,92(sp)
  805b18:	00800044 	movi	r2,1
  805b1c:	1180a10e 	bge	r2,r6,805da4 <_dtoa_r+0xd5c>
  805b20:	d9800f17 	ldw	r6,60(sp)
  805b24:	d8c01017 	ldw	r3,64(sp)
  805b28:	30bfffc4 	addi	r2,r6,-1
  805b2c:	1881c616 	blt	r3,r2,806248 <_dtoa_r+0x1200>
  805b30:	18a5c83a 	sub	r18,r3,r2
  805b34:	d8800f17 	ldw	r2,60(sp)
  805b38:	10026216 	blt	r2,zero,8064c4 <_dtoa_r+0x147c>
  805b3c:	dc001117 	ldw	r16,68(sp)
  805b40:	1007883a 	mov	r3,r2
  805b44:	d9800a17 	ldw	r6,40(sp)
  805b48:	d8801117 	ldw	r2,68(sp)
  805b4c:	d9001617 	ldw	r4,88(sp)
  805b50:	30cd883a 	add	r6,r6,r3
  805b54:	10c5883a 	add	r2,r2,r3
  805b58:	01400044 	movi	r5,1
  805b5c:	d9800a15 	stw	r6,40(sp)
  805b60:	d8801115 	stw	r2,68(sp)
  805b64:	08043800 	call	804380 <__i2b>
  805b68:	1027883a 	mov	r19,r2
  805b6c:	003f2506 	br	805804 <_dtoa_r+0x7bc>
  805b70:	00c02074 	movhi	r3,129
  805b74:	18e87804 	addi	r3,r3,-24096
  805b78:	003d6706 	br	805118 <_dtoa_r+0xd0>
  805b7c:	dd800517 	ldw	r22,20(sp)
  805b80:	04000044 	movi	r16,1
  805b84:	00000706 	br	805ba4 <_dtoa_r+0xb5c>
  805b88:	d9400717 	ldw	r5,28(sp)
  805b8c:	d9001617 	ldw	r4,88(sp)
  805b90:	01800284 	movi	r6,10
  805b94:	000f883a 	mov	r7,zero
  805b98:	08043bc0 	call	8043bc <__multadd>
  805b9c:	d8800715 	stw	r2,28(sp)
  805ba0:	84000044 	addi	r16,r16,1
  805ba4:	d9000717 	ldw	r4,28(sp)
  805ba8:	900b883a 	mov	r5,r18
  805bac:	0804e300 	call	804e30 <quorem>
  805bb0:	15c00c04 	addi	r23,r2,48
  805bb4:	b5c00005 	stb	r23,0(r22)
  805bb8:	d8c00f17 	ldw	r3,60(sp)
  805bbc:	b5800044 	addi	r22,r22,1
  805bc0:	80fff116 	blt	r16,r3,805b88 <_dtoa_r+0xb40>
  805bc4:	d8000615 	stw	zero,24(sp)
  805bc8:	d9400717 	ldw	r5,28(sp)
  805bcc:	d9001617 	ldw	r4,88(sp)
  805bd0:	01800044 	movi	r6,1
  805bd4:	080404c0 	call	80404c <__lshift>
  805bd8:	1009883a 	mov	r4,r2
  805bdc:	900b883a 	mov	r5,r18
  805be0:	d8800715 	stw	r2,28(sp)
  805be4:	08038640 	call	803864 <__mcmp>
  805be8:	00803c0e 	bge	zero,r2,805cdc <_dtoa_r+0xc94>
  805bec:	b009883a 	mov	r4,r22
  805bf0:	213fffc4 	addi	r4,r4,-1
  805bf4:	21400003 	ldbu	r5,0(r4)
  805bf8:	00800e44 	movi	r2,57
  805bfc:	28c03fcc 	andi	r3,r5,255
  805c00:	18c0201c 	xori	r3,r3,128
  805c04:	18ffe004 	addi	r3,r3,-128
  805c08:	1881981e 	bne	r3,r2,80626c <_dtoa_r+0x1224>
  805c0c:	d9800517 	ldw	r6,20(sp)
  805c10:	21bff71e 	bne	r4,r6,805bf0 <_dtoa_r+0xba8>
  805c14:	d8800d17 	ldw	r2,52(sp)
  805c18:	37000044 	addi	fp,r6,1
  805c1c:	10800044 	addi	r2,r2,1
  805c20:	d8800d15 	stw	r2,52(sp)
  805c24:	00800c44 	movi	r2,49
  805c28:	30800005 	stb	r2,0(r6)
  805c2c:	d9001617 	ldw	r4,88(sp)
  805c30:	900b883a 	mov	r5,r18
  805c34:	08037080 	call	803708 <_Bfree>
  805c38:	983ecd26 	beq	r19,zero,805770 <_dtoa_r+0x728>
  805c3c:	d8c00617 	ldw	r3,24(sp)
  805c40:	18000426 	beq	r3,zero,805c54 <_dtoa_r+0xc0c>
  805c44:	1cc00326 	beq	r3,r19,805c54 <_dtoa_r+0xc0c>
  805c48:	d9001617 	ldw	r4,88(sp)
  805c4c:	180b883a 	mov	r5,r3
  805c50:	08037080 	call	803708 <_Bfree>
  805c54:	d9001617 	ldw	r4,88(sp)
  805c58:	980b883a 	mov	r5,r19
  805c5c:	08037080 	call	803708 <_Bfree>
  805c60:	003ec306 	br	805770 <_dtoa_r+0x728>
  805c64:	1805883a 	mov	r2,r3
  805c68:	003eeb06 	br	805818 <_dtoa_r+0x7d0>
  805c6c:	d9800a17 	ldw	r6,40(sp)
  805c70:	d8c01117 	ldw	r3,68(sp)
  805c74:	20bfff04 	addi	r2,r4,-4
  805c78:	308d883a 	add	r6,r6,r2
  805c7c:	1887883a 	add	r3,r3,r2
  805c80:	80a1883a 	add	r16,r16,r2
  805c84:	d9800a15 	stw	r6,40(sp)
  805c88:	d8c01115 	stw	r3,68(sp)
  805c8c:	003f1d06 	br	805904 <_dtoa_r+0x8bc>
  805c90:	a03f0c1e 	bne	r20,zero,8058c4 <_dtoa_r+0x87c>
  805c94:	00800434 	movhi	r2,16
  805c98:	10bfffc4 	addi	r2,r2,-1
  805c9c:	a884703a 	and	r2,r21,r2
  805ca0:	103f081e 	bne	r2,zero,8058c4 <_dtoa_r+0x87c>
  805ca4:	a89ffc2c 	andhi	r2,r21,32752
  805ca8:	103f0626 	beq	r2,zero,8058c4 <_dtoa_r+0x87c>
  805cac:	d8c01117 	ldw	r3,68(sp)
  805cb0:	d9000a17 	ldw	r4,40(sp)
  805cb4:	18c00044 	addi	r3,r3,1
  805cb8:	21000044 	addi	r4,r4,1
  805cbc:	d8c01115 	stw	r3,68(sp)
  805cc0:	d9000a15 	stw	r4,40(sp)
  805cc4:	003f0006 	br	8058c8 <_dtoa_r+0x880>
  805cc8:	d9400717 	ldw	r5,28(sp)
  805ccc:	d9001617 	ldw	r4,88(sp)
  805cd0:	08044bc0 	call	8044bc <__pow5mult>
  805cd4:	d8800715 	stw	r2,28(sp)
  805cd8:	003eed06 	br	805890 <_dtoa_r+0x848>
  805cdc:	1000021e 	bne	r2,zero,805ce8 <_dtoa_r+0xca0>
  805ce0:	b880004c 	andi	r2,r23,1
  805ce4:	103fc11e 	bne	r2,zero,805bec <_dtoa_r+0xba4>
  805ce8:	b5bfffc4 	addi	r22,r22,-1
  805cec:	b0c00007 	ldb	r3,0(r22)
  805cf0:	00800c04 	movi	r2,48
  805cf4:	18bffc26 	beq	r3,r2,805ce8 <_dtoa_r+0xca0>
  805cf8:	b7000044 	addi	fp,r22,1
  805cfc:	003fcb06 	br	805c2c <_dtoa_r+0xbe4>
  805d00:	d9800d17 	ldw	r6,52(sp)
  805d04:	018fc83a 	sub	r7,zero,r6
  805d08:	3801f726 	beq	r7,zero,8064e8 <_dtoa_r+0x14a0>
  805d0c:	398003cc 	andi	r6,r7,15
  805d10:	300c90fa 	slli	r6,r6,3
  805d14:	01402074 	movhi	r5,129
  805d18:	29682b04 	addi	r5,r5,-24404
  805d1c:	d9001217 	ldw	r4,72(sp)
  805d20:	314d883a 	add	r6,r6,r5
  805d24:	30c00117 	ldw	r3,4(r6)
  805d28:	30800017 	ldw	r2,0(r6)
  805d2c:	d9401317 	ldw	r5,76(sp)
  805d30:	3821d13a 	srai	r16,r7,4
  805d34:	100d883a 	mov	r6,r2
  805d38:	180f883a 	mov	r7,r3
  805d3c:	08067740 	call	806774 <__muldf3>
  805d40:	1011883a 	mov	r8,r2
  805d44:	1813883a 	mov	r9,r3
  805d48:	1029883a 	mov	r20,r2
  805d4c:	182b883a 	mov	r21,r3
  805d50:	8001e526 	beq	r16,zero,8064e8 <_dtoa_r+0x14a0>
  805d54:	05800084 	movi	r22,2
  805d58:	04402074 	movhi	r17,129
  805d5c:	8c685d04 	addi	r17,r17,-24204
  805d60:	8080004c 	andi	r2,r16,1
  805d64:	1005003a 	cmpeq	r2,r2,zero
  805d68:	1000081e 	bne	r2,zero,805d8c <_dtoa_r+0xd44>
  805d6c:	89800017 	ldw	r6,0(r17)
  805d70:	89c00117 	ldw	r7,4(r17)
  805d74:	480b883a 	mov	r5,r9
  805d78:	4009883a 	mov	r4,r8
  805d7c:	08067740 	call	806774 <__muldf3>
  805d80:	1011883a 	mov	r8,r2
  805d84:	b5800044 	addi	r22,r22,1
  805d88:	1813883a 	mov	r9,r3
  805d8c:	8021d07a 	srai	r16,r16,1
  805d90:	8c400204 	addi	r17,r17,8
  805d94:	803ff21e 	bne	r16,zero,805d60 <_dtoa_r+0xd18>
  805d98:	4029883a 	mov	r20,r8
  805d9c:	482b883a 	mov	r21,r9
  805da0:	003dca06 	br	8054cc <_dtoa_r+0x484>
  805da4:	d9000817 	ldw	r4,32(sp)
  805da8:	2005003a 	cmpeq	r2,r4,zero
  805dac:	1001f61e 	bne	r2,zero,806588 <_dtoa_r+0x1540>
  805db0:	dc001117 	ldw	r16,68(sp)
  805db4:	dc801017 	ldw	r18,64(sp)
  805db8:	18c10cc4 	addi	r3,r3,1075
  805dbc:	003f6106 	br	805b44 <_dtoa_r+0xafc>
  805dc0:	d8000b15 	stw	zero,44(sp)
  805dc4:	d9802617 	ldw	r6,152(sp)
  805dc8:	d8c00d17 	ldw	r3,52(sp)
  805dcc:	30800044 	addi	r2,r6,1
  805dd0:	18ad883a 	add	r22,r3,r2
  805dd4:	b13fffc4 	addi	r4,r22,-1
  805dd8:	d9000e15 	stw	r4,56(sp)
  805ddc:	0581f60e 	bge	zero,r22,8065b8 <_dtoa_r+0x1570>
  805de0:	dd800f15 	stw	r22,60(sp)
  805de4:	003f3006 	br	805aa8 <_dtoa_r+0xa60>
  805de8:	d8000b15 	stw	zero,44(sp)
  805dec:	d9002617 	ldw	r4,152(sp)
  805df0:	0101eb0e 	bge	zero,r4,8065a0 <_dtoa_r+0x1558>
  805df4:	202d883a 	mov	r22,r4
  805df8:	d9000e15 	stw	r4,56(sp)
  805dfc:	d9000f15 	stw	r4,60(sp)
  805e00:	003f2906 	br	805aa8 <_dtoa_r+0xa60>
  805e04:	01800044 	movi	r6,1
  805e08:	d9800b15 	stw	r6,44(sp)
  805e0c:	003ff706 	br	805dec <_dtoa_r+0xda4>
  805e10:	01000044 	movi	r4,1
  805e14:	d9000b15 	stw	r4,44(sp)
  805e18:	003fea06 	br	805dc4 <_dtoa_r+0xd7c>
  805e1c:	04000c0e 	bge	zero,r16,805e50 <_dtoa_r+0xe08>
  805e20:	d9400717 	ldw	r5,28(sp)
  805e24:	d9001617 	ldw	r4,88(sp)
  805e28:	01800044 	movi	r6,1
  805e2c:	080404c0 	call	80404c <__lshift>
  805e30:	1009883a 	mov	r4,r2
  805e34:	900b883a 	mov	r5,r18
  805e38:	d8800715 	stw	r2,28(sp)
  805e3c:	08038640 	call	803864 <__mcmp>
  805e40:	0081e00e 	bge	zero,r2,8065c4 <_dtoa_r+0x157c>
  805e44:	bdc00044 	addi	r23,r23,1
  805e48:	00800e84 	movi	r2,58
  805e4c:	b881a226 	beq	r23,r2,8064d8 <_dtoa_r+0x1490>
  805e50:	b7000044 	addi	fp,r22,1
  805e54:	b5c00005 	stb	r23,0(r22)
  805e58:	003f7406 	br	805c2c <_dtoa_r+0xbe4>
  805e5c:	00800e44 	movi	r2,57
  805e60:	b8819d26 	beq	r23,r2,8064d8 <_dtoa_r+0x1490>
  805e64:	053ffa0e 	bge	zero,r20,805e50 <_dtoa_r+0xe08>
  805e68:	8dc00c44 	addi	r23,r17,49
  805e6c:	003ff806 	br	805e50 <_dtoa_r+0xe08>
  805e70:	d9001617 	ldw	r4,88(sp)
  805e74:	a80b883a 	mov	r5,r21
  805e78:	04000044 	movi	r16,1
  805e7c:	08037080 	call	803708 <_Bfree>
  805e80:	003edf06 	br	805a00 <_dtoa_r+0x9b8>
  805e84:	d9001617 	ldw	r4,88(sp)
  805e88:	980b883a 	mov	r5,r19
  805e8c:	01800284 	movi	r6,10
  805e90:	000f883a 	mov	r7,zero
  805e94:	08043bc0 	call	8043bc <__multadd>
  805e98:	1027883a 	mov	r19,r2
  805e9c:	d8800615 	stw	r2,24(sp)
  805ea0:	003ebb06 	br	805990 <_dtoa_r+0x948>
  805ea4:	d9801117 	ldw	r6,68(sp)
  805ea8:	d8800d17 	ldw	r2,52(sp)
  805eac:	d8000915 	stw	zero,36(sp)
  805eb0:	308dc83a 	sub	r6,r6,r2
  805eb4:	0087c83a 	sub	r3,zero,r2
  805eb8:	d9801115 	stw	r6,68(sp)
  805ebc:	d8c01015 	stw	r3,64(sp)
  805ec0:	003cfe06 	br	8052bc <_dtoa_r+0x274>
  805ec4:	018dc83a 	sub	r6,zero,r6
  805ec8:	d9801115 	stw	r6,68(sp)
  805ecc:	d8000a15 	stw	zero,40(sp)
  805ed0:	003cf306 	br	8052a0 <_dtoa_r+0x258>
  805ed4:	d9000d17 	ldw	r4,52(sp)
  805ed8:	0806e680 	call	806e68 <__floatsidf>
  805edc:	880b883a 	mov	r5,r17
  805ee0:	8009883a 	mov	r4,r16
  805ee4:	180f883a 	mov	r7,r3
  805ee8:	100d883a 	mov	r6,r2
  805eec:	0806bc00 	call	806bc0 <__nedf2>
  805ef0:	103ce126 	beq	r2,zero,805278 <_dtoa_r+0x230>
  805ef4:	d9800d17 	ldw	r6,52(sp)
  805ef8:	31bfffc4 	addi	r6,r6,-1
  805efc:	d9800d15 	stw	r6,52(sp)
  805f00:	003cdd06 	br	805278 <_dtoa_r+0x230>
  805f04:	d9000717 	ldw	r4,28(sp)
  805f08:	900b883a 	mov	r5,r18
  805f0c:	08038640 	call	803864 <__mcmp>
  805f10:	103e8d0e 	bge	r2,zero,805948 <_dtoa_r+0x900>
  805f14:	d9400717 	ldw	r5,28(sp)
  805f18:	d9001617 	ldw	r4,88(sp)
  805f1c:	01800284 	movi	r6,10
  805f20:	000f883a 	mov	r7,zero
  805f24:	08043bc0 	call	8043bc <__multadd>
  805f28:	d9800d17 	ldw	r6,52(sp)
  805f2c:	d8800715 	stw	r2,28(sp)
  805f30:	31bfffc4 	addi	r6,r6,-1
  805f34:	d9800d15 	stw	r6,52(sp)
  805f38:	b001a71e 	bne	r22,zero,8065d8 <_dtoa_r+0x1590>
  805f3c:	d8800e17 	ldw	r2,56(sp)
  805f40:	d8800f15 	stw	r2,60(sp)
  805f44:	003e8006 	br	805948 <_dtoa_r+0x900>
  805f48:	90800417 	ldw	r2,16(r18)
  805f4c:	1085883a 	add	r2,r2,r2
  805f50:	1085883a 	add	r2,r2,r2
  805f54:	1485883a 	add	r2,r2,r18
  805f58:	11000417 	ldw	r4,16(r2)
  805f5c:	08037300 	call	803730 <__hi0bits>
  805f60:	00c00804 	movi	r3,32
  805f64:	1887c83a 	sub	r3,r3,r2
  805f68:	003e5a06 	br	8058d4 <_dtoa_r+0x88c>
  805f6c:	d9400717 	ldw	r5,28(sp)
  805f70:	d9801017 	ldw	r6,64(sp)
  805f74:	d9001617 	ldw	r4,88(sp)
  805f78:	08044bc0 	call	8044bc <__pow5mult>
  805f7c:	d8800715 	stw	r2,28(sp)
  805f80:	003e4306 	br	805890 <_dtoa_r+0x848>
  805f84:	d9800f17 	ldw	r6,60(sp)
  805f88:	d8800d17 	ldw	r2,52(sp)
  805f8c:	d9800315 	stw	r6,12(sp)
  805f90:	d8800415 	stw	r2,16(sp)
  805f94:	d8c00b17 	ldw	r3,44(sp)
  805f98:	1805003a 	cmpeq	r2,r3,zero
  805f9c:	1000e21e 	bne	r2,zero,806328 <_dtoa_r+0x12e0>
  805fa0:	d9000317 	ldw	r4,12(sp)
  805fa4:	0005883a 	mov	r2,zero
  805fa8:	00cff834 	movhi	r3,16352
  805fac:	200c90fa 	slli	r6,r4,3
  805fb0:	01002074 	movhi	r4,129
  805fb4:	21282b04 	addi	r4,r4,-24404
  805fb8:	180b883a 	mov	r5,r3
  805fbc:	310d883a 	add	r6,r6,r4
  805fc0:	327fff17 	ldw	r9,-4(r6)
  805fc4:	323ffe17 	ldw	r8,-8(r6)
  805fc8:	1009883a 	mov	r4,r2
  805fcc:	480f883a 	mov	r7,r9
  805fd0:	400d883a 	mov	r6,r8
  805fd4:	08011ec0 	call	8011ec <__divdf3>
  805fd8:	180b883a 	mov	r5,r3
  805fdc:	b00d883a 	mov	r6,r22
  805fe0:	b80f883a 	mov	r7,r23
  805fe4:	1009883a 	mov	r4,r2
  805fe8:	08010f80 	call	8010f8 <__subdf3>
  805fec:	a80b883a 	mov	r5,r21
  805ff0:	a009883a 	mov	r4,r20
  805ff4:	d8c01915 	stw	r3,100(sp)
  805ff8:	d8801815 	stw	r2,96(sp)
  805ffc:	0806f600 	call	806f60 <__fixdfsi>
  806000:	1009883a 	mov	r4,r2
  806004:	1027883a 	mov	r19,r2
  806008:	0806e680 	call	806e68 <__floatsidf>
  80600c:	a80b883a 	mov	r5,r21
  806010:	a009883a 	mov	r4,r20
  806014:	180f883a 	mov	r7,r3
  806018:	100d883a 	mov	r6,r2
  80601c:	08010f80 	call	8010f8 <__subdf3>
  806020:	d9801817 	ldw	r6,96(sp)
  806024:	1823883a 	mov	r17,r3
  806028:	d8801415 	stw	r2,80(sp)
  80602c:	302d883a 	mov	r22,r6
  806030:	d9800517 	ldw	r6,20(sp)
  806034:	9cc00c04 	addi	r19,r19,48
  806038:	dc401515 	stw	r17,84(sp)
  80603c:	d8c01917 	ldw	r3,100(sp)
  806040:	34c00005 	stb	r19,0(r6)
  806044:	d8800517 	ldw	r2,20(sp)
  806048:	d9401917 	ldw	r5,100(sp)
  80604c:	d9801417 	ldw	r6,80(sp)
  806050:	b009883a 	mov	r4,r22
  806054:	880f883a 	mov	r7,r17
  806058:	182f883a 	mov	r23,r3
  80605c:	17000044 	addi	fp,r2,1
  806060:	0806c480 	call	806c48 <__gtdf2>
  806064:	00804e16 	blt	zero,r2,8061a0 <_dtoa_r+0x1158>
  806068:	d9801417 	ldw	r6,80(sp)
  80606c:	0005883a 	mov	r2,zero
  806070:	00cffc34 	movhi	r3,16368
  806074:	180b883a 	mov	r5,r3
  806078:	880f883a 	mov	r7,r17
  80607c:	1009883a 	mov	r4,r2
  806080:	08010f80 	call	8010f8 <__subdf3>
  806084:	d9401917 	ldw	r5,100(sp)
  806088:	180f883a 	mov	r7,r3
  80608c:	b009883a 	mov	r4,r22
  806090:	100d883a 	mov	r6,r2
  806094:	0806c480 	call	806c48 <__gtdf2>
  806098:	00bda216 	blt	zero,r2,805724 <_dtoa_r+0x6dc>
  80609c:	d8c00317 	ldw	r3,12(sp)
  8060a0:	00800044 	movi	r2,1
  8060a4:	10c01216 	blt	r2,r3,8060f0 <_dtoa_r+0x10a8>
  8060a8:	003d4506 	br	8055c0 <_dtoa_r+0x578>
  8060ac:	d9801417 	ldw	r6,80(sp)
  8060b0:	0005883a 	mov	r2,zero
  8060b4:	00cffc34 	movhi	r3,16368
  8060b8:	180b883a 	mov	r5,r3
  8060bc:	880f883a 	mov	r7,r17
  8060c0:	1009883a 	mov	r4,r2
  8060c4:	08010f80 	call	8010f8 <__subdf3>
  8060c8:	d9c01b17 	ldw	r7,108(sp)
  8060cc:	180b883a 	mov	r5,r3
  8060d0:	1009883a 	mov	r4,r2
  8060d4:	b00d883a 	mov	r6,r22
  8060d8:	0806d580 	call	806d58 <__ltdf2>
  8060dc:	103d9116 	blt	r2,zero,805724 <_dtoa_r+0x6dc>
  8060e0:	d9800517 	ldw	r6,20(sp)
  8060e4:	d9000317 	ldw	r4,12(sp)
  8060e8:	3105883a 	add	r2,r6,r4
  8060ec:	e0bd3426 	beq	fp,r2,8055c0 <_dtoa_r+0x578>
  8060f0:	04500934 	movhi	r17,16420
  8060f4:	0021883a 	mov	r16,zero
  8060f8:	b80b883a 	mov	r5,r23
  8060fc:	b009883a 	mov	r4,r22
  806100:	800d883a 	mov	r6,r16
  806104:	880f883a 	mov	r7,r17
  806108:	08067740 	call	806774 <__muldf3>
  80610c:	d9401517 	ldw	r5,84(sp)
  806110:	d9001417 	ldw	r4,80(sp)
  806114:	880f883a 	mov	r7,r17
  806118:	000d883a 	mov	r6,zero
  80611c:	d8801a15 	stw	r2,104(sp)
  806120:	d8c01b15 	stw	r3,108(sp)
  806124:	08067740 	call	806774 <__muldf3>
  806128:	180b883a 	mov	r5,r3
  80612c:	1009883a 	mov	r4,r2
  806130:	1823883a 	mov	r17,r3
  806134:	1021883a 	mov	r16,r2
  806138:	0806f600 	call	806f60 <__fixdfsi>
  80613c:	1009883a 	mov	r4,r2
  806140:	102b883a 	mov	r21,r2
  806144:	0806e680 	call	806e68 <__floatsidf>
  806148:	880b883a 	mov	r5,r17
  80614c:	8009883a 	mov	r4,r16
  806150:	180f883a 	mov	r7,r3
  806154:	100d883a 	mov	r6,r2
  806158:	08010f80 	call	8010f8 <__subdf3>
  80615c:	1021883a 	mov	r16,r2
  806160:	d9001b17 	ldw	r4,108(sp)
  806164:	1823883a 	mov	r17,r3
  806168:	dc001415 	stw	r16,80(sp)
  80616c:	ad400c04 	addi	r21,r21,48
  806170:	dc401515 	stw	r17,84(sp)
  806174:	d8801a17 	ldw	r2,104(sp)
  806178:	e5400005 	stb	r21,0(fp)
  80617c:	202f883a 	mov	r23,r4
  806180:	d9c01b17 	ldw	r7,108(sp)
  806184:	d9001417 	ldw	r4,80(sp)
  806188:	880b883a 	mov	r5,r17
  80618c:	100d883a 	mov	r6,r2
  806190:	102d883a 	mov	r22,r2
  806194:	e7000044 	addi	fp,fp,1
  806198:	0806d580 	call	806d58 <__ltdf2>
  80619c:	103fc30e 	bge	r2,zero,8060ac <_dtoa_r+0x1064>
  8061a0:	d9000417 	ldw	r4,16(sp)
  8061a4:	d9000d15 	stw	r4,52(sp)
  8061a8:	003d7106 	br	805770 <_dtoa_r+0x728>
  8061ac:	d9801717 	ldw	r6,92(sp)
  8061b0:	00800084 	movi	r2,2
  8061b4:	11bde60e 	bge	r2,r6,805950 <_dtoa_r+0x908>
  8061b8:	203cfb1e 	bne	r4,zero,8055a8 <_dtoa_r+0x560>
  8061bc:	d9001617 	ldw	r4,88(sp)
  8061c0:	900b883a 	mov	r5,r18
  8061c4:	01800144 	movi	r6,5
  8061c8:	000f883a 	mov	r7,zero
  8061cc:	08043bc0 	call	8043bc <__multadd>
  8061d0:	d9000717 	ldw	r4,28(sp)
  8061d4:	100b883a 	mov	r5,r2
  8061d8:	1025883a 	mov	r18,r2
  8061dc:	08038640 	call	803864 <__mcmp>
  8061e0:	00bcf10e 	bge	zero,r2,8055a8 <_dtoa_r+0x560>
  8061e4:	d8c00d17 	ldw	r3,52(sp)
  8061e8:	d9000517 	ldw	r4,20(sp)
  8061ec:	d8000615 	stw	zero,24(sp)
  8061f0:	18c00044 	addi	r3,r3,1
  8061f4:	d8c00d15 	stw	r3,52(sp)
  8061f8:	00800c44 	movi	r2,49
  8061fc:	27000044 	addi	fp,r4,1
  806200:	20800005 	stb	r2,0(r4)
  806204:	003e8906 	br	805c2c <_dtoa_r+0xbe4>
  806208:	d8c00517 	ldw	r3,20(sp)
  80620c:	003bc206 	br	805118 <_dtoa_r+0xd0>
  806210:	01802074 	movhi	r6,129
  806214:	31a85d04 	addi	r6,r6,-24204
  806218:	30c00917 	ldw	r3,36(r6)
  80621c:	30800817 	ldw	r2,32(r6)
  806220:	d9001217 	ldw	r4,72(sp)
  806224:	d9401317 	ldw	r5,76(sp)
  806228:	180f883a 	mov	r7,r3
  80622c:	100d883a 	mov	r6,r2
  806230:	08011ec0 	call	8011ec <__divdf3>
  806234:	948003cc 	andi	r18,r18,15
  806238:	058000c4 	movi	r22,3
  80623c:	1029883a 	mov	r20,r2
  806240:	182b883a 	mov	r21,r3
  806244:	003c8906 	br	80546c <_dtoa_r+0x424>
  806248:	d9001017 	ldw	r4,64(sp)
  80624c:	d9800917 	ldw	r6,36(sp)
  806250:	0025883a 	mov	r18,zero
  806254:	1105c83a 	sub	r2,r2,r4
  806258:	2089883a 	add	r4,r4,r2
  80625c:	308d883a 	add	r6,r6,r2
  806260:	d9001015 	stw	r4,64(sp)
  806264:	d9800915 	stw	r6,36(sp)
  806268:	003e3206 	br	805b34 <_dtoa_r+0xaec>
  80626c:	28800044 	addi	r2,r5,1
  806270:	27000044 	addi	fp,r4,1
  806274:	20800005 	stb	r2,0(r4)
  806278:	003e6c06 	br	805c2c <_dtoa_r+0xbe4>
  80627c:	d8800f17 	ldw	r2,60(sp)
  806280:	00bce016 	blt	zero,r2,805604 <_dtoa_r+0x5bc>
  806284:	d9800f17 	ldw	r6,60(sp)
  806288:	303cc51e 	bne	r6,zero,8055a0 <_dtoa_r+0x558>
  80628c:	0005883a 	mov	r2,zero
  806290:	00d00534 	movhi	r3,16404
  806294:	980b883a 	mov	r5,r19
  806298:	180f883a 	mov	r7,r3
  80629c:	9009883a 	mov	r4,r18
  8062a0:	100d883a 	mov	r6,r2
  8062a4:	08067740 	call	806774 <__muldf3>
  8062a8:	180b883a 	mov	r5,r3
  8062ac:	a80f883a 	mov	r7,r21
  8062b0:	1009883a 	mov	r4,r2
  8062b4:	a00d883a 	mov	r6,r20
  8062b8:	0806cd00 	call	806cd0 <__gedf2>
  8062bc:	103cb80e 	bge	r2,zero,8055a0 <_dtoa_r+0x558>
  8062c0:	0027883a 	mov	r19,zero
  8062c4:	0025883a 	mov	r18,zero
  8062c8:	003fc606 	br	8061e4 <_dtoa_r+0x119c>
  8062cc:	99400117 	ldw	r5,4(r19)
  8062d0:	d9001617 	ldw	r4,88(sp)
  8062d4:	0803c880 	call	803c88 <_Balloc>
  8062d8:	99800417 	ldw	r6,16(r19)
  8062dc:	11000304 	addi	r4,r2,12
  8062e0:	99400304 	addi	r5,r19,12
  8062e4:	318d883a 	add	r6,r6,r6
  8062e8:	318d883a 	add	r6,r6,r6
  8062ec:	31800204 	addi	r6,r6,8
  8062f0:	1023883a 	mov	r17,r2
  8062f4:	08027000 	call	802700 <memcpy>
  8062f8:	d9001617 	ldw	r4,88(sp)
  8062fc:	880b883a 	mov	r5,r17
  806300:	01800044 	movi	r6,1
  806304:	080404c0 	call	80404c <__lshift>
  806308:	100b883a 	mov	r5,r2
  80630c:	003d9c06 	br	805980 <_dtoa_r+0x938>
  806310:	00800e44 	movi	r2,57
  806314:	b8807026 	beq	r23,r2,8064d8 <_dtoa_r+0x1490>
  806318:	b8800044 	addi	r2,r23,1
  80631c:	b7000044 	addi	fp,r22,1
  806320:	b0800005 	stb	r2,0(r22)
  806324:	003e4106 	br	805c2c <_dtoa_r+0xbe4>
  806328:	d8800317 	ldw	r2,12(sp)
  80632c:	01802074 	movhi	r6,129
  806330:	31a82b04 	addi	r6,r6,-24404
  806334:	b009883a 	mov	r4,r22
  806338:	100e90fa 	slli	r7,r2,3
  80633c:	b80b883a 	mov	r5,r23
  806340:	398f883a 	add	r7,r7,r6
  806344:	38bffe17 	ldw	r2,-8(r7)
  806348:	d9800517 	ldw	r6,20(sp)
  80634c:	38ffff17 	ldw	r3,-4(r7)
  806350:	37000044 	addi	fp,r6,1
  806354:	180f883a 	mov	r7,r3
  806358:	100d883a 	mov	r6,r2
  80635c:	08067740 	call	806774 <__muldf3>
  806360:	a80b883a 	mov	r5,r21
  806364:	a009883a 	mov	r4,r20
  806368:	182f883a 	mov	r23,r3
  80636c:	102d883a 	mov	r22,r2
  806370:	0806f600 	call	806f60 <__fixdfsi>
  806374:	1009883a 	mov	r4,r2
  806378:	1027883a 	mov	r19,r2
  80637c:	0806e680 	call	806e68 <__floatsidf>
  806380:	a80b883a 	mov	r5,r21
  806384:	a009883a 	mov	r4,r20
  806388:	180f883a 	mov	r7,r3
  80638c:	100d883a 	mov	r6,r2
  806390:	08010f80 	call	8010f8 <__subdf3>
  806394:	180b883a 	mov	r5,r3
  806398:	d8c00517 	ldw	r3,20(sp)
  80639c:	9cc00c04 	addi	r19,r19,48
  8063a0:	1009883a 	mov	r4,r2
  8063a4:	1cc00005 	stb	r19,0(r3)
  8063a8:	2021883a 	mov	r16,r4
  8063ac:	d9000317 	ldw	r4,12(sp)
  8063b0:	00800044 	movi	r2,1
  8063b4:	2823883a 	mov	r17,r5
  8063b8:	20802226 	beq	r4,r2,806444 <_dtoa_r+0x13fc>
  8063bc:	1029883a 	mov	r20,r2
  8063c0:	0005883a 	mov	r2,zero
  8063c4:	00d00934 	movhi	r3,16420
  8063c8:	180f883a 	mov	r7,r3
  8063cc:	100d883a 	mov	r6,r2
  8063d0:	880b883a 	mov	r5,r17
  8063d4:	8009883a 	mov	r4,r16
  8063d8:	08067740 	call	806774 <__muldf3>
  8063dc:	180b883a 	mov	r5,r3
  8063e0:	1009883a 	mov	r4,r2
  8063e4:	1823883a 	mov	r17,r3
  8063e8:	1021883a 	mov	r16,r2
  8063ec:	0806f600 	call	806f60 <__fixdfsi>
  8063f0:	1009883a 	mov	r4,r2
  8063f4:	102b883a 	mov	r21,r2
  8063f8:	0806e680 	call	806e68 <__floatsidf>
  8063fc:	880b883a 	mov	r5,r17
  806400:	8009883a 	mov	r4,r16
  806404:	180f883a 	mov	r7,r3
  806408:	100d883a 	mov	r6,r2
  80640c:	08010f80 	call	8010f8 <__subdf3>
  806410:	180b883a 	mov	r5,r3
  806414:	d8c00517 	ldw	r3,20(sp)
  806418:	1009883a 	mov	r4,r2
  80641c:	ad400c04 	addi	r21,r21,48
  806420:	1d05883a 	add	r2,r3,r20
  806424:	15400005 	stb	r21,0(r2)
  806428:	2021883a 	mov	r16,r4
  80642c:	d9000317 	ldw	r4,12(sp)
  806430:	a5000044 	addi	r20,r20,1
  806434:	2823883a 	mov	r17,r5
  806438:	a13fe11e 	bne	r20,r4,8063c0 <_dtoa_r+0x1378>
  80643c:	e505883a 	add	r2,fp,r20
  806440:	173fffc4 	addi	fp,r2,-1
  806444:	0025883a 	mov	r18,zero
  806448:	04cff834 	movhi	r19,16352
  80644c:	b009883a 	mov	r4,r22
  806450:	b80b883a 	mov	r5,r23
  806454:	900d883a 	mov	r6,r18
  806458:	980f883a 	mov	r7,r19
  80645c:	08011780 	call	801178 <__adddf3>
  806460:	180b883a 	mov	r5,r3
  806464:	1009883a 	mov	r4,r2
  806468:	800d883a 	mov	r6,r16
  80646c:	880f883a 	mov	r7,r17
  806470:	0806d580 	call	806d58 <__ltdf2>
  806474:	103cab16 	blt	r2,zero,805724 <_dtoa_r+0x6dc>
  806478:	0009883a 	mov	r4,zero
  80647c:	980b883a 	mov	r5,r19
  806480:	b80f883a 	mov	r7,r23
  806484:	b00d883a 	mov	r6,r22
  806488:	08010f80 	call	8010f8 <__subdf3>
  80648c:	180b883a 	mov	r5,r3
  806490:	880f883a 	mov	r7,r17
  806494:	1009883a 	mov	r4,r2
  806498:	800d883a 	mov	r6,r16
  80649c:	0806c480 	call	806c48 <__gtdf2>
  8064a0:	00bc470e 	bge	zero,r2,8055c0 <_dtoa_r+0x578>
  8064a4:	00c00c04 	movi	r3,48
  8064a8:	e73fffc4 	addi	fp,fp,-1
  8064ac:	e0800007 	ldb	r2,0(fp)
  8064b0:	10fffd26 	beq	r2,r3,8064a8 <_dtoa_r+0x1460>
  8064b4:	d9800417 	ldw	r6,16(sp)
  8064b8:	e7000044 	addi	fp,fp,1
  8064bc:	d9800d15 	stw	r6,52(sp)
  8064c0:	003cab06 	br	805770 <_dtoa_r+0x728>
  8064c4:	d8c00f17 	ldw	r3,60(sp)
  8064c8:	d9001117 	ldw	r4,68(sp)
  8064cc:	20e1c83a 	sub	r16,r4,r3
  8064d0:	0007883a 	mov	r3,zero
  8064d4:	003d9b06 	br	805b44 <_dtoa_r+0xafc>
  8064d8:	00800e44 	movi	r2,57
  8064dc:	b0800005 	stb	r2,0(r22)
  8064e0:	b5800044 	addi	r22,r22,1
  8064e4:	003dc106 	br	805bec <_dtoa_r+0xba4>
  8064e8:	05800084 	movi	r22,2
  8064ec:	003bf706 	br	8054cc <_dtoa_r+0x484>
  8064f0:	d9000f17 	ldw	r4,60(sp)
  8064f4:	013c000e 	bge	zero,r4,8054f8 <_dtoa_r+0x4b0>
  8064f8:	d9800e17 	ldw	r6,56(sp)
  8064fc:	01bc300e 	bge	zero,r6,8055c0 <_dtoa_r+0x578>
  806500:	0005883a 	mov	r2,zero
  806504:	00d00934 	movhi	r3,16420
  806508:	a80b883a 	mov	r5,r21
  80650c:	180f883a 	mov	r7,r3
  806510:	a009883a 	mov	r4,r20
  806514:	100d883a 	mov	r6,r2
  806518:	08067740 	call	806774 <__muldf3>
  80651c:	b1000044 	addi	r4,r22,1
  806520:	1021883a 	mov	r16,r2
  806524:	1823883a 	mov	r17,r3
  806528:	0806e680 	call	806e68 <__floatsidf>
  80652c:	880b883a 	mov	r5,r17
  806530:	8009883a 	mov	r4,r16
  806534:	180f883a 	mov	r7,r3
  806538:	100d883a 	mov	r6,r2
  80653c:	08067740 	call	806774 <__muldf3>
  806540:	0011883a 	mov	r8,zero
  806544:	02500734 	movhi	r9,16412
  806548:	180b883a 	mov	r5,r3
  80654c:	480f883a 	mov	r7,r9
  806550:	1009883a 	mov	r4,r2
  806554:	400d883a 	mov	r6,r8
  806558:	08011780 	call	801178 <__adddf3>
  80655c:	102d883a 	mov	r22,r2
  806560:	00bf3034 	movhi	r2,64704
  806564:	10ef883a 	add	r23,r2,r3
  806568:	d8800d17 	ldw	r2,52(sp)
  80656c:	d8c00e17 	ldw	r3,56(sp)
  806570:	8029883a 	mov	r20,r16
  806574:	10bfffc4 	addi	r2,r2,-1
  806578:	882b883a 	mov	r21,r17
  80657c:	d8800415 	stw	r2,16(sp)
  806580:	d8c00315 	stw	r3,12(sp)
  806584:	003e8306 	br	805f94 <_dtoa_r+0xf4c>
  806588:	d8800117 	ldw	r2,4(sp)
  80658c:	dc001117 	ldw	r16,68(sp)
  806590:	dc801017 	ldw	r18,64(sp)
  806594:	00c00d84 	movi	r3,54
  806598:	1887c83a 	sub	r3,r3,r2
  80659c:	003d6906 	br	805b44 <_dtoa_r+0xafc>
  8065a0:	01800044 	movi	r6,1
  8065a4:	3021883a 	mov	r16,r6
  8065a8:	d9800f15 	stw	r6,60(sp)
  8065ac:	d9802615 	stw	r6,152(sp)
  8065b0:	d9800e15 	stw	r6,56(sp)
  8065b4:	003b9306 	br	805404 <_dtoa_r+0x3bc>
  8065b8:	b021883a 	mov	r16,r22
  8065bc:	dd800f15 	stw	r22,60(sp)
  8065c0:	003b9006 	br	805404 <_dtoa_r+0x3bc>
  8065c4:	103e221e 	bne	r2,zero,805e50 <_dtoa_r+0xe08>
  8065c8:	b880004c 	andi	r2,r23,1
  8065cc:	1005003a 	cmpeq	r2,r2,zero
  8065d0:	103e1f1e 	bne	r2,zero,805e50 <_dtoa_r+0xe08>
  8065d4:	003e1b06 	br	805e44 <_dtoa_r+0xdfc>
  8065d8:	d9001617 	ldw	r4,88(sp)
  8065dc:	980b883a 	mov	r5,r19
  8065e0:	01800284 	movi	r6,10
  8065e4:	000f883a 	mov	r7,zero
  8065e8:	08043bc0 	call	8043bc <__multadd>
  8065ec:	d8c00e17 	ldw	r3,56(sp)
  8065f0:	1027883a 	mov	r19,r2
  8065f4:	d8c00f15 	stw	r3,60(sp)
  8065f8:	003cd306 	br	805948 <_dtoa_r+0x900>

008065fc <memmove>:
  8065fc:	2807883a 	mov	r3,r5
  806600:	2011883a 	mov	r8,r4
  806604:	29000c2e 	bgeu	r5,r4,806638 <memmove+0x3c>
  806608:	298f883a 	add	r7,r5,r6
  80660c:	21c00a2e 	bgeu	r4,r7,806638 <memmove+0x3c>
  806610:	30000726 	beq	r6,zero,806630 <memmove+0x34>
  806614:	2187883a 	add	r3,r4,r6
  806618:	198dc83a 	sub	r6,r3,r6
  80661c:	39ffffc4 	addi	r7,r7,-1
  806620:	38800003 	ldbu	r2,0(r7)
  806624:	18ffffc4 	addi	r3,r3,-1
  806628:	18800005 	stb	r2,0(r3)
  80662c:	19bffb1e 	bne	r3,r6,80661c <memmove+0x20>
  806630:	2005883a 	mov	r2,r4
  806634:	f800283a 	ret
  806638:	01c003c4 	movi	r7,15
  80663c:	39800a36 	bltu	r7,r6,806668 <memmove+0x6c>
  806640:	303ffb26 	beq	r6,zero,806630 <memmove+0x34>
  806644:	400f883a 	mov	r7,r8
  806648:	320d883a 	add	r6,r6,r8
  80664c:	28800003 	ldbu	r2,0(r5)
  806650:	29400044 	addi	r5,r5,1
  806654:	38800005 	stb	r2,0(r7)
  806658:	39c00044 	addi	r7,r7,1
  80665c:	39bffb1e 	bne	r7,r6,80664c <memmove+0x50>
  806660:	2005883a 	mov	r2,r4
  806664:	f800283a 	ret
  806668:	1904b03a 	or	r2,r3,r4
  80666c:	108000cc 	andi	r2,r2,3
  806670:	103ff31e 	bne	r2,zero,806640 <memmove+0x44>
  806674:	3811883a 	mov	r8,r7
  806678:	180b883a 	mov	r5,r3
  80667c:	200f883a 	mov	r7,r4
  806680:	28c00017 	ldw	r3,0(r5)
  806684:	31bffc04 	addi	r6,r6,-16
  806688:	38c00015 	stw	r3,0(r7)
  80668c:	28800117 	ldw	r2,4(r5)
  806690:	38800115 	stw	r2,4(r7)
  806694:	28c00217 	ldw	r3,8(r5)
  806698:	38c00215 	stw	r3,8(r7)
  80669c:	28800317 	ldw	r2,12(r5)
  8066a0:	29400404 	addi	r5,r5,16
  8066a4:	38800315 	stw	r2,12(r7)
  8066a8:	39c00404 	addi	r7,r7,16
  8066ac:	41bff436 	bltu	r8,r6,806680 <memmove+0x84>
  8066b0:	008000c4 	movi	r2,3
  8066b4:	1180072e 	bgeu	r2,r6,8066d4 <memmove+0xd8>
  8066b8:	1007883a 	mov	r3,r2
  8066bc:	28800017 	ldw	r2,0(r5)
  8066c0:	31bfff04 	addi	r6,r6,-4
  8066c4:	29400104 	addi	r5,r5,4
  8066c8:	38800015 	stw	r2,0(r7)
  8066cc:	39c00104 	addi	r7,r7,4
  8066d0:	19bffa36 	bltu	r3,r6,8066bc <memmove+0xc0>
  8066d4:	3811883a 	mov	r8,r7
  8066d8:	003fd906 	br	806640 <memmove+0x44>

008066dc <memset>:
  8066dc:	008000c4 	movi	r2,3
  8066e0:	29403fcc 	andi	r5,r5,255
  8066e4:	2007883a 	mov	r3,r4
  8066e8:	1180022e 	bgeu	r2,r6,8066f4 <memset+0x18>
  8066ec:	2084703a 	and	r2,r4,r2
  8066f0:	10000826 	beq	r2,zero,806714 <memset+0x38>
  8066f4:	30000526 	beq	r6,zero,80670c <memset+0x30>
  8066f8:	2805883a 	mov	r2,r5
  8066fc:	30cd883a 	add	r6,r6,r3
  806700:	18800005 	stb	r2,0(r3)
  806704:	18c00044 	addi	r3,r3,1
  806708:	19bffd1e 	bne	r3,r6,806700 <memset+0x24>
  80670c:	2005883a 	mov	r2,r4
  806710:	f800283a 	ret
  806714:	2804923a 	slli	r2,r5,8
  806718:	020003c4 	movi	r8,15
  80671c:	200f883a 	mov	r7,r4
  806720:	2884b03a 	or	r2,r5,r2
  806724:	1006943a 	slli	r3,r2,16
  806728:	10c6b03a 	or	r3,r2,r3
  80672c:	41800a2e 	bgeu	r8,r6,806758 <memset+0x7c>
  806730:	4005883a 	mov	r2,r8
  806734:	31bffc04 	addi	r6,r6,-16
  806738:	38c00015 	stw	r3,0(r7)
  80673c:	38c00115 	stw	r3,4(r7)
  806740:	38c00215 	stw	r3,8(r7)
  806744:	38c00315 	stw	r3,12(r7)
  806748:	39c00404 	addi	r7,r7,16
  80674c:	11bff936 	bltu	r2,r6,806734 <memset+0x58>
  806750:	008000c4 	movi	r2,3
  806754:	1180052e 	bgeu	r2,r6,80676c <memset+0x90>
  806758:	31bfff04 	addi	r6,r6,-4
  80675c:	008000c4 	movi	r2,3
  806760:	38c00015 	stw	r3,0(r7)
  806764:	39c00104 	addi	r7,r7,4
  806768:	11bffb36 	bltu	r2,r6,806758 <memset+0x7c>
  80676c:	3807883a 	mov	r3,r7
  806770:	003fe006 	br	8066f4 <memset+0x18>

00806774 <__muldf3>:
  806774:	deffe004 	addi	sp,sp,-128
  806778:	dc401815 	stw	r17,96(sp)
  80677c:	dc400404 	addi	r17,sp,16
  806780:	2011883a 	mov	r8,r4
  806784:	2813883a 	mov	r9,r5
  806788:	dc001715 	stw	r16,92(sp)
  80678c:	d809883a 	mov	r4,sp
  806790:	880b883a 	mov	r5,r17
  806794:	dc000904 	addi	r16,sp,36
  806798:	dfc01f15 	stw	ra,124(sp)
  80679c:	da400115 	stw	r9,4(sp)
  8067a0:	d9c00315 	stw	r7,12(sp)
  8067a4:	da000015 	stw	r8,0(sp)
  8067a8:	d9800215 	stw	r6,8(sp)
  8067ac:	ddc01e15 	stw	r23,120(sp)
  8067b0:	dd801d15 	stw	r22,116(sp)
  8067b4:	dd401c15 	stw	r21,112(sp)
  8067b8:	dd001b15 	stw	r20,108(sp)
  8067bc:	dcc01a15 	stw	r19,104(sp)
  8067c0:	dc801915 	stw	r18,100(sp)
  8067c4:	0801c640 	call	801c64 <__unpack_d>
  8067c8:	d9000204 	addi	r4,sp,8
  8067cc:	800b883a 	mov	r5,r16
  8067d0:	0801c640 	call	801c64 <__unpack_d>
  8067d4:	d9000417 	ldw	r4,16(sp)
  8067d8:	00800044 	movi	r2,1
  8067dc:	1100102e 	bgeu	r2,r4,806820 <__muldf3+0xac>
  8067e0:	d8c00917 	ldw	r3,36(sp)
  8067e4:	10c0062e 	bgeu	r2,r3,806800 <__muldf3+0x8c>
  8067e8:	00800104 	movi	r2,4
  8067ec:	20800a26 	beq	r4,r2,806818 <__muldf3+0xa4>
  8067f0:	1880cc26 	beq	r3,r2,806b24 <__muldf3+0x3b0>
  8067f4:	00800084 	movi	r2,2
  8067f8:	20800926 	beq	r4,r2,806820 <__muldf3+0xac>
  8067fc:	1880191e 	bne	r3,r2,806864 <__muldf3+0xf0>
  806800:	d8c00a17 	ldw	r3,40(sp)
  806804:	d8800517 	ldw	r2,20(sp)
  806808:	8009883a 	mov	r4,r16
  80680c:	10c4c03a 	cmpne	r2,r2,r3
  806810:	d8800a15 	stw	r2,40(sp)
  806814:	00000706 	br	806834 <__muldf3+0xc0>
  806818:	00800084 	movi	r2,2
  80681c:	1880c326 	beq	r3,r2,806b2c <__muldf3+0x3b8>
  806820:	d8800517 	ldw	r2,20(sp)
  806824:	d8c00a17 	ldw	r3,40(sp)
  806828:	8809883a 	mov	r4,r17
  80682c:	10c4c03a 	cmpne	r2,r2,r3
  806830:	d8800515 	stw	r2,20(sp)
  806834:	08019500 	call	801950 <__pack_d>
  806838:	dfc01f17 	ldw	ra,124(sp)
  80683c:	ddc01e17 	ldw	r23,120(sp)
  806840:	dd801d17 	ldw	r22,116(sp)
  806844:	dd401c17 	ldw	r21,112(sp)
  806848:	dd001b17 	ldw	r20,108(sp)
  80684c:	dcc01a17 	ldw	r19,104(sp)
  806850:	dc801917 	ldw	r18,100(sp)
  806854:	dc401817 	ldw	r17,96(sp)
  806858:	dc001717 	ldw	r16,92(sp)
  80685c:	dec02004 	addi	sp,sp,128
  806860:	f800283a 	ret
  806864:	dd800717 	ldw	r22,28(sp)
  806868:	dc800c17 	ldw	r18,48(sp)
  80686c:	002b883a 	mov	r21,zero
  806870:	0023883a 	mov	r17,zero
  806874:	a80b883a 	mov	r5,r21
  806878:	b00d883a 	mov	r6,r22
  80687c:	880f883a 	mov	r7,r17
  806880:	ddc00817 	ldw	r23,32(sp)
  806884:	dcc00d17 	ldw	r19,52(sp)
  806888:	9009883a 	mov	r4,r18
  80688c:	08016100 	call	801610 <__muldi3>
  806890:	001b883a 	mov	r13,zero
  806894:	680f883a 	mov	r7,r13
  806898:	b009883a 	mov	r4,r22
  80689c:	000b883a 	mov	r5,zero
  8068a0:	980d883a 	mov	r6,r19
  8068a4:	b82d883a 	mov	r22,r23
  8068a8:	002f883a 	mov	r23,zero
  8068ac:	db401615 	stw	r13,88(sp)
  8068b0:	d8801315 	stw	r2,76(sp)
  8068b4:	d8c01415 	stw	r3,80(sp)
  8068b8:	dcc01515 	stw	r19,84(sp)
  8068bc:	08016100 	call	801610 <__muldi3>
  8068c0:	b00d883a 	mov	r6,r22
  8068c4:	000b883a 	mov	r5,zero
  8068c8:	9009883a 	mov	r4,r18
  8068cc:	b80f883a 	mov	r7,r23
  8068d0:	1021883a 	mov	r16,r2
  8068d4:	1823883a 	mov	r17,r3
  8068d8:	08016100 	call	801610 <__muldi3>
  8068dc:	8085883a 	add	r2,r16,r2
  8068e0:	140d803a 	cmpltu	r6,r2,r16
  8068e4:	88c7883a 	add	r3,r17,r3
  8068e8:	30cd883a 	add	r6,r6,r3
  8068ec:	1029883a 	mov	r20,r2
  8068f0:	302b883a 	mov	r21,r6
  8068f4:	da801317 	ldw	r10,76(sp)
  8068f8:	dac01417 	ldw	r11,80(sp)
  8068fc:	db001517 	ldw	r12,84(sp)
  806900:	db401617 	ldw	r13,88(sp)
  806904:	3440612e 	bgeu	r6,r17,806a8c <__muldf3+0x318>
  806908:	0009883a 	mov	r4,zero
  80690c:	5105883a 	add	r2,r10,r4
  806910:	128d803a 	cmpltu	r6,r2,r10
  806914:	5d07883a 	add	r3,r11,r20
  806918:	30cd883a 	add	r6,r6,r3
  80691c:	0021883a 	mov	r16,zero
  806920:	04400044 	movi	r17,1
  806924:	1025883a 	mov	r18,r2
  806928:	3027883a 	mov	r19,r6
  80692c:	32c06236 	bltu	r6,r11,806ab8 <__muldf3+0x344>
  806930:	59807a26 	beq	r11,r6,806b1c <__muldf3+0x3a8>
  806934:	680b883a 	mov	r5,r13
  806938:	b80f883a 	mov	r7,r23
  80693c:	6009883a 	mov	r4,r12
  806940:	b00d883a 	mov	r6,r22
  806944:	08016100 	call	801610 <__muldi3>
  806948:	1009883a 	mov	r4,r2
  80694c:	000f883a 	mov	r7,zero
  806950:	1545883a 	add	r2,r2,r21
  806954:	1111803a 	cmpltu	r8,r2,r4
  806958:	19c7883a 	add	r3,r3,r7
  80695c:	40c7883a 	add	r3,r8,r3
  806960:	88cb883a 	add	r5,r17,r3
  806964:	d8c00617 	ldw	r3,24(sp)
  806968:	8089883a 	add	r4,r16,r2
  80696c:	d8800b17 	ldw	r2,44(sp)
  806970:	18c00104 	addi	r3,r3,4
  806974:	240d803a 	cmpltu	r6,r4,r16
  806978:	10c7883a 	add	r3,r2,r3
  80697c:	2013883a 	mov	r9,r4
  806980:	d8800a17 	ldw	r2,40(sp)
  806984:	d9000517 	ldw	r4,20(sp)
  806988:	314d883a 	add	r6,r6,r5
  80698c:	3015883a 	mov	r10,r6
  806990:	2088c03a 	cmpne	r4,r4,r2
  806994:	00880034 	movhi	r2,8192
  806998:	10bfffc4 	addi	r2,r2,-1
  80699c:	d9000f15 	stw	r4,60(sp)
  8069a0:	d8c01015 	stw	r3,64(sp)
  8069a4:	1180162e 	bgeu	r2,r6,806a00 <__muldf3+0x28c>
  8069a8:	1811883a 	mov	r8,r3
  8069ac:	101f883a 	mov	r15,r2
  8069b0:	980497fa 	slli	r2,r19,31
  8069b4:	9016d07a 	srli	r11,r18,1
  8069b8:	500697fa 	slli	r3,r10,31
  8069bc:	480cd07a 	srli	r6,r9,1
  8069c0:	500ed07a 	srli	r7,r10,1
  8069c4:	12d6b03a 	or	r11,r2,r11
  8069c8:	00800044 	movi	r2,1
  8069cc:	198cb03a 	or	r6,r3,r6
  8069d0:	4888703a 	and	r4,r9,r2
  8069d4:	9818d07a 	srli	r12,r19,1
  8069d8:	001b883a 	mov	r13,zero
  8069dc:	03a00034 	movhi	r14,32768
  8069e0:	3013883a 	mov	r9,r6
  8069e4:	3815883a 	mov	r10,r7
  8069e8:	4091883a 	add	r8,r8,r2
  8069ec:	20000226 	beq	r4,zero,8069f8 <__muldf3+0x284>
  8069f0:	5b64b03a 	or	r18,r11,r13
  8069f4:	63a6b03a 	or	r19,r12,r14
  8069f8:	7abfed36 	bltu	r15,r10,8069b0 <__muldf3+0x23c>
  8069fc:	da001015 	stw	r8,64(sp)
  806a00:	00840034 	movhi	r2,4096
  806a04:	10bfffc4 	addi	r2,r2,-1
  806a08:	12801436 	bltu	r2,r10,806a5c <__muldf3+0x2e8>
  806a0c:	da001017 	ldw	r8,64(sp)
  806a10:	101f883a 	mov	r15,r2
  806a14:	4a45883a 	add	r2,r9,r9
  806a18:	124d803a 	cmpltu	r6,r2,r9
  806a1c:	5287883a 	add	r3,r10,r10
  806a20:	9497883a 	add	r11,r18,r18
  806a24:	5c8f803a 	cmpltu	r7,r11,r18
  806a28:	9cd9883a 	add	r12,r19,r19
  806a2c:	01000044 	movi	r4,1
  806a30:	30cd883a 	add	r6,r6,r3
  806a34:	3b0f883a 	add	r7,r7,r12
  806a38:	423fffc4 	addi	r8,r8,-1
  806a3c:	1013883a 	mov	r9,r2
  806a40:	3015883a 	mov	r10,r6
  806a44:	111ab03a 	or	r13,r2,r4
  806a48:	98003016 	blt	r19,zero,806b0c <__muldf3+0x398>
  806a4c:	5825883a 	mov	r18,r11
  806a50:	3827883a 	mov	r19,r7
  806a54:	7abfef2e 	bgeu	r15,r10,806a14 <__muldf3+0x2a0>
  806a58:	da001015 	stw	r8,64(sp)
  806a5c:	00803fc4 	movi	r2,255
  806a60:	488e703a 	and	r7,r9,r2
  806a64:	00802004 	movi	r2,128
  806a68:	0007883a 	mov	r3,zero
  806a6c:	0011883a 	mov	r8,zero
  806a70:	38801826 	beq	r7,r2,806ad4 <__muldf3+0x360>
  806a74:	008000c4 	movi	r2,3
  806a78:	d9000e04 	addi	r4,sp,56
  806a7c:	da801215 	stw	r10,72(sp)
  806a80:	d8800e15 	stw	r2,56(sp)
  806a84:	da401115 	stw	r9,68(sp)
  806a88:	003f6a06 	br	806834 <__muldf3+0xc0>
  806a8c:	89802126 	beq	r17,r6,806b14 <__muldf3+0x3a0>
  806a90:	0009883a 	mov	r4,zero
  806a94:	5105883a 	add	r2,r10,r4
  806a98:	128d803a 	cmpltu	r6,r2,r10
  806a9c:	5d07883a 	add	r3,r11,r20
  806aa0:	30cd883a 	add	r6,r6,r3
  806aa4:	0021883a 	mov	r16,zero
  806aa8:	0023883a 	mov	r17,zero
  806aac:	1025883a 	mov	r18,r2
  806ab0:	3027883a 	mov	r19,r6
  806ab4:	32ff9e2e 	bgeu	r6,r11,806930 <__muldf3+0x1bc>
  806ab8:	00800044 	movi	r2,1
  806abc:	8089883a 	add	r4,r16,r2
  806ac0:	240d803a 	cmpltu	r6,r4,r16
  806ac4:	344d883a 	add	r6,r6,r17
  806ac8:	2021883a 	mov	r16,r4
  806acc:	3023883a 	mov	r17,r6
  806ad0:	003f9806 	br	806934 <__muldf3+0x1c0>
  806ad4:	403fe71e 	bne	r8,zero,806a74 <__muldf3+0x300>
  806ad8:	01004004 	movi	r4,256
  806adc:	4904703a 	and	r2,r9,r4
  806ae0:	10c4b03a 	or	r2,r2,r3
  806ae4:	103fe31e 	bne	r2,zero,806a74 <__muldf3+0x300>
  806ae8:	94c4b03a 	or	r2,r18,r19
  806aec:	103fe126 	beq	r2,zero,806a74 <__muldf3+0x300>
  806af0:	49c5883a 	add	r2,r9,r7
  806af4:	1251803a 	cmpltu	r8,r2,r9
  806af8:	4291883a 	add	r8,r8,r10
  806afc:	013fc004 	movi	r4,-256
  806b00:	1112703a 	and	r9,r2,r4
  806b04:	4015883a 	mov	r10,r8
  806b08:	003fda06 	br	806a74 <__muldf3+0x300>
  806b0c:	6813883a 	mov	r9,r13
  806b10:	003fce06 	br	806a4c <__muldf3+0x2d8>
  806b14:	143f7c36 	bltu	r2,r16,806908 <__muldf3+0x194>
  806b18:	003fdd06 	br	806a90 <__muldf3+0x31c>
  806b1c:	12bf852e 	bgeu	r2,r10,806934 <__muldf3+0x1c0>
  806b20:	003fe506 	br	806ab8 <__muldf3+0x344>
  806b24:	00800084 	movi	r2,2
  806b28:	20bf351e 	bne	r4,r2,806800 <__muldf3+0x8c>
  806b2c:	01002074 	movhi	r4,129
  806b30:	2127e504 	addi	r4,r4,-24684
  806b34:	003f3f06 	br	806834 <__muldf3+0xc0>

00806b38 <__eqdf2>:
  806b38:	deffef04 	addi	sp,sp,-68
  806b3c:	dc400f15 	stw	r17,60(sp)
  806b40:	dc400404 	addi	r17,sp,16
  806b44:	2005883a 	mov	r2,r4
  806b48:	2807883a 	mov	r3,r5
  806b4c:	dc000e15 	stw	r16,56(sp)
  806b50:	d809883a 	mov	r4,sp
  806b54:	880b883a 	mov	r5,r17
  806b58:	dc000904 	addi	r16,sp,36
  806b5c:	d8c00115 	stw	r3,4(sp)
  806b60:	d8800015 	stw	r2,0(sp)
  806b64:	d9800215 	stw	r6,8(sp)
  806b68:	dfc01015 	stw	ra,64(sp)
  806b6c:	d9c00315 	stw	r7,12(sp)
  806b70:	0801c640 	call	801c64 <__unpack_d>
  806b74:	d9000204 	addi	r4,sp,8
  806b78:	800b883a 	mov	r5,r16
  806b7c:	0801c640 	call	801c64 <__unpack_d>
  806b80:	d8800417 	ldw	r2,16(sp)
  806b84:	00c00044 	movi	r3,1
  806b88:	180d883a 	mov	r6,r3
  806b8c:	1880062e 	bgeu	r3,r2,806ba8 <__eqdf2+0x70>
  806b90:	d8800917 	ldw	r2,36(sp)
  806b94:	8809883a 	mov	r4,r17
  806b98:	800b883a 	mov	r5,r16
  806b9c:	1880022e 	bgeu	r3,r2,806ba8 <__eqdf2+0x70>
  806ba0:	08071840 	call	807184 <__fpcmp_parts_d>
  806ba4:	100d883a 	mov	r6,r2
  806ba8:	3005883a 	mov	r2,r6
  806bac:	dfc01017 	ldw	ra,64(sp)
  806bb0:	dc400f17 	ldw	r17,60(sp)
  806bb4:	dc000e17 	ldw	r16,56(sp)
  806bb8:	dec01104 	addi	sp,sp,68
  806bbc:	f800283a 	ret

00806bc0 <__nedf2>:
  806bc0:	deffef04 	addi	sp,sp,-68
  806bc4:	dc400f15 	stw	r17,60(sp)
  806bc8:	dc400404 	addi	r17,sp,16
  806bcc:	2005883a 	mov	r2,r4
  806bd0:	2807883a 	mov	r3,r5
  806bd4:	dc000e15 	stw	r16,56(sp)
  806bd8:	d809883a 	mov	r4,sp
  806bdc:	880b883a 	mov	r5,r17
  806be0:	dc000904 	addi	r16,sp,36
  806be4:	d8c00115 	stw	r3,4(sp)
  806be8:	d8800015 	stw	r2,0(sp)
  806bec:	d9800215 	stw	r6,8(sp)
  806bf0:	dfc01015 	stw	ra,64(sp)
  806bf4:	d9c00315 	stw	r7,12(sp)
  806bf8:	0801c640 	call	801c64 <__unpack_d>
  806bfc:	d9000204 	addi	r4,sp,8
  806c00:	800b883a 	mov	r5,r16
  806c04:	0801c640 	call	801c64 <__unpack_d>
  806c08:	d8800417 	ldw	r2,16(sp)
  806c0c:	00c00044 	movi	r3,1
  806c10:	180d883a 	mov	r6,r3
  806c14:	1880062e 	bgeu	r3,r2,806c30 <__nedf2+0x70>
  806c18:	d8800917 	ldw	r2,36(sp)
  806c1c:	8809883a 	mov	r4,r17
  806c20:	800b883a 	mov	r5,r16
  806c24:	1880022e 	bgeu	r3,r2,806c30 <__nedf2+0x70>
  806c28:	08071840 	call	807184 <__fpcmp_parts_d>
  806c2c:	100d883a 	mov	r6,r2
  806c30:	3005883a 	mov	r2,r6
  806c34:	dfc01017 	ldw	ra,64(sp)
  806c38:	dc400f17 	ldw	r17,60(sp)
  806c3c:	dc000e17 	ldw	r16,56(sp)
  806c40:	dec01104 	addi	sp,sp,68
  806c44:	f800283a 	ret

00806c48 <__gtdf2>:
  806c48:	deffef04 	addi	sp,sp,-68
  806c4c:	dc400f15 	stw	r17,60(sp)
  806c50:	dc400404 	addi	r17,sp,16
  806c54:	2005883a 	mov	r2,r4
  806c58:	2807883a 	mov	r3,r5
  806c5c:	dc000e15 	stw	r16,56(sp)
  806c60:	d809883a 	mov	r4,sp
  806c64:	880b883a 	mov	r5,r17
  806c68:	dc000904 	addi	r16,sp,36
  806c6c:	d8c00115 	stw	r3,4(sp)
  806c70:	d8800015 	stw	r2,0(sp)
  806c74:	d9800215 	stw	r6,8(sp)
  806c78:	dfc01015 	stw	ra,64(sp)
  806c7c:	d9c00315 	stw	r7,12(sp)
  806c80:	0801c640 	call	801c64 <__unpack_d>
  806c84:	d9000204 	addi	r4,sp,8
  806c88:	800b883a 	mov	r5,r16
  806c8c:	0801c640 	call	801c64 <__unpack_d>
  806c90:	d8800417 	ldw	r2,16(sp)
  806c94:	00c00044 	movi	r3,1
  806c98:	01bfffc4 	movi	r6,-1
  806c9c:	1880062e 	bgeu	r3,r2,806cb8 <__gtdf2+0x70>
  806ca0:	d8800917 	ldw	r2,36(sp)
  806ca4:	8809883a 	mov	r4,r17
  806ca8:	800b883a 	mov	r5,r16
  806cac:	1880022e 	bgeu	r3,r2,806cb8 <__gtdf2+0x70>
  806cb0:	08071840 	call	807184 <__fpcmp_parts_d>
  806cb4:	100d883a 	mov	r6,r2
  806cb8:	3005883a 	mov	r2,r6
  806cbc:	dfc01017 	ldw	ra,64(sp)
  806cc0:	dc400f17 	ldw	r17,60(sp)
  806cc4:	dc000e17 	ldw	r16,56(sp)
  806cc8:	dec01104 	addi	sp,sp,68
  806ccc:	f800283a 	ret

00806cd0 <__gedf2>:
  806cd0:	deffef04 	addi	sp,sp,-68
  806cd4:	dc400f15 	stw	r17,60(sp)
  806cd8:	dc400404 	addi	r17,sp,16
  806cdc:	2005883a 	mov	r2,r4
  806ce0:	2807883a 	mov	r3,r5
  806ce4:	dc000e15 	stw	r16,56(sp)
  806ce8:	d809883a 	mov	r4,sp
  806cec:	880b883a 	mov	r5,r17
  806cf0:	dc000904 	addi	r16,sp,36
  806cf4:	d8c00115 	stw	r3,4(sp)
  806cf8:	d8800015 	stw	r2,0(sp)
  806cfc:	d9800215 	stw	r6,8(sp)
  806d00:	dfc01015 	stw	ra,64(sp)
  806d04:	d9c00315 	stw	r7,12(sp)
  806d08:	0801c640 	call	801c64 <__unpack_d>
  806d0c:	d9000204 	addi	r4,sp,8
  806d10:	800b883a 	mov	r5,r16
  806d14:	0801c640 	call	801c64 <__unpack_d>
  806d18:	d8800417 	ldw	r2,16(sp)
  806d1c:	00c00044 	movi	r3,1
  806d20:	01bfffc4 	movi	r6,-1
  806d24:	1880062e 	bgeu	r3,r2,806d40 <__gedf2+0x70>
  806d28:	d8800917 	ldw	r2,36(sp)
  806d2c:	8809883a 	mov	r4,r17
  806d30:	800b883a 	mov	r5,r16
  806d34:	1880022e 	bgeu	r3,r2,806d40 <__gedf2+0x70>
  806d38:	08071840 	call	807184 <__fpcmp_parts_d>
  806d3c:	100d883a 	mov	r6,r2
  806d40:	3005883a 	mov	r2,r6
  806d44:	dfc01017 	ldw	ra,64(sp)
  806d48:	dc400f17 	ldw	r17,60(sp)
  806d4c:	dc000e17 	ldw	r16,56(sp)
  806d50:	dec01104 	addi	sp,sp,68
  806d54:	f800283a 	ret

00806d58 <__ltdf2>:
  806d58:	deffef04 	addi	sp,sp,-68
  806d5c:	dc400f15 	stw	r17,60(sp)
  806d60:	dc400404 	addi	r17,sp,16
  806d64:	2005883a 	mov	r2,r4
  806d68:	2807883a 	mov	r3,r5
  806d6c:	dc000e15 	stw	r16,56(sp)
  806d70:	d809883a 	mov	r4,sp
  806d74:	880b883a 	mov	r5,r17
  806d78:	dc000904 	addi	r16,sp,36
  806d7c:	d8c00115 	stw	r3,4(sp)
  806d80:	d8800015 	stw	r2,0(sp)
  806d84:	d9800215 	stw	r6,8(sp)
  806d88:	dfc01015 	stw	ra,64(sp)
  806d8c:	d9c00315 	stw	r7,12(sp)
  806d90:	0801c640 	call	801c64 <__unpack_d>
  806d94:	d9000204 	addi	r4,sp,8
  806d98:	800b883a 	mov	r5,r16
  806d9c:	0801c640 	call	801c64 <__unpack_d>
  806da0:	d8800417 	ldw	r2,16(sp)
  806da4:	00c00044 	movi	r3,1
  806da8:	180d883a 	mov	r6,r3
  806dac:	1880062e 	bgeu	r3,r2,806dc8 <__ltdf2+0x70>
  806db0:	d8800917 	ldw	r2,36(sp)
  806db4:	8809883a 	mov	r4,r17
  806db8:	800b883a 	mov	r5,r16
  806dbc:	1880022e 	bgeu	r3,r2,806dc8 <__ltdf2+0x70>
  806dc0:	08071840 	call	807184 <__fpcmp_parts_d>
  806dc4:	100d883a 	mov	r6,r2
  806dc8:	3005883a 	mov	r2,r6
  806dcc:	dfc01017 	ldw	ra,64(sp)
  806dd0:	dc400f17 	ldw	r17,60(sp)
  806dd4:	dc000e17 	ldw	r16,56(sp)
  806dd8:	dec01104 	addi	sp,sp,68
  806ddc:	f800283a 	ret

00806de0 <__ledf2>:
  806de0:	deffef04 	addi	sp,sp,-68
  806de4:	dc400f15 	stw	r17,60(sp)
  806de8:	dc400404 	addi	r17,sp,16
  806dec:	2005883a 	mov	r2,r4
  806df0:	2807883a 	mov	r3,r5
  806df4:	dc000e15 	stw	r16,56(sp)
  806df8:	d809883a 	mov	r4,sp
  806dfc:	880b883a 	mov	r5,r17
  806e00:	dc000904 	addi	r16,sp,36
  806e04:	d8c00115 	stw	r3,4(sp)
  806e08:	d8800015 	stw	r2,0(sp)
  806e0c:	d9800215 	stw	r6,8(sp)
  806e10:	dfc01015 	stw	ra,64(sp)
  806e14:	d9c00315 	stw	r7,12(sp)
  806e18:	0801c640 	call	801c64 <__unpack_d>
  806e1c:	d9000204 	addi	r4,sp,8
  806e20:	800b883a 	mov	r5,r16
  806e24:	0801c640 	call	801c64 <__unpack_d>
  806e28:	d8800417 	ldw	r2,16(sp)
  806e2c:	00c00044 	movi	r3,1
  806e30:	180d883a 	mov	r6,r3
  806e34:	1880062e 	bgeu	r3,r2,806e50 <__ledf2+0x70>
  806e38:	d8800917 	ldw	r2,36(sp)
  806e3c:	8809883a 	mov	r4,r17
  806e40:	800b883a 	mov	r5,r16
  806e44:	1880022e 	bgeu	r3,r2,806e50 <__ledf2+0x70>
  806e48:	08071840 	call	807184 <__fpcmp_parts_d>
  806e4c:	100d883a 	mov	r6,r2
  806e50:	3005883a 	mov	r2,r6
  806e54:	dfc01017 	ldw	ra,64(sp)
  806e58:	dc400f17 	ldw	r17,60(sp)
  806e5c:	dc000e17 	ldw	r16,56(sp)
  806e60:	dec01104 	addi	sp,sp,68
  806e64:	f800283a 	ret

00806e68 <__floatsidf>:
  806e68:	2006d7fa 	srli	r3,r4,31
  806e6c:	defff604 	addi	sp,sp,-40
  806e70:	008000c4 	movi	r2,3
  806e74:	dfc00915 	stw	ra,36(sp)
  806e78:	dcc00815 	stw	r19,32(sp)
  806e7c:	dc800715 	stw	r18,28(sp)
  806e80:	dc400615 	stw	r17,24(sp)
  806e84:	dc000515 	stw	r16,20(sp)
  806e88:	d8800015 	stw	r2,0(sp)
  806e8c:	d8c00115 	stw	r3,4(sp)
  806e90:	20000f1e 	bne	r4,zero,806ed0 <__floatsidf+0x68>
  806e94:	00800084 	movi	r2,2
  806e98:	d8800015 	stw	r2,0(sp)
  806e9c:	d809883a 	mov	r4,sp
  806ea0:	08019500 	call	801950 <__pack_d>
  806ea4:	1009883a 	mov	r4,r2
  806ea8:	180b883a 	mov	r5,r3
  806eac:	2005883a 	mov	r2,r4
  806eb0:	2807883a 	mov	r3,r5
  806eb4:	dfc00917 	ldw	ra,36(sp)
  806eb8:	dcc00817 	ldw	r19,32(sp)
  806ebc:	dc800717 	ldw	r18,28(sp)
  806ec0:	dc400617 	ldw	r17,24(sp)
  806ec4:	dc000517 	ldw	r16,20(sp)
  806ec8:	dec00a04 	addi	sp,sp,40
  806ecc:	f800283a 	ret
  806ed0:	00800f04 	movi	r2,60
  806ed4:	1807003a 	cmpeq	r3,r3,zero
  806ed8:	d8800215 	stw	r2,8(sp)
  806edc:	18001126 	beq	r3,zero,806f24 <__floatsidf+0xbc>
  806ee0:	0027883a 	mov	r19,zero
  806ee4:	2025883a 	mov	r18,r4
  806ee8:	d9000315 	stw	r4,12(sp)
  806eec:	dcc00415 	stw	r19,16(sp)
  806ef0:	08016a80 	call	8016a8 <__clzsi2>
  806ef4:	11000744 	addi	r4,r2,29
  806ef8:	013fe80e 	bge	zero,r4,806e9c <__floatsidf+0x34>
  806efc:	10bfff44 	addi	r2,r2,-3
  806f00:	10000c16 	blt	r2,zero,806f34 <__floatsidf+0xcc>
  806f04:	90a2983a 	sll	r17,r18,r2
  806f08:	0021883a 	mov	r16,zero
  806f0c:	d8800217 	ldw	r2,8(sp)
  806f10:	dc400415 	stw	r17,16(sp)
  806f14:	dc000315 	stw	r16,12(sp)
  806f18:	1105c83a 	sub	r2,r2,r4
  806f1c:	d8800215 	stw	r2,8(sp)
  806f20:	003fde06 	br	806e9c <__floatsidf+0x34>
  806f24:	00a00034 	movhi	r2,32768
  806f28:	20800a26 	beq	r4,r2,806f54 <__floatsidf+0xec>
  806f2c:	0109c83a 	sub	r4,zero,r4
  806f30:	003feb06 	br	806ee0 <__floatsidf+0x78>
  806f34:	9006d07a 	srli	r3,r18,1
  806f38:	008007c4 	movi	r2,31
  806f3c:	1105c83a 	sub	r2,r2,r4
  806f40:	1886d83a 	srl	r3,r3,r2
  806f44:	9922983a 	sll	r17,r19,r4
  806f48:	9120983a 	sll	r16,r18,r4
  806f4c:	1c62b03a 	or	r17,r3,r17
  806f50:	003fee06 	br	806f0c <__floatsidf+0xa4>
  806f54:	0009883a 	mov	r4,zero
  806f58:	01707834 	movhi	r5,49632
  806f5c:	003fd306 	br	806eac <__floatsidf+0x44>

00806f60 <__fixdfsi>:
  806f60:	defff804 	addi	sp,sp,-32
  806f64:	2005883a 	mov	r2,r4
  806f68:	2807883a 	mov	r3,r5
  806f6c:	d809883a 	mov	r4,sp
  806f70:	d9400204 	addi	r5,sp,8
  806f74:	d8c00115 	stw	r3,4(sp)
  806f78:	d8800015 	stw	r2,0(sp)
  806f7c:	dfc00715 	stw	ra,28(sp)
  806f80:	0801c640 	call	801c64 <__unpack_d>
  806f84:	d8c00217 	ldw	r3,8(sp)
  806f88:	00800084 	movi	r2,2
  806f8c:	1880051e 	bne	r3,r2,806fa4 <__fixdfsi+0x44>
  806f90:	0007883a 	mov	r3,zero
  806f94:	1805883a 	mov	r2,r3
  806f98:	dfc00717 	ldw	ra,28(sp)
  806f9c:	dec00804 	addi	sp,sp,32
  806fa0:	f800283a 	ret
  806fa4:	00800044 	movi	r2,1
  806fa8:	10fff92e 	bgeu	r2,r3,806f90 <__fixdfsi+0x30>
  806fac:	00800104 	movi	r2,4
  806fb0:	18800426 	beq	r3,r2,806fc4 <__fixdfsi+0x64>
  806fb4:	d8c00417 	ldw	r3,16(sp)
  806fb8:	183ff516 	blt	r3,zero,806f90 <__fixdfsi+0x30>
  806fbc:	00800784 	movi	r2,30
  806fc0:	10c0080e 	bge	r2,r3,806fe4 <__fixdfsi+0x84>
  806fc4:	d8800317 	ldw	r2,12(sp)
  806fc8:	1000121e 	bne	r2,zero,807014 <__fixdfsi+0xb4>
  806fcc:	00e00034 	movhi	r3,32768
  806fd0:	18ffffc4 	addi	r3,r3,-1
  806fd4:	1805883a 	mov	r2,r3
  806fd8:	dfc00717 	ldw	ra,28(sp)
  806fdc:	dec00804 	addi	sp,sp,32
  806fe0:	f800283a 	ret
  806fe4:	00800f04 	movi	r2,60
  806fe8:	10d1c83a 	sub	r8,r2,r3
  806fec:	40bff804 	addi	r2,r8,-32
  806ff0:	d9800517 	ldw	r6,20(sp)
  806ff4:	d9c00617 	ldw	r7,24(sp)
  806ff8:	10000816 	blt	r2,zero,80701c <__fixdfsi+0xbc>
  806ffc:	3888d83a 	srl	r4,r7,r2
  807000:	d8800317 	ldw	r2,12(sp)
  807004:	2007883a 	mov	r3,r4
  807008:	103fe226 	beq	r2,zero,806f94 <__fixdfsi+0x34>
  80700c:	0107c83a 	sub	r3,zero,r4
  807010:	003fe006 	br	806f94 <__fixdfsi+0x34>
  807014:	00e00034 	movhi	r3,32768
  807018:	003fde06 	br	806f94 <__fixdfsi+0x34>
  80701c:	39c7883a 	add	r3,r7,r7
  807020:	008007c4 	movi	r2,31
  807024:	1205c83a 	sub	r2,r2,r8
  807028:	1886983a 	sll	r3,r3,r2
  80702c:	3208d83a 	srl	r4,r6,r8
  807030:	1908b03a 	or	r4,r3,r4
  807034:	003ff206 	br	807000 <__fixdfsi+0xa0>

00807038 <udivmodsi4>:
  807038:	29001b2e 	bgeu	r5,r4,8070a8 <udivmodsi4+0x70>
  80703c:	28001a16 	blt	r5,zero,8070a8 <udivmodsi4+0x70>
  807040:	00800044 	movi	r2,1
  807044:	0007883a 	mov	r3,zero
  807048:	01c007c4 	movi	r7,31
  80704c:	00000306 	br	80705c <udivmodsi4+0x24>
  807050:	19c01326 	beq	r3,r7,8070a0 <udivmodsi4+0x68>
  807054:	18c00044 	addi	r3,r3,1
  807058:	28000416 	blt	r5,zero,80706c <udivmodsi4+0x34>
  80705c:	294b883a 	add	r5,r5,r5
  807060:	1085883a 	add	r2,r2,r2
  807064:	293ffa36 	bltu	r5,r4,807050 <udivmodsi4+0x18>
  807068:	10000d26 	beq	r2,zero,8070a0 <udivmodsi4+0x68>
  80706c:	0007883a 	mov	r3,zero
  807070:	21400236 	bltu	r4,r5,80707c <udivmodsi4+0x44>
  807074:	2149c83a 	sub	r4,r4,r5
  807078:	1886b03a 	or	r3,r3,r2
  80707c:	1004d07a 	srli	r2,r2,1
  807080:	280ad07a 	srli	r5,r5,1
  807084:	103ffa1e 	bne	r2,zero,807070 <udivmodsi4+0x38>
  807088:	30000226 	beq	r6,zero,807094 <udivmodsi4+0x5c>
  80708c:	2005883a 	mov	r2,r4
  807090:	f800283a 	ret
  807094:	1809883a 	mov	r4,r3
  807098:	2005883a 	mov	r2,r4
  80709c:	f800283a 	ret
  8070a0:	0007883a 	mov	r3,zero
  8070a4:	003ff806 	br	807088 <udivmodsi4+0x50>
  8070a8:	00800044 	movi	r2,1
  8070ac:	0007883a 	mov	r3,zero
  8070b0:	003fef06 	br	807070 <udivmodsi4+0x38>

008070b4 <__divsi3>:
  8070b4:	defffe04 	addi	sp,sp,-8
  8070b8:	dc000015 	stw	r16,0(sp)
  8070bc:	dfc00115 	stw	ra,4(sp)
  8070c0:	0021883a 	mov	r16,zero
  8070c4:	20000c16 	blt	r4,zero,8070f8 <__divsi3+0x44>
  8070c8:	000d883a 	mov	r6,zero
  8070cc:	28000e16 	blt	r5,zero,807108 <__divsi3+0x54>
  8070d0:	08070380 	call	807038 <udivmodsi4>
  8070d4:	1007883a 	mov	r3,r2
  8070d8:	8005003a 	cmpeq	r2,r16,zero
  8070dc:	1000011e 	bne	r2,zero,8070e4 <__divsi3+0x30>
  8070e0:	00c7c83a 	sub	r3,zero,r3
  8070e4:	1805883a 	mov	r2,r3
  8070e8:	dfc00117 	ldw	ra,4(sp)
  8070ec:	dc000017 	ldw	r16,0(sp)
  8070f0:	dec00204 	addi	sp,sp,8
  8070f4:	f800283a 	ret
  8070f8:	0109c83a 	sub	r4,zero,r4
  8070fc:	04000044 	movi	r16,1
  807100:	000d883a 	mov	r6,zero
  807104:	283ff20e 	bge	r5,zero,8070d0 <__divsi3+0x1c>
  807108:	014bc83a 	sub	r5,zero,r5
  80710c:	8021003a 	cmpeq	r16,r16,zero
  807110:	003fef06 	br	8070d0 <__divsi3+0x1c>

00807114 <__modsi3>:
  807114:	deffff04 	addi	sp,sp,-4
  807118:	dfc00015 	stw	ra,0(sp)
  80711c:	01800044 	movi	r6,1
  807120:	2807883a 	mov	r3,r5
  807124:	20000416 	blt	r4,zero,807138 <__modsi3+0x24>
  807128:	28000c16 	blt	r5,zero,80715c <__modsi3+0x48>
  80712c:	dfc00017 	ldw	ra,0(sp)
  807130:	dec00104 	addi	sp,sp,4
  807134:	08070381 	jmpi	807038 <udivmodsi4>
  807138:	0109c83a 	sub	r4,zero,r4
  80713c:	28000b16 	blt	r5,zero,80716c <__modsi3+0x58>
  807140:	180b883a 	mov	r5,r3
  807144:	01800044 	movi	r6,1
  807148:	08070380 	call	807038 <udivmodsi4>
  80714c:	0085c83a 	sub	r2,zero,r2
  807150:	dfc00017 	ldw	ra,0(sp)
  807154:	dec00104 	addi	sp,sp,4
  807158:	f800283a 	ret
  80715c:	014bc83a 	sub	r5,zero,r5
  807160:	dfc00017 	ldw	ra,0(sp)
  807164:	dec00104 	addi	sp,sp,4
  807168:	08070381 	jmpi	807038 <udivmodsi4>
  80716c:	0147c83a 	sub	r3,zero,r5
  807170:	003ff306 	br	807140 <__modsi3+0x2c>

00807174 <__udivsi3>:
  807174:	000d883a 	mov	r6,zero
  807178:	08070381 	jmpi	807038 <udivmodsi4>

0080717c <__umodsi3>:
  80717c:	01800044 	movi	r6,1
  807180:	08070381 	jmpi	807038 <udivmodsi4>

00807184 <__fpcmp_parts_d>:
  807184:	21800017 	ldw	r6,0(r4)
  807188:	00c00044 	movi	r3,1
  80718c:	19800a2e 	bgeu	r3,r6,8071b8 <__fpcmp_parts_d+0x34>
  807190:	28800017 	ldw	r2,0(r5)
  807194:	1880082e 	bgeu	r3,r2,8071b8 <__fpcmp_parts_d+0x34>
  807198:	00c00104 	movi	r3,4
  80719c:	30c02626 	beq	r6,r3,807238 <__fpcmp_parts_d+0xb4>
  8071a0:	10c02226 	beq	r2,r3,80722c <__fpcmp_parts_d+0xa8>
  8071a4:	00c00084 	movi	r3,2
  8071a8:	30c00526 	beq	r6,r3,8071c0 <__fpcmp_parts_d+0x3c>
  8071ac:	10c0071e 	bne	r2,r3,8071cc <__fpcmp_parts_d+0x48>
  8071b0:	20800117 	ldw	r2,4(r4)
  8071b4:	1000091e 	bne	r2,zero,8071dc <__fpcmp_parts_d+0x58>
  8071b8:	00800044 	movi	r2,1
  8071bc:	f800283a 	ret
  8071c0:	10c01a1e 	bne	r2,r3,80722c <__fpcmp_parts_d+0xa8>
  8071c4:	0005883a 	mov	r2,zero
  8071c8:	f800283a 	ret
  8071cc:	22000117 	ldw	r8,4(r4)
  8071d0:	28800117 	ldw	r2,4(r5)
  8071d4:	40800326 	beq	r8,r2,8071e4 <__fpcmp_parts_d+0x60>
  8071d8:	403ff726 	beq	r8,zero,8071b8 <__fpcmp_parts_d+0x34>
  8071dc:	00bfffc4 	movi	r2,-1
  8071e0:	f800283a 	ret
  8071e4:	20c00217 	ldw	r3,8(r4)
  8071e8:	28800217 	ldw	r2,8(r5)
  8071ec:	10fffa16 	blt	r2,r3,8071d8 <__fpcmp_parts_d+0x54>
  8071f0:	18800916 	blt	r3,r2,807218 <__fpcmp_parts_d+0x94>
  8071f4:	21c00417 	ldw	r7,16(r4)
  8071f8:	28c00417 	ldw	r3,16(r5)
  8071fc:	21800317 	ldw	r6,12(r4)
  807200:	28800317 	ldw	r2,12(r5)
  807204:	19fff436 	bltu	r3,r7,8071d8 <__fpcmp_parts_d+0x54>
  807208:	38c00526 	beq	r7,r3,807220 <__fpcmp_parts_d+0x9c>
  80720c:	38c00236 	bltu	r7,r3,807218 <__fpcmp_parts_d+0x94>
  807210:	19ffec1e 	bne	r3,r7,8071c4 <__fpcmp_parts_d+0x40>
  807214:	30bfeb2e 	bgeu	r6,r2,8071c4 <__fpcmp_parts_d+0x40>
  807218:	403fe71e 	bne	r8,zero,8071b8 <__fpcmp_parts_d+0x34>
  80721c:	003fef06 	br	8071dc <__fpcmp_parts_d+0x58>
  807220:	11bffa2e 	bgeu	r2,r6,80720c <__fpcmp_parts_d+0x88>
  807224:	403fe426 	beq	r8,zero,8071b8 <__fpcmp_parts_d+0x34>
  807228:	003fec06 	br	8071dc <__fpcmp_parts_d+0x58>
  80722c:	28800117 	ldw	r2,4(r5)
  807230:	103fe11e 	bne	r2,zero,8071b8 <__fpcmp_parts_d+0x34>
  807234:	003fe906 	br	8071dc <__fpcmp_parts_d+0x58>
  807238:	11bfdd1e 	bne	r2,r6,8071b0 <__fpcmp_parts_d+0x2c>
  80723c:	28c00117 	ldw	r3,4(r5)
  807240:	20800117 	ldw	r2,4(r4)
  807244:	1885c83a 	sub	r2,r3,r2
  807248:	f800283a 	ret

0080724c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80724c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807250:	01002074 	movhi	r4,129
  807254:	212f1204 	addi	r4,r4,-17336
  807258:	00c02074 	movhi	r3,129
  80725c:	18e88004 	addi	r3,r3,-24064
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  807260:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  807264:	20c00826 	beq	r4,r3,807288 <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807268:	01402074 	movhi	r5,129
  80726c:	296f1204 	addi	r5,r5,-17336
  {
    while( to != end )
  807270:	19400526 	beq	r3,r5,807288 <alt_load+0x3c>
    {
      *to++ = *from++;
  807274:	20800017 	ldw	r2,0(r4)
  807278:	21000104 	addi	r4,r4,4
  80727c:	18800015 	stw	r2,0(r3)
  807280:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807284:	28fffb1e 	bne	r5,r3,807274 <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807288:	01002034 	movhi	r4,128
  80728c:	21000804 	addi	r4,r4,32
  807290:	00c02034 	movhi	r3,128
  807294:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  807298:	20c00826 	beq	r4,r3,8072bc <alt_load+0x70>
  80729c:	01402034 	movhi	r5,128
  8072a0:	29406104 	addi	r5,r5,388
  {
    while( to != end )
  8072a4:	19400526 	beq	r3,r5,8072bc <alt_load+0x70>
    {
      *to++ = *from++;
  8072a8:	20800017 	ldw	r2,0(r4)
  8072ac:	21000104 	addi	r4,r4,4
  8072b0:	18800015 	stw	r2,0(r3)
  8072b4:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8072b8:	28fffb1e 	bne	r5,r3,8072a8 <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8072bc:	01002074 	movhi	r4,129
  8072c0:	2127d404 	addi	r4,r4,-24752
  8072c4:	00c02074 	movhi	r3,129
  8072c8:	18e7d404 	addi	r3,r3,-24752

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8072cc:	20c00826 	beq	r4,r3,8072f0 <alt_load+0xa4>
  8072d0:	01402074 	movhi	r5,129
  8072d4:	29688004 	addi	r5,r5,-24064
  {
    while( to != end )
  8072d8:	19400526 	beq	r3,r5,8072f0 <alt_load+0xa4>
    {
      *to++ = *from++;
  8072dc:	20800017 	ldw	r2,0(r4)
  8072e0:	21000104 	addi	r4,r4,4
  8072e4:	18800015 	stw	r2,0(r3)
  8072e8:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8072ec:	28fffb1e 	bne	r5,r3,8072dc <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8072f0:	0807dc00 	call	807dc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  8072f4:	dfc00017 	ldw	ra,0(sp)
  8072f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8072fc:	0807e481 	jmpi	807e48 <alt_icache_flush_all>

00807300 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  807300:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  807304:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  807308:	dfc00115 	stw	ra,4(sp)
  80730c:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  807310:	08075b40 	call	8075b4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  807314:	080755c0 	call	80755c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  807318:	01002074 	movhi	r4,129
  80731c:	21287904 	addi	r4,r4,-24092
  807320:	200b883a 	mov	r5,r4
  807324:	200d883a 	mov	r6,r4
  807328:	0807f780 	call	807f78 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80732c:	d126a417 	ldw	r4,-25968(gp)
  807330:	d166a517 	ldw	r5,-25964(gp)
  807334:	d1a6a617 	ldw	r6,-25960(gp)
  807338:	08004d40 	call	8004d4 <main>
  80733c:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  807340:	01000044 	movi	r4,1
  807344:	0807cd00 	call	807cd0 <close>
  exit (result);
  807348:	8809883a 	mov	r4,r17
  80734c:	08084040 	call	808404 <exit>

00807350 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
  807350:	f800283a 	ret

00807354 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
  807354:	f800283a 	ret

00807358 <alt_putstr>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  807358:	00802074 	movhi	r2,129
  80735c:	10af0404 	addi	r2,r2,-17392
  807360:	10c00017 	ldw	r3,0(r2)
  807364:	19400217 	ldw	r5,8(r3)
  807368:	08084b01 	jmpi	8084b0 <fputs>

0080736c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80736c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807370:	00bfff84 	movi	r2,-2
  807374:	2884703a 	and	r2,r5,r2
  807378:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80737c:	d0e00417 	ldw	r3,-32752(gp)
  807380:	00bfff04 	movi	r2,-4
  807384:	18c000c4 	addi	r3,r3,3
  807388:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80738c:	1909883a 	add	r4,r3,r4
  807390:	00804034 	movhi	r2,256
  807394:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807398:	d0e00415 	stw	r3,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80739c:	1100042e 	bgeu	r2,r4,8073b0 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8073a0:	2801703a 	wrctl	status,r5
  8073a4:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  8073a8:	1805883a 	mov	r2,r3
  8073ac:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  8073b0:	d1200415 	stw	r4,-32752(gp)
  8073b4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  8073b8:	1805883a 	mov	r2,r3
  8073bc:	f800283a 	ret

008073c0 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8073c0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8073c4:	00bfff84 	movi	r2,-2
  8073c8:	3084703a 	and	r2,r6,r2
  8073cc:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8073d0:	21400017 	ldw	r5,0(r4)
  8073d4:	20800117 	ldw	r2,4(r4)
  8073d8:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  8073dc:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8073e0:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  8073e4:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  8073e8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8073ec:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  8073f0:	f800283a 	ret

008073f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8073f4:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8073f8:	d0a6a817 	ldw	r2,-25952(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8073fc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  807400:	d4200517 	ldw	r16,-32748(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  807404:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  807408:	10800044 	addi	r2,r2,1
  80740c:	d4a00504 	addi	r18,gp,-32748
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  807410:	dfc00315 	stw	ra,12(sp)
  807414:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  807418:	d0a6a815 	stw	r2,-25952(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80741c:	84800d26 	beq	r16,r18,807454 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  807420:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  807424:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  807428:	10000326 	beq	r2,zero,807438 <alt_tick+0x44>
  80742c:	d0a6a817 	ldw	r2,-25952(gp)
  807430:	1000011e 	bne	r2,zero,807438 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  807434:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  807438:	d0e6a817 	ldw	r3,-25952(gp)
  80743c:	80800217 	ldw	r2,8(r16)
  807440:	18800236 	bltu	r3,r2,80744c <alt_tick+0x58>
  807444:	80800403 	ldbu	r2,16(r16)
  807448:	10000826 	beq	r2,zero,80746c <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  80744c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  807450:	84bff31e 	bne	r16,r18,807420 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  807454:	dfc00317 	ldw	ra,12(sp)
  807458:	dc800217 	ldw	r18,8(sp)
  80745c:	dc400117 	ldw	r17,4(sp)
  807460:	dc000017 	ldw	r16,0(sp)
  807464:	dec00404 	addi	sp,sp,16
  807468:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  80746c:	81000517 	ldw	r4,20(r16)
  807470:	80c00317 	ldw	r3,12(r16)
  807474:	183ee83a 	callr	r3
  807478:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80747c:	10000926 	beq	r2,zero,8074a4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  807480:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807484:	d0e6a817 	ldw	r3,-25952(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  807488:	2085883a 	add	r2,r4,r2
  80748c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807490:	10ffee2e 	bgeu	r2,r3,80744c <alt_tick+0x58>
        {
          alarm->rollover = 1;
  807494:	00800044 	movi	r2,1
  807498:	80800405 	stb	r2,16(r16)
  80749c:	8821883a 	mov	r16,r17
  8074a0:	003feb06 	br	807450 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8074a4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8074a8:	00bfff84 	movi	r2,-2
  8074ac:	2884703a 	and	r2,r5,r2
  8074b0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8074b4:	81000017 	ldw	r4,0(r16)
  8074b8:	80800117 	ldw	r2,4(r16)
  8074bc:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  8074c0:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8074c4:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  8074c8:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  8074cc:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8074d0:	2801703a 	wrctl	status,r5
  8074d4:	8821883a 	mov	r16,r17
  8074d8:	003fdd06 	br	807450 <alt_tick+0x5c>

008074dc <times>:
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8074dc:	00802074 	movhi	r2,129
  8074e0:	10b5ab04 	addi	r2,r2,-10580
  8074e4:	11400017 	ldw	r5,0(r2)
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  8074e8:	deffff04 	addi	sp,sp,-4
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8074ec:	00c02074 	movhi	r3,129
  8074f0:	18f5ac04 	addi	r3,r3,-10576
  8074f4:	dfc00015 	stw	ra,0(sp)
  8074f8:	18c00017 	ldw	r3,0(r3)
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8074fc:	28000f1e 	bne	r5,zero,80753c <times+0x60>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  807500:	00802074 	movhi	r2,129
  807504:	10af1004 	addi	r2,r2,-17344
  807508:	10800017 	ldw	r2,0(r2)
  80750c:	01002074 	movhi	r4,129
  807510:	2135a704 	addi	r4,r4,-10596
  807514:	10000226 	beq	r2,zero,807520 <times+0x44>
  807518:	103ee83a 	callr	r2
  80751c:	1009883a 	mov	r4,r2
  {
    ALT_ERRNO = ENOSYS;
  807520:	0007883a 	mov	r3,zero
  807524:	00801604 	movi	r2,88
  807528:	20800015 	stw	r2,0(r4)
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
  80752c:	1805883a 	mov	r2,r3
  807530:	dfc00017 	ldw	ra,0(sp)
  807534:	dec00104 	addi	sp,sp,4
  807538:	f800283a 	ret
  80753c:	1805883a 	mov	r2,r3
  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;
  807540:	20000315 	stw	zero,12(r4)
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  807544:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
  807548:	20c00115 	stw	r3,4(r4)
  buf->tms_cutime = 0;
  80754c:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;

  return ticks;
}
  807550:	dfc00017 	ldw	ra,0(sp)
  807554:	dec00104 	addi	sp,sp,4
  807558:	f800283a 	ret

0080755c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80755c:	defffe04 	addi	sp,sp,-8
  807560:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807564:	01c0fa04 	movi	r7,1000
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807568:	04002074 	movhi	r16,129
  80756c:	842a8c04 	addi	r16,r16,-21968
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807570:	01004034 	movhi	r4,256
  807574:	21040004 	addi	r4,r4,4096
  807578:	000b883a 	mov	r5,zero
  80757c:	01800044 	movi	r6,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807580:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807584:	0807bb00 	call	807bb0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807588:	8009883a 	mov	r4,r16
  80758c:	000b883a 	mov	r5,zero
  807590:	01800404 	movi	r6,16
  807594:	08076b00 	call	8076b0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807598:	813ff604 	addi	r4,r16,-40
  80759c:	01402074 	movhi	r5,129
  8075a0:	296f0d04 	addi	r5,r5,-17356
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  8075a4:	dfc00117 	ldw	ra,4(sp)
  8075a8:	dc000017 	ldw	r16,0(sp)
  8075ac:	dec00204 	addi	sp,sp,8
  8075b0:	0807dcc1 	jmpi	807dcc <alt_dev_llist_insert>

008075b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8075b4:	deffff04 	addi	sp,sp,-4
  8075b8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8075bc:	08082200 	call	808220 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8075c0:	00800044 	movi	r2,1
  8075c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8075c8:	dfc00017 	ldw	ra,0(sp)
  8075cc:	dec00104 	addi	sp,sp,4
  8075d0:	f800283a 	ret

008075d4 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8075d4:	21000017 	ldw	r4,0(r4)
  8075d8:	21000a04 	addi	r4,r4,40
  8075dc:	08078381 	jmpi	807838 <altera_avalon_jtag_uart_ioctl>

008075e0 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8075e0:	20800017 	ldw	r2,0(r4)
  8075e4:	21400217 	ldw	r5,8(r4)
  8075e8:	11000a04 	addi	r4,r2,40
  8075ec:	08076101 	jmpi	807610 <altera_avalon_jtag_uart_close>

008075f0 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8075f0:	20800017 	ldw	r2,0(r4)
  8075f4:	21c00217 	ldw	r7,8(r4)
  8075f8:	11000a04 	addi	r4,r2,40
  8075fc:	0807a2c1 	jmpi	807a2c <altera_avalon_jtag_uart_write>

00807600 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  807600:	20800017 	ldw	r2,0(r4)
  807604:	21c00217 	ldw	r7,8(r4)
  807608:	11000a04 	addi	r4,r2,40
  80760c:	08078c01 	jmpi	8078c0 <altera_avalon_jtag_uart_read>

00807610 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  807610:	2950000c 	andi	r5,r5,16384
  807614:	21800c17 	ldw	r6,48(r4)
  807618:	28000426 	beq	r5,zero,80762c <altera_avalon_jtag_uart_close+0x1c>
  80761c:	00000706 	br	80763c <altera_avalon_jtag_uart_close+0x2c>
  807620:	20c00917 	ldw	r3,36(r4)
  807624:	20800117 	ldw	r2,4(r4)
  807628:	1880022e 	bgeu	r3,r2,807634 <altera_avalon_jtag_uart_close+0x24>
  80762c:	20800d17 	ldw	r2,52(r4)
  807630:	11bffb1e 	bne	r2,r6,807620 <altera_avalon_jtag_uart_close+0x10>
  807634:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  807638:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80763c:	20800d17 	ldw	r2,52(r4)
  807640:	11bffc26 	beq	r2,r6,807634 <altera_avalon_jtag_uart_close+0x24>
  807644:	20c00117 	ldw	r3,4(r4)
  807648:	20800917 	ldw	r2,36(r4)
  80764c:	10fff92e 	bgeu	r2,r3,807634 <altera_avalon_jtag_uart_close+0x24>
  807650:	00bffd44 	movi	r2,-11
  807654:	f800283a 	ret

00807658 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  807658:	20c00017 	ldw	r3,0(r4)
  80765c:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  807660:	1081000c 	andi	r2,r2,1024
  807664:	10000a1e 	bne	r2,zero,807690 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807668:	20c00917 	ldw	r3,36(r4)
  80766c:	00a00034 	movhi	r2,32768
  807670:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  807674:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807678:	10c00136 	bltu	r2,r3,807680 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  80767c:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  807680:	00c02074 	movhi	r3,129
  807684:	18f5ab04 	addi	r3,r3,-10580
  807688:	18800017 	ldw	r2,0(r3)
  80768c:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  807690:	20800817 	ldw	r2,32(r4)
  807694:	10810014 	ori	r2,r2,1024
  807698:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80769c:	00c02074 	movhi	r3,129
  8076a0:	18f5ab04 	addi	r3,r3,-10580
  8076a4:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  8076a8:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8076ac:	f800283a 	ret

008076b0 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8076b0:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8076b4:	defffd04 	addi	sp,sp,-12
  8076b8:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8076bc:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8076c0:	2021883a 	mov	r16,r4
  8076c4:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8076c8:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8076cc:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8076d0:	2809883a 	mov	r4,r5
  8076d4:	800f883a 	mov	r7,r16
  8076d8:	300b883a 	mov	r5,r6
  8076dc:	01802034 	movhi	r6,128
  8076e0:	319dcc04 	addi	r6,r6,30512
  8076e4:	d8000015 	stw	zero,0(sp)
  8076e8:	0807eec0 	call	807eec <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8076ec:	00c02074 	movhi	r3,129
  8076f0:	18f5ab04 	addi	r3,r3,-10580
  8076f4:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8076f8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8076fc:	81000204 	addi	r4,r16,8
  807700:	01802034 	movhi	r6,128
  807704:	319d9604 	addi	r6,r6,30296
  807708:	800f883a 	mov	r7,r16
  80770c:	0807c3c0 	call	807c3c <alt_alarm_start>
  807710:	1000030e 	bge	r2,zero,807720 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  807714:	00a00034 	movhi	r2,32768
  807718:	10bfffc4 	addi	r2,r2,-1
  80771c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  807720:	dfc00217 	ldw	ra,8(sp)
  807724:	dc000117 	ldw	r16,4(sp)
  807728:	dec00304 	addi	sp,sp,12
  80772c:	f800283a 	ret

00807730 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  807730:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  807734:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  807738:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80773c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  807740:	4880c00c 	andi	r2,r9,768
  807744:	10003426 	beq	r2,zero,807818 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  807748:	4880400c 	andi	r2,r9,256
  80774c:	10001626 	beq	r2,zero,8077a8 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807750:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  807754:	2a000b17 	ldw	r8,44(r5)
  807758:	10800044 	addi	r2,r2,1
  80775c:	1081ffcc 	andi	r2,r2,2047
  807760:	12000c1e 	bne	r2,r8,807794 <altera_avalon_jtag_uart_irq+0x64>
  807764:	00002d06 	br	80781c <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807768:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80776c:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807770:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807774:	18c00044 	addi	r3,r3,1
  807778:	18c1ffcc 	andi	r3,r3,2047
  80777c:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807780:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807784:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  807788:	21000044 	addi	r4,r4,1
  80778c:	2101ffcc 	andi	r4,r4,2047
  807790:	22000326 	beq	r4,r8,8077a0 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  807794:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  807798:	30a0000c 	andi	r2,r6,32768
  80779c:	103ff21e 	bne	r2,zero,807768 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8077a0:	30bfffec 	andhi	r2,r6,65535
  8077a4:	10001d1e 	bne	r2,zero,80781c <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8077a8:	4880800c 	andi	r2,r9,512
  8077ac:	103fe326 	beq	r2,zero,80773c <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8077b0:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  8077b4:	20000b1e 	bne	r4,zero,8077e4 <altera_avalon_jtag_uart_irq+0xb4>
  8077b8:	003fe006 	br	80773c <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8077bc:	28800d17 	ldw	r2,52(r5)
  8077c0:	1145883a 	add	r2,r2,r5
  8077c4:	10c20e07 	ldb	r3,2104(r2)
  8077c8:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8077cc:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8077d0:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8077d4:	10800044 	addi	r2,r2,1
  8077d8:	1081ffcc 	andi	r2,r2,2047
  8077dc:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8077e0:	203fd626 	beq	r4,zero,80773c <altera_avalon_jtag_uart_irq+0xc>
  8077e4:	28c00d17 	ldw	r3,52(r5)
  8077e8:	28800c17 	ldw	r2,48(r5)
  8077ec:	18bff31e 	bne	r3,r2,8077bc <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8077f0:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8077f4:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8077f8:	00ffff44 	movi	r3,-3
  8077fc:	10c4703a 	and	r2,r2,r3
  807800:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807804:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  807808:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80780c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  807810:	4880c00c 	andi	r2,r9,768
  807814:	103fcc1e 	bne	r2,zero,807748 <altera_avalon_jtag_uart_irq+0x18>
  807818:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80781c:	28800817 	ldw	r2,32(r5)
  807820:	00ffff84 	movi	r3,-2
  807824:	10c4703a 	and	r2,r2,r3
  807828:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80782c:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  807830:	50c00037 	ldwio	r3,0(r10)
  807834:	003fdc06 	br	8077a8 <altera_avalon_jtag_uart_irq+0x78>

00807838 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  807838:	009a8044 	movi	r2,27137
  80783c:	28800f26 	beq	r5,r2,80787c <altera_avalon_jtag_uart_ioctl+0x44>
  807840:	009a8084 	movi	r2,27138
  807844:	28800326 	beq	r5,r2,807854 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  807848:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  80784c:	1805883a 	mov	r2,r3
  807850:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  807854:	21400117 	ldw	r5,4(r4)
  807858:	00a00034 	movhi	r2,32768
  80785c:	10bfffc4 	addi	r2,r2,-1
  807860:	28bff926 	beq	r5,r2,807848 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  807864:	20800917 	ldw	r2,36(r4)
  807868:	0007883a 	mov	r3,zero
  80786c:	1145803a 	cmpltu	r2,r2,r5
  807870:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  807874:	1805883a 	mov	r2,r3
  807878:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80787c:	20c00117 	ldw	r3,4(r4)
  807880:	00a00034 	movhi	r2,32768
  807884:	10bfffc4 	addi	r2,r2,-1
  807888:	18bfef26 	beq	r3,r2,807848 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80788c:	31800017 	ldw	r6,0(r6)
  807890:	10bfff44 	addi	r2,r2,-3
  807894:	30ffff84 	addi	r3,r6,-2
  807898:	10c00436 	bltu	r2,r3,8078ac <altera_avalon_jtag_uart_ioctl+0x74>
  80789c:	0007883a 	mov	r3,zero
  8078a0:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  8078a4:	1805883a 	mov	r2,r3
  8078a8:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8078ac:	01a00034 	movhi	r6,32768
  8078b0:	31bfff84 	addi	r6,r6,-2
  8078b4:	0007883a 	mov	r3,zero
  8078b8:	21800115 	stw	r6,4(r4)
  8078bc:	003ff906 	br	8078a4 <altera_avalon_jtag_uart_ioctl+0x6c>

008078c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8078c0:	defff404 	addi	sp,sp,-48
  8078c4:	dd400715 	stw	r21,28(sp)
  8078c8:	dcc00515 	stw	r19,20(sp)
  8078cc:	dfc00b15 	stw	ra,44(sp)
  8078d0:	df000a15 	stw	fp,40(sp)
  8078d4:	ddc00915 	stw	r23,36(sp)
  8078d8:	dd800815 	stw	r22,32(sp)
  8078dc:	dd000615 	stw	r20,24(sp)
  8078e0:	dc800415 	stw	r18,16(sp)
  8078e4:	dc400315 	stw	r17,12(sp)
  8078e8:	dc000215 	stw	r16,8(sp)
  8078ec:	302b883a 	mov	r21,r6
  8078f0:	2027883a 	mov	r19,r4
  8078f4:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8078f8:	0180480e 	bge	zero,r6,807a1c <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8078fc:	39d0000c 	andi	r7,r7,16384
  807900:	d9c00015 	stw	r7,0(sp)
  807904:	dd000117 	ldw	r20,4(sp)
  807908:	07020004 	movi	fp,2048
  80790c:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  807910:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  807914:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  807918:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  80791c:	b4400136 	bltu	r22,r17,807924 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  807920:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  807924:	a009883a 	mov	r4,r20
  807928:	bc4b883a 	add	r5,r23,r17
  80792c:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  807930:	80000826 	beq	r16,zero,807954 <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  807934:	ac002036 	bltu	r21,r16,8079b8 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  807938:	08027000 	call	802700 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80793c:	8445883a 	add	r2,r16,r17
  807940:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  807944:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807948:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80794c:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  807950:	057fef16 	blt	zero,r21,807910 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  807954:	d8800117 	ldw	r2,4(sp)
  807958:	a080231e 	bne	r20,r2,8079e8 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80795c:	d8c00017 	ldw	r3,0(sp)
  807960:	1800301e 	bne	r3,zero,807a24 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  807964:	98800a17 	ldw	r2,40(r19)
  807968:	b080031e 	bne	r22,r2,807978 <altera_avalon_jtag_uart_read+0xb8>
  80796c:	98c00917 	ldw	r3,36(r19)
  807970:	98800117 	ldw	r2,4(r19)
  807974:	18bffb36 	bltu	r3,r2,807964 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  807978:	98800a17 	ldw	r2,40(r19)
  80797c:	b0800126 	beq	r22,r2,807984 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807980:	057fe016 	blt	zero,r21,807904 <altera_avalon_jtag_uart_read+0x44>
  807984:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  807988:	dfc00b17 	ldw	ra,44(sp)
  80798c:	df000a17 	ldw	fp,40(sp)
  807990:	ddc00917 	ldw	r23,36(sp)
  807994:	dd800817 	ldw	r22,32(sp)
  807998:	dd400717 	ldw	r21,28(sp)
  80799c:	dd000617 	ldw	r20,24(sp)
  8079a0:	dcc00517 	ldw	r19,20(sp)
  8079a4:	dc800417 	ldw	r18,16(sp)
  8079a8:	dc400317 	ldw	r17,12(sp)
  8079ac:	dc000217 	ldw	r16,8(sp)
  8079b0:	dec00c04 	addi	sp,sp,48
  8079b4:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  8079b8:	99400e04 	addi	r5,r19,56
  8079bc:	a009883a 	mov	r4,r20
  8079c0:	a80d883a 	mov	r6,r21
  8079c4:	894b883a 	add	r5,r17,r5
  8079c8:	08027000 	call	802700 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8079cc:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8079d0:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  8079d4:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8079d8:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  8079dc:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8079e0:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8079e4:	a0bfdd26 	beq	r20,r2,80795c <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8079e8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8079ec:	00bfff84 	movi	r2,-2
  8079f0:	2084703a 	and	r2,r4,r2
  8079f4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8079f8:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8079fc:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807a00:	18c00054 	ori	r3,r3,1
  807a04:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807a08:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807a0c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  807a10:	d8c00117 	ldw	r3,4(sp)
  807a14:	a0c5c83a 	sub	r2,r20,r3
  807a18:	003fdb06 	br	807988 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  807a1c:	3890000c 	andi	r2,r7,16384
  807a20:	103fd826 	beq	r2,zero,807984 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807a24:	00bffd44 	movi	r2,-11
  807a28:	003fd706 	br	807988 <altera_avalon_jtag_uart_read+0xc8>

00807a2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  807a2c:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807a30:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  807a34:	ddc00715 	stw	r23,28(sp)
  807a38:	dd800615 	stw	r22,24(sp)
  807a3c:	dcc00315 	stw	r19,12(sp)
  807a40:	dc000015 	stw	r16,0(sp)
  807a44:	dfc00815 	stw	ra,32(sp)
  807a48:	dd400515 	stw	r21,20(sp)
  807a4c:	dd000415 	stw	r20,16(sp)
  807a50:	dc800215 	stw	r18,8(sp)
  807a54:	dc400115 	stw	r17,4(sp)
  807a58:	3027883a 	mov	r19,r6
  807a5c:	2021883a 	mov	r16,r4
  807a60:	282d883a 	mov	r22,r5
  807a64:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807a68:	40004926 	beq	r8,zero,807b90 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  807a6c:	3d50000c 	andi	r21,r7,16384
  807a70:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  807a74:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  807a78:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  807a7c:	91403d2e 	bgeu	r18,r5,807b74 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  807a80:	2c85c83a 	sub	r2,r5,r18
  807a84:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  807a88:	30002626 	beq	r6,zero,807b24 <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  807a8c:	3023883a 	mov	r17,r6
  807a90:	9980012e 	bgeu	r19,r6,807a98 <altera_avalon_jtag_uart_write+0x6c>
  807a94:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  807a98:	81020e04 	addi	r4,r16,2104
  807a9c:	a00b883a 	mov	r5,r20
  807aa0:	2489883a 	add	r4,r4,r18
  807aa4:	880d883a 	mov	r6,r17
  807aa8:	08027000 	call	802700 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807aac:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  807ab0:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807ab4:	18c1ffcc 	andi	r3,r3,2047
  807ab8:	9a000048 	cmpgei	r8,r19,1
  807abc:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  807ac0:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807ac4:	403feb1e 	bne	r8,zero,807a74 <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807ac8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807acc:	00bfff84 	movi	r2,-2
  807ad0:	2084703a 	and	r2,r4,r2
  807ad4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807ad8:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807adc:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807ae0:	18c00094 	ori	r3,r3,2
  807ae4:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807ae8:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807aec:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  807af0:	b5002926 	beq	r22,r20,807b98 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  807af4:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  807af8:	dfc00817 	ldw	ra,32(sp)
  807afc:	ddc00717 	ldw	r23,28(sp)
  807b00:	dd800617 	ldw	r22,24(sp)
  807b04:	dd400517 	ldw	r21,20(sp)
  807b08:	dd000417 	ldw	r20,16(sp)
  807b0c:	dcc00317 	ldw	r19,12(sp)
  807b10:	dc800217 	ldw	r18,8(sp)
  807b14:	dc400117 	ldw	r17,4(sp)
  807b18:	dc000017 	ldw	r16,0(sp)
  807b1c:	dec00904 	addi	sp,sp,36
  807b20:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807b24:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807b28:	00bfff84 	movi	r2,-2
  807b2c:	2084703a 	and	r2,r4,r2
  807b30:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807b34:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807b38:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807b3c:	18c00094 	ori	r3,r3,2
  807b40:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807b44:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807b48:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  807b4c:	a83fe81e 	bne	r21,zero,807af0 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  807b50:	80800d17 	ldw	r2,52(r16)
  807b54:	1140031e 	bne	r2,r5,807b64 <altera_avalon_jtag_uart_write+0x138>
  807b58:	80c00917 	ldw	r3,36(r16)
  807b5c:	80800117 	ldw	r2,4(r16)
  807b60:	18bffb36 	bltu	r3,r2,807b50 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  807b64:	80800d17 	ldw	r2,52(r16)
  807b68:	117fe126 	beq	r2,r5,807af0 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807b6c:	403fc11e 	bne	r8,zero,807a74 <altera_avalon_jtag_uart_write+0x48>
  807b70:	003fd506 	br	807ac8 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  807b74:	28000326 	beq	r5,zero,807b84 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  807b78:	00820004 	movi	r2,2048
  807b7c:	148dc83a 	sub	r6,r2,r18
  807b80:	003fc106 	br	807a88 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  807b84:	0081ffc4 	movi	r2,2047
  807b88:	148dc83a 	sub	r6,r2,r18
  807b8c:	003fbe06 	br	807a88 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807b90:	2829883a 	mov	r20,r5
  807b94:	003fcc06 	br	807ac8 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  807b98:	b890000c 	andi	r2,r23,16384
  807b9c:	1000021e 	bne	r2,zero,807ba8 <altera_avalon_jtag_uart_write+0x17c>
  807ba0:	00bffec4 	movi	r2,-5
  807ba4:	003fd406 	br	807af8 <altera_avalon_jtag_uart_write+0xcc>
  807ba8:	00bffd44 	movi	r2,-11
  807bac:	003fd206 	br	807af8 <altera_avalon_jtag_uart_write+0xcc>

00807bb0 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  807bb0:	02002074 	movhi	r8,129
  807bb4:	4235ab04 	addi	r8,r8,-10580
  807bb8:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  807bbc:	defffe04 	addi	sp,sp,-8
  807bc0:	3807883a 	mov	r3,r7
  807bc4:	dfc00115 	stw	ra,4(sp)
  807bc8:	200f883a 	mov	r7,r4
  807bcc:	1000011e 	bne	r2,zero,807bd4 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  807bd0:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  807bd4:	008001c4 	movi	r2,7
  807bd8:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  807bdc:	2809883a 	mov	r4,r5
  807be0:	300b883a 	mov	r5,r6
  807be4:	01802034 	movhi	r6,128
  807be8:	319f0004 	addi	r6,r6,31744
  807bec:	d8000015 	stw	zero,0(sp)
  807bf0:	0807eec0 	call	807eec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  807bf4:	dfc00117 	ldw	ra,4(sp)
  807bf8:	dec00204 	addi	sp,sp,8
  807bfc:	f800283a 	ret

00807c00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  807c00:	defffe04 	addi	sp,sp,-8
  807c04:	dfc00115 	stw	ra,4(sp)
  807c08:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  807c0c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  807c10:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c14:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c18:	00bfff84 	movi	r2,-2
  807c1c:	8084703a 	and	r2,r16,r2
  807c20:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  807c24:	08073f40 	call	8073f4 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c28:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  807c2c:	dfc00117 	ldw	ra,4(sp)
  807c30:	dc000017 	ldw	r16,0(sp)
  807c34:	dec00204 	addi	sp,sp,8
  807c38:	f800283a 	ret

00807c3c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  807c3c:	00802074 	movhi	r2,129
  807c40:	10b5ab04 	addi	r2,r2,-10580
  807c44:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  807c48:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  807c4c:	00bfde84 	movi	r2,-134
  807c50:	1800011e 	bne	r3,zero,807c58 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  807c54:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  807c58:	00bffa84 	movi	r2,-22
  807c5c:	203ffd26 	beq	r4,zero,807c54 <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  807c60:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  807c64:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c68:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c6c:	00bfff84 	movi	r2,-2
  807c70:	3084703a 	and	r2,r6,r2
  807c74:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  807c78:	00c02074 	movhi	r3,129
  807c7c:	18f5ac04 	addi	r3,r3,-10576
  807c80:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  807c84:	20800044 	addi	r2,r4,1
  807c88:	2885883a 	add	r2,r5,r2
  807c8c:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  807c90:	11000d2e 	bgeu	r2,r4,807cc8 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  807c94:	00800044 	movi	r2,1
  807c98:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807c9c:	00802074 	movhi	r2,129
  807ca0:	10af0904 	addi	r2,r2,-17372
  entry->next     = list->next;
  807ca4:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807ca8:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  807cac:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  807cb0:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  807cb4:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  807cb8:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807cbc:	3001703a 	wrctl	status,r6
  807cc0:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  807cc4:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  807cc8:	40000405 	stb	zero,16(r8)
  807ccc:	003ff306 	br	807c9c <alt_alarm_start+0x60>

00807cd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  807cd0:	defffd04 	addi	sp,sp,-12
  807cd4:	dc000015 	stw	r16,0(sp)
  807cd8:	dfc00215 	stw	ra,8(sp)
  807cdc:	dc400115 	stw	r17,4(sp)
  807ce0:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  807ce4:	20001516 	blt	r4,zero,807d3c <close+0x6c>
  807ce8:	20c00324 	muli	r3,r4,12
  807cec:	00802074 	movhi	r2,129
  807cf0:	10aea404 	addi	r2,r2,-17776
  807cf4:	1887883a 	add	r3,r3,r2

  if (fd)
  807cf8:	18001026 	beq	r3,zero,807d3c <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  807cfc:	18800017 	ldw	r2,0(r3)
  807d00:	10800417 	ldw	r2,16(r2)
  807d04:	10001c26 	beq	r2,zero,807d78 <close+0xa8>
  807d08:	1809883a 	mov	r4,r3
  807d0c:	103ee83a 	callr	r2
  807d10:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807d14:	8009883a 	mov	r4,r16
  807d18:	08081fc0 	call	8081fc <alt_release_fd>
    if (rval < 0)
  807d1c:	88001b16 	blt	r17,zero,807d8c <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807d20:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  807d24:	1805883a 	mov	r2,r3
  807d28:	dfc00217 	ldw	ra,8(sp)
  807d2c:	dc400117 	ldw	r17,4(sp)
  807d30:	dc000017 	ldw	r16,0(sp)
  807d34:	dec00304 	addi	sp,sp,12
  807d38:	f800283a 	ret
  807d3c:	00802074 	movhi	r2,129
  807d40:	10af1004 	addi	r2,r2,-17344
  807d44:	10800017 	ldw	r2,0(r2)
  807d48:	10000d26 	beq	r2,zero,807d80 <close+0xb0>
  807d4c:	103ee83a 	callr	r2
  807d50:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807d54:	00ffffc4 	movi	r3,-1
  807d58:	00801444 	movi	r2,81
  807d5c:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  807d60:	1805883a 	mov	r2,r3
  807d64:	dfc00217 	ldw	ra,8(sp)
  807d68:	dc400117 	ldw	r17,4(sp)
  807d6c:	dc000017 	ldw	r16,0(sp)
  807d70:	dec00304 	addi	sp,sp,12
  807d74:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807d78:	08081fc0 	call	8081fc <alt_release_fd>
  807d7c:	003fe806 	br	807d20 <close+0x50>
  807d80:	01002074 	movhi	r4,129
  807d84:	2135a704 	addi	r4,r4,-10596
  807d88:	003ff206 	br	807d54 <close+0x84>
  807d8c:	00802074 	movhi	r2,129
  807d90:	10af1004 	addi	r2,r2,-17344
  807d94:	10800017 	ldw	r2,0(r2)
  807d98:	10000626 	beq	r2,zero,807db4 <close+0xe4>
  807d9c:	103ee83a 	callr	r2
  807da0:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  807da4:	0445c83a 	sub	r2,zero,r17
  807da8:	00ffffc4 	movi	r3,-1
  807dac:	20800015 	stw	r2,0(r4)
  807db0:	003fdc06 	br	807d24 <close+0x54>
  807db4:	01002074 	movhi	r4,129
  807db8:	2135a704 	addi	r4,r4,-10596
  807dbc:	003ff906 	br	807da4 <close+0xd4>

00807dc0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807dc0:	f800283a 	ret

00807dc4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  807dc4:	3005883a 	mov	r2,r6
  807dc8:	f800283a 	ret

00807dcc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807dcc:	deffff04 	addi	sp,sp,-4
  807dd0:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  807dd4:	20000d26 	beq	r4,zero,807e0c <alt_dev_llist_insert+0x40>
  807dd8:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
  807ddc:	000d883a 	mov	r6,zero
  807de0:	10000a26 	beq	r2,zero,807e0c <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  807de4:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807de8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  807dec:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  807df0:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  807df4:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  807df8:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  807dfc:	3005883a 	mov	r2,r6
  807e00:	dfc00017 	ldw	ra,0(sp)
  807e04:	dec00104 	addi	sp,sp,4
  807e08:	f800283a 	ret
  807e0c:	00802074 	movhi	r2,129
  807e10:	10af1004 	addi	r2,r2,-17344
  807e14:	10800017 	ldw	r2,0(r2)
  807e18:	00c02074 	movhi	r3,129
  807e1c:	18f5a704 	addi	r3,r3,-10596
  807e20:	10000226 	beq	r2,zero,807e2c <alt_dev_llist_insert+0x60>
  807e24:	103ee83a 	callr	r2
  807e28:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  807e2c:	01bffa84 	movi	r6,-22
  807e30:	00800584 	movi	r2,22
  807e34:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  807e38:	3005883a 	mov	r2,r6
  807e3c:	dfc00017 	ldw	ra,0(sp)
  807e40:	dec00104 	addi	sp,sp,4
  807e44:	f800283a 	ret

00807e48 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807e48:	0009883a 	mov	r4,zero
  807e4c:	01420004 	movi	r5,2048
  807e50:	08083cc1 	jmpi	8083cc <alt_icache_flush>

00807e54 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807e54:	000530fa 	rdctl	r2,ienable
  807e58:	00c00044 	movi	r3,1
  807e5c:	1946983a 	sll	r3,r3,r5
  807e60:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  807e64:	1004c03a 	cmpne	r2,r2,zero
  807e68:	f800283a 	ret

00807e6c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e6c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e70:	00bfff84 	movi	r2,-2
  807e74:	3084703a 	and	r2,r6,r2
  807e78:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  807e7c:	01002074 	movhi	r4,129
  807e80:	2135ad04 	addi	r4,r4,-10572
  807e84:	00800044 	movi	r2,1
  807e88:	20c00017 	ldw	r3,0(r4)
  807e8c:	1144983a 	sll	r2,r2,r5
  807e90:	10c4b03a 	or	r2,r2,r3
  807e94:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807e98:	20c00017 	ldw	r3,0(r4)
  807e9c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ea0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  807ea4:	0005883a 	mov	r2,zero
  807ea8:	f800283a 	ret

00807eac <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807eac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807eb0:	00bfff84 	movi	r2,-2
  807eb4:	3084703a 	and	r2,r6,r2
  807eb8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  807ebc:	01002074 	movhi	r4,129
  807ec0:	2135ad04 	addi	r4,r4,-10572
  807ec4:	00bfff84 	movi	r2,-2
  807ec8:	20c00017 	ldw	r3,0(r4)
  807ecc:	1144183a 	rol	r2,r2,r5
  807ed0:	10c4703a 	and	r2,r2,r3
  807ed4:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807ed8:	20c00017 	ldw	r3,0(r4)
  807edc:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ee0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  807ee4:	0005883a 	mov	r2,zero
  807ee8:	f800283a 	ret

00807eec <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807eec:	0807ef01 	jmpi	807ef0 <alt_iic_isr_register>

00807ef0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807ef0:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807ef4:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807ef8:	dfc00115 	stw	ra,4(sp)
  807efc:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807f00:	023ffa84 	movi	r8,-22
  807f04:	1140050e 	bge	r2,r5,807f1c <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  807f08:	4005883a 	mov	r2,r8
  807f0c:	dfc00117 	ldw	ra,4(sp)
  807f10:	dc000017 	ldw	r16,0(sp)
  807f14:	dec00204 	addi	sp,sp,8
  807f18:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f1c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f20:	00bfff84 	movi	r2,-2
  807f24:	8084703a 	and	r2,r16,r2
  807f28:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  807f2c:	280690fa 	slli	r3,r5,3
  807f30:	00802074 	movhi	r2,129
  807f34:	10b5b804 	addi	r2,r2,-10528
  807f38:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  807f3c:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  807f40:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807f44:	30000826 	beq	r6,zero,807f68 <alt_iic_isr_register+0x78>
  807f48:	0807e6c0 	call	807e6c <alt_ic_irq_enable>
  807f4c:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f50:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  807f54:	4005883a 	mov	r2,r8
  807f58:	dfc00117 	ldw	ra,4(sp)
  807f5c:	dc000017 	ldw	r16,0(sp)
  807f60:	dec00204 	addi	sp,sp,8
  807f64:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807f68:	0807eac0 	call	807eac <alt_ic_irq_disable>
  807f6c:	1011883a 	mov	r8,r2
  807f70:	8001703a 	wrctl	status,r16
  807f74:	003ff706 	br	807f54 <alt_iic_isr_register+0x64>

00807f78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807f78:	defffd04 	addi	sp,sp,-12
  807f7c:	dc400115 	stw	r17,4(sp)
  807f80:	dc000015 	stw	r16,0(sp)
  807f84:	3023883a 	mov	r17,r6
  807f88:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807f8c:	01807fc4 	movi	r6,511
  807f90:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807f94:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807f98:	080807c0 	call	80807c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f9c:	10c00324 	muli	r3,r2,12
  807fa0:	01802074 	movhi	r6,129
  807fa4:	31aea404 	addi	r6,r6,-17776
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807fa8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fac:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  807fb0:	10000716 	blt	r2,zero,807fd0 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807fb4:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fb8:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  807fbc:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807fc0:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fc4:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  807fc8:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807fcc:	08081fc0 	call	8081fc <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807fd0:	8009883a 	mov	r4,r16
  807fd4:	000b883a 	mov	r5,zero
  807fd8:	01807fc4 	movi	r6,511
  807fdc:	080807c0 	call	80807c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fe0:	10c00324 	muli	r3,r2,12
  807fe4:	01802074 	movhi	r6,129
  807fe8:	31aea404 	addi	r6,r6,-17776
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807fec:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807ff0:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  807ff4:	10000716 	blt	r2,zero,808014 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807ff8:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807ffc:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  808000:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  808004:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808008:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  80800c:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  808010:	08081fc0 	call	8081fc <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  808014:	8809883a 	mov	r4,r17
  808018:	01400044 	movi	r5,1
  80801c:	01807fc4 	movi	r6,511
  808020:	080807c0 	call	80807c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808024:	10c00324 	muli	r3,r2,12
  808028:	01802074 	movhi	r6,129
  80802c:	31aea404 	addi	r6,r6,-17776
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  808030:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808034:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  808038:	10000b16 	blt	r2,zero,808068 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80803c:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808040:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  808044:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  808048:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80804c:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  808050:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  808054:	dfc00217 	ldw	ra,8(sp)
  808058:	dc400117 	ldw	r17,4(sp)
  80805c:	dc000017 	ldw	r16,0(sp)
  808060:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  808064:	08081fc1 	jmpi	8081fc <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  808068:	dfc00217 	ldw	ra,8(sp)
  80806c:	dc400117 	ldw	r17,4(sp)
  808070:	dc000017 	ldw	r16,0(sp)
  808074:	dec00304 	addi	sp,sp,12
  808078:	f800283a 	ret

0080807c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80807c:	defff904 	addi	sp,sp,-28
  808080:	dcc00315 	stw	r19,12(sp)
  808084:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808088:	01402074 	movhi	r5,129
  80808c:	296f0d04 	addi	r5,r5,-17356
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  808090:	dd400515 	stw	r21,20(sp)
  808094:	dd000415 	stw	r20,16(sp)
  808098:	dc400115 	stw	r17,4(sp)
  80809c:	dfc00615 	stw	ra,24(sp)
  8080a0:	dc800215 	stw	r18,8(sp)
  8080a4:	dc000015 	stw	r16,0(sp)
  8080a8:	302b883a 	mov	r21,r6
  8080ac:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8080b0:	08082280 	call	808228 <alt_find_dev>
  8080b4:	1023883a 	mov	r17,r2
  8080b8:	10004726 	beq	r2,zero,8081d8 <open+0x15c>
  8080bc:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  8080c0:	8809883a 	mov	r4,r17
  8080c4:	080836c0 	call	80836c <alt_get_fd>
  8080c8:	1021883a 	mov	r16,r2
  8080cc:	10002d16 	blt	r2,zero,808184 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  8080d0:	10800324 	muli	r2,r2,12
  8080d4:	01402074 	movhi	r5,129
  8080d8:	296ea404 	addi	r5,r5,-17776
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8080dc:	00d00034 	movhi	r3,16384
  8080e0:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  8080e4:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8080e8:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8080ec:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8080f0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8080f4:	1000121e 	bne	r2,zero,808140 <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8080f8:	00802074 	movhi	r2,129
  8080fc:	10af0f04 	addi	r2,r2,-17348
  808100:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808104:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  808108:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80810c:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  808110:	20800215 	stw	r2,8(r4)
  808114:	00000206 	br	808120 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  808118:	29400304 	addi	r5,r5,12
  80811c:	38c00836 	bltu	r7,r3,808140 <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808120:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  808124:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808128:	11bffb1e 	bne	r2,r6,808118 <open+0x9c>
  80812c:	28800217 	ldw	r2,8(r5)
  808130:	103ff90e 	bge	r2,zero,808118 <open+0x9c>
  808134:	293ff826 	beq	r5,r4,808118 <open+0x9c>
  808138:	04400344 	movi	r17,13
  80813c:	00001206 	br	808188 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  808140:	88800317 	ldw	r2,12(r17)
  808144:	10000526 	beq	r2,zero,80815c <open+0xe0>
  808148:	a00b883a 	mov	r5,r20
  80814c:	980d883a 	mov	r6,r19
  808150:	a80f883a 	mov	r7,r21
  808154:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  808158:	10001516 	blt	r2,zero,8081b0 <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  80815c:	8005883a 	mov	r2,r16
  808160:	dfc00617 	ldw	ra,24(sp)
  808164:	dd400517 	ldw	r21,20(sp)
  808168:	dd000417 	ldw	r20,16(sp)
  80816c:	dcc00317 	ldw	r19,12(sp)
  808170:	dc800217 	ldw	r18,8(sp)
  808174:	dc400117 	ldw	r17,4(sp)
  808178:	dc000017 	ldw	r16,0(sp)
  80817c:	dec00704 	addi	sp,sp,28
  808180:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  808184:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  808188:	8009883a 	mov	r4,r16
  80818c:	08081fc0 	call	8081fc <alt_release_fd>
  808190:	00802074 	movhi	r2,129
  808194:	10af1004 	addi	r2,r2,-17344
  808198:	10800017 	ldw	r2,0(r2)
  80819c:	10000b26 	beq	r2,zero,8081cc <open+0x150>
  8081a0:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  8081a4:	043fffc4 	movi	r16,-1
  8081a8:	14400015 	stw	r17,0(r2)
  8081ac:	003feb06 	br	80815c <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  8081b0:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8081b4:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  8081b8:	08081fc0 	call	8081fc <alt_release_fd>
  8081bc:	00802074 	movhi	r2,129
  8081c0:	10af1004 	addi	r2,r2,-17344
  8081c4:	10800017 	ldw	r2,0(r2)
  8081c8:	103ff51e 	bne	r2,zero,8081a0 <open+0x124>
  8081cc:	00802074 	movhi	r2,129
  8081d0:	10b5a704 	addi	r2,r2,-10596
  8081d4:	003ff306 	br	8081a4 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8081d8:	a009883a 	mov	r4,r20
  8081dc:	08082bc0 	call	8082bc <alt_find_file>
  8081e0:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8081e4:	10000226 	beq	r2,zero,8081f0 <open+0x174>
  8081e8:	04800044 	movi	r18,1
  8081ec:	003fb406 	br	8080c0 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  8081f0:	043fffc4 	movi	r16,-1
  8081f4:	044004c4 	movi	r17,19
  8081f8:	003fe306 	br	808188 <open+0x10c>

008081fc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  8081fc:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  808200:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  808204:	1100050e 	bge	r2,r4,80821c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  808208:	00802074 	movhi	r2,129
  80820c:	10aea404 	addi	r2,r2,-17776
  808210:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  808214:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  808218:	10000215 	stw	zero,8(r2)
  80821c:	f800283a 	ret

00808220 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  808220:	000170fa 	wrctl	ienable,zero
}
  808224:	f800283a 	ret

00808228 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  808228:	defffb04 	addi	sp,sp,-20
  80822c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  808230:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  808234:	dcc00315 	stw	r19,12(sp)
  808238:	dc400115 	stw	r17,4(sp)
  80823c:	dfc00415 	stw	ra,16(sp)
  808240:	2823883a 	mov	r17,r5
  808244:	dc800215 	stw	r18,8(sp)
  808248:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  80824c:	0808ac00 	call	808ac0 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808250:	84401126 	beq	r16,r17,808298 <alt_find_dev+0x70>
  808254:	14800044 	addi	r18,r2,1
  808258:	00000206 	br	808264 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  80825c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808260:	84400d26 	beq	r16,r17,808298 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  808264:	81000217 	ldw	r4,8(r16)
  808268:	980b883a 	mov	r5,r19
  80826c:	900d883a 	mov	r6,r18
  808270:	0808a4c0 	call	808a4c <memcmp>
  808274:	103ff91e 	bne	r2,zero,80825c <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  808278:	8005883a 	mov	r2,r16
  80827c:	dfc00417 	ldw	ra,16(sp)
  808280:	dcc00317 	ldw	r19,12(sp)
  808284:	dc800217 	ldw	r18,8(sp)
  808288:	dc400117 	ldw	r17,4(sp)
  80828c:	dc000017 	ldw	r16,0(sp)
  808290:	dec00504 	addi	sp,sp,20
  808294:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808298:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  80829c:	8005883a 	mov	r2,r16
  8082a0:	dfc00417 	ldw	ra,16(sp)
  8082a4:	dcc00317 	ldw	r19,12(sp)
  8082a8:	dc800217 	ldw	r18,8(sp)
  8082ac:	dc400117 	ldw	r17,4(sp)
  8082b0:	dc000017 	ldw	r16,0(sp)
  8082b4:	dec00504 	addi	sp,sp,20
  8082b8:	f800283a 	ret

008082bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8082bc:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8082c0:	00802074 	movhi	r2,129
  8082c4:	10af0b04 	addi	r2,r2,-17364
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8082c8:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8082cc:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8082d0:	dd000415 	stw	r20,16(sp)
  8082d4:	dc800215 	stw	r18,8(sp)
  8082d8:	dfc00515 	stw	ra,20(sp)
  8082dc:	dcc00315 	stw	r19,12(sp)
  8082e0:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8082e4:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8082e8:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8082ec:	80801526 	beq	r16,r2,808344 <alt_find_file+0x88>
  8082f0:	04c00bc4 	movi	r19,47
  8082f4:	00000806 	br	808318 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8082f8:	3485883a 	add	r2,r6,r18
  8082fc:	10800007 	ldb	r2,0(r2)
  808300:	14c00126 	beq	r2,r19,808308 <alt_find_file+0x4c>
  808304:	1000021e 	bne	r2,zero,808310 <alt_find_file+0x54>
  808308:	0808a4c0 	call	808a4c <memcmp>
  80830c:	10000e26 	beq	r2,zero,808348 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  808310:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  808314:	85000b26 	beq	r16,r20,808344 <alt_find_file+0x88>
  {
    len = strlen(next->name);
  808318:	84400217 	ldw	r17,8(r16)
  80831c:	8809883a 	mov	r4,r17
  808320:	0808ac00 	call	808ac0 <strlen>
  808324:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  808328:	8885883a 	add	r2,r17,r2
  80832c:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  808330:	8809883a 	mov	r4,r17
  808334:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  808338:	1cffef1e 	bne	r3,r19,8082f8 <alt_find_file+0x3c>
    {
      len -= 1;
  80833c:	31bfffc4 	addi	r6,r6,-1
  808340:	003fed06 	br	8082f8 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  808344:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  808348:	8005883a 	mov	r2,r16
  80834c:	dfc00517 	ldw	ra,20(sp)
  808350:	dd000417 	ldw	r20,16(sp)
  808354:	dcc00317 	ldw	r19,12(sp)
  808358:	dc800217 	ldw	r18,8(sp)
  80835c:	dc400117 	ldw	r17,4(sp)
  808360:	dc000017 	ldw	r16,0(sp)
  808364:	dec00604 	addi	sp,sp,24
  808368:	f800283a 	ret

0080836c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80836c:	01402074 	movhi	r5,129
  808370:	296ea404 	addi	r5,r5,-17776
  808374:	0007883a 	mov	r3,zero
  808378:	01c00804 	movi	r7,32
  80837c:	280d883a 	mov	r6,r5
  808380:	00000306 	br	808390 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  808384:	18c00044 	addi	r3,r3,1
  808388:	31800304 	addi	r6,r6,12
  80838c:	19c00d26 	beq	r3,r7,8083c4 <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  808390:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  808394:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  808398:	103ffa1e 	bne	r2,zero,808384 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  80839c:	01402074 	movhi	r5,129
  8083a0:	296f0f04 	addi	r5,r5,-17348
  8083a4:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  8083a8:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  8083ac:	10c0030e 	bge	r2,r3,8083bc <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  8083b0:	1805883a 	mov	r2,r3
  8083b4:	28c00015 	stw	r3,0(r5)
  8083b8:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  8083bc:	1805883a 	mov	r2,r3
  8083c0:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8083c4:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  8083c8:	f800283a 	ret

008083cc <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  8083cc:	00820004 	movi	r2,2048
  8083d0:	2007883a 	mov	r3,r4
  8083d4:	1140012e 	bgeu	r2,r5,8083dc <alt_icache_flush+0x10>
  8083d8:	100b883a 	mov	r5,r2
  8083dc:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8083e0:	1940032e 	bgeu	r3,r5,8083f0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8083e4:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8083e8:	18c00804 	addi	r3,r3,32
  8083ec:	197ffd36 	bltu	r3,r5,8083e4 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8083f0:	208007cc 	andi	r2,r4,31
  8083f4:	10000126 	beq	r2,zero,8083fc <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8083f8:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8083fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  808400:	f800283a 	ret

00808404 <exit>:
  808404:	defffe04 	addi	sp,sp,-8
  808408:	000b883a 	mov	r5,zero
  80840c:	dc000015 	stw	r16,0(sp)
  808410:	dfc00115 	stw	ra,4(sp)
  808414:	2021883a 	mov	r16,r4
  808418:	0808c740 	call	808c74 <__call_exitprocs>
  80841c:	00802074 	movhi	r2,129
  808420:	10af0504 	addi	r2,r2,-17388
  808424:	11000017 	ldw	r4,0(r2)
  808428:	20800f17 	ldw	r2,60(r4)
  80842c:	10000126 	beq	r2,zero,808434 <exit+0x30>
  808430:	103ee83a 	callr	r2
  808434:	8009883a 	mov	r4,r16
  808438:	0809b540 	call	809b54 <_exit>

0080843c <_fputs_r>:
  80843c:	defff804 	addi	sp,sp,-32
  808440:	dc000515 	stw	r16,20(sp)
  808444:	2021883a 	mov	r16,r4
  808448:	2809883a 	mov	r4,r5
  80844c:	dc400615 	stw	r17,24(sp)
  808450:	dfc00715 	stw	ra,28(sp)
  808454:	3023883a 	mov	r17,r6
  808458:	d9400015 	stw	r5,0(sp)
  80845c:	0808ac00 	call	808ac0 <strlen>
  808460:	00c00044 	movi	r3,1
  808464:	d8800115 	stw	r2,4(sp)
  808468:	d8c00315 	stw	r3,12(sp)
  80846c:	d8800415 	stw	r2,16(sp)
  808470:	dec00215 	stw	sp,8(sp)
  808474:	80000326 	beq	r16,zero,808484 <_fputs_r+0x48>
  808478:	80800e17 	ldw	r2,56(r16)
  80847c:	8009883a 	mov	r4,r16
  808480:	10000926 	beq	r2,zero,8084a8 <_fputs_r+0x6c>
  808484:	8009883a 	mov	r4,r16
  808488:	880b883a 	mov	r5,r17
  80848c:	d9800204 	addi	r6,sp,8
  808490:	08084cc0 	call	8084cc <__sfvwrite_r>
  808494:	dfc00717 	ldw	ra,28(sp)
  808498:	dc400617 	ldw	r17,24(sp)
  80849c:	dc000517 	ldw	r16,20(sp)
  8084a0:	dec00804 	addi	sp,sp,32
  8084a4:	f800283a 	ret
  8084a8:	08090bc0 	call	8090bc <__sinit>
  8084ac:	003ff506 	br	808484 <_fputs_r+0x48>

008084b0 <fputs>:
  8084b0:	01802074 	movhi	r6,129
  8084b4:	31af0404 	addi	r6,r6,-17392
  8084b8:	2007883a 	mov	r3,r4
  8084bc:	31000017 	ldw	r4,0(r6)
  8084c0:	280d883a 	mov	r6,r5
  8084c4:	180b883a 	mov	r5,r3
  8084c8:	080843c1 	jmpi	80843c <_fputs_r>

008084cc <__sfvwrite_r>:
  8084cc:	30800217 	ldw	r2,8(r6)
  8084d0:	defff504 	addi	sp,sp,-44
  8084d4:	df000915 	stw	fp,36(sp)
  8084d8:	dd800715 	stw	r22,28(sp)
  8084dc:	dc800315 	stw	r18,12(sp)
  8084e0:	dfc00a15 	stw	ra,40(sp)
  8084e4:	ddc00815 	stw	r23,32(sp)
  8084e8:	dd400615 	stw	r21,24(sp)
  8084ec:	dd000515 	stw	r20,20(sp)
  8084f0:	dcc00415 	stw	r19,16(sp)
  8084f4:	dc400215 	stw	r17,8(sp)
  8084f8:	dc000115 	stw	r16,4(sp)
  8084fc:	302d883a 	mov	r22,r6
  808500:	2039883a 	mov	fp,r4
  808504:	2825883a 	mov	r18,r5
  808508:	10001c26 	beq	r2,zero,80857c <__sfvwrite_r+0xb0>
  80850c:	29c0030b 	ldhu	r7,12(r5)
  808510:	3880020c 	andi	r2,r7,8
  808514:	10002726 	beq	r2,zero,8085b4 <__sfvwrite_r+0xe8>
  808518:	28800417 	ldw	r2,16(r5)
  80851c:	10002526 	beq	r2,zero,8085b4 <__sfvwrite_r+0xe8>
  808520:	3880008c 	andi	r2,r7,2
  808524:	b5400017 	ldw	r21,0(r22)
  808528:	10002826 	beq	r2,zero,8085cc <__sfvwrite_r+0x100>
  80852c:	0021883a 	mov	r16,zero
  808530:	0023883a 	mov	r17,zero
  808534:	880d883a 	mov	r6,r17
  808538:	e009883a 	mov	r4,fp
  80853c:	00810004 	movi	r2,1024
  808540:	80006e26 	beq	r16,zero,8086fc <__sfvwrite_r+0x230>
  808544:	800f883a 	mov	r7,r16
  808548:	91400717 	ldw	r5,28(r18)
  80854c:	1400012e 	bgeu	r2,r16,808554 <__sfvwrite_r+0x88>
  808550:	100f883a 	mov	r7,r2
  808554:	90c00917 	ldw	r3,36(r18)
  808558:	183ee83a 	callr	r3
  80855c:	1007883a 	mov	r3,r2
  808560:	80a1c83a 	sub	r16,r16,r2
  808564:	88a3883a 	add	r17,r17,r2
  808568:	00806d0e 	bge	zero,r2,808720 <__sfvwrite_r+0x254>
  80856c:	b0800217 	ldw	r2,8(r22)
  808570:	10c5c83a 	sub	r2,r2,r3
  808574:	b0800215 	stw	r2,8(r22)
  808578:	103fee1e 	bne	r2,zero,808534 <__sfvwrite_r+0x68>
  80857c:	0009883a 	mov	r4,zero
  808580:	2005883a 	mov	r2,r4
  808584:	dfc00a17 	ldw	ra,40(sp)
  808588:	df000917 	ldw	fp,36(sp)
  80858c:	ddc00817 	ldw	r23,32(sp)
  808590:	dd800717 	ldw	r22,28(sp)
  808594:	dd400617 	ldw	r21,24(sp)
  808598:	dd000517 	ldw	r20,20(sp)
  80859c:	dcc00417 	ldw	r19,16(sp)
  8085a0:	dc800317 	ldw	r18,12(sp)
  8085a4:	dc400217 	ldw	r17,8(sp)
  8085a8:	dc000117 	ldw	r16,4(sp)
  8085ac:	dec00b04 	addi	sp,sp,44
  8085b0:	f800283a 	ret
  8085b4:	0808b340 	call	808b34 <__swsetup_r>
  8085b8:	1000e41e 	bne	r2,zero,80894c <__sfvwrite_r+0x480>
  8085bc:	91c0030b 	ldhu	r7,12(r18)
  8085c0:	b5400017 	ldw	r21,0(r22)
  8085c4:	3880008c 	andi	r2,r7,2
  8085c8:	103fd81e 	bne	r2,zero,80852c <__sfvwrite_r+0x60>
  8085cc:	3880004c 	andi	r2,r7,1
  8085d0:	1005003a 	cmpeq	r2,r2,zero
  8085d4:	10005726 	beq	r2,zero,808734 <__sfvwrite_r+0x268>
  8085d8:	0029883a 	mov	r20,zero
  8085dc:	002f883a 	mov	r23,zero
  8085e0:	a0004226 	beq	r20,zero,8086ec <__sfvwrite_r+0x220>
  8085e4:	3880800c 	andi	r2,r7,512
  8085e8:	94000217 	ldw	r16,8(r18)
  8085ec:	10008b26 	beq	r2,zero,80881c <__sfvwrite_r+0x350>
  8085f0:	800d883a 	mov	r6,r16
  8085f4:	a400a536 	bltu	r20,r16,80888c <__sfvwrite_r+0x3c0>
  8085f8:	3881200c 	andi	r2,r7,1152
  8085fc:	10002726 	beq	r2,zero,80869c <__sfvwrite_r+0x1d0>
  808600:	90800517 	ldw	r2,20(r18)
  808604:	92000417 	ldw	r8,16(r18)
  808608:	91400017 	ldw	r5,0(r18)
  80860c:	1087883a 	add	r3,r2,r2
  808610:	1887883a 	add	r3,r3,r2
  808614:	1808d7fa 	srli	r4,r3,31
  808618:	2a21c83a 	sub	r16,r5,r8
  80861c:	80800044 	addi	r2,r16,1
  808620:	20c9883a 	add	r4,r4,r3
  808624:	2027d07a 	srai	r19,r4,1
  808628:	a085883a 	add	r2,r20,r2
  80862c:	980d883a 	mov	r6,r19
  808630:	9880022e 	bgeu	r19,r2,80863c <__sfvwrite_r+0x170>
  808634:	1027883a 	mov	r19,r2
  808638:	100d883a 	mov	r6,r2
  80863c:	3881000c 	andi	r2,r7,1024
  808640:	1000b826 	beq	r2,zero,808924 <__sfvwrite_r+0x458>
  808644:	300b883a 	mov	r5,r6
  808648:	e009883a 	mov	r4,fp
  80864c:	0801fc00 	call	801fc0 <_malloc_r>
  808650:	10003126 	beq	r2,zero,808718 <__sfvwrite_r+0x24c>
  808654:	91400417 	ldw	r5,16(r18)
  808658:	1009883a 	mov	r4,r2
  80865c:	800d883a 	mov	r6,r16
  808660:	1023883a 	mov	r17,r2
  808664:	08027000 	call	802700 <memcpy>
  808668:	90c0030b 	ldhu	r3,12(r18)
  80866c:	00beffc4 	movi	r2,-1025
  808670:	1886703a 	and	r3,r3,r2
  808674:	18c02014 	ori	r3,r3,128
  808678:	90c0030d 	sth	r3,12(r18)
  80867c:	9c07c83a 	sub	r3,r19,r16
  808680:	8c05883a 	add	r2,r17,r16
  808684:	a00d883a 	mov	r6,r20
  808688:	a021883a 	mov	r16,r20
  80868c:	90800015 	stw	r2,0(r18)
  808690:	90c00215 	stw	r3,8(r18)
  808694:	94400415 	stw	r17,16(r18)
  808698:	94c00515 	stw	r19,20(r18)
  80869c:	91000017 	ldw	r4,0(r18)
  8086a0:	b80b883a 	mov	r5,r23
  8086a4:	a023883a 	mov	r17,r20
  8086a8:	08065fc0 	call	8065fc <memmove>
  8086ac:	90c00217 	ldw	r3,8(r18)
  8086b0:	90800017 	ldw	r2,0(r18)
  8086b4:	a027883a 	mov	r19,r20
  8086b8:	1c07c83a 	sub	r3,r3,r16
  8086bc:	1405883a 	add	r2,r2,r16
  8086c0:	90c00215 	stw	r3,8(r18)
  8086c4:	a021883a 	mov	r16,r20
  8086c8:	90800015 	stw	r2,0(r18)
  8086cc:	b0800217 	ldw	r2,8(r22)
  8086d0:	1405c83a 	sub	r2,r2,r16
  8086d4:	b0800215 	stw	r2,8(r22)
  8086d8:	103fa826 	beq	r2,zero,80857c <__sfvwrite_r+0xb0>
  8086dc:	a469c83a 	sub	r20,r20,r17
  8086e0:	91c0030b 	ldhu	r7,12(r18)
  8086e4:	bcef883a 	add	r23,r23,r19
  8086e8:	a03fbe1e 	bne	r20,zero,8085e4 <__sfvwrite_r+0x118>
  8086ec:	adc00017 	ldw	r23,0(r21)
  8086f0:	ad000117 	ldw	r20,4(r21)
  8086f4:	ad400204 	addi	r21,r21,8
  8086f8:	003fb906 	br	8085e0 <__sfvwrite_r+0x114>
  8086fc:	ac400017 	ldw	r17,0(r21)
  808700:	ac000117 	ldw	r16,4(r21)
  808704:	ad400204 	addi	r21,r21,8
  808708:	003f8a06 	br	808534 <__sfvwrite_r+0x68>
  80870c:	91400417 	ldw	r5,16(r18)
  808710:	e009883a 	mov	r4,fp
  808714:	08033f40 	call	8033f4 <_free_r>
  808718:	00800304 	movi	r2,12
  80871c:	e0800015 	stw	r2,0(fp)
  808720:	9080030b 	ldhu	r2,12(r18)
  808724:	013fffc4 	movi	r4,-1
  808728:	10801014 	ori	r2,r2,64
  80872c:	9080030d 	sth	r2,12(r18)
  808730:	003f9306 	br	808580 <__sfvwrite_r+0xb4>
  808734:	0027883a 	mov	r19,zero
  808738:	002f883a 	mov	r23,zero
  80873c:	d8000015 	stw	zero,0(sp)
  808740:	0029883a 	mov	r20,zero
  808744:	98001e26 	beq	r19,zero,8087c0 <__sfvwrite_r+0x2f4>
  808748:	d8c00017 	ldw	r3,0(sp)
  80874c:	1804c03a 	cmpne	r2,r3,zero
  808750:	10005e26 	beq	r2,zero,8088cc <__sfvwrite_r+0x400>
  808754:	9821883a 	mov	r16,r19
  808758:	a4c0012e 	bgeu	r20,r19,808760 <__sfvwrite_r+0x294>
  80875c:	a021883a 	mov	r16,r20
  808760:	91000017 	ldw	r4,0(r18)
  808764:	90800417 	ldw	r2,16(r18)
  808768:	91800217 	ldw	r6,8(r18)
  80876c:	91c00517 	ldw	r7,20(r18)
  808770:	1100022e 	bgeu	r2,r4,80877c <__sfvwrite_r+0x2b0>
  808774:	31e3883a 	add	r17,r6,r7
  808778:	8c001616 	blt	r17,r16,8087d4 <__sfvwrite_r+0x308>
  80877c:	81c03816 	blt	r16,r7,808860 <__sfvwrite_r+0x394>
  808780:	90c00917 	ldw	r3,36(r18)
  808784:	91400717 	ldw	r5,28(r18)
  808788:	e009883a 	mov	r4,fp
  80878c:	b80d883a 	mov	r6,r23
  808790:	183ee83a 	callr	r3
  808794:	1023883a 	mov	r17,r2
  808798:	00bfe10e 	bge	zero,r2,808720 <__sfvwrite_r+0x254>
  80879c:	a469c83a 	sub	r20,r20,r17
  8087a0:	a0001826 	beq	r20,zero,808804 <__sfvwrite_r+0x338>
  8087a4:	b0800217 	ldw	r2,8(r22)
  8087a8:	1445c83a 	sub	r2,r2,r17
  8087ac:	b0800215 	stw	r2,8(r22)
  8087b0:	103f7226 	beq	r2,zero,80857c <__sfvwrite_r+0xb0>
  8087b4:	9c67c83a 	sub	r19,r19,r17
  8087b8:	bc6f883a 	add	r23,r23,r17
  8087bc:	983fe21e 	bne	r19,zero,808748 <__sfvwrite_r+0x27c>
  8087c0:	adc00017 	ldw	r23,0(r21)
  8087c4:	acc00117 	ldw	r19,4(r21)
  8087c8:	ad400204 	addi	r21,r21,8
  8087cc:	d8000015 	stw	zero,0(sp)
  8087d0:	003fdc06 	br	808744 <__sfvwrite_r+0x278>
  8087d4:	b80b883a 	mov	r5,r23
  8087d8:	880d883a 	mov	r6,r17
  8087dc:	08065fc0 	call	8065fc <memmove>
  8087e0:	90c00017 	ldw	r3,0(r18)
  8087e4:	e009883a 	mov	r4,fp
  8087e8:	900b883a 	mov	r5,r18
  8087ec:	1c47883a 	add	r3,r3,r17
  8087f0:	90c00015 	stw	r3,0(r18)
  8087f4:	0808e240 	call	808e24 <_fflush_r>
  8087f8:	103fc91e 	bne	r2,zero,808720 <__sfvwrite_r+0x254>
  8087fc:	a469c83a 	sub	r20,r20,r17
  808800:	a03fe81e 	bne	r20,zero,8087a4 <__sfvwrite_r+0x2d8>
  808804:	e009883a 	mov	r4,fp
  808808:	900b883a 	mov	r5,r18
  80880c:	0808e240 	call	808e24 <_fflush_r>
  808810:	103fc31e 	bne	r2,zero,808720 <__sfvwrite_r+0x254>
  808814:	d8000015 	stw	zero,0(sp)
  808818:	003fe206 	br	8087a4 <__sfvwrite_r+0x2d8>
  80881c:	91000017 	ldw	r4,0(r18)
  808820:	90800417 	ldw	r2,16(r18)
  808824:	1100022e 	bgeu	r2,r4,808830 <__sfvwrite_r+0x364>
  808828:	8023883a 	mov	r17,r16
  80882c:	85003136 	bltu	r16,r20,8088f4 <__sfvwrite_r+0x428>
  808830:	91c00517 	ldw	r7,20(r18)
  808834:	a1c01836 	bltu	r20,r7,808898 <__sfvwrite_r+0x3cc>
  808838:	90c00917 	ldw	r3,36(r18)
  80883c:	91400717 	ldw	r5,28(r18)
  808840:	e009883a 	mov	r4,fp
  808844:	b80d883a 	mov	r6,r23
  808848:	183ee83a 	callr	r3
  80884c:	1021883a 	mov	r16,r2
  808850:	00bfb30e 	bge	zero,r2,808720 <__sfvwrite_r+0x254>
  808854:	1023883a 	mov	r17,r2
  808858:	1027883a 	mov	r19,r2
  80885c:	003f9b06 	br	8086cc <__sfvwrite_r+0x200>
  808860:	b80b883a 	mov	r5,r23
  808864:	800d883a 	mov	r6,r16
  808868:	08065fc0 	call	8065fc <memmove>
  80886c:	90c00217 	ldw	r3,8(r18)
  808870:	90800017 	ldw	r2,0(r18)
  808874:	8023883a 	mov	r17,r16
  808878:	1c07c83a 	sub	r3,r3,r16
  80887c:	1405883a 	add	r2,r2,r16
  808880:	90c00215 	stw	r3,8(r18)
  808884:	90800015 	stw	r2,0(r18)
  808888:	003fc406 	br	80879c <__sfvwrite_r+0x2d0>
  80888c:	a00d883a 	mov	r6,r20
  808890:	a021883a 	mov	r16,r20
  808894:	003f8106 	br	80869c <__sfvwrite_r+0x1d0>
  808898:	b80b883a 	mov	r5,r23
  80889c:	a00d883a 	mov	r6,r20
  8088a0:	08065fc0 	call	8065fc <memmove>
  8088a4:	90c00217 	ldw	r3,8(r18)
  8088a8:	90800017 	ldw	r2,0(r18)
  8088ac:	a021883a 	mov	r16,r20
  8088b0:	1d07c83a 	sub	r3,r3,r20
  8088b4:	1505883a 	add	r2,r2,r20
  8088b8:	a023883a 	mov	r17,r20
  8088bc:	a027883a 	mov	r19,r20
  8088c0:	90c00215 	stw	r3,8(r18)
  8088c4:	90800015 	stw	r2,0(r18)
  8088c8:	003f8006 	br	8086cc <__sfvwrite_r+0x200>
  8088cc:	b809883a 	mov	r4,r23
  8088d0:	01400284 	movi	r5,10
  8088d4:	980d883a 	mov	r6,r19
  8088d8:	08089680 	call	808968 <memchr>
  8088dc:	10001726 	beq	r2,zero,80893c <__sfvwrite_r+0x470>
  8088e0:	15c5c83a 	sub	r2,r2,r23
  8088e4:	15000044 	addi	r20,r2,1
  8088e8:	00800044 	movi	r2,1
  8088ec:	d8800015 	stw	r2,0(sp)
  8088f0:	003f9806 	br	808754 <__sfvwrite_r+0x288>
  8088f4:	b80b883a 	mov	r5,r23
  8088f8:	800d883a 	mov	r6,r16
  8088fc:	08065fc0 	call	8065fc <memmove>
  808900:	90c00017 	ldw	r3,0(r18)
  808904:	e009883a 	mov	r4,fp
  808908:	900b883a 	mov	r5,r18
  80890c:	1c07883a 	add	r3,r3,r16
  808910:	90c00015 	stw	r3,0(r18)
  808914:	8027883a 	mov	r19,r16
  808918:	0808e240 	call	808e24 <_fflush_r>
  80891c:	103f6b26 	beq	r2,zero,8086cc <__sfvwrite_r+0x200>
  808920:	003f7f06 	br	808720 <__sfvwrite_r+0x254>
  808924:	400b883a 	mov	r5,r8
  808928:	e009883a 	mov	r4,fp
  80892c:	08046fc0 	call	8046fc <_realloc_r>
  808930:	103f7626 	beq	r2,zero,80870c <__sfvwrite_r+0x240>
  808934:	1023883a 	mov	r17,r2
  808938:	003f5006 	br	80867c <__sfvwrite_r+0x1b0>
  80893c:	00c00044 	movi	r3,1
  808940:	9d000044 	addi	r20,r19,1
  808944:	d8c00015 	stw	r3,0(sp)
  808948:	003f8206 	br	808754 <__sfvwrite_r+0x288>
  80894c:	9080030b 	ldhu	r2,12(r18)
  808950:	00c00244 	movi	r3,9
  808954:	013fffc4 	movi	r4,-1
  808958:	10801014 	ori	r2,r2,64
  80895c:	9080030d 	sth	r2,12(r18)
  808960:	e0c00015 	stw	r3,0(fp)
  808964:	003f0606 	br	808580 <__sfvwrite_r+0xb4>

00808968 <memchr>:
  808968:	008000c4 	movi	r2,3
  80896c:	29403fcc 	andi	r5,r5,255
  808970:	2007883a 	mov	r3,r4
  808974:	1180022e 	bgeu	r2,r6,808980 <memchr+0x18>
  808978:	2084703a 	and	r2,r4,r2
  80897c:	10000b26 	beq	r2,zero,8089ac <memchr+0x44>
  808980:	313fffc4 	addi	r4,r6,-1
  808984:	3000051e 	bne	r6,zero,80899c <memchr+0x34>
  808988:	00002c06 	br	808a3c <memchr+0xd4>
  80898c:	213fffc4 	addi	r4,r4,-1
  808990:	00bfffc4 	movi	r2,-1
  808994:	18c00044 	addi	r3,r3,1
  808998:	20802826 	beq	r4,r2,808a3c <memchr+0xd4>
  80899c:	18800003 	ldbu	r2,0(r3)
  8089a0:	28bffa1e 	bne	r5,r2,80898c <memchr+0x24>
  8089a4:	1805883a 	mov	r2,r3
  8089a8:	f800283a 	ret
  8089ac:	0011883a 	mov	r8,zero
  8089b0:	0007883a 	mov	r3,zero
  8089b4:	01c00104 	movi	r7,4
  8089b8:	4004923a 	slli	r2,r8,8
  8089bc:	18c00044 	addi	r3,r3,1
  8089c0:	1151883a 	add	r8,r2,r5
  8089c4:	19fffc1e 	bne	r3,r7,8089b8 <memchr+0x50>
  8089c8:	02bfbff4 	movhi	r10,65279
  8089cc:	52bfbfc4 	addi	r10,r10,-257
  8089d0:	02602074 	movhi	r9,32897
  8089d4:	4a602004 	addi	r9,r9,-32640
  8089d8:	02c000c4 	movi	r11,3
  8089dc:	20800017 	ldw	r2,0(r4)
  8089e0:	31bfff04 	addi	r6,r6,-4
  8089e4:	200f883a 	mov	r7,r4
  8089e8:	1204f03a 	xor	r2,r2,r8
  8089ec:	1287883a 	add	r3,r2,r10
  8089f0:	1a46703a 	and	r3,r3,r9
  8089f4:	0084303a 	nor	r2,zero,r2
  8089f8:	10c4703a 	and	r2,r2,r3
  8089fc:	10000b26 	beq	r2,zero,808a2c <memchr+0xc4>
  808a00:	20800003 	ldbu	r2,0(r4)
  808a04:	28800f26 	beq	r5,r2,808a44 <memchr+0xdc>
  808a08:	20800043 	ldbu	r2,1(r4)
  808a0c:	21c00044 	addi	r7,r4,1
  808a10:	28800c26 	beq	r5,r2,808a44 <memchr+0xdc>
  808a14:	20800083 	ldbu	r2,2(r4)
  808a18:	21c00084 	addi	r7,r4,2
  808a1c:	28800926 	beq	r5,r2,808a44 <memchr+0xdc>
  808a20:	208000c3 	ldbu	r2,3(r4)
  808a24:	21c000c4 	addi	r7,r4,3
  808a28:	28800626 	beq	r5,r2,808a44 <memchr+0xdc>
  808a2c:	21000104 	addi	r4,r4,4
  808a30:	59bfea36 	bltu	r11,r6,8089dc <memchr+0x74>
  808a34:	2007883a 	mov	r3,r4
  808a38:	003fd106 	br	808980 <memchr+0x18>
  808a3c:	0005883a 	mov	r2,zero
  808a40:	f800283a 	ret
  808a44:	3805883a 	mov	r2,r7
  808a48:	f800283a 	ret

00808a4c <memcmp>:
  808a4c:	00c000c4 	movi	r3,3
  808a50:	1980032e 	bgeu	r3,r6,808a60 <memcmp+0x14>
  808a54:	2144b03a 	or	r2,r4,r5
  808a58:	10c4703a 	and	r2,r2,r3
  808a5c:	10000f26 	beq	r2,zero,808a9c <memcmp+0x50>
  808a60:	31ffffc4 	addi	r7,r6,-1
  808a64:	3000061e 	bne	r6,zero,808a80 <memcmp+0x34>
  808a68:	00000a06 	br	808a94 <memcmp+0x48>
  808a6c:	39ffffc4 	addi	r7,r7,-1
  808a70:	00bfffc4 	movi	r2,-1
  808a74:	21000044 	addi	r4,r4,1
  808a78:	29400044 	addi	r5,r5,1
  808a7c:	38800526 	beq	r7,r2,808a94 <memcmp+0x48>
  808a80:	20c00003 	ldbu	r3,0(r4)
  808a84:	28800003 	ldbu	r2,0(r5)
  808a88:	18bff826 	beq	r3,r2,808a6c <memcmp+0x20>
  808a8c:	1885c83a 	sub	r2,r3,r2
  808a90:	f800283a 	ret
  808a94:	0005883a 	mov	r2,zero
  808a98:	f800283a 	ret
  808a9c:	180f883a 	mov	r7,r3
  808aa0:	20c00017 	ldw	r3,0(r4)
  808aa4:	28800017 	ldw	r2,0(r5)
  808aa8:	18bfed1e 	bne	r3,r2,808a60 <memcmp+0x14>
  808aac:	31bfff04 	addi	r6,r6,-4
  808ab0:	21000104 	addi	r4,r4,4
  808ab4:	29400104 	addi	r5,r5,4
  808ab8:	39bff936 	bltu	r7,r6,808aa0 <memcmp+0x54>
  808abc:	003fe806 	br	808a60 <memcmp+0x14>

00808ac0 <strlen>:
  808ac0:	208000cc 	andi	r2,r4,3
  808ac4:	2011883a 	mov	r8,r4
  808ac8:	1000161e 	bne	r2,zero,808b24 <strlen+0x64>
  808acc:	20c00017 	ldw	r3,0(r4)
  808ad0:	017fbff4 	movhi	r5,65279
  808ad4:	297fbfc4 	addi	r5,r5,-257
  808ad8:	01e02074 	movhi	r7,32897
  808adc:	39e02004 	addi	r7,r7,-32640
  808ae0:	1945883a 	add	r2,r3,r5
  808ae4:	11c4703a 	and	r2,r2,r7
  808ae8:	00c6303a 	nor	r3,zero,r3
  808aec:	1886703a 	and	r3,r3,r2
  808af0:	18000c1e 	bne	r3,zero,808b24 <strlen+0x64>
  808af4:	280d883a 	mov	r6,r5
  808af8:	380b883a 	mov	r5,r7
  808afc:	21000104 	addi	r4,r4,4
  808b00:	20800017 	ldw	r2,0(r4)
  808b04:	1187883a 	add	r3,r2,r6
  808b08:	1946703a 	and	r3,r3,r5
  808b0c:	0084303a 	nor	r2,zero,r2
  808b10:	10c4703a 	and	r2,r2,r3
  808b14:	103ff926 	beq	r2,zero,808afc <strlen+0x3c>
  808b18:	20800007 	ldb	r2,0(r4)
  808b1c:	10000326 	beq	r2,zero,808b2c <strlen+0x6c>
  808b20:	21000044 	addi	r4,r4,1
  808b24:	20800007 	ldb	r2,0(r4)
  808b28:	103ffd1e 	bne	r2,zero,808b20 <strlen+0x60>
  808b2c:	2205c83a 	sub	r2,r4,r8
  808b30:	f800283a 	ret

00808b34 <__swsetup_r>:
  808b34:	00802074 	movhi	r2,129
  808b38:	10af0404 	addi	r2,r2,-17392
  808b3c:	10c00017 	ldw	r3,0(r2)
  808b40:	defffd04 	addi	sp,sp,-12
  808b44:	dc400115 	stw	r17,4(sp)
  808b48:	dc000015 	stw	r16,0(sp)
  808b4c:	dfc00215 	stw	ra,8(sp)
  808b50:	2023883a 	mov	r17,r4
  808b54:	2821883a 	mov	r16,r5
  808b58:	18000226 	beq	r3,zero,808b64 <__swsetup_r+0x30>
  808b5c:	18800e17 	ldw	r2,56(r3)
  808b60:	10001f26 	beq	r2,zero,808be0 <__swsetup_r+0xac>
  808b64:	8100030b 	ldhu	r4,12(r16)
  808b68:	2080020c 	andi	r2,r4,8
  808b6c:	10002826 	beq	r2,zero,808c10 <__swsetup_r+0xdc>
  808b70:	81400417 	ldw	r5,16(r16)
  808b74:	28001d26 	beq	r5,zero,808bec <__swsetup_r+0xb8>
  808b78:	2080004c 	andi	r2,r4,1
  808b7c:	1005003a 	cmpeq	r2,r2,zero
  808b80:	10000b26 	beq	r2,zero,808bb0 <__swsetup_r+0x7c>
  808b84:	2080008c 	andi	r2,r4,2
  808b88:	10001226 	beq	r2,zero,808bd4 <__swsetup_r+0xa0>
  808b8c:	0005883a 	mov	r2,zero
  808b90:	80800215 	stw	r2,8(r16)
  808b94:	28000b26 	beq	r5,zero,808bc4 <__swsetup_r+0x90>
  808b98:	0005883a 	mov	r2,zero
  808b9c:	dfc00217 	ldw	ra,8(sp)
  808ba0:	dc400117 	ldw	r17,4(sp)
  808ba4:	dc000017 	ldw	r16,0(sp)
  808ba8:	dec00304 	addi	sp,sp,12
  808bac:	f800283a 	ret
  808bb0:	80800517 	ldw	r2,20(r16)
  808bb4:	80000215 	stw	zero,8(r16)
  808bb8:	0085c83a 	sub	r2,zero,r2
  808bbc:	80800615 	stw	r2,24(r16)
  808bc0:	283ff51e 	bne	r5,zero,808b98 <__swsetup_r+0x64>
  808bc4:	2080200c 	andi	r2,r4,128
  808bc8:	103ff326 	beq	r2,zero,808b98 <__swsetup_r+0x64>
  808bcc:	00bfffc4 	movi	r2,-1
  808bd0:	003ff206 	br	808b9c <__swsetup_r+0x68>
  808bd4:	80800517 	ldw	r2,20(r16)
  808bd8:	80800215 	stw	r2,8(r16)
  808bdc:	003fed06 	br	808b94 <__swsetup_r+0x60>
  808be0:	1809883a 	mov	r4,r3
  808be4:	08090bc0 	call	8090bc <__sinit>
  808be8:	003fde06 	br	808b64 <__swsetup_r+0x30>
  808bec:	20c0a00c 	andi	r3,r4,640
  808bf0:	00808004 	movi	r2,512
  808bf4:	18bfe026 	beq	r3,r2,808b78 <__swsetup_r+0x44>
  808bf8:	8809883a 	mov	r4,r17
  808bfc:	800b883a 	mov	r5,r16
  808c00:	08094940 	call	809494 <__smakebuf_r>
  808c04:	8100030b 	ldhu	r4,12(r16)
  808c08:	81400417 	ldw	r5,16(r16)
  808c0c:	003fda06 	br	808b78 <__swsetup_r+0x44>
  808c10:	2080040c 	andi	r2,r4,16
  808c14:	103fed26 	beq	r2,zero,808bcc <__swsetup_r+0x98>
  808c18:	2080010c 	andi	r2,r4,4
  808c1c:	10001226 	beq	r2,zero,808c68 <__swsetup_r+0x134>
  808c20:	81400c17 	ldw	r5,48(r16)
  808c24:	28000526 	beq	r5,zero,808c3c <__swsetup_r+0x108>
  808c28:	80801004 	addi	r2,r16,64
  808c2c:	28800226 	beq	r5,r2,808c38 <__swsetup_r+0x104>
  808c30:	8809883a 	mov	r4,r17
  808c34:	08033f40 	call	8033f4 <_free_r>
  808c38:	80000c15 	stw	zero,48(r16)
  808c3c:	8080030b 	ldhu	r2,12(r16)
  808c40:	81400417 	ldw	r5,16(r16)
  808c44:	80000115 	stw	zero,4(r16)
  808c48:	10bff6cc 	andi	r2,r2,65499
  808c4c:	8080030d 	sth	r2,12(r16)
  808c50:	81400015 	stw	r5,0(r16)
  808c54:	8080030b 	ldhu	r2,12(r16)
  808c58:	10800214 	ori	r2,r2,8
  808c5c:	113fffcc 	andi	r4,r2,65535
  808c60:	8080030d 	sth	r2,12(r16)
  808c64:	003fc306 	br	808b74 <__swsetup_r+0x40>
  808c68:	81400417 	ldw	r5,16(r16)
  808c6c:	003ff906 	br	808c54 <__swsetup_r+0x120>

00808c70 <register_fini>:
  808c70:	f800283a 	ret

00808c74 <__call_exitprocs>:
  808c74:	00802074 	movhi	r2,129
  808c78:	10af0504 	addi	r2,r2,-17388
  808c7c:	10800017 	ldw	r2,0(r2)
  808c80:	defff304 	addi	sp,sp,-52
  808c84:	df000b15 	stw	fp,44(sp)
  808c88:	d8800115 	stw	r2,4(sp)
  808c8c:	00802034 	movhi	r2,128
  808c90:	1087e604 	addi	r2,r2,8088
  808c94:	1005003a 	cmpeq	r2,r2,zero
  808c98:	d8800215 	stw	r2,8(sp)
  808c9c:	d8800117 	ldw	r2,4(sp)
  808ca0:	dd400815 	stw	r21,32(sp)
  808ca4:	dd000715 	stw	r20,28(sp)
  808ca8:	10805204 	addi	r2,r2,328
  808cac:	dfc00c15 	stw	ra,48(sp)
  808cb0:	ddc00a15 	stw	r23,40(sp)
  808cb4:	dd800915 	stw	r22,36(sp)
  808cb8:	dcc00615 	stw	r19,24(sp)
  808cbc:	dc800515 	stw	r18,20(sp)
  808cc0:	dc400415 	stw	r17,16(sp)
  808cc4:	dc000315 	stw	r16,12(sp)
  808cc8:	282b883a 	mov	r21,r5
  808ccc:	2039883a 	mov	fp,r4
  808cd0:	d8800015 	stw	r2,0(sp)
  808cd4:	2829003a 	cmpeq	r20,r5,zero
  808cd8:	d8800117 	ldw	r2,4(sp)
  808cdc:	14405217 	ldw	r17,328(r2)
  808ce0:	88001026 	beq	r17,zero,808d24 <__call_exitprocs+0xb0>
  808ce4:	ddc00017 	ldw	r23,0(sp)
  808ce8:	88800117 	ldw	r2,4(r17)
  808cec:	8c802204 	addi	r18,r17,136
  808cf0:	143fffc4 	addi	r16,r2,-1
  808cf4:	80000916 	blt	r16,zero,808d1c <__call_exitprocs+0xa8>
  808cf8:	05bfffc4 	movi	r22,-1
  808cfc:	a000151e 	bne	r20,zero,808d54 <__call_exitprocs+0xe0>
  808d00:	8409883a 	add	r4,r16,r16
  808d04:	2105883a 	add	r2,r4,r4
  808d08:	1485883a 	add	r2,r2,r18
  808d0c:	10c02017 	ldw	r3,128(r2)
  808d10:	a8c01126 	beq	r21,r3,808d58 <__call_exitprocs+0xe4>
  808d14:	843fffc4 	addi	r16,r16,-1
  808d18:	85bff81e 	bne	r16,r22,808cfc <__call_exitprocs+0x88>
  808d1c:	d8800217 	ldw	r2,8(sp)
  808d20:	10003126 	beq	r2,zero,808de8 <__call_exitprocs+0x174>
  808d24:	dfc00c17 	ldw	ra,48(sp)
  808d28:	df000b17 	ldw	fp,44(sp)
  808d2c:	ddc00a17 	ldw	r23,40(sp)
  808d30:	dd800917 	ldw	r22,36(sp)
  808d34:	dd400817 	ldw	r21,32(sp)
  808d38:	dd000717 	ldw	r20,28(sp)
  808d3c:	dcc00617 	ldw	r19,24(sp)
  808d40:	dc800517 	ldw	r18,20(sp)
  808d44:	dc400417 	ldw	r17,16(sp)
  808d48:	dc000317 	ldw	r16,12(sp)
  808d4c:	dec00d04 	addi	sp,sp,52
  808d50:	f800283a 	ret
  808d54:	8409883a 	add	r4,r16,r16
  808d58:	88c00117 	ldw	r3,4(r17)
  808d5c:	2105883a 	add	r2,r4,r4
  808d60:	1445883a 	add	r2,r2,r17
  808d64:	18ffffc4 	addi	r3,r3,-1
  808d68:	11800217 	ldw	r6,8(r2)
  808d6c:	1c001526 	beq	r3,r16,808dc4 <__call_exitprocs+0x150>
  808d70:	10000215 	stw	zero,8(r2)
  808d74:	303fe726 	beq	r6,zero,808d14 <__call_exitprocs+0xa0>
  808d78:	00c00044 	movi	r3,1
  808d7c:	1c06983a 	sll	r3,r3,r16
  808d80:	90804017 	ldw	r2,256(r18)
  808d84:	8cc00117 	ldw	r19,4(r17)
  808d88:	1884703a 	and	r2,r3,r2
  808d8c:	10001426 	beq	r2,zero,808de0 <__call_exitprocs+0x16c>
  808d90:	90804117 	ldw	r2,260(r18)
  808d94:	1884703a 	and	r2,r3,r2
  808d98:	10000c1e 	bne	r2,zero,808dcc <__call_exitprocs+0x158>
  808d9c:	2105883a 	add	r2,r4,r4
  808da0:	1485883a 	add	r2,r2,r18
  808da4:	11400017 	ldw	r5,0(r2)
  808da8:	e009883a 	mov	r4,fp
  808dac:	303ee83a 	callr	r6
  808db0:	88800117 	ldw	r2,4(r17)
  808db4:	98bfc81e 	bne	r19,r2,808cd8 <__call_exitprocs+0x64>
  808db8:	b8800017 	ldw	r2,0(r23)
  808dbc:	147fd526 	beq	r2,r17,808d14 <__call_exitprocs+0xa0>
  808dc0:	003fc506 	br	808cd8 <__call_exitprocs+0x64>
  808dc4:	8c000115 	stw	r16,4(r17)
  808dc8:	003fea06 	br	808d74 <__call_exitprocs+0x100>
  808dcc:	2105883a 	add	r2,r4,r4
  808dd0:	1485883a 	add	r2,r2,r18
  808dd4:	11000017 	ldw	r4,0(r2)
  808dd8:	303ee83a 	callr	r6
  808ddc:	003ff406 	br	808db0 <__call_exitprocs+0x13c>
  808de0:	303ee83a 	callr	r6
  808de4:	003ff206 	br	808db0 <__call_exitprocs+0x13c>
  808de8:	88800117 	ldw	r2,4(r17)
  808dec:	1000081e 	bne	r2,zero,808e10 <__call_exitprocs+0x19c>
  808df0:	89000017 	ldw	r4,0(r17)
  808df4:	20000726 	beq	r4,zero,808e14 <__call_exitprocs+0x1a0>
  808df8:	b9000015 	stw	r4,0(r23)
  808dfc:	8809883a 	mov	r4,r17
  808e00:	0801f980 	call	801f98 <free>
  808e04:	bc400017 	ldw	r17,0(r23)
  808e08:	883fb71e 	bne	r17,zero,808ce8 <__call_exitprocs+0x74>
  808e0c:	003fc506 	br	808d24 <__call_exitprocs+0xb0>
  808e10:	89000017 	ldw	r4,0(r17)
  808e14:	882f883a 	mov	r23,r17
  808e18:	2023883a 	mov	r17,r4
  808e1c:	883fb21e 	bne	r17,zero,808ce8 <__call_exitprocs+0x74>
  808e20:	003fc006 	br	808d24 <__call_exitprocs+0xb0>

00808e24 <_fflush_r>:
  808e24:	defffb04 	addi	sp,sp,-20
  808e28:	dcc00315 	stw	r19,12(sp)
  808e2c:	dc800215 	stw	r18,8(sp)
  808e30:	dfc00415 	stw	ra,16(sp)
  808e34:	dc400115 	stw	r17,4(sp)
  808e38:	dc000015 	stw	r16,0(sp)
  808e3c:	2027883a 	mov	r19,r4
  808e40:	2825883a 	mov	r18,r5
  808e44:	20000226 	beq	r4,zero,808e50 <_fflush_r+0x2c>
  808e48:	20800e17 	ldw	r2,56(r4)
  808e4c:	10005626 	beq	r2,zero,808fa8 <_fflush_r+0x184>
  808e50:	9100030b 	ldhu	r4,12(r18)
  808e54:	20ffffcc 	andi	r3,r4,65535
  808e58:	18e0001c 	xori	r3,r3,32768
  808e5c:	18e00004 	addi	r3,r3,-32768
  808e60:	1880020c 	andi	r2,r3,8
  808e64:	1000261e 	bne	r2,zero,808f00 <_fflush_r+0xdc>
  808e68:	90c00117 	ldw	r3,4(r18)
  808e6c:	20820014 	ori	r2,r4,2048
  808e70:	9080030d 	sth	r2,12(r18)
  808e74:	1009883a 	mov	r4,r2
  808e78:	00c0400e 	bge	zero,r3,808f7c <_fflush_r+0x158>
  808e7c:	92000a17 	ldw	r8,40(r18)
  808e80:	40004026 	beq	r8,zero,808f84 <_fflush_r+0x160>
  808e84:	2084000c 	andi	r2,r4,4096
  808e88:	10005326 	beq	r2,zero,808fd8 <_fflush_r+0x1b4>
  808e8c:	94001417 	ldw	r16,80(r18)
  808e90:	9080030b 	ldhu	r2,12(r18)
  808e94:	1080010c 	andi	r2,r2,4
  808e98:	1000481e 	bne	r2,zero,808fbc <_fflush_r+0x198>
  808e9c:	91400717 	ldw	r5,28(r18)
  808ea0:	9809883a 	mov	r4,r19
  808ea4:	800d883a 	mov	r6,r16
  808ea8:	000f883a 	mov	r7,zero
  808eac:	403ee83a 	callr	r8
  808eb0:	8080261e 	bne	r16,r2,808f4c <_fflush_r+0x128>
  808eb4:	9080030b 	ldhu	r2,12(r18)
  808eb8:	91000417 	ldw	r4,16(r18)
  808ebc:	90000115 	stw	zero,4(r18)
  808ec0:	10bdffcc 	andi	r2,r2,63487
  808ec4:	10ffffcc 	andi	r3,r2,65535
  808ec8:	18c4000c 	andi	r3,r3,4096
  808ecc:	9080030d 	sth	r2,12(r18)
  808ed0:	91000015 	stw	r4,0(r18)
  808ed4:	18002b26 	beq	r3,zero,808f84 <_fflush_r+0x160>
  808ed8:	0007883a 	mov	r3,zero
  808edc:	1805883a 	mov	r2,r3
  808ee0:	94001415 	stw	r16,80(r18)
  808ee4:	dfc00417 	ldw	ra,16(sp)
  808ee8:	dcc00317 	ldw	r19,12(sp)
  808eec:	dc800217 	ldw	r18,8(sp)
  808ef0:	dc400117 	ldw	r17,4(sp)
  808ef4:	dc000017 	ldw	r16,0(sp)
  808ef8:	dec00504 	addi	sp,sp,20
  808efc:	f800283a 	ret
  808f00:	94400417 	ldw	r17,16(r18)
  808f04:	88001f26 	beq	r17,zero,808f84 <_fflush_r+0x160>
  808f08:	90800017 	ldw	r2,0(r18)
  808f0c:	18c000cc 	andi	r3,r3,3
  808f10:	94400015 	stw	r17,0(r18)
  808f14:	1461c83a 	sub	r16,r2,r17
  808f18:	18002526 	beq	r3,zero,808fb0 <_fflush_r+0x18c>
  808f1c:	0005883a 	mov	r2,zero
  808f20:	90800215 	stw	r2,8(r18)
  808f24:	0400170e 	bge	zero,r16,808f84 <_fflush_r+0x160>
  808f28:	90c00917 	ldw	r3,36(r18)
  808f2c:	91400717 	ldw	r5,28(r18)
  808f30:	880d883a 	mov	r6,r17
  808f34:	800f883a 	mov	r7,r16
  808f38:	9809883a 	mov	r4,r19
  808f3c:	183ee83a 	callr	r3
  808f40:	88a3883a 	add	r17,r17,r2
  808f44:	80a1c83a 	sub	r16,r16,r2
  808f48:	00bff616 	blt	zero,r2,808f24 <_fflush_r+0x100>
  808f4c:	9080030b 	ldhu	r2,12(r18)
  808f50:	00ffffc4 	movi	r3,-1
  808f54:	10801014 	ori	r2,r2,64
  808f58:	9080030d 	sth	r2,12(r18)
  808f5c:	1805883a 	mov	r2,r3
  808f60:	dfc00417 	ldw	ra,16(sp)
  808f64:	dcc00317 	ldw	r19,12(sp)
  808f68:	dc800217 	ldw	r18,8(sp)
  808f6c:	dc400117 	ldw	r17,4(sp)
  808f70:	dc000017 	ldw	r16,0(sp)
  808f74:	dec00504 	addi	sp,sp,20
  808f78:	f800283a 	ret
  808f7c:	90800f17 	ldw	r2,60(r18)
  808f80:	00bfbe16 	blt	zero,r2,808e7c <_fflush_r+0x58>
  808f84:	0007883a 	mov	r3,zero
  808f88:	1805883a 	mov	r2,r3
  808f8c:	dfc00417 	ldw	ra,16(sp)
  808f90:	dcc00317 	ldw	r19,12(sp)
  808f94:	dc800217 	ldw	r18,8(sp)
  808f98:	dc400117 	ldw	r17,4(sp)
  808f9c:	dc000017 	ldw	r16,0(sp)
  808fa0:	dec00504 	addi	sp,sp,20
  808fa4:	f800283a 	ret
  808fa8:	08090bc0 	call	8090bc <__sinit>
  808fac:	003fa806 	br	808e50 <_fflush_r+0x2c>
  808fb0:	90800517 	ldw	r2,20(r18)
  808fb4:	90800215 	stw	r2,8(r18)
  808fb8:	003fda06 	br	808f24 <_fflush_r+0x100>
  808fbc:	90800117 	ldw	r2,4(r18)
  808fc0:	90c00c17 	ldw	r3,48(r18)
  808fc4:	80a1c83a 	sub	r16,r16,r2
  808fc8:	183fb426 	beq	r3,zero,808e9c <_fflush_r+0x78>
  808fcc:	90800f17 	ldw	r2,60(r18)
  808fd0:	80a1c83a 	sub	r16,r16,r2
  808fd4:	003fb106 	br	808e9c <_fflush_r+0x78>
  808fd8:	91400717 	ldw	r5,28(r18)
  808fdc:	9809883a 	mov	r4,r19
  808fe0:	000d883a 	mov	r6,zero
  808fe4:	01c00044 	movi	r7,1
  808fe8:	403ee83a 	callr	r8
  808fec:	1021883a 	mov	r16,r2
  808ff0:	00bfffc4 	movi	r2,-1
  808ff4:	80800226 	beq	r16,r2,809000 <_fflush_r+0x1dc>
  808ff8:	92000a17 	ldw	r8,40(r18)
  808ffc:	003fa406 	br	808e90 <_fflush_r+0x6c>
  809000:	98c00017 	ldw	r3,0(r19)
  809004:	00800744 	movi	r2,29
  809008:	18bfde26 	beq	r3,r2,808f84 <_fflush_r+0x160>
  80900c:	9080030b 	ldhu	r2,12(r18)
  809010:	8007883a 	mov	r3,r16
  809014:	10801014 	ori	r2,r2,64
  809018:	9080030d 	sth	r2,12(r18)
  80901c:	003fcf06 	br	808f5c <_fflush_r+0x138>

00809020 <fflush>:
  809020:	01402074 	movhi	r5,129
  809024:	29638904 	addi	r5,r5,-29148
  809028:	2007883a 	mov	r3,r4
  80902c:	20000526 	beq	r4,zero,809044 <fflush+0x24>
  809030:	00802074 	movhi	r2,129
  809034:	10af0404 	addi	r2,r2,-17392
  809038:	11000017 	ldw	r4,0(r2)
  80903c:	180b883a 	mov	r5,r3
  809040:	0808e241 	jmpi	808e24 <_fflush_r>
  809044:	00802074 	movhi	r2,129
  809048:	10af0504 	addi	r2,r2,-17388
  80904c:	11000017 	ldw	r4,0(r2)
  809050:	08093141 	jmpi	809314 <_fwalk_reent>

00809054 <std>:
  809054:	00802074 	movhi	r2,129
  809058:	10a58a04 	addi	r2,r2,-27096
  80905c:	20800b15 	stw	r2,44(r4)
  809060:	00802074 	movhi	r2,129
  809064:	10a5c504 	addi	r2,r2,-26860
  809068:	20800815 	stw	r2,32(r4)
  80906c:	00c02074 	movhi	r3,129
  809070:	18e5a604 	addi	r3,r3,-26984
  809074:	00802074 	movhi	r2,129
  809078:	10a58c04 	addi	r2,r2,-27088
  80907c:	2140030d 	sth	r5,12(r4)
  809080:	2180038d 	sth	r6,14(r4)
  809084:	20c00915 	stw	r3,36(r4)
  809088:	20800a15 	stw	r2,40(r4)
  80908c:	20000015 	stw	zero,0(r4)
  809090:	20000115 	stw	zero,4(r4)
  809094:	20000215 	stw	zero,8(r4)
  809098:	20000415 	stw	zero,16(r4)
  80909c:	20000515 	stw	zero,20(r4)
  8090a0:	20000615 	stw	zero,24(r4)
  8090a4:	21000715 	stw	r4,28(r4)
  8090a8:	f800283a 	ret

008090ac <__sfp_lock_acquire>:
  8090ac:	f800283a 	ret

008090b0 <__sfp_lock_release>:
  8090b0:	f800283a 	ret

008090b4 <__sinit_lock_acquire>:
  8090b4:	f800283a 	ret

008090b8 <__sinit_lock_release>:
  8090b8:	f800283a 	ret

008090bc <__sinit>:
  8090bc:	20800e17 	ldw	r2,56(r4)
  8090c0:	defffd04 	addi	sp,sp,-12
  8090c4:	dc400115 	stw	r17,4(sp)
  8090c8:	dc000015 	stw	r16,0(sp)
  8090cc:	dfc00215 	stw	ra,8(sp)
  8090d0:	04400044 	movi	r17,1
  8090d4:	01400104 	movi	r5,4
  8090d8:	000d883a 	mov	r6,zero
  8090dc:	2021883a 	mov	r16,r4
  8090e0:	2200bb04 	addi	r8,r4,748
  8090e4:	200f883a 	mov	r7,r4
  8090e8:	10000526 	beq	r2,zero,809100 <__sinit+0x44>
  8090ec:	dfc00217 	ldw	ra,8(sp)
  8090f0:	dc400117 	ldw	r17,4(sp)
  8090f4:	dc000017 	ldw	r16,0(sp)
  8090f8:	dec00304 	addi	sp,sp,12
  8090fc:	f800283a 	ret
  809100:	21000117 	ldw	r4,4(r4)
  809104:	00802074 	movhi	r2,129
  809108:	10a46804 	addi	r2,r2,-28256
  80910c:	00c000c4 	movi	r3,3
  809110:	80800f15 	stw	r2,60(r16)
  809114:	80c0b915 	stw	r3,740(r16)
  809118:	8200ba15 	stw	r8,744(r16)
  80911c:	84400e15 	stw	r17,56(r16)
  809120:	8000b815 	stw	zero,736(r16)
  809124:	08090540 	call	809054 <std>
  809128:	81000217 	ldw	r4,8(r16)
  80912c:	880d883a 	mov	r6,r17
  809130:	800f883a 	mov	r7,r16
  809134:	01400284 	movi	r5,10
  809138:	08090540 	call	809054 <std>
  80913c:	81000317 	ldw	r4,12(r16)
  809140:	800f883a 	mov	r7,r16
  809144:	01400484 	movi	r5,18
  809148:	01800084 	movi	r6,2
  80914c:	dfc00217 	ldw	ra,8(sp)
  809150:	dc400117 	ldw	r17,4(sp)
  809154:	dc000017 	ldw	r16,0(sp)
  809158:	dec00304 	addi	sp,sp,12
  80915c:	08090541 	jmpi	809054 <std>

00809160 <__fp_lock>:
  809160:	0005883a 	mov	r2,zero
  809164:	f800283a 	ret

00809168 <__fp_unlock>:
  809168:	0005883a 	mov	r2,zero
  80916c:	f800283a 	ret

00809170 <__fp_unlock_all>:
  809170:	00802074 	movhi	r2,129
  809174:	10af0404 	addi	r2,r2,-17392
  809178:	11000017 	ldw	r4,0(r2)
  80917c:	01402074 	movhi	r5,129
  809180:	29645a04 	addi	r5,r5,-28312
  809184:	08093dc1 	jmpi	8093dc <_fwalk>

00809188 <__fp_lock_all>:
  809188:	00802074 	movhi	r2,129
  80918c:	10af0404 	addi	r2,r2,-17392
  809190:	11000017 	ldw	r4,0(r2)
  809194:	01402074 	movhi	r5,129
  809198:	29645804 	addi	r5,r5,-28320
  80919c:	08093dc1 	jmpi	8093dc <_fwalk>

008091a0 <_cleanup_r>:
  8091a0:	01402074 	movhi	r5,129
  8091a4:	29665b04 	addi	r5,r5,-26260
  8091a8:	08093dc1 	jmpi	8093dc <_fwalk>

008091ac <_cleanup>:
  8091ac:	00802074 	movhi	r2,129
  8091b0:	10af0504 	addi	r2,r2,-17388
  8091b4:	11000017 	ldw	r4,0(r2)
  8091b8:	08091a01 	jmpi	8091a0 <_cleanup_r>

008091bc <__sfmoreglue>:
  8091bc:	defffc04 	addi	sp,sp,-16
  8091c0:	dc400115 	stw	r17,4(sp)
  8091c4:	2c401724 	muli	r17,r5,92
  8091c8:	dc800215 	stw	r18,8(sp)
  8091cc:	2825883a 	mov	r18,r5
  8091d0:	89400304 	addi	r5,r17,12
  8091d4:	dc000015 	stw	r16,0(sp)
  8091d8:	dfc00315 	stw	ra,12(sp)
  8091dc:	0801fc00 	call	801fc0 <_malloc_r>
  8091e0:	0021883a 	mov	r16,zero
  8091e4:	880d883a 	mov	r6,r17
  8091e8:	000b883a 	mov	r5,zero
  8091ec:	10000626 	beq	r2,zero,809208 <__sfmoreglue+0x4c>
  8091f0:	11000304 	addi	r4,r2,12
  8091f4:	14800115 	stw	r18,4(r2)
  8091f8:	10000015 	stw	zero,0(r2)
  8091fc:	11000215 	stw	r4,8(r2)
  809200:	1021883a 	mov	r16,r2
  809204:	08066dc0 	call	8066dc <memset>
  809208:	8005883a 	mov	r2,r16
  80920c:	dfc00317 	ldw	ra,12(sp)
  809210:	dc800217 	ldw	r18,8(sp)
  809214:	dc400117 	ldw	r17,4(sp)
  809218:	dc000017 	ldw	r16,0(sp)
  80921c:	dec00404 	addi	sp,sp,16
  809220:	f800283a 	ret

00809224 <__sfp>:
  809224:	defffd04 	addi	sp,sp,-12
  809228:	00802074 	movhi	r2,129
  80922c:	10af0504 	addi	r2,r2,-17388
  809230:	dc000015 	stw	r16,0(sp)
  809234:	14000017 	ldw	r16,0(r2)
  809238:	dc400115 	stw	r17,4(sp)
  80923c:	dfc00215 	stw	ra,8(sp)
  809240:	80800e17 	ldw	r2,56(r16)
  809244:	2023883a 	mov	r17,r4
  809248:	10002626 	beq	r2,zero,8092e4 <__sfp+0xc0>
  80924c:	8400b804 	addi	r16,r16,736
  809250:	80800117 	ldw	r2,4(r16)
  809254:	81000217 	ldw	r4,8(r16)
  809258:	10ffffc4 	addi	r3,r2,-1
  80925c:	18000916 	blt	r3,zero,809284 <__sfp+0x60>
  809260:	2080030f 	ldh	r2,12(r4)
  809264:	10000b26 	beq	r2,zero,809294 <__sfp+0x70>
  809268:	017fffc4 	movi	r5,-1
  80926c:	00000206 	br	809278 <__sfp+0x54>
  809270:	2080030f 	ldh	r2,12(r4)
  809274:	10000726 	beq	r2,zero,809294 <__sfp+0x70>
  809278:	18ffffc4 	addi	r3,r3,-1
  80927c:	21001704 	addi	r4,r4,92
  809280:	197ffb1e 	bne	r3,r5,809270 <__sfp+0x4c>
  809284:	80800017 	ldw	r2,0(r16)
  809288:	10001926 	beq	r2,zero,8092f0 <__sfp+0xcc>
  80928c:	1021883a 	mov	r16,r2
  809290:	003fef06 	br	809250 <__sfp+0x2c>
  809294:	00bfffc4 	movi	r2,-1
  809298:	00c00044 	movi	r3,1
  80929c:	2080038d 	sth	r2,14(r4)
  8092a0:	20c0030d 	sth	r3,12(r4)
  8092a4:	20000015 	stw	zero,0(r4)
  8092a8:	20000215 	stw	zero,8(r4)
  8092ac:	20000115 	stw	zero,4(r4)
  8092b0:	20000415 	stw	zero,16(r4)
  8092b4:	20000515 	stw	zero,20(r4)
  8092b8:	20000615 	stw	zero,24(r4)
  8092bc:	20000c15 	stw	zero,48(r4)
  8092c0:	20000d15 	stw	zero,52(r4)
  8092c4:	20001115 	stw	zero,68(r4)
  8092c8:	20001215 	stw	zero,72(r4)
  8092cc:	2005883a 	mov	r2,r4
  8092d0:	dfc00217 	ldw	ra,8(sp)
  8092d4:	dc400117 	ldw	r17,4(sp)
  8092d8:	dc000017 	ldw	r16,0(sp)
  8092dc:	dec00304 	addi	sp,sp,12
  8092e0:	f800283a 	ret
  8092e4:	8009883a 	mov	r4,r16
  8092e8:	08090bc0 	call	8090bc <__sinit>
  8092ec:	003fd706 	br	80924c <__sfp+0x28>
  8092f0:	8809883a 	mov	r4,r17
  8092f4:	01400104 	movi	r5,4
  8092f8:	08091bc0 	call	8091bc <__sfmoreglue>
  8092fc:	80800015 	stw	r2,0(r16)
  809300:	103fe21e 	bne	r2,zero,80928c <__sfp+0x68>
  809304:	00800304 	movi	r2,12
  809308:	0009883a 	mov	r4,zero
  80930c:	88800015 	stw	r2,0(r17)
  809310:	003fee06 	br	8092cc <__sfp+0xa8>

00809314 <_fwalk_reent>:
  809314:	defff704 	addi	sp,sp,-36
  809318:	dcc00315 	stw	r19,12(sp)
  80931c:	24c0b804 	addi	r19,r4,736
  809320:	dd800615 	stw	r22,24(sp)
  809324:	dd400515 	stw	r21,20(sp)
  809328:	dfc00815 	stw	ra,32(sp)
  80932c:	ddc00715 	stw	r23,28(sp)
  809330:	dd000415 	stw	r20,16(sp)
  809334:	dc800215 	stw	r18,8(sp)
  809338:	dc400115 	stw	r17,4(sp)
  80933c:	dc000015 	stw	r16,0(sp)
  809340:	202b883a 	mov	r21,r4
  809344:	282d883a 	mov	r22,r5
  809348:	08090ac0 	call	8090ac <__sfp_lock_acquire>
  80934c:	98002126 	beq	r19,zero,8093d4 <_fwalk_reent+0xc0>
  809350:	002f883a 	mov	r23,zero
  809354:	9c800117 	ldw	r18,4(r19)
  809358:	9c000217 	ldw	r16,8(r19)
  80935c:	90bfffc4 	addi	r2,r18,-1
  809360:	10000d16 	blt	r2,zero,809398 <_fwalk_reent+0x84>
  809364:	0023883a 	mov	r17,zero
  809368:	053fffc4 	movi	r20,-1
  80936c:	8080030f 	ldh	r2,12(r16)
  809370:	8c400044 	addi	r17,r17,1
  809374:	10000626 	beq	r2,zero,809390 <_fwalk_reent+0x7c>
  809378:	8080038f 	ldh	r2,14(r16)
  80937c:	800b883a 	mov	r5,r16
  809380:	a809883a 	mov	r4,r21
  809384:	15000226 	beq	r2,r20,809390 <_fwalk_reent+0x7c>
  809388:	b03ee83a 	callr	r22
  80938c:	b8aeb03a 	or	r23,r23,r2
  809390:	84001704 	addi	r16,r16,92
  809394:	947ff51e 	bne	r18,r17,80936c <_fwalk_reent+0x58>
  809398:	9cc00017 	ldw	r19,0(r19)
  80939c:	983fed1e 	bne	r19,zero,809354 <_fwalk_reent+0x40>
  8093a0:	08090b00 	call	8090b0 <__sfp_lock_release>
  8093a4:	b805883a 	mov	r2,r23
  8093a8:	dfc00817 	ldw	ra,32(sp)
  8093ac:	ddc00717 	ldw	r23,28(sp)
  8093b0:	dd800617 	ldw	r22,24(sp)
  8093b4:	dd400517 	ldw	r21,20(sp)
  8093b8:	dd000417 	ldw	r20,16(sp)
  8093bc:	dcc00317 	ldw	r19,12(sp)
  8093c0:	dc800217 	ldw	r18,8(sp)
  8093c4:	dc400117 	ldw	r17,4(sp)
  8093c8:	dc000017 	ldw	r16,0(sp)
  8093cc:	dec00904 	addi	sp,sp,36
  8093d0:	f800283a 	ret
  8093d4:	002f883a 	mov	r23,zero
  8093d8:	003ff106 	br	8093a0 <_fwalk_reent+0x8c>

008093dc <_fwalk>:
  8093dc:	defff804 	addi	sp,sp,-32
  8093e0:	dcc00315 	stw	r19,12(sp)
  8093e4:	24c0b804 	addi	r19,r4,736
  8093e8:	dd400515 	stw	r21,20(sp)
  8093ec:	dfc00715 	stw	ra,28(sp)
  8093f0:	dd800615 	stw	r22,24(sp)
  8093f4:	dd000415 	stw	r20,16(sp)
  8093f8:	dc800215 	stw	r18,8(sp)
  8093fc:	dc400115 	stw	r17,4(sp)
  809400:	dc000015 	stw	r16,0(sp)
  809404:	282b883a 	mov	r21,r5
  809408:	08090ac0 	call	8090ac <__sfp_lock_acquire>
  80940c:	98001f26 	beq	r19,zero,80948c <_fwalk+0xb0>
  809410:	002d883a 	mov	r22,zero
  809414:	9c800117 	ldw	r18,4(r19)
  809418:	9c000217 	ldw	r16,8(r19)
  80941c:	90bfffc4 	addi	r2,r18,-1
  809420:	10000c16 	blt	r2,zero,809454 <_fwalk+0x78>
  809424:	0023883a 	mov	r17,zero
  809428:	053fffc4 	movi	r20,-1
  80942c:	8080030f 	ldh	r2,12(r16)
  809430:	8c400044 	addi	r17,r17,1
  809434:	10000526 	beq	r2,zero,80944c <_fwalk+0x70>
  809438:	8080038f 	ldh	r2,14(r16)
  80943c:	8009883a 	mov	r4,r16
  809440:	15000226 	beq	r2,r20,80944c <_fwalk+0x70>
  809444:	a83ee83a 	callr	r21
  809448:	b0acb03a 	or	r22,r22,r2
  80944c:	84001704 	addi	r16,r16,92
  809450:	947ff61e 	bne	r18,r17,80942c <_fwalk+0x50>
  809454:	9cc00017 	ldw	r19,0(r19)
  809458:	983fee1e 	bne	r19,zero,809414 <_fwalk+0x38>
  80945c:	08090b00 	call	8090b0 <__sfp_lock_release>
  809460:	b005883a 	mov	r2,r22
  809464:	dfc00717 	ldw	ra,28(sp)
  809468:	dd800617 	ldw	r22,24(sp)
  80946c:	dd400517 	ldw	r21,20(sp)
  809470:	dd000417 	ldw	r20,16(sp)
  809474:	dcc00317 	ldw	r19,12(sp)
  809478:	dc800217 	ldw	r18,8(sp)
  80947c:	dc400117 	ldw	r17,4(sp)
  809480:	dc000017 	ldw	r16,0(sp)
  809484:	dec00804 	addi	sp,sp,32
  809488:	f800283a 	ret
  80948c:	002d883a 	mov	r22,zero
  809490:	003ff206 	br	80945c <_fwalk+0x80>

00809494 <__smakebuf_r>:
  809494:	2880030b 	ldhu	r2,12(r5)
  809498:	deffed04 	addi	sp,sp,-76
  80949c:	dc401015 	stw	r17,64(sp)
  8094a0:	1080008c 	andi	r2,r2,2
  8094a4:	dc000f15 	stw	r16,60(sp)
  8094a8:	dfc01215 	stw	ra,72(sp)
  8094ac:	dc801115 	stw	r18,68(sp)
  8094b0:	2821883a 	mov	r16,r5
  8094b4:	2023883a 	mov	r17,r4
  8094b8:	10000b26 	beq	r2,zero,8094e8 <__smakebuf_r+0x54>
  8094bc:	28c010c4 	addi	r3,r5,67
  8094c0:	00800044 	movi	r2,1
  8094c4:	28800515 	stw	r2,20(r5)
  8094c8:	28c00415 	stw	r3,16(r5)
  8094cc:	28c00015 	stw	r3,0(r5)
  8094d0:	dfc01217 	ldw	ra,72(sp)
  8094d4:	dc801117 	ldw	r18,68(sp)
  8094d8:	dc401017 	ldw	r17,64(sp)
  8094dc:	dc000f17 	ldw	r16,60(sp)
  8094e0:	dec01304 	addi	sp,sp,76
  8094e4:	f800283a 	ret
  8094e8:	2940038f 	ldh	r5,14(r5)
  8094ec:	28002116 	blt	r5,zero,809574 <__smakebuf_r+0xe0>
  8094f0:	d80d883a 	mov	r6,sp
  8094f4:	08099800 	call	809980 <_fstat_r>
  8094f8:	10001e16 	blt	r2,zero,809574 <__smakebuf_r+0xe0>
  8094fc:	d8800117 	ldw	r2,4(sp)
  809500:	00e00014 	movui	r3,32768
  809504:	113c000c 	andi	r4,r2,61440
  809508:	20c03126 	beq	r4,r3,8095d0 <__smakebuf_r+0x13c>
  80950c:	8080030b 	ldhu	r2,12(r16)
  809510:	00c80004 	movi	r3,8192
  809514:	10820014 	ori	r2,r2,2048
  809518:	8080030d 	sth	r2,12(r16)
  80951c:	20c01e26 	beq	r4,r3,809598 <__smakebuf_r+0x104>
  809520:	04810004 	movi	r18,1024
  809524:	8809883a 	mov	r4,r17
  809528:	900b883a 	mov	r5,r18
  80952c:	0801fc00 	call	801fc0 <_malloc_r>
  809530:	1009883a 	mov	r4,r2
  809534:	10003126 	beq	r2,zero,8095fc <__smakebuf_r+0x168>
  809538:	80c0030b 	ldhu	r3,12(r16)
  80953c:	00802074 	movhi	r2,129
  809540:	10a46804 	addi	r2,r2,-28256
  809544:	88800f15 	stw	r2,60(r17)
  809548:	18c02014 	ori	r3,r3,128
  80954c:	84800515 	stw	r18,20(r16)
  809550:	80c0030d 	sth	r3,12(r16)
  809554:	81000415 	stw	r4,16(r16)
  809558:	81000015 	stw	r4,0(r16)
  80955c:	dfc01217 	ldw	ra,72(sp)
  809560:	dc801117 	ldw	r18,68(sp)
  809564:	dc401017 	ldw	r17,64(sp)
  809568:	dc000f17 	ldw	r16,60(sp)
  80956c:	dec01304 	addi	sp,sp,76
  809570:	f800283a 	ret
  809574:	80c0030b 	ldhu	r3,12(r16)
  809578:	1880200c 	andi	r2,r3,128
  80957c:	10000426 	beq	r2,zero,809590 <__smakebuf_r+0xfc>
  809580:	04801004 	movi	r18,64
  809584:	18820014 	ori	r2,r3,2048
  809588:	8080030d 	sth	r2,12(r16)
  80958c:	003fe506 	br	809524 <__smakebuf_r+0x90>
  809590:	04810004 	movi	r18,1024
  809594:	003ffb06 	br	809584 <__smakebuf_r+0xf0>
  809598:	8140038f 	ldh	r5,14(r16)
  80959c:	8809883a 	mov	r4,r17
  8095a0:	08099f40 	call	8099f4 <_isatty_r>
  8095a4:	103fde26 	beq	r2,zero,809520 <__smakebuf_r+0x8c>
  8095a8:	8080030b 	ldhu	r2,12(r16)
  8095ac:	80c010c4 	addi	r3,r16,67
  8095b0:	04810004 	movi	r18,1024
  8095b4:	10800054 	ori	r2,r2,1
  8095b8:	8080030d 	sth	r2,12(r16)
  8095bc:	00800044 	movi	r2,1
  8095c0:	80c00415 	stw	r3,16(r16)
  8095c4:	80800515 	stw	r2,20(r16)
  8095c8:	80c00015 	stw	r3,0(r16)
  8095cc:	003fd506 	br	809524 <__smakebuf_r+0x90>
  8095d0:	80c00a17 	ldw	r3,40(r16)
  8095d4:	00802074 	movhi	r2,129
  8095d8:	10a58c04 	addi	r2,r2,-27088
  8095dc:	18bfcb1e 	bne	r3,r2,80950c <__smakebuf_r+0x78>
  8095e0:	8080030b 	ldhu	r2,12(r16)
  8095e4:	00c10004 	movi	r3,1024
  8095e8:	1825883a 	mov	r18,r3
  8095ec:	10c4b03a 	or	r2,r2,r3
  8095f0:	8080030d 	sth	r2,12(r16)
  8095f4:	80c01315 	stw	r3,76(r16)
  8095f8:	003fca06 	br	809524 <__smakebuf_r+0x90>
  8095fc:	8100030b 	ldhu	r4,12(r16)
  809600:	2080800c 	andi	r2,r4,512
  809604:	103fb21e 	bne	r2,zero,8094d0 <__smakebuf_r+0x3c>
  809608:	80c010c4 	addi	r3,r16,67
  80960c:	21000094 	ori	r4,r4,2
  809610:	00800044 	movi	r2,1
  809614:	80800515 	stw	r2,20(r16)
  809618:	8100030d 	sth	r4,12(r16)
  80961c:	80c00415 	stw	r3,16(r16)
  809620:	80c00015 	stw	r3,0(r16)
  809624:	003faa06 	br	8094d0 <__smakebuf_r+0x3c>

00809628 <__sclose>:
  809628:	2940038f 	ldh	r5,14(r5)
  80962c:	08097ec1 	jmpi	8097ec <_close_r>

00809630 <__sseek>:
  809630:	defffe04 	addi	sp,sp,-8
  809634:	dc000015 	stw	r16,0(sp)
  809638:	2821883a 	mov	r16,r5
  80963c:	2940038f 	ldh	r5,14(r5)
  809640:	dfc00115 	stw	ra,4(sp)
  809644:	0809a640 	call	809a64 <_lseek_r>
  809648:	1007883a 	mov	r3,r2
  80964c:	00bfffc4 	movi	r2,-1
  809650:	18800926 	beq	r3,r2,809678 <__sseek+0x48>
  809654:	8080030b 	ldhu	r2,12(r16)
  809658:	80c01415 	stw	r3,80(r16)
  80965c:	10840014 	ori	r2,r2,4096
  809660:	8080030d 	sth	r2,12(r16)
  809664:	1805883a 	mov	r2,r3
  809668:	dfc00117 	ldw	ra,4(sp)
  80966c:	dc000017 	ldw	r16,0(sp)
  809670:	dec00204 	addi	sp,sp,8
  809674:	f800283a 	ret
  809678:	8080030b 	ldhu	r2,12(r16)
  80967c:	10bbffcc 	andi	r2,r2,61439
  809680:	8080030d 	sth	r2,12(r16)
  809684:	1805883a 	mov	r2,r3
  809688:	dfc00117 	ldw	ra,4(sp)
  80968c:	dc000017 	ldw	r16,0(sp)
  809690:	dec00204 	addi	sp,sp,8
  809694:	f800283a 	ret

00809698 <__swrite>:
  809698:	2880030b 	ldhu	r2,12(r5)
  80969c:	defffb04 	addi	sp,sp,-20
  8096a0:	dcc00315 	stw	r19,12(sp)
  8096a4:	1080400c 	andi	r2,r2,256
  8096a8:	dc800215 	stw	r18,8(sp)
  8096ac:	dc400115 	stw	r17,4(sp)
  8096b0:	dc000015 	stw	r16,0(sp)
  8096b4:	3027883a 	mov	r19,r6
  8096b8:	3825883a 	mov	r18,r7
  8096bc:	dfc00415 	stw	ra,16(sp)
  8096c0:	2821883a 	mov	r16,r5
  8096c4:	000d883a 	mov	r6,zero
  8096c8:	01c00084 	movi	r7,2
  8096cc:	2023883a 	mov	r17,r4
  8096d0:	10000226 	beq	r2,zero,8096dc <__swrite+0x44>
  8096d4:	2940038f 	ldh	r5,14(r5)
  8096d8:	0809a640 	call	809a64 <_lseek_r>
  8096dc:	8080030b 	ldhu	r2,12(r16)
  8096e0:	8140038f 	ldh	r5,14(r16)
  8096e4:	8809883a 	mov	r4,r17
  8096e8:	10bbffcc 	andi	r2,r2,61439
  8096ec:	980d883a 	mov	r6,r19
  8096f0:	900f883a 	mov	r7,r18
  8096f4:	8080030d 	sth	r2,12(r16)
  8096f8:	dfc00417 	ldw	ra,16(sp)
  8096fc:	dcc00317 	ldw	r19,12(sp)
  809700:	dc800217 	ldw	r18,8(sp)
  809704:	dc400117 	ldw	r17,4(sp)
  809708:	dc000017 	ldw	r16,0(sp)
  80970c:	dec00504 	addi	sp,sp,20
  809710:	08097741 	jmpi	809774 <_write_r>

00809714 <__sread>:
  809714:	defffe04 	addi	sp,sp,-8
  809718:	dc000015 	stw	r16,0(sp)
  80971c:	2821883a 	mov	r16,r5
  809720:	2940038f 	ldh	r5,14(r5)
  809724:	dfc00115 	stw	ra,4(sp)
  809728:	0809adc0 	call	809adc <_read_r>
  80972c:	1007883a 	mov	r3,r2
  809730:	10000816 	blt	r2,zero,809754 <__sread+0x40>
  809734:	80801417 	ldw	r2,80(r16)
  809738:	10c5883a 	add	r2,r2,r3
  80973c:	80801415 	stw	r2,80(r16)
  809740:	1805883a 	mov	r2,r3
  809744:	dfc00117 	ldw	ra,4(sp)
  809748:	dc000017 	ldw	r16,0(sp)
  80974c:	dec00204 	addi	sp,sp,8
  809750:	f800283a 	ret
  809754:	8080030b 	ldhu	r2,12(r16)
  809758:	10bbffcc 	andi	r2,r2,61439
  80975c:	8080030d 	sth	r2,12(r16)
  809760:	1805883a 	mov	r2,r3
  809764:	dfc00117 	ldw	ra,4(sp)
  809768:	dc000017 	ldw	r16,0(sp)
  80976c:	dec00204 	addi	sp,sp,8
  809770:	f800283a 	ret

00809774 <_write_r>:
  809774:	defffd04 	addi	sp,sp,-12
  809778:	dc000015 	stw	r16,0(sp)
  80977c:	04002074 	movhi	r16,129
  809780:	8435a704 	addi	r16,r16,-10596
  809784:	dc400115 	stw	r17,4(sp)
  809788:	80000015 	stw	zero,0(r16)
  80978c:	2023883a 	mov	r17,r4
  809790:	2809883a 	mov	r4,r5
  809794:	300b883a 	mov	r5,r6
  809798:	380d883a 	mov	r6,r7
  80979c:	dfc00215 	stw	ra,8(sp)
  8097a0:	0809e340 	call	809e34 <write>
  8097a4:	1007883a 	mov	r3,r2
  8097a8:	00bfffc4 	movi	r2,-1
  8097ac:	18800626 	beq	r3,r2,8097c8 <_write_r+0x54>
  8097b0:	1805883a 	mov	r2,r3
  8097b4:	dfc00217 	ldw	ra,8(sp)
  8097b8:	dc400117 	ldw	r17,4(sp)
  8097bc:	dc000017 	ldw	r16,0(sp)
  8097c0:	dec00304 	addi	sp,sp,12
  8097c4:	f800283a 	ret
  8097c8:	80800017 	ldw	r2,0(r16)
  8097cc:	103ff826 	beq	r2,zero,8097b0 <_write_r+0x3c>
  8097d0:	88800015 	stw	r2,0(r17)
  8097d4:	1805883a 	mov	r2,r3
  8097d8:	dfc00217 	ldw	ra,8(sp)
  8097dc:	dc400117 	ldw	r17,4(sp)
  8097e0:	dc000017 	ldw	r16,0(sp)
  8097e4:	dec00304 	addi	sp,sp,12
  8097e8:	f800283a 	ret

008097ec <_close_r>:
  8097ec:	defffd04 	addi	sp,sp,-12
  8097f0:	dc000015 	stw	r16,0(sp)
  8097f4:	04002074 	movhi	r16,129
  8097f8:	8435a704 	addi	r16,r16,-10596
  8097fc:	dc400115 	stw	r17,4(sp)
  809800:	80000015 	stw	zero,0(r16)
  809804:	2023883a 	mov	r17,r4
  809808:	2809883a 	mov	r4,r5
  80980c:	dfc00215 	stw	ra,8(sp)
  809810:	0807cd00 	call	807cd0 <close>
  809814:	1007883a 	mov	r3,r2
  809818:	00bfffc4 	movi	r2,-1
  80981c:	18800626 	beq	r3,r2,809838 <_close_r+0x4c>
  809820:	1805883a 	mov	r2,r3
  809824:	dfc00217 	ldw	ra,8(sp)
  809828:	dc400117 	ldw	r17,4(sp)
  80982c:	dc000017 	ldw	r16,0(sp)
  809830:	dec00304 	addi	sp,sp,12
  809834:	f800283a 	ret
  809838:	80800017 	ldw	r2,0(r16)
  80983c:	103ff826 	beq	r2,zero,809820 <_close_r+0x34>
  809840:	88800015 	stw	r2,0(r17)
  809844:	1805883a 	mov	r2,r3
  809848:	dfc00217 	ldw	ra,8(sp)
  80984c:	dc400117 	ldw	r17,4(sp)
  809850:	dc000017 	ldw	r16,0(sp)
  809854:	dec00304 	addi	sp,sp,12
  809858:	f800283a 	ret

0080985c <_fclose_r>:
  80985c:	defffc04 	addi	sp,sp,-16
  809860:	dc400115 	stw	r17,4(sp)
  809864:	dc000015 	stw	r16,0(sp)
  809868:	dfc00315 	stw	ra,12(sp)
  80986c:	dc800215 	stw	r18,8(sp)
  809870:	2821883a 	mov	r16,r5
  809874:	2023883a 	mov	r17,r4
  809878:	28002926 	beq	r5,zero,809920 <_fclose_r+0xc4>
  80987c:	08090ac0 	call	8090ac <__sfp_lock_acquire>
  809880:	88000226 	beq	r17,zero,80988c <_fclose_r+0x30>
  809884:	88800e17 	ldw	r2,56(r17)
  809888:	10002d26 	beq	r2,zero,809940 <_fclose_r+0xe4>
  80988c:	8080030f 	ldh	r2,12(r16)
  809890:	10002226 	beq	r2,zero,80991c <_fclose_r+0xc0>
  809894:	8809883a 	mov	r4,r17
  809898:	800b883a 	mov	r5,r16
  80989c:	0808e240 	call	808e24 <_fflush_r>
  8098a0:	1025883a 	mov	r18,r2
  8098a4:	80800b17 	ldw	r2,44(r16)
  8098a8:	10000426 	beq	r2,zero,8098bc <_fclose_r+0x60>
  8098ac:	81400717 	ldw	r5,28(r16)
  8098b0:	8809883a 	mov	r4,r17
  8098b4:	103ee83a 	callr	r2
  8098b8:	10002a16 	blt	r2,zero,809964 <_fclose_r+0x108>
  8098bc:	8080030b 	ldhu	r2,12(r16)
  8098c0:	1080200c 	andi	r2,r2,128
  8098c4:	1000231e 	bne	r2,zero,809954 <_fclose_r+0xf8>
  8098c8:	81400c17 	ldw	r5,48(r16)
  8098cc:	28000526 	beq	r5,zero,8098e4 <_fclose_r+0x88>
  8098d0:	80801004 	addi	r2,r16,64
  8098d4:	28800226 	beq	r5,r2,8098e0 <_fclose_r+0x84>
  8098d8:	8809883a 	mov	r4,r17
  8098dc:	08033f40 	call	8033f4 <_free_r>
  8098e0:	80000c15 	stw	zero,48(r16)
  8098e4:	81401117 	ldw	r5,68(r16)
  8098e8:	28000326 	beq	r5,zero,8098f8 <_fclose_r+0x9c>
  8098ec:	8809883a 	mov	r4,r17
  8098f0:	08033f40 	call	8033f4 <_free_r>
  8098f4:	80001115 	stw	zero,68(r16)
  8098f8:	8000030d 	sth	zero,12(r16)
  8098fc:	08090b00 	call	8090b0 <__sfp_lock_release>
  809900:	9005883a 	mov	r2,r18
  809904:	dfc00317 	ldw	ra,12(sp)
  809908:	dc800217 	ldw	r18,8(sp)
  80990c:	dc400117 	ldw	r17,4(sp)
  809910:	dc000017 	ldw	r16,0(sp)
  809914:	dec00404 	addi	sp,sp,16
  809918:	f800283a 	ret
  80991c:	08090b00 	call	8090b0 <__sfp_lock_release>
  809920:	0025883a 	mov	r18,zero
  809924:	9005883a 	mov	r2,r18
  809928:	dfc00317 	ldw	ra,12(sp)
  80992c:	dc800217 	ldw	r18,8(sp)
  809930:	dc400117 	ldw	r17,4(sp)
  809934:	dc000017 	ldw	r16,0(sp)
  809938:	dec00404 	addi	sp,sp,16
  80993c:	f800283a 	ret
  809940:	8809883a 	mov	r4,r17
  809944:	08090bc0 	call	8090bc <__sinit>
  809948:	8080030f 	ldh	r2,12(r16)
  80994c:	103fd11e 	bne	r2,zero,809894 <_fclose_r+0x38>
  809950:	003ff206 	br	80991c <_fclose_r+0xc0>
  809954:	81400417 	ldw	r5,16(r16)
  809958:	8809883a 	mov	r4,r17
  80995c:	08033f40 	call	8033f4 <_free_r>
  809960:	003fd906 	br	8098c8 <_fclose_r+0x6c>
  809964:	04bfffc4 	movi	r18,-1
  809968:	003fd406 	br	8098bc <_fclose_r+0x60>

0080996c <fclose>:
  80996c:	00802074 	movhi	r2,129
  809970:	10af0404 	addi	r2,r2,-17392
  809974:	200b883a 	mov	r5,r4
  809978:	11000017 	ldw	r4,0(r2)
  80997c:	080985c1 	jmpi	80985c <_fclose_r>

00809980 <_fstat_r>:
  809980:	defffd04 	addi	sp,sp,-12
  809984:	dc000015 	stw	r16,0(sp)
  809988:	04002074 	movhi	r16,129
  80998c:	8435a704 	addi	r16,r16,-10596
  809990:	dc400115 	stw	r17,4(sp)
  809994:	80000015 	stw	zero,0(r16)
  809998:	2023883a 	mov	r17,r4
  80999c:	2809883a 	mov	r4,r5
  8099a0:	300b883a 	mov	r5,r6
  8099a4:	dfc00215 	stw	ra,8(sp)
  8099a8:	0809b680 	call	809b68 <fstat>
  8099ac:	1007883a 	mov	r3,r2
  8099b0:	00bfffc4 	movi	r2,-1
  8099b4:	18800626 	beq	r3,r2,8099d0 <_fstat_r+0x50>
  8099b8:	1805883a 	mov	r2,r3
  8099bc:	dfc00217 	ldw	ra,8(sp)
  8099c0:	dc400117 	ldw	r17,4(sp)
  8099c4:	dc000017 	ldw	r16,0(sp)
  8099c8:	dec00304 	addi	sp,sp,12
  8099cc:	f800283a 	ret
  8099d0:	80800017 	ldw	r2,0(r16)
  8099d4:	103ff826 	beq	r2,zero,8099b8 <_fstat_r+0x38>
  8099d8:	88800015 	stw	r2,0(r17)
  8099dc:	1805883a 	mov	r2,r3
  8099e0:	dfc00217 	ldw	ra,8(sp)
  8099e4:	dc400117 	ldw	r17,4(sp)
  8099e8:	dc000017 	ldw	r16,0(sp)
  8099ec:	dec00304 	addi	sp,sp,12
  8099f0:	f800283a 	ret

008099f4 <_isatty_r>:
  8099f4:	defffd04 	addi	sp,sp,-12
  8099f8:	dc000015 	stw	r16,0(sp)
  8099fc:	04002074 	movhi	r16,129
  809a00:	8435a704 	addi	r16,r16,-10596
  809a04:	dc400115 	stw	r17,4(sp)
  809a08:	80000015 	stw	zero,0(r16)
  809a0c:	2023883a 	mov	r17,r4
  809a10:	2809883a 	mov	r4,r5
  809a14:	dfc00215 	stw	ra,8(sp)
  809a18:	0809bf80 	call	809bf8 <isatty>
  809a1c:	1007883a 	mov	r3,r2
  809a20:	00bfffc4 	movi	r2,-1
  809a24:	18800626 	beq	r3,r2,809a40 <_isatty_r+0x4c>
  809a28:	1805883a 	mov	r2,r3
  809a2c:	dfc00217 	ldw	ra,8(sp)
  809a30:	dc400117 	ldw	r17,4(sp)
  809a34:	dc000017 	ldw	r16,0(sp)
  809a38:	dec00304 	addi	sp,sp,12
  809a3c:	f800283a 	ret
  809a40:	80800017 	ldw	r2,0(r16)
  809a44:	103ff826 	beq	r2,zero,809a28 <_isatty_r+0x34>
  809a48:	88800015 	stw	r2,0(r17)
  809a4c:	1805883a 	mov	r2,r3
  809a50:	dfc00217 	ldw	ra,8(sp)
  809a54:	dc400117 	ldw	r17,4(sp)
  809a58:	dc000017 	ldw	r16,0(sp)
  809a5c:	dec00304 	addi	sp,sp,12
  809a60:	f800283a 	ret

00809a64 <_lseek_r>:
  809a64:	defffd04 	addi	sp,sp,-12
  809a68:	dc000015 	stw	r16,0(sp)
  809a6c:	04002074 	movhi	r16,129
  809a70:	8435a704 	addi	r16,r16,-10596
  809a74:	dc400115 	stw	r17,4(sp)
  809a78:	80000015 	stw	zero,0(r16)
  809a7c:	2023883a 	mov	r17,r4
  809a80:	2809883a 	mov	r4,r5
  809a84:	300b883a 	mov	r5,r6
  809a88:	380d883a 	mov	r6,r7
  809a8c:	dfc00215 	stw	ra,8(sp)
  809a90:	0809c7c0 	call	809c7c <lseek>
  809a94:	1007883a 	mov	r3,r2
  809a98:	00bfffc4 	movi	r2,-1
  809a9c:	18800626 	beq	r3,r2,809ab8 <_lseek_r+0x54>
  809aa0:	1805883a 	mov	r2,r3
  809aa4:	dfc00217 	ldw	ra,8(sp)
  809aa8:	dc400117 	ldw	r17,4(sp)
  809aac:	dc000017 	ldw	r16,0(sp)
  809ab0:	dec00304 	addi	sp,sp,12
  809ab4:	f800283a 	ret
  809ab8:	80800017 	ldw	r2,0(r16)
  809abc:	103ff826 	beq	r2,zero,809aa0 <_lseek_r+0x3c>
  809ac0:	88800015 	stw	r2,0(r17)
  809ac4:	1805883a 	mov	r2,r3
  809ac8:	dfc00217 	ldw	ra,8(sp)
  809acc:	dc400117 	ldw	r17,4(sp)
  809ad0:	dc000017 	ldw	r16,0(sp)
  809ad4:	dec00304 	addi	sp,sp,12
  809ad8:	f800283a 	ret

00809adc <_read_r>:
  809adc:	defffd04 	addi	sp,sp,-12
  809ae0:	dc000015 	stw	r16,0(sp)
  809ae4:	04002074 	movhi	r16,129
  809ae8:	8435a704 	addi	r16,r16,-10596
  809aec:	dc400115 	stw	r17,4(sp)
  809af0:	80000015 	stw	zero,0(r16)
  809af4:	2023883a 	mov	r17,r4
  809af8:	2809883a 	mov	r4,r5
  809afc:	300b883a 	mov	r5,r6
  809b00:	380d883a 	mov	r6,r7
  809b04:	dfc00215 	stw	ra,8(sp)
  809b08:	0809d180 	call	809d18 <read>
  809b0c:	1007883a 	mov	r3,r2
  809b10:	00bfffc4 	movi	r2,-1
  809b14:	18800626 	beq	r3,r2,809b30 <_read_r+0x54>
  809b18:	1805883a 	mov	r2,r3
  809b1c:	dfc00217 	ldw	ra,8(sp)
  809b20:	dc400117 	ldw	r17,4(sp)
  809b24:	dc000017 	ldw	r16,0(sp)
  809b28:	dec00304 	addi	sp,sp,12
  809b2c:	f800283a 	ret
  809b30:	80800017 	ldw	r2,0(r16)
  809b34:	103ff826 	beq	r2,zero,809b18 <_read_r+0x3c>
  809b38:	88800015 	stw	r2,0(r17)
  809b3c:	1805883a 	mov	r2,r3
  809b40:	dfc00217 	ldw	ra,8(sp)
  809b44:	dc400117 	ldw	r17,4(sp)
  809b48:	dc000017 	ldw	r16,0(sp)
  809b4c:	dec00304 	addi	sp,sp,12
  809b50:	f800283a 	ret

00809b54 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  809b54:	20000226 	beq	r4,zero,809b60 <_exit+0xc>
    ALT_SIM_FAIL();
  809b58:	002af070 	cmpltui	zero,zero,43969
  809b5c:	003fff06 	br	809b5c <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  809b60:	002af0b0 	cmpltui	zero,zero,43970
  809b64:	003ffd06 	br	809b5c <_exit+0x8>

00809b68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809b68:	deffff04 	addi	sp,sp,-4
  809b6c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809b70:	20c00324 	muli	r3,r4,12
  809b74:	20001116 	blt	r4,zero,809bbc <fstat+0x54>
  809b78:	00802074 	movhi	r2,129
  809b7c:	10aea404 	addi	r2,r2,-17776
  809b80:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809b84:	20000d26 	beq	r4,zero,809bbc <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809b88:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809b8c:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809b90:	10800817 	ldw	r2,32(r2)
  809b94:	10000326 	beq	r2,zero,809ba4 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  809b98:	dfc00017 	ldw	ra,0(sp)
  809b9c:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  809ba0:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809ba4:	00880004 	movi	r2,8192
  809ba8:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  809bac:	1805883a 	mov	r2,r3
  809bb0:	dfc00017 	ldw	ra,0(sp)
  809bb4:	dec00104 	addi	sp,sp,4
  809bb8:	f800283a 	ret
  809bbc:	00802074 	movhi	r2,129
  809bc0:	10af1004 	addi	r2,r2,-17344
  809bc4:	10800017 	ldw	r2,0(r2)
  809bc8:	00c02074 	movhi	r3,129
  809bcc:	18f5a704 	addi	r3,r3,-10596
  809bd0:	10000226 	beq	r2,zero,809bdc <fstat+0x74>
  809bd4:	103ee83a 	callr	r2
  809bd8:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809bdc:	00801444 	movi	r2,81
  809be0:	18800015 	stw	r2,0(r3)
  809be4:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  809be8:	1805883a 	mov	r2,r3
  809bec:	dfc00017 	ldw	ra,0(sp)
  809bf0:	dec00104 	addi	sp,sp,4
  809bf4:	f800283a 	ret

00809bf8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809bf8:	defff004 	addi	sp,sp,-64
  809bfc:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809c00:	20c00324 	muli	r3,r4,12
  809c04:	20000f16 	blt	r4,zero,809c44 <isatty+0x4c>
  809c08:	00802074 	movhi	r2,129
  809c0c:	10aea404 	addi	r2,r2,-17776
  809c10:	1885883a 	add	r2,r3,r2
  
  if (fd)
  809c14:	10000b26 	beq	r2,zero,809c44 <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809c18:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809c1c:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809c20:	10c00817 	ldw	r3,32(r2)
  809c24:	00800044 	movi	r2,1
  809c28:	18000326 	beq	r3,zero,809c38 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809c2c:	0809b680 	call	809b68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  809c30:	d8c00117 	ldw	r3,4(sp)
  809c34:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  809c38:	dfc00f17 	ldw	ra,60(sp)
  809c3c:	dec01004 	addi	sp,sp,64
  809c40:	f800283a 	ret
  809c44:	00802074 	movhi	r2,129
  809c48:	10af1004 	addi	r2,r2,-17344
  809c4c:	10800017 	ldw	r2,0(r2)
  809c50:	00c02074 	movhi	r3,129
  809c54:	18f5a704 	addi	r3,r3,-10596
  809c58:	10000226 	beq	r2,zero,809c64 <isatty+0x6c>
  809c5c:	103ee83a 	callr	r2
  809c60:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809c64:	00801444 	movi	r2,81
  809c68:	18800015 	stw	r2,0(r3)
  809c6c:	0005883a 	mov	r2,zero
    return 0;
  }
}
  809c70:	dfc00f17 	ldw	ra,60(sp)
  809c74:	dec01004 	addi	sp,sp,64
  809c78:	f800283a 	ret

00809c7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  809c7c:	defffe04 	addi	sp,sp,-8
  809c80:	dfc00115 	stw	ra,4(sp)
  809c84:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809c88:	20001f16 	blt	r4,zero,809d08 <lseek+0x8c>
  809c8c:	20c00324 	muli	r3,r4,12
  809c90:	00802074 	movhi	r2,129
  809c94:	10aea404 	addi	r2,r2,-17776
  809c98:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  809c9c:	20001c26 	beq	r4,zero,809d10 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809ca0:	20800017 	ldw	r2,0(r4)
  809ca4:	10800717 	ldw	r2,28(r2)
  809ca8:	10000626 	beq	r2,zero,809cc4 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  809cac:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  809cb0:	10000516 	blt	r2,zero,809cc8 <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  809cb4:	dfc00117 	ldw	ra,4(sp)
  809cb8:	dc000017 	ldw	r16,0(sp)
  809cbc:	dec00204 	addi	sp,sp,8
  809cc0:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809cc4:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  809cc8:	00a1c83a 	sub	r16,zero,r2
  809ccc:	00802074 	movhi	r2,129
  809cd0:	10af1004 	addi	r2,r2,-17344
  809cd4:	10800017 	ldw	r2,0(r2)
  809cd8:	10000826 	beq	r2,zero,809cfc <lseek+0x80>
  809cdc:	103ee83a 	callr	r2
  809ce0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  809ce4:	00bfffc4 	movi	r2,-1
  809ce8:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  809cec:	dfc00117 	ldw	ra,4(sp)
  809cf0:	dc000017 	ldw	r16,0(sp)
  809cf4:	dec00204 	addi	sp,sp,8
  809cf8:	f800283a 	ret
  809cfc:	00c02074 	movhi	r3,129
  809d00:	18f5a704 	addi	r3,r3,-10596
  809d04:	003ff706 	br	809ce4 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809d08:	04001444 	movi	r16,81
  809d0c:	003fef06 	br	809ccc <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  809d10:	00bfebc4 	movi	r2,-81
  809d14:	003fec06 	br	809cc8 <lseek+0x4c>

00809d18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  809d18:	defffe04 	addi	sp,sp,-8
  809d1c:	dfc00115 	stw	ra,4(sp)
  809d20:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809d24:	20002516 	blt	r4,zero,809dbc <read+0xa4>
  809d28:	20c00324 	muli	r3,r4,12
  809d2c:	00802074 	movhi	r2,129
  809d30:	10aea404 	addi	r2,r2,-17776
  809d34:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809d38:	20002026 	beq	r4,zero,809dbc <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  809d3c:	20800217 	ldw	r2,8(r4)
  809d40:	00c00044 	movi	r3,1
  809d44:	108000cc 	andi	r2,r2,3
  809d48:	10c00b26 	beq	r2,r3,809d78 <read+0x60>
  809d4c:	20800017 	ldw	r2,0(r4)
  809d50:	10800517 	ldw	r2,20(r2)
  809d54:	10000826 	beq	r2,zero,809d78 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  809d58:	103ee83a 	callr	r2
  809d5c:	1021883a 	mov	r16,r2
  809d60:	10002716 	blt	r2,zero,809e00 <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809d64:	8005883a 	mov	r2,r16
  809d68:	dfc00117 	ldw	ra,4(sp)
  809d6c:	dc000017 	ldw	r16,0(sp)
  809d70:	dec00204 	addi	sp,sp,8
  809d74:	f800283a 	ret
  809d78:	00802074 	movhi	r2,129
  809d7c:	10af1004 	addi	r2,r2,-17344
  809d80:	10800017 	ldw	r2,0(r2)
  809d84:	10000a26 	beq	r2,zero,809db0 <read+0x98>
  809d88:	103ee83a 	callr	r2
  809d8c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  809d90:	043fffc4 	movi	r16,-1
  809d94:	00800344 	movi	r2,13
  809d98:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809d9c:	8005883a 	mov	r2,r16
  809da0:	dfc00117 	ldw	ra,4(sp)
  809da4:	dc000017 	ldw	r16,0(sp)
  809da8:	dec00204 	addi	sp,sp,8
  809dac:	f800283a 	ret
  809db0:	00c02074 	movhi	r3,129
  809db4:	18f5a704 	addi	r3,r3,-10596
  809db8:	003ff506 	br	809d90 <read+0x78>
  809dbc:	00802074 	movhi	r2,129
  809dc0:	10af1004 	addi	r2,r2,-17344
  809dc4:	10800017 	ldw	r2,0(r2)
  809dc8:	10000a26 	beq	r2,zero,809df4 <read+0xdc>
  809dcc:	103ee83a 	callr	r2
  809dd0:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  809dd4:	00801444 	movi	r2,81
  809dd8:	043fffc4 	movi	r16,-1
  809ddc:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  809de0:	8005883a 	mov	r2,r16
  809de4:	dfc00117 	ldw	ra,4(sp)
  809de8:	dc000017 	ldw	r16,0(sp)
  809dec:	dec00204 	addi	sp,sp,8
  809df0:	f800283a 	ret
  809df4:	00c02074 	movhi	r3,129
  809df8:	18f5a704 	addi	r3,r3,-10596
  809dfc:	003ff506 	br	809dd4 <read+0xbc>
  809e00:	00802074 	movhi	r2,129
  809e04:	10af1004 	addi	r2,r2,-17344
  809e08:	10800017 	ldw	r2,0(r2)
  809e0c:	10000626 	beq	r2,zero,809e28 <read+0x110>
  809e10:	103ee83a 	callr	r2
  809e14:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  809e18:	0405c83a 	sub	r2,zero,r16
  809e1c:	043fffc4 	movi	r16,-1
  809e20:	18800015 	stw	r2,0(r3)
  809e24:	003fcf06 	br	809d64 <read+0x4c>
  809e28:	00c02074 	movhi	r3,129
  809e2c:	18f5a704 	addi	r3,r3,-10596
  809e30:	003ff906 	br	809e18 <read+0x100>

00809e34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  809e34:	defffe04 	addi	sp,sp,-8
  809e38:	dfc00115 	stw	ra,4(sp)
  809e3c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809e40:	20002416 	blt	r4,zero,809ed4 <write+0xa0>
  809e44:	20c00324 	muli	r3,r4,12
  809e48:	00802074 	movhi	r2,129
  809e4c:	10aea404 	addi	r2,r2,-17776
  809e50:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809e54:	20001f26 	beq	r4,zero,809ed4 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  809e58:	20800217 	ldw	r2,8(r4)
  809e5c:	108000cc 	andi	r2,r2,3
  809e60:	10000b26 	beq	r2,zero,809e90 <write+0x5c>
  809e64:	20800017 	ldw	r2,0(r4)
  809e68:	10800617 	ldw	r2,24(r2)
  809e6c:	10000826 	beq	r2,zero,809e90 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  809e70:	103ee83a 	callr	r2
  809e74:	1021883a 	mov	r16,r2
  809e78:	10002716 	blt	r2,zero,809f18 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809e7c:	8005883a 	mov	r2,r16
  809e80:	dfc00117 	ldw	ra,4(sp)
  809e84:	dc000017 	ldw	r16,0(sp)
  809e88:	dec00204 	addi	sp,sp,8
  809e8c:	f800283a 	ret
  809e90:	00802074 	movhi	r2,129
  809e94:	10af1004 	addi	r2,r2,-17344
  809e98:	10800017 	ldw	r2,0(r2)
  809e9c:	10000a26 	beq	r2,zero,809ec8 <write+0x94>
  809ea0:	103ee83a 	callr	r2
  809ea4:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  809ea8:	043fffc4 	movi	r16,-1
  809eac:	00800344 	movi	r2,13
  809eb0:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809eb4:	8005883a 	mov	r2,r16
  809eb8:	dfc00117 	ldw	ra,4(sp)
  809ebc:	dc000017 	ldw	r16,0(sp)
  809ec0:	dec00204 	addi	sp,sp,8
  809ec4:	f800283a 	ret
  809ec8:	00c02074 	movhi	r3,129
  809ecc:	18f5a704 	addi	r3,r3,-10596
  809ed0:	003ff506 	br	809ea8 <write+0x74>
  809ed4:	00802074 	movhi	r2,129
  809ed8:	10af1004 	addi	r2,r2,-17344
  809edc:	10800017 	ldw	r2,0(r2)
  809ee0:	10000a26 	beq	r2,zero,809f0c <write+0xd8>
  809ee4:	103ee83a 	callr	r2
  809ee8:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  809eec:	00801444 	movi	r2,81
  809ef0:	043fffc4 	movi	r16,-1
  809ef4:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  809ef8:	8005883a 	mov	r2,r16
  809efc:	dfc00117 	ldw	ra,4(sp)
  809f00:	dc000017 	ldw	r16,0(sp)
  809f04:	dec00204 	addi	sp,sp,8
  809f08:	f800283a 	ret
  809f0c:	00c02074 	movhi	r3,129
  809f10:	18f5a704 	addi	r3,r3,-10596
  809f14:	003ff506 	br	809eec <write+0xb8>
  809f18:	00802074 	movhi	r2,129
  809f1c:	10af1004 	addi	r2,r2,-17344
  809f20:	10800017 	ldw	r2,0(r2)
  809f24:	10000626 	beq	r2,zero,809f40 <write+0x10c>
  809f28:	103ee83a 	callr	r2
  809f2c:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  809f30:	0405c83a 	sub	r2,zero,r16
  809f34:	043fffc4 	movi	r16,-1
  809f38:	18800015 	stw	r2,0(r3)
  809f3c:	003fcf06 	br	809e7c <write+0x48>
  809f40:	00c02074 	movhi	r3,129
  809f44:	18f5a704 	addi	r3,r3,-10596
  809f48:	003ff906 	br	809f30 <write+0xfc>
  809f4c:	00808c70 	cmpltui	r2,zero,561
