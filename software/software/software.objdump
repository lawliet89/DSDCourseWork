
software.elf:     file format elf32-littlenios2
software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000a3a0 memsz 0x0000a3a0 flags r-x
    LOAD off    0x0000b3c0 vaddr 0x0080a3c0 paddr 0x0080be08 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x0000d850 vaddr 0x0080d850 paddr 0x0080d850 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009f7c  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002c0  0080a100  0080a100  0000b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  0080a3c0  0080be08  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0080d850  0080d850  0000d850  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000ce08  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  0000ce30  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000137e  00000000  00000000  0000db28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00020cc1  00000000  00000000  0000eea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008888  00000000  00000000  0002fb67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000135ee  00000000  00000000  000383ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001738  00000000  00000000  0004b9e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027e3  00000000  00000000  0004d118  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a968  00000000  00000000  0004f8fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005a264  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005a288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005d933  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005d936  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005d939  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005d93a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005d93b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005d93f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005d943  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005d947  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005d950  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005d959  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0005d962  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000014  00000000  00000000  0005d974  2**0
                  CONTENTS, READONLY
 29 .jdi          00005134  00000000  00000000  0005d988  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003102f  00000000  00000000  00062abc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
0080a100 l    d  .rodata	00000000 .rodata
0080a3c0 l    d  .rwdata	00000000 .rwdata
0080d850 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
0080070c l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00800e04 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
0080a3c0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
008029c0 l     F .text	000001f0 print_e
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mprec.c
0080a384 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
00804fe0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008071e8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080bde0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080abc8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00807808 l     F .text	00000058 altera_avalon_jtag_uart_timeout
008078e0 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00807db0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00807f74 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808e20 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00809204 l     F .text	00000058 std
00809310 l     F .text	00000008 __fp_lock
00809318 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_write.c
00803cc4 g     F .text	00000094 _mprec_log10
00803db0 g     F .text	00000088 __any_on
00809ba4 g     F .text	00000070 _isatty_r
0080a35c g     O .rodata	00000028 __mprec_tinytens
008074b0 g     F .text	00000050 alt_main
00804ea0 g     F .text	0000008c strcpy
0080d8a0 g     O .bss	00000100 alt_irq
00809c14 g     F .text	00000078 _lseek_r
0080be08 g       *ABS*	00000000 __flash_rwdata_start
00806ce8 g     F .text	00000088 __eqdf2
0080d9a0 g       *ABS*	00000000 __alt_heap_start
008097e0 g     F .text	00000068 __sseek
0080926c g     F .text	000000a4 __sinit
008032d0 g     F .text	000001a8 fcvtbuf
0080936c g     F .text	00000068 __sfmoreglue
00807504 g     F .text	00000004 __malloc_unlock
00800ba4 g     F .text	00000174 __divsf3
00800304 g     F .text	000002d8 determinant
008067ac g     F .text	000000e0 memmove
0080935c g     F .text	00000010 _cleanup
00803e38 g     F .text	000000bc _Balloc
00807508 g     F .text	00000014 alt_putstr
00806df8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
0080768c g     F .text	00000080 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
008001c0 g     F .text	0000001c getAt
00809b30 g     F .text	00000074 _fstat_r
0080d85c g     O .bss	00000004 errno
00801560 g     F .text	00000038 __make_dp
0080d864 g     O .bss	00000004 alt_argv
00813dd0 g       *ABS*	00000000 _gp
008008f0 g     F .text	00000070 __subsf3
0080bc50 g     O .rwdata	00000180 alt_fd_list
008083d8 g     F .text	00000094 alt_find_dev
0080281c g     F .text	000000a0 memcpy
00809350 g     F .text	0000000c _cleanup_r
00807018 g     F .text	000000f8 __floatsidf
00808128 g     F .text	00000104 alt_io_redirect
00806f08 g     F .text	00000088 __ltdf2
00803c14 g     F .text	000000b0 __ratio
00807a70 g     F .text	0000016c altera_avalon_jtag_uart_read
008020c8 g     F .text	00000014 malloc
00807324 g     F .text	00000008 __udivsi3
00809da8 g     F .text	00000084 isatty
0080a26c g     O .rodata	000000c8 __mprec_tens
00801f84 g     F .text	00000040 gcvtf
0080857c g     F .text	00000038 alt_icache_flush
0080d850 g     O .bss	00000004 __malloc_top_pad
0080867c g     F .text	0000049c __sfvwrite_r
00804530 g     F .text	0000003c __i2b
00802950 g     F .text	00000070 _sbrk_r
00809c8c g     F .text	00000078 _read_r
0080bdfc g     O .rwdata	00000004 alt_max_fd
00801d80 g     F .text	00000138 __unpack_d
00809a0c g     F .text	00000110 _fclose_r
008091d0 g     F .text	00000034 fflush
0080d854 g     O .bss	00000004 __malloc_max_sbrked_mem
00800db0 g     F .text	00000054 __extendsfdf2
00801294 g     F .text	00000074 __adddf3
00803af4 g     F .text	00000120 __b2d
00809e2c g     F .text	0000009c lseek
0080bdd4 g     O .rwdata	00000004 _global_impure_ptr
008048ac g     F .text	000005f4 _realloc_r
0080d9a0 g       *ABS*	00000000 __bss_end
008080a0 g     F .text	00000088 alt_iic_isr_register
008075a4 g     F .text	000000e8 alt_tick
0080a334 g     O .rodata	00000028 __mprec_bigtens
0080478c g     F .text	00000120 __s2b
00801598 g     F .text	00000194 __floatunsidf
00803a14 g     F .text	00000060 __mcmp
00809338 g     F .text	00000018 __fp_lock_all
00808004 g     F .text	00000018 alt_ic_irq_enabled
00807570 g     F .text	00000034 alt_alarm_stop
0080d874 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
0080bc28 g     O .rwdata	00000028 alt_dev_null
008019a4 g     F .text	000000c8 __unpack_f
008001dc g     F .text	00000020 putAt
00807f70 g     F .text	00000004 alt_dcache_flush_all
008038e0 g     F .text	00000070 __hi0bits
00807110 g     F .text	000000d8 __fixdfsi
0080be08 g       *ABS*	00000000 __ram_rwdata_end
0080bdf4 g     O .rwdata	00000008 alt_dev_list
00809fe4 g     F .text	00000118 write
0080a3c0 g       *ABS*	00000000 __ram_rodata_end
00809d18 g     F .text	00000090 fstat
00806f90 g     F .text	00000088 __ledf2
0080466c g     F .text	00000120 __pow5mult
0080732c g     F .text	00000008 __umodsi3
0080d9a0 g       *ABS*	00000000 end
00801844 g     F .text	00000160 __pack_f
00807860 g     F .text	00000080 altera_avalon_jtag_uart_init
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802e90 g     F .text	000002f8 _dcvt
00807d60 g     F .text	00000050 alt_avalon_timer_sc_init
008017c4 g     F .text	00000080 __clzsi2
00807bdc g     F .text	00000184 altera_avalon_jtag_uart_write
0080925c g     F .text	00000004 __sfp_lock_acquire
00808b18 g     F .text	000000e4 memchr
008035a4 g     F .text	00000314 _free_r
00808e24 g     F .text	000001b0 __call_exitprocs
0080bddc g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000003c _start
0080d86c g     O .bss	00000004 _alt_tick_rate
008028d8 g     F .text	00000078 rand
00802bb0 g     F .text	000002e0 _gcvt
008041fc g     F .text	0000014c __lshift
0080d870 g     O .bss	00000004 _alt_nticks
00809ec8 g     F .text	0000011c read
0080770c g     F .text	00000058 alt_sys_init
00800d18 g     F .text	00000098 __floatsisf
00804348 g     F .text	000001e8 __multiply
008077c0 g     F .text	00000048 altera_avalon_jtag_uart_close
0080a3c0 g       *ABS*	00000000 __ram_rwdata_start
0080a100 g       *ABS*	00000000 __ram_rodata_start
0080d878 g     O .bss	00000028 __malloc_current_mallinfo
00803ef4 g     F .text	0000017c __d2b
008001fc g     F .text	00000108 randomMatrix
008077b0 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0080851c g     F .text	00000060 alt_get_fd
00807334 g     F .text	000000c8 __fpcmp_parts_d
0080999c g     F .text	00000070 _close_r
00808bfc g     F .text	00000074 memcmp
00807790 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0080d9a0 g       *ABS*	00000000 __alt_stack_base
00807784 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00808ce4 g     F .text	0000013c __swsetup_r
00801308 g     F .text	00000258 __divdf3
008093d4 g     F .text	000000f0 __sfp
00803d58 g     F .text	00000058 __copybits
0080a7c0 g     O .rwdata	00000408 __malloc_av_
00809268 g     F .text	00000004 __sinit_lock_release
00806924 g     F .text	000003c4 __muldf3
008098c4 g     F .text	00000060 __sread
0080a144 g     O .rodata	00000010 __thenan_sf
0080846c g     F .text	000000b0 alt_find_file
00807f7c g     F .text	0000007c alt_dev_llist_insert
00807500 g     F .text	00000004 __malloc_lock
0080751c g     F .text	00000054 sbrk
00808fd4 g     F .text	000001fc _fflush_r
00804f2c g     F .text	000000b4 _calloc_r
0080d850 g       *ABS*	00000000 __bss_start
0080688c g     F .text	00000098 memset
008005dc g     F .text	00000130 main
0080203c g     F .text	00000024 fcvt
0080d868 g     O .bss	00000004 alt_envp
0080d858 g     O .bss	00000004 __malloc_max_total_mem
008077a0 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
008028bc g     F .text	0000001c srand
00803188 g     F .text	00000148 ecvtbuf
008097d8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809b1c g     F .text	00000014 fclose
008051f8 g     F .text	000015b4 _dtoa_r
008020dc g     F .text	00000740 _malloc_r
0080be00 g     O .rwdata	00000004 alt_errno
00801fe8 g     F .text	00000054 ecvtf
0080958c g     F .text	000000b8 _fwalk
00807264 g     F .text	00000060 __divsi3
0080a154 g     O .rodata	00000014 __thenan_df
00803478 g     F .text	0000012c _malloc_trim_r
008009c4 g     F .text	000001e0 __mulsf3
0080a100 g       *ABS*	00000000 __flash_rodata_start
00806d70 g     F .text	00000088 __nedf2
00807764 g     F .text	00000020 alt_irq_init
008083ac g     F .text	00000024 alt_release_fd
0080a168 g     O .rodata	00000100 __clz_tab
00809924 g     F .text	00000078 _write_r
0080bdd0 g     O .rwdata	00000004 _impure_ptr
0080d860 g     O .bss	00000004 alt_argc
00800020 g       .exceptions	00000000 alt_irq_entry
00803a74 g     F .text	00000080 __ulp
00809320 g     F .text	00000018 __fp_unlock_all
00801fc4 g     F .text	00000024 ecvt
0080bdec g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080809c g     F .text	00000004 alt_ic_isr_register
0080be08 g       *ABS*	00000000 _edata
0080d9a0 g       *ABS*	00000000 _end
00800184 g       *ABS*	00000000 __ram_exceptions_end
008079e8 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
008085ec g     F .text	00000074 _fputs_r
0080805c g     F .text	00000040 alt_ic_irq_disable
00809848 g     F .text	0000007c __swrite
0080bdd8 g     O .rwdata	00000004 __malloc_trim_threshold
00802060 g     F .text	00000054 fcvtf
008083d0 g     F .text	00000008 altera_nios2_qsys_irq_init
008085b4 g     F .text	00000038 exit
008094c4 g     F .text	000000c8 _fwalk_reent
00804070 g     F .text	0000018c __mdiff
008072c4 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809260 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801eb8 g     F .text	000000cc gcvt
00809d04 g     F .text	00000014 _exit
00807dec g     F .text	00000094 alt_alarm_start
0080172c g     F .text	00000098 __muldi3
00809644 g     F .text	00000194 __smakebuf_r
00808c70 g     F .text	00000074 strlen
0080822c g     F .text	00000180 open
00806e80 g     F .text	00000088 __gedf2
00807ff8 g     F .text	0000000c alt_icache_flush_all
00808660 g     F .text	0000001c fputs
0080be04 g     O .rwdata	00000004 alt_priority_mask
0080801c g     F .text	00000040 alt_ic_irq_enable
00801214 g     F .text	00000080 __subdf3
00803950 g     F .text	000000c4 __lo0bits
0080bde4 g     O .rwdata	00000008 alt_alarm_list
00807e80 g     F .text	000000f0 close
00800960 g     F .text	00000064 __addsf3
008073fc g     F .text	000000b4 alt_load
00801a6c g     F .text	00000314 __pack_d
008020b4 g     F .text	00000014 free
00809264 g     F .text	00000004 __sinit_lock_acquire
0080456c g     F .text	00000100 __multadd
008038b8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002074 	movhi	r16,129
  800108:	84362804 	addi	r16,r16,-10080
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800184:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800188:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80018c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800190:	d68f7414 	ori	gp,gp,15824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800194:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800198:	10b61414 	ori	r2,r2,55376

    movhi r3, %hi(__bss_end)
  80019c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001a0:	18f66814 	ori	r3,r3,55712

    beq r2, r3, 1f
  8001a4:	10c00326 	beq	r2,r3,8001b4 <_start+0x30>

0:
    stw zero, (r2)
  8001a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001b0:	10fffd36 	bltu	r2,r3,8001a8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b4:	08073fc0 	call	8073fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b8:	08074b00 	call	8074b0 <alt_main>

008001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001bc:	003fff06 	br	8001bc <alt_after_alt_main>

008001c0 <getAt>:

	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
  8001c0:	29cb383a 	mul	r5,r5,r7
  8001c4:	298b883a 	add	r5,r5,r6
  8001c8:	294b883a 	add	r5,r5,r5
  8001cc:	294b883a 	add	r5,r5,r5
  8001d0:	290b883a 	add	r5,r5,r4
	return *(m + i*dimension + j);
}
  8001d4:	28800017 	ldw	r2,0(r5)
  8001d8:	f800283a 	ret

008001dc <putAt>:

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8001dc:	29cb383a 	mul	r5,r5,r7
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
  8001e0:	d8800017 	ldw	r2,0(sp)
	*(m + i*dimension + j) = value;
  8001e4:	298b883a 	add	r5,r5,r6
  8001e8:	294b883a 	add	r5,r5,r5
  8001ec:	294b883a 	add	r5,r5,r5
  8001f0:	290b883a 	add	r5,r5,r4
  8001f4:	28800015 	stw	r2,0(r5)
}
  8001f8:	f800283a 	ret

008001fc <randomMatrix>:

void randomMatrix(float *matrix, int dimension){
  8001fc:	defff604 	addi	sp,sp,-40
  800200:	dc800515 	stw	r18,20(sp)
  800204:	dc000315 	stw	r16,12(sp)
  800208:	2825883a 	mov	r18,r5
  80020c:	2021883a 	mov	r16,r4
	int i, j;
	float no;
	char buffer[11];
	alt_putstr("[");
  800210:	01002074 	movhi	r4,129
  800214:	21284004 	addi	r4,r4,-24320
// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
}

void randomMatrix(float *matrix, int dimension){
  800218:	dfc00915 	stw	ra,36(sp)
  80021c:	dd400815 	stw	r21,32(sp)
  800220:	dd000715 	stw	r20,28(sp)
  800224:	dcc00615 	stw	r19,24(sp)
  800228:	dc400415 	stw	r17,16(sp)
	int i, j;
	float no;
	char buffer[11];
	alt_putstr("[");
  80022c:	08075080 	call	807508 <alt_putstr>
	for (i = 0; i < dimension; i++){
  800230:	0480280e 	bge	zero,r18,8002d4 <randomMatrix+0xd8>
  800234:	9485883a 	add	r2,r18,r18
  800238:	10ab883a 	add	r21,r2,r2
  80023c:	8027883a 	mov	r19,r16
  800240:	0029883a 	mov	r20,zero
  800244:	9821883a 	mov	r16,r19
  800248:	0023883a 	mov	r17,zero
		for (j = 0; j < dimension; j++){
			no = ((float) (rand()%20))/10-1;
  80024c:	08028d80 	call	8028d8 <rand>
  800250:	01000504 	movi	r4,20
  800254:	1109283a 	div	r4,r2,r4
  800258:	21000524 	muli	r4,r4,20
	int i, j;
	float no;
	char buffer[11];
	alt_putstr("[");
	for (i = 0; i < dimension; i++){
		for (j = 0; j < dimension; j++){
  80025c:	8c400044 	addi	r17,r17,1
			no = ((float) (rand()%20))/10-1;
  800260:	1109c83a 	sub	r4,r2,r4
  800264:	0800d180 	call	800d18 <__floatsisf>
  800268:	1009883a 	mov	r4,r2
  80026c:	01504834 	movhi	r5,16672
  800270:	0800ba40 	call	800ba4 <__divsf3>
  800274:	1009883a 	mov	r4,r2
  800278:	014fe034 	movhi	r5,16256
  80027c:	08008f00 	call	8008f0 <__subsf3>
			*(matrix+i*dimension+j) = no;
  800280:	80800015 	stw	r2,0(r16)
			gcvt(no, 10, buffer);
  800284:	1009883a 	mov	r4,r2
  800288:	0800db00 	call	800db0 <__extendsfdf2>
  80028c:	180b883a 	mov	r5,r3
  800290:	01800284 	movi	r6,10
  800294:	d80f883a 	mov	r7,sp
  800298:	1009883a 	mov	r4,r2
  80029c:	0801eb80 	call	801eb8 <gcvt>
			alt_putstr(buffer);
  8002a0:	d809883a 	mov	r4,sp
  8002a4:	08075080 	call	807508 <alt_putstr>
			alt_putstr(" ");
  8002a8:	01002074 	movhi	r4,129
  8002ac:	21284d04 	addi	r4,r4,-24268
  8002b0:	08075080 	call	807508 <alt_putstr>
	int i, j;
	float no;
	char buffer[11];
	alt_putstr("[");
	for (i = 0; i < dimension; i++){
		for (j = 0; j < dimension; j++){
  8002b4:	84000104 	addi	r16,r16,4
  8002b8:	947fe41e 	bne	r18,r17,80024c <randomMatrix+0x50>
			*(matrix+i*dimension+j) = no;
			gcvt(no, 10, buffer);
			alt_putstr(buffer);
			alt_putstr(" ");
		}
		alt_putstr(";\n");
  8002bc:	01002074 	movhi	r4,129
  8002c0:	21284104 	addi	r4,r4,-24316
void randomMatrix(float *matrix, int dimension){
	int i, j;
	float no;
	char buffer[11];
	alt_putstr("[");
	for (i = 0; i < dimension; i++){
  8002c4:	a5000044 	addi	r20,r20,1
			*(matrix+i*dimension+j) = no;
			gcvt(no, 10, buffer);
			alt_putstr(buffer);
			alt_putstr(" ");
		}
		alt_putstr(";\n");
  8002c8:	08075080 	call	807508 <alt_putstr>
void randomMatrix(float *matrix, int dimension){
	int i, j;
	float no;
	char buffer[11];
	alt_putstr("[");
	for (i = 0; i < dimension; i++){
  8002cc:	9d67883a 	add	r19,r19,r21
  8002d0:	8d3fdc1e 	bne	r17,r20,800244 <randomMatrix+0x48>
			alt_putstr(buffer);
			alt_putstr(" ");
		}
		alt_putstr(";\n");
	}
	alt_putstr("]\n");
  8002d4:	01002074 	movhi	r4,129
  8002d8:	21284204 	addi	r4,r4,-24312
  8002dc:	08075080 	call	807508 <alt_putstr>
}
  8002e0:	dfc00917 	ldw	ra,36(sp)
  8002e4:	dd400817 	ldw	r21,32(sp)
  8002e8:	dd000717 	ldw	r20,28(sp)
  8002ec:	dcc00617 	ldw	r19,24(sp)
  8002f0:	dc800517 	ldw	r18,20(sp)
  8002f4:	dc400417 	ldw	r17,16(sp)
  8002f8:	dc000317 	ldw	r16,12(sp)
  8002fc:	dec00a04 	addi	sp,sp,40
  800300:	f800283a 	ret

00800304 <determinant>:
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800304:	2945883a 	add	r2,r5,r5
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  800308:	deffea04 	addi	sp,sp,-88
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  80030c:	1087883a 	add	r3,r2,r2
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  800310:	dc400d15 	stw	r17,52(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800314:	28e3383a 	mul	r17,r5,r3
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  800318:	dcc00f15 	stw	r19,60(sp)
  80031c:	2027883a 	mov	r19,r4
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800320:	8809883a 	mov	r4,r17
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  800324:	dfc01515 	stw	ra,84(sp)
  800328:	d9400815 	stw	r5,32(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  80032c:	d8c00915 	stw	r3,36(sp)
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  800330:	df001415 	stw	fp,80(sp)
  800334:	ddc01315 	stw	r23,76(sp)
  800338:	dd801215 	stw	r22,72(sp)
  80033c:	dd401115 	stw	r21,68(sp)
  800340:	dd001015 	stw	r20,64(sp)
  800344:	dc800e15 	stw	r18,56(sp)
  800348:	dc000c15 	stw	r16,48(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  80034c:	d8800a15 	stw	r2,40(sp)
  800350:	08020c80 	call	8020c8 <malloc>
	memcpy(m, matrix, sizeof(float)*dimension*dimension );
  800354:	1009883a 	mov	r4,r2
  800358:	980b883a 	mov	r5,r19
  80035c:	880d883a 	mov	r6,r17
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800360:	d8800715 	stw	r2,28(sp)
  800364:	d8800215 	stw	r2,8(sp)
	memcpy(m, matrix, sizeof(float)*dimension*dimension );
  800368:	080281c0 	call	80281c <memcpy>
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  80036c:	d9000817 	ldw	r4,32(sp)
  800370:	0100980e 	bge	zero,r4,8005d4 <determinant+0x2d0>
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  800374:	d8800717 	ldw	r2,28(sp)
  800378:	0039883a 	mov	fp,zero
  80037c:	d8000315 	stw	zero,12(sp)
  800380:	d8800015 	stw	r2,0(sp)
  800384:	d8800115 	stw	r2,4(sp)
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  800388:	07003f0e 	bge	zero,fp,800488 <determinant+0x184>
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  80038c:	d8800017 	ldw	r2,0(sp)
  800390:	0029883a 	mov	r20,zero
  800394:	002d883a 	mov	r22,zero
  800398:	14800017 	ldw	r18,0(r2)
  80039c:	d8800615 	stw	r2,24(sp)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  8003a0:	d9000817 	ldw	r4,32(sp)
  8003a4:	d8c00317 	ldw	r3,12(sp)
  8003a8:	2509383a 	mul	r4,r4,r20
  8003ac:	a0c5883a 	add	r2,r20,r3
  8003b0:	a507883a 	add	r3,r20,r20
  8003b4:	d9000415 	stw	r4,16(sp)
  8003b8:	d9000717 	ldw	r4,28(sp)
  8003bc:	1085883a 	add	r2,r2,r2
  8003c0:	18c7883a 	add	r3,r3,r3
  8003c4:	20c7883a 	add	r3,r4,r3
  8003c8:	1085883a 	add	r2,r2,r2
  8003cc:	2085883a 	add	r2,r4,r2
  8003d0:	1dc00104 	addi	r23,r3,4
  8003d4:	d8c00417 	ldw	r3,16(sp)
  8003d8:	10800104 	addi	r2,r2,4
  8003dc:	d8800515 	stw	r2,20(sp)
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8003e0:	b0c5883a 	add	r2,r22,r3
  8003e4:	1085883a 	add	r2,r2,r2
  8003e8:	1085883a 	add	r2,r2,r2
  8003ec:	1105883a 	add	r2,r2,r4
  8003f0:	11400017 	ldw	r5,0(r2)
  8003f4:	9009883a 	mov	r4,r18
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  8003f8:	a5000044 	addi	r20,r20,1
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8003fc:	0800ba40 	call	800ba4 <__divsf3>
  800400:	d8c00617 	ldw	r3,24(sp)
  800404:	18800015 	stw	r2,0(r3)
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  800408:	a7001f0e 	bge	r20,fp,800488 <determinant+0x184>
float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);
void randomMatrix(float *matrix, int dimension);

float determinant(float *matrix, int dimension){
  80040c:	d8c00517 	ldw	r3,20(sp)
  800410:	a02d883a 	mov	r22,r20
  800414:	d8c00615 	stw	r3,24(sp)
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  800418:	1c800017 	ldw	r18,0(r3)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  80041c:	053fe00e 	bge	zero,r20,8003a0 <determinant+0x9c>
  800420:	d9000a17 	ldw	r4,40(sp)
  800424:	dcc00017 	ldw	r19,0(sp)
  800428:	b823883a 	mov	r17,r23
  80042c:	212b883a 	add	r21,r4,r4
  800430:	0021883a 	mov	r16,zero
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  800434:	99000017 	ldw	r4,0(r19)
  800438:	89400017 	ldw	r5,0(r17)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  80043c:	84000044 	addi	r16,r16,1
  800440:	9cc00104 	addi	r19,r19,4
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  800444:	08009c40 	call	8009c4 <__mulsf3>
  800448:	100b883a 	mov	r5,r2
  80044c:	9009883a 	mov	r4,r18
  800450:	08008f00 	call	8008f0 <__subsf3>
  800454:	1025883a 	mov	r18,r2
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800458:	8d63883a 	add	r17,r17,r21
  80045c:	a43ff51e 	bne	r20,r16,800434 <determinant+0x130>
  800460:	d8c00417 	ldw	r3,16(sp)
  800464:	d9000817 	ldw	r4,32(sp)
  800468:	d8800517 	ldw	r2,20(sp)
  80046c:	bdc00104 	addi	r23,r23,4
  800470:	1907883a 	add	r3,r3,r4
  800474:	d9000717 	ldw	r4,28(sp)
  800478:	10800104 	addi	r2,r2,4
  80047c:	d8800515 	stw	r2,20(sp)
  800480:	d8c00415 	stw	r3,16(sp)
  800484:	003fd606 	br	8003e0 <determinant+0xdc>
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
		result *= getAt(m, i, i, dimension);

	free(m);
  800488:	d9000317 	ldw	r4,12(sp)
  80048c:	d8c00717 	ldw	r3,28(sp)
  800490:	ddc00117 	ldw	r23,4(sp)
  800494:	2705883a 	add	r2,r4,fp
  800498:	1085883a 	add	r2,r2,r2
  80049c:	1085883a 	add	r2,r2,r2
  8004a0:	e1000050 	cmplti	r4,fp,1
  8004a4:	18ab883a 	add	r21,r3,r2
  8004a8:	e02d883a 	mov	r22,fp
  8004ac:	d9000b15 	stw	r4,44(sp)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8004b0:	d9000b17 	ldw	r4,44(sp)
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  8004b4:	ac800017 	ldw	r18,0(r21)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8004b8:	2000141e 	bne	r4,zero,80050c <determinant+0x208>
  8004bc:	d8c00317 	ldw	r3,12(sp)
  8004c0:	d9000717 	ldw	r4,28(sp)
  8004c4:	b823883a 	mov	r17,r23
  8004c8:	18c5883a 	add	r2,r3,r3
  8004cc:	1085883a 	add	r2,r2,r2
  8004d0:	20a7883a 	add	r19,r4,r2
  8004d4:	d8800a17 	ldw	r2,40(sp)
  8004d8:	0021883a 	mov	r16,zero
  8004dc:	10a9883a 	add	r20,r2,r2
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  8004e0:	99000017 	ldw	r4,0(r19)
  8004e4:	89400017 	ldw	r5,0(r17)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8004e8:	84000044 	addi	r16,r16,1
  8004ec:	9cc00104 	addi	r19,r19,4
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  8004f0:	08009c40 	call	8009c4 <__mulsf3>
  8004f4:	100b883a 	mov	r5,r2
  8004f8:	9009883a 	mov	r4,r18
  8004fc:	08008f00 	call	8008f0 <__subsf3>
  800500:	1025883a 	mov	r18,r2
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  800504:	8d23883a 	add	r17,r17,r20
  800508:	e43ff51e 	bne	fp,r16,8004e0 <determinant+0x1dc>
			for (p = 0; p < j; p++){
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
  80050c:	d8c00817 	ldw	r3,32(sp)
  800510:	b5800044 	addi	r22,r22,1
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  800514:	ac800015 	stw	r18,0(r21)
			for (p = 0; p < j; p++){
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
  800518:	bdc00104 	addi	r23,r23,4
  80051c:	ad400104 	addi	r21,r21,4
  800520:	b0ffe316 	blt	r22,r3,8004b0 <determinant+0x1ac>
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  800524:	d9000117 	ldw	r4,4(sp)
  800528:	d8800317 	ldw	r2,12(sp)
  80052c:	e7000044 	addi	fp,fp,1
  800530:	21000104 	addi	r4,r4,4
  800534:	10c5883a 	add	r2,r2,r3
  800538:	d9000115 	stw	r4,4(sp)
  80053c:	d8c00017 	ldw	r3,0(sp)
  800540:	d9000917 	ldw	r4,36(sp)
  800544:	d8800315 	stw	r2,12(sp)
  800548:	d8800817 	ldw	r2,32(sp)
  80054c:	1907883a 	add	r3,r3,r4
  800550:	d8c00015 	stw	r3,0(sp)
  800554:	173f8c1e 	bne	r2,fp,800388 <determinant+0x84>
		for (j = 0; j < i; j++){
  800558:	d8c00a17 	ldw	r3,40(sp)
  80055c:	0023883a 	mov	r17,zero
  800560:	040fe034 	movhi	r16,16256
  800564:	18c5883a 	add	r2,r3,r3
  800568:	14800104 	addi	r18,r2,4
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
		result *= getAt(m, i, i, dimension);
  80056c:	d9000217 	ldw	r4,8(sp)
	// Second step is to find the determinant.
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
  800570:	8c400044 	addi	r17,r17,1
		result *= getAt(m, i, i, dimension);
  800574:	21400017 	ldw	r5,0(r4)
  800578:	8009883a 	mov	r4,r16
  80057c:	08009c40 	call	8009c4 <__mulsf3>
  800580:	1021883a 	mov	r16,r2
	// Second step is to find the determinant.
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
  800584:	d8800217 	ldw	r2,8(sp)
  800588:	d8c00817 	ldw	r3,32(sp)
  80058c:	1485883a 	add	r2,r2,r18
  800590:	d8800215 	stw	r2,8(sp)
  800594:	1c7ff51e 	bne	r3,r17,80056c <determinant+0x268>
		result *= getAt(m, i, i, dimension);

	free(m);
  800598:	d9000717 	ldw	r4,28(sp)
  80059c:	08020b40 	call	8020b4 <free>

	return result;
}
  8005a0:	8005883a 	mov	r2,r16
  8005a4:	dfc01517 	ldw	ra,84(sp)
  8005a8:	df001417 	ldw	fp,80(sp)
  8005ac:	ddc01317 	ldw	r23,76(sp)
  8005b0:	dd801217 	ldw	r22,72(sp)
  8005b4:	dd401117 	ldw	r21,68(sp)
  8005b8:	dd001017 	ldw	r20,64(sp)
  8005bc:	dcc00f17 	ldw	r19,60(sp)
  8005c0:	dc800e17 	ldw	r18,56(sp)
  8005c4:	dc400d17 	ldw	r17,52(sp)
  8005c8:	dc000c17 	ldw	r16,48(sp)
  8005cc:	dec01604 	addi	sp,sp,88
  8005d0:	f800283a 	ret
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  8005d4:	040fe034 	movhi	r16,16256
  8005d8:	003fef06 	br	800598 <determinant+0x294>

008005dc <main>:
		alt_putstr(";\n");
	}
	alt_putstr("]\n");
}

int main(){
  8005dc:	defe6404 	addi	sp,sp,-1648
	int i;
	char buffer[11];
	char buf[11];
	clock_t exec_t1, exec_t2;
	float matrix[DIMENSION][DIMENSION];
	alt_putstr("Hello from Nios II!\n");
  8005e0:	01002074 	movhi	r4,129
  8005e4:	21284304 	addi	r4,r4,-24308
		alt_putstr(";\n");
	}
	alt_putstr("]\n");
}

int main(){
  8005e8:	dfc19b15 	stw	ra,1644(sp)
  8005ec:	dd019a15 	stw	r20,1640(sp)
  8005f0:	dc819815 	stw	r18,1632(sp)
  8005f4:	dc419715 	stw	r17,1628(sp)
  8005f8:	dc019615 	stw	r16,1624(sp)
  8005fc:	dcc19915 	stw	r19,1636(sp)
	char buffer[11];
	char buf[11];
	clock_t exec_t1, exec_t2;
	float matrix[DIMENSION][DIMENSION];
	alt_putstr("Hello from Nios II!\n");
	randomMatrix( (float *) matrix, DIMENSION);
  800600:	dc800604 	addi	r18,sp,24
	int i;
	char buffer[11];
	char buf[11];
	clock_t exec_t1, exec_t2;
	float matrix[DIMENSION][DIMENSION];
	alt_putstr("Hello from Nios II!\n");
  800604:	08075080 	call	807508 <alt_putstr>
	randomMatrix( (float *) matrix, DIMENSION);
  800608:	01400504 	movi	r5,20
  80060c:	9009883a 	mov	r4,r18
  800610:	08001fc0 	call	8001fc <randomMatrix>

	exec_t1 = times(NULL); // get system time before starting the process
  800614:	0009883a 	mov	r4,zero
  800618:	080768c0 	call	80768c <times>
  80061c:	1029883a 	mov	r20,r2
  800620:	0021883a 	mov	r16,zero
  800624:	04401904 	movi	r17,100
	for (i = 0; i < 100; i++){
		det = determinant( (float *) matrix, DIMENSION);
  800628:	9009883a 	mov	r4,r18
  80062c:	01400504 	movi	r5,20
  800630:	08003040 	call	800304 <determinant>
	float matrix[DIMENSION][DIMENSION];
	alt_putstr("Hello from Nios II!\n");
	randomMatrix( (float *) matrix, DIMENSION);

	exec_t1 = times(NULL); // get system time before starting the process
	for (i = 0; i < 100; i++){
  800634:	84000044 	addi	r16,r16,1
		det = determinant( (float *) matrix, DIMENSION);
  800638:	1027883a 	mov	r19,r2
	float matrix[DIMENSION][DIMENSION];
	alt_putstr("Hello from Nios II!\n");
	randomMatrix( (float *) matrix, DIMENSION);

	exec_t1 = times(NULL); // get system time before starting the process
	for (i = 0; i < 100; i++){
  80063c:	847ffa1e 	bne	r16,r17,800628 <main+0x4c>
		det = determinant( (float *) matrix, DIMENSION);

	}
	exec_t2 = times(NULL); // get system time after finishing the process
  800640:	0009883a 	mov	r4,zero
  800644:	080768c0 	call	80768c <times>
	gcvt(((double)exec_t2-(double)exec_t1) / alt_ticks_per_second(), 10, buf);
  800648:	1009883a 	mov	r4,r2
  80064c:	08015980 	call	801598 <__floatunsidf>
  800650:	a009883a 	mov	r4,r20
  800654:	1021883a 	mov	r16,r2
  800658:	1823883a 	mov	r17,r3
  80065c:	08015980 	call	801598 <__floatunsidf>
  800660:	880b883a 	mov	r5,r17
  800664:	180f883a 	mov	r7,r3
  800668:	100d883a 	mov	r6,r2
  80066c:	8009883a 	mov	r4,r16
  800670:	08012140 	call	801214 <__subdf3>
  800674:	01402074 	movhi	r5,129
  800678:	29761b04 	addi	r5,r5,-10132
  80067c:	29000017 	ldw	r4,0(r5)
  800680:	1823883a 	mov	r17,r3
  800684:	1021883a 	mov	r16,r2
  800688:	08015980 	call	801598 <__floatunsidf>
  80068c:	880b883a 	mov	r5,r17
  800690:	180f883a 	mov	r7,r3
  800694:	8009883a 	mov	r4,r16
  800698:	100d883a 	mov	r6,r2
  80069c:	08013080 	call	801308 <__divdf3>
  8006a0:	180b883a 	mov	r5,r3
  8006a4:	01800284 	movi	r6,10
  8006a8:	d80f883a 	mov	r7,sp
  8006ac:	1009883a 	mov	r4,r2
  8006b0:	0801eb80 	call	801eb8 <gcvt>
	gcvt(det, 10, buffer);
  8006b4:	9809883a 	mov	r4,r19
  8006b8:	0800db00 	call	800db0 <__extendsfdf2>
  8006bc:	dc4002c4 	addi	r17,sp,11
  8006c0:	180b883a 	mov	r5,r3
  8006c4:	01800284 	movi	r6,10
  8006c8:	880f883a 	mov	r7,r17
  8006cc:	1009883a 	mov	r4,r2
  8006d0:	0801eb80 	call	801eb8 <gcvt>
	alt_putstr(buffer);
  8006d4:	8809883a 	mov	r4,r17
  8006d8:	08075080 	call	807508 <alt_putstr>
	alt_putstr("\n");
  8006dc:	01002074 	movhi	r4,129
  8006e0:	21284904 	addi	r4,r4,-24284
  8006e4:	08075080 	call	807508 <alt_putstr>
	alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" seconds \n");
  8006e8:	01002074 	movhi	r4,129
  8006ec:	21284a04 	addi	r4,r4,-24280
  8006f0:	08075080 	call	807508 <alt_putstr>
  8006f4:	d809883a 	mov	r4,sp
  8006f8:	08075080 	call	807508 <alt_putstr>
  8006fc:	01002074 	movhi	r4,129
  800700:	21284e04 	addi	r4,r4,-24264
  800704:	08075080 	call	807508 <alt_putstr>
  800708:	003fff06 	br	800708 <main+0x12c>

0080070c <_fpadd_parts>:
  80070c:	21c00017 	ldw	r7,0(r4)
  800710:	02000044 	movi	r8,1
  800714:	41c0332e 	bgeu	r8,r7,8007e4 <_fpadd_parts+0xd8>
  800718:	28800017 	ldw	r2,0(r5)
  80071c:	4080462e 	bgeu	r8,r2,800838 <_fpadd_parts+0x12c>
  800720:	00c00104 	movi	r3,4
  800724:	38c06b26 	beq	r7,r3,8008d4 <_fpadd_parts+0x1c8>
  800728:	10c04326 	beq	r2,r3,800838 <_fpadd_parts+0x12c>
  80072c:	00c00084 	movi	r3,2
  800730:	10c02e26 	beq	r2,r3,8007ec <_fpadd_parts+0xe0>
  800734:	38c04026 	beq	r7,r3,800838 <_fpadd_parts+0x12c>
  800738:	22800217 	ldw	r10,8(r4)
  80073c:	28c00217 	ldw	r3,8(r5)
  800740:	23000317 	ldw	r12,12(r4)
  800744:	2a400317 	ldw	r9,12(r5)
  800748:	50cfc83a 	sub	r7,r10,r3
  80074c:	3817883a 	mov	r11,r7
  800750:	38004f16 	blt	r7,zero,800890 <_fpadd_parts+0x184>
  800754:	008007c4 	movi	r2,31
  800758:	11c03316 	blt	r2,r7,800828 <_fpadd_parts+0x11c>
  80075c:	02c0540e 	bge	zero,r11,8008b0 <_fpadd_parts+0x1a4>
  800760:	41c4983a 	sll	r2,r8,r7
  800764:	49c6d83a 	srl	r3,r9,r7
  800768:	10bfffc4 	addi	r2,r2,-1
  80076c:	4884703a 	and	r2,r9,r2
  800770:	1004c03a 	cmpne	r2,r2,zero
  800774:	1892b03a 	or	r9,r3,r2
  800778:	20c00117 	ldw	r3,4(r4)
  80077c:	28800117 	ldw	r2,4(r5)
  800780:	18803c26 	beq	r3,r2,800874 <_fpadd_parts+0x168>
  800784:	18002f26 	beq	r3,zero,800844 <_fpadd_parts+0x138>
  800788:	4b05c83a 	sub	r2,r9,r12
  80078c:	10004216 	blt	r2,zero,800898 <_fpadd_parts+0x18c>
  800790:	32800215 	stw	r10,8(r6)
  800794:	30800315 	stw	r2,12(r6)
  800798:	30000115 	stw	zero,4(r6)
  80079c:	31000317 	ldw	r4,12(r6)
  8007a0:	01d00034 	movhi	r7,16384
  8007a4:	39ffff84 	addi	r7,r7,-2
  8007a8:	20bfffc4 	addi	r2,r4,-1
  8007ac:	2007883a 	mov	r3,r4
  8007b0:	38800836 	bltu	r7,r2,8007d4 <_fpadd_parts+0xc8>
  8007b4:	31400217 	ldw	r5,8(r6)
  8007b8:	18c9883a 	add	r4,r3,r3
  8007bc:	20bfffc4 	addi	r2,r4,-1
  8007c0:	297fffc4 	addi	r5,r5,-1
  8007c4:	2007883a 	mov	r3,r4
  8007c8:	38bffb2e 	bgeu	r7,r2,8007b8 <_fpadd_parts+0xac>
  8007cc:	31400215 	stw	r5,8(r6)
  8007d0:	31000315 	stw	r4,12(r6)
  8007d4:	008000c4 	movi	r2,3
  8007d8:	30800015 	stw	r2,0(r6)
  8007dc:	20001b16 	blt	r4,zero,80084c <_fpadd_parts+0x140>
  8007e0:	3009883a 	mov	r4,r6
  8007e4:	2005883a 	mov	r2,r4
  8007e8:	f800283a 	ret
  8007ec:	38fffd1e 	bne	r7,r3,8007e4 <_fpadd_parts+0xd8>
  8007f0:	31c00015 	stw	r7,0(r6)
  8007f4:	20800117 	ldw	r2,4(r4)
  8007f8:	30800115 	stw	r2,4(r6)
  8007fc:	20c00217 	ldw	r3,8(r4)
  800800:	30c00215 	stw	r3,8(r6)
  800804:	20800317 	ldw	r2,12(r4)
  800808:	30800315 	stw	r2,12(r6)
  80080c:	20c00117 	ldw	r3,4(r4)
  800810:	28800117 	ldw	r2,4(r5)
  800814:	3009883a 	mov	r4,r6
  800818:	1886703a 	and	r3,r3,r2
  80081c:	2005883a 	mov	r2,r4
  800820:	30c00115 	stw	r3,4(r6)
  800824:	f800283a 	ret
  800828:	1a801716 	blt	r3,r10,800888 <_fpadd_parts+0x17c>
  80082c:	1815883a 	mov	r10,r3
  800830:	0019883a 	mov	r12,zero
  800834:	003fd006 	br	800778 <_fpadd_parts+0x6c>
  800838:	2809883a 	mov	r4,r5
  80083c:	2005883a 	mov	r2,r4
  800840:	f800283a 	ret
  800844:	6245c83a 	sub	r2,r12,r9
  800848:	003fd006 	br	80078c <_fpadd_parts+0x80>
  80084c:	30800217 	ldw	r2,8(r6)
  800850:	2006d07a 	srli	r3,r4,1
  800854:	2100004c 	andi	r4,r4,1
  800858:	10800044 	addi	r2,r2,1
  80085c:	1906b03a 	or	r3,r3,r4
  800860:	3009883a 	mov	r4,r6
  800864:	30800215 	stw	r2,8(r6)
  800868:	2005883a 	mov	r2,r4
  80086c:	30c00315 	stw	r3,12(r6)
  800870:	f800283a 	ret
  800874:	4b09883a 	add	r4,r9,r12
  800878:	30c00115 	stw	r3,4(r6)
  80087c:	32800215 	stw	r10,8(r6)
  800880:	31000315 	stw	r4,12(r6)
  800884:	003fd306 	br	8007d4 <_fpadd_parts+0xc8>
  800888:	0013883a 	mov	r9,zero
  80088c:	003fba06 	br	800778 <_fpadd_parts+0x6c>
  800890:	01cfc83a 	sub	r7,zero,r7
  800894:	003faf06 	br	800754 <_fpadd_parts+0x48>
  800898:	0089c83a 	sub	r4,zero,r2
  80089c:	00800044 	movi	r2,1
  8008a0:	30800115 	stw	r2,4(r6)
  8008a4:	32800215 	stw	r10,8(r6)
  8008a8:	31000315 	stw	r4,12(r6)
  8008ac:	003fbb06 	br	80079c <_fpadd_parts+0x90>
  8008b0:	583fb126 	beq	r11,zero,800778 <_fpadd_parts+0x6c>
  8008b4:	41c4983a 	sll	r2,r8,r7
  8008b8:	61c6d83a 	srl	r3,r12,r7
  8008bc:	51d5883a 	add	r10,r10,r7
  8008c0:	10bfffc4 	addi	r2,r2,-1
  8008c4:	6084703a 	and	r2,r12,r2
  8008c8:	1004c03a 	cmpne	r2,r2,zero
  8008cc:	1898b03a 	or	r12,r3,r2
  8008d0:	003fa906 	br	800778 <_fpadd_parts+0x6c>
  8008d4:	11ffc31e 	bne	r2,r7,8007e4 <_fpadd_parts+0xd8>
  8008d8:	28c00117 	ldw	r3,4(r5)
  8008dc:	20800117 	ldw	r2,4(r4)
  8008e0:	10ffc026 	beq	r2,r3,8007e4 <_fpadd_parts+0xd8>
  8008e4:	01002074 	movhi	r4,129
  8008e8:	21285104 	addi	r4,r4,-24252
  8008ec:	003fbd06 	br	8007e4 <_fpadd_parts+0xd8>

008008f0 <__subsf3>:
  8008f0:	deffef04 	addi	sp,sp,-68
  8008f4:	dcc00f15 	stw	r19,60(sp)
  8008f8:	dcc00204 	addi	r19,sp,8
  8008fc:	dc400e15 	stw	r17,56(sp)
  800900:	d9000015 	stw	r4,0(sp)
  800904:	d9400115 	stw	r5,4(sp)
  800908:	d809883a 	mov	r4,sp
  80090c:	980b883a 	mov	r5,r19
  800910:	dc400604 	addi	r17,sp,24
  800914:	dfc01015 	stw	ra,64(sp)
  800918:	08019a40 	call	8019a4 <__unpack_f>
  80091c:	d9000104 	addi	r4,sp,4
  800920:	880b883a 	mov	r5,r17
  800924:	08019a40 	call	8019a4 <__unpack_f>
  800928:	d8800717 	ldw	r2,28(sp)
  80092c:	9809883a 	mov	r4,r19
  800930:	880b883a 	mov	r5,r17
  800934:	d9800a04 	addi	r6,sp,40
  800938:	1080005c 	xori	r2,r2,1
  80093c:	d8800715 	stw	r2,28(sp)
  800940:	080070c0 	call	80070c <_fpadd_parts>
  800944:	1009883a 	mov	r4,r2
  800948:	08018440 	call	801844 <__pack_f>
  80094c:	dfc01017 	ldw	ra,64(sp)
  800950:	dcc00f17 	ldw	r19,60(sp)
  800954:	dc400e17 	ldw	r17,56(sp)
  800958:	dec01104 	addi	sp,sp,68
  80095c:	f800283a 	ret

00800960 <__addsf3>:
  800960:	deffef04 	addi	sp,sp,-68
  800964:	dcc00f15 	stw	r19,60(sp)
  800968:	dcc00204 	addi	r19,sp,8
  80096c:	dc400e15 	stw	r17,56(sp)
  800970:	d9000015 	stw	r4,0(sp)
  800974:	d9400115 	stw	r5,4(sp)
  800978:	d809883a 	mov	r4,sp
  80097c:	980b883a 	mov	r5,r19
  800980:	dc400604 	addi	r17,sp,24
  800984:	dfc01015 	stw	ra,64(sp)
  800988:	08019a40 	call	8019a4 <__unpack_f>
  80098c:	d9000104 	addi	r4,sp,4
  800990:	880b883a 	mov	r5,r17
  800994:	08019a40 	call	8019a4 <__unpack_f>
  800998:	d9800a04 	addi	r6,sp,40
  80099c:	9809883a 	mov	r4,r19
  8009a0:	880b883a 	mov	r5,r17
  8009a4:	080070c0 	call	80070c <_fpadd_parts>
  8009a8:	1009883a 	mov	r4,r2
  8009ac:	08018440 	call	801844 <__pack_f>
  8009b0:	dfc01017 	ldw	ra,64(sp)
  8009b4:	dcc00f17 	ldw	r19,60(sp)
  8009b8:	dc400e17 	ldw	r17,56(sp)
  8009bc:	dec01104 	addi	sp,sp,68
  8009c0:	f800283a 	ret

008009c4 <__mulsf3>:
  8009c4:	deffef04 	addi	sp,sp,-68
  8009c8:	dc400f15 	stw	r17,60(sp)
  8009cc:	dc400204 	addi	r17,sp,8
  8009d0:	dc000e15 	stw	r16,56(sp)
  8009d4:	d9000015 	stw	r4,0(sp)
  8009d8:	d9400115 	stw	r5,4(sp)
  8009dc:	d809883a 	mov	r4,sp
  8009e0:	880b883a 	mov	r5,r17
  8009e4:	dc000604 	addi	r16,sp,24
  8009e8:	dfc01015 	stw	ra,64(sp)
  8009ec:	08019a40 	call	8019a4 <__unpack_f>
  8009f0:	d9000104 	addi	r4,sp,4
  8009f4:	800b883a 	mov	r5,r16
  8009f8:	08019a40 	call	8019a4 <__unpack_f>
  8009fc:	d9000217 	ldw	r4,8(sp)
  800a00:	00800044 	movi	r2,1
  800a04:	01400104 	movi	r5,4
  800a08:	1100142e 	bgeu	r2,r4,800a5c <__mulsf3+0x98>
  800a0c:	d8c00617 	ldw	r3,24(sp)
  800a10:	10c0052e 	bgeu	r2,r3,800a28 <__mulsf3+0x64>
  800a14:	21400f26 	beq	r4,r5,800a54 <__mulsf3+0x90>
  800a18:	19405d26 	beq	r3,r5,800b90 <__mulsf3+0x1cc>
  800a1c:	00800084 	movi	r2,2
  800a20:	20800e26 	beq	r4,r2,800a5c <__mulsf3+0x98>
  800a24:	1880181e 	bne	r3,r2,800a88 <__mulsf3+0xc4>
  800a28:	d8c00717 	ldw	r3,28(sp)
  800a2c:	d8800317 	ldw	r2,12(sp)
  800a30:	8009883a 	mov	r4,r16
  800a34:	10c4c03a 	cmpne	r2,r2,r3
  800a38:	d8800715 	stw	r2,28(sp)
  800a3c:	08018440 	call	801844 <__pack_f>
  800a40:	dfc01017 	ldw	ra,64(sp)
  800a44:	dc400f17 	ldw	r17,60(sp)
  800a48:	dc000e17 	ldw	r16,56(sp)
  800a4c:	dec01104 	addi	sp,sp,68
  800a50:	f800283a 	ret
  800a54:	00800084 	movi	r2,2
  800a58:	18804f26 	beq	r3,r2,800b98 <__mulsf3+0x1d4>
  800a5c:	d8800317 	ldw	r2,12(sp)
  800a60:	d8c00717 	ldw	r3,28(sp)
  800a64:	8809883a 	mov	r4,r17
  800a68:	10c4c03a 	cmpne	r2,r2,r3
  800a6c:	d8800315 	stw	r2,12(sp)
  800a70:	08018440 	call	801844 <__pack_f>
  800a74:	dfc01017 	ldw	ra,64(sp)
  800a78:	dc400f17 	ldw	r17,60(sp)
  800a7c:	dc000e17 	ldw	r16,56(sp)
  800a80:	dec01104 	addi	sp,sp,68
  800a84:	f800283a 	ret
  800a88:	d8800517 	ldw	r2,20(sp)
  800a8c:	da000917 	ldw	r8,36(sp)
  800a90:	0013883a 	mov	r9,zero
  800a94:	0007883a 	mov	r3,zero
  800a98:	480f883a 	mov	r7,r9
  800a9c:	180b883a 	mov	r5,r3
  800aa0:	400d883a 	mov	r6,r8
  800aa4:	1009883a 	mov	r4,r2
  800aa8:	080172c0 	call	80172c <__muldi3>
  800aac:	da800417 	ldw	r10,16(sp)
  800ab0:	d9800817 	ldw	r6,32(sp)
  800ab4:	da400317 	ldw	r9,12(sp)
  800ab8:	52800084 	addi	r10,r10,2
  800abc:	3295883a 	add	r10,r6,r10
  800ac0:	d9800717 	ldw	r6,28(sp)
  800ac4:	180b883a 	mov	r5,r3
  800ac8:	180f883a 	mov	r7,r3
  800acc:	4992c03a 	cmpne	r9,r9,r6
  800ad0:	da400b15 	stw	r9,44(sp)
  800ad4:	1007883a 	mov	r3,r2
  800ad8:	da800c15 	stw	r10,48(sp)
  800adc:	2800070e 	bge	r5,zero,800afc <__mulsf3+0x138>
  800ae0:	2880004c 	andi	r2,r5,1
  800ae4:	1005003a 	cmpeq	r2,r2,zero
  800ae8:	500d883a 	mov	r6,r10
  800aec:	10001e26 	beq	r2,zero,800b68 <__mulsf3+0x1a4>
  800af0:	380ed07a 	srli	r7,r7,1
  800af4:	31800044 	addi	r6,r6,1
  800af8:	d9800c15 	stw	r6,48(sp)
  800afc:	01100034 	movhi	r4,16384
  800b00:	213fffc4 	addi	r4,r4,-1
  800b04:	21c00b36 	bltu	r4,r7,800b34 <__mulsf3+0x170>
  800b08:	d8800c17 	ldw	r2,48(sp)
  800b0c:	00000206 	br	800b18 <__mulsf3+0x154>
  800b10:	18c7883a 	add	r3,r3,r3
  800b14:	21c00636 	bltu	r4,r7,800b30 <__mulsf3+0x16c>
  800b18:	10bfffc4 	addi	r2,r2,-1
  800b1c:	39cf883a 	add	r7,r7,r7
  800b20:	183ffb0e 	bge	r3,zero,800b10 <__mulsf3+0x14c>
  800b24:	39c00054 	ori	r7,r7,1
  800b28:	18c7883a 	add	r3,r3,r3
  800b2c:	21fffa2e 	bgeu	r4,r7,800b18 <__mulsf3+0x154>
  800b30:	d8800c15 	stw	r2,48(sp)
  800b34:	39001fcc 	andi	r4,r7,127
  800b38:	00801004 	movi	r2,64
  800b3c:	20800d26 	beq	r4,r2,800b74 <__mulsf3+0x1b0>
  800b40:	008000c4 	movi	r2,3
  800b44:	d9000a04 	addi	r4,sp,40
  800b48:	d9c00d15 	stw	r7,52(sp)
  800b4c:	d8800a15 	stw	r2,40(sp)
  800b50:	08018440 	call	801844 <__pack_f>
  800b54:	dfc01017 	ldw	ra,64(sp)
  800b58:	dc400f17 	ldw	r17,60(sp)
  800b5c:	dc000e17 	ldw	r16,56(sp)
  800b60:	dec01104 	addi	sp,sp,68
  800b64:	f800283a 	ret
  800b68:	1804d07a 	srli	r2,r3,1
  800b6c:	10e00034 	orhi	r3,r2,32768
  800b70:	003fdf06 	br	800af0 <__mulsf3+0x12c>
  800b74:	3880200c 	andi	r2,r7,128
  800b78:	103ff11e 	bne	r2,zero,800b40 <__mulsf3+0x17c>
  800b7c:	183ff026 	beq	r3,zero,800b40 <__mulsf3+0x17c>
  800b80:	3907883a 	add	r3,r7,r4
  800b84:	00bfe004 	movi	r2,-128
  800b88:	188e703a 	and	r7,r3,r2
  800b8c:	003fec06 	br	800b40 <__mulsf3+0x17c>
  800b90:	00800084 	movi	r2,2
  800b94:	20bfa41e 	bne	r4,r2,800a28 <__mulsf3+0x64>
  800b98:	01002074 	movhi	r4,129
  800b9c:	21285104 	addi	r4,r4,-24252
  800ba0:	003fb306 	br	800a70 <__mulsf3+0xac>

00800ba4 <__divsf3>:
  800ba4:	defff304 	addi	sp,sp,-52
  800ba8:	dc400b15 	stw	r17,44(sp)
  800bac:	dc400204 	addi	r17,sp,8
  800bb0:	dc000a15 	stw	r16,40(sp)
  800bb4:	d9000015 	stw	r4,0(sp)
  800bb8:	d9400115 	stw	r5,4(sp)
  800bbc:	d809883a 	mov	r4,sp
  800bc0:	880b883a 	mov	r5,r17
  800bc4:	dc000604 	addi	r16,sp,24
  800bc8:	dfc00c15 	stw	ra,48(sp)
  800bcc:	08019a40 	call	8019a4 <__unpack_f>
  800bd0:	d9000104 	addi	r4,sp,4
  800bd4:	800b883a 	mov	r5,r16
  800bd8:	08019a40 	call	8019a4 <__unpack_f>
  800bdc:	d9000217 	ldw	r4,8(sp)
  800be0:	00800044 	movi	r2,1
  800be4:	01800104 	movi	r6,4
  800be8:	11000a2e 	bgeu	r2,r4,800c14 <__divsf3+0x70>
  800bec:	d9400617 	ldw	r5,24(sp)
  800bf0:	1140432e 	bgeu	r2,r5,800d00 <__divsf3+0x15c>
  800bf4:	d8800317 	ldw	r2,12(sp)
  800bf8:	d8c00717 	ldw	r3,28(sp)
  800bfc:	10c4f03a 	xor	r2,r2,r3
  800c00:	d8800315 	stw	r2,12(sp)
  800c04:	21800226 	beq	r4,r6,800c10 <__divsf3+0x6c>
  800c08:	00800084 	movi	r2,2
  800c0c:	2080101e 	bne	r4,r2,800c50 <__divsf3+0xac>
  800c10:	29000726 	beq	r5,r4,800c30 <__divsf3+0x8c>
  800c14:	8809883a 	mov	r4,r17
  800c18:	08018440 	call	801844 <__pack_f>
  800c1c:	dfc00c17 	ldw	ra,48(sp)
  800c20:	dc400b17 	ldw	r17,44(sp)
  800c24:	dc000a17 	ldw	r16,40(sp)
  800c28:	dec00d04 	addi	sp,sp,52
  800c2c:	f800283a 	ret
  800c30:	01002074 	movhi	r4,129
  800c34:	21285104 	addi	r4,r4,-24252
  800c38:	08018440 	call	801844 <__pack_f>
  800c3c:	dfc00c17 	ldw	ra,48(sp)
  800c40:	dc400b17 	ldw	r17,44(sp)
  800c44:	dc000a17 	ldw	r16,40(sp)
  800c48:	dec00d04 	addi	sp,sp,52
  800c4c:	f800283a 	ret
  800c50:	29802d26 	beq	r5,r6,800d08 <__divsf3+0x164>
  800c54:	28801a26 	beq	r5,r2,800cc0 <__divsf3+0x11c>
  800c58:	d8c00417 	ldw	r3,16(sp)
  800c5c:	d8800817 	ldw	r2,32(sp)
  800c60:	d9000517 	ldw	r4,20(sp)
  800c64:	d9800917 	ldw	r6,36(sp)
  800c68:	1885c83a 	sub	r2,r3,r2
  800c6c:	d8800415 	stw	r2,16(sp)
  800c70:	2180032e 	bgeu	r4,r6,800c80 <__divsf3+0xdc>
  800c74:	10bfffc4 	addi	r2,r2,-1
  800c78:	d8800415 	stw	r2,16(sp)
  800c7c:	2109883a 	add	r4,r4,r4
  800c80:	01500034 	movhi	r5,16384
  800c84:	0007883a 	mov	r3,zero
  800c88:	0005883a 	mov	r2,zero
  800c8c:	01c007c4 	movi	r7,31
  800c90:	10800044 	addi	r2,r2,1
  800c94:	21800236 	bltu	r4,r6,800ca0 <__divsf3+0xfc>
  800c98:	1946b03a 	or	r3,r3,r5
  800c9c:	2189c83a 	sub	r4,r4,r6
  800ca0:	280ad07a 	srli	r5,r5,1
  800ca4:	2109883a 	add	r4,r4,r4
  800ca8:	11fff91e 	bne	r2,r7,800c90 <__divsf3+0xec>
  800cac:	19401fcc 	andi	r5,r3,127
  800cb0:	00801004 	movi	r2,64
  800cb4:	28800a26 	beq	r5,r2,800ce0 <__divsf3+0x13c>
  800cb8:	d8c00515 	stw	r3,20(sp)
  800cbc:	003fd506 	br	800c14 <__divsf3+0x70>
  800cc0:	8809883a 	mov	r4,r17
  800cc4:	d9800215 	stw	r6,8(sp)
  800cc8:	08018440 	call	801844 <__pack_f>
  800ccc:	dfc00c17 	ldw	ra,48(sp)
  800cd0:	dc400b17 	ldw	r17,44(sp)
  800cd4:	dc000a17 	ldw	r16,40(sp)
  800cd8:	dec00d04 	addi	sp,sp,52
  800cdc:	f800283a 	ret
  800ce0:	1880200c 	andi	r2,r3,128
  800ce4:	103ff41e 	bne	r2,zero,800cb8 <__divsf3+0x114>
  800ce8:	203ff326 	beq	r4,zero,800cb8 <__divsf3+0x114>
  800cec:	1947883a 	add	r3,r3,r5
  800cf0:	00bfe004 	movi	r2,-128
  800cf4:	1886703a 	and	r3,r3,r2
  800cf8:	d8c00515 	stw	r3,20(sp)
  800cfc:	003fc506 	br	800c14 <__divsf3+0x70>
  800d00:	8009883a 	mov	r4,r16
  800d04:	003fc406 	br	800c18 <__divsf3+0x74>
  800d08:	8809883a 	mov	r4,r17
  800d0c:	d8000515 	stw	zero,20(sp)
  800d10:	d8000415 	stw	zero,16(sp)
  800d14:	003fc006 	br	800c18 <__divsf3+0x74>

00800d18 <__floatsisf>:
  800d18:	2006d7fa 	srli	r3,r4,31
  800d1c:	defffa04 	addi	sp,sp,-24
  800d20:	008000c4 	movi	r2,3
  800d24:	dfc00515 	stw	ra,20(sp)
  800d28:	dc000415 	stw	r16,16(sp)
  800d2c:	d8800015 	stw	r2,0(sp)
  800d30:	d8c00115 	stw	r3,4(sp)
  800d34:	2000081e 	bne	r4,zero,800d58 <__floatsisf+0x40>
  800d38:	00800084 	movi	r2,2
  800d3c:	d8800015 	stw	r2,0(sp)
  800d40:	d809883a 	mov	r4,sp
  800d44:	08018440 	call	801844 <__pack_f>
  800d48:	dfc00517 	ldw	ra,20(sp)
  800d4c:	dc000417 	ldw	r16,16(sp)
  800d50:	dec00604 	addi	sp,sp,24
  800d54:	f800283a 	ret
  800d58:	00800784 	movi	r2,30
  800d5c:	1807003a 	cmpeq	r3,r3,zero
  800d60:	d8800215 	stw	r2,8(sp)
  800d64:	18000e1e 	bne	r3,zero,800da0 <__floatsisf+0x88>
  800d68:	00a00034 	movhi	r2,32768
  800d6c:	20800e26 	beq	r4,r2,800da8 <__floatsisf+0x90>
  800d70:	0121c83a 	sub	r16,zero,r4
  800d74:	8009883a 	mov	r4,r16
  800d78:	dc000315 	stw	r16,12(sp)
  800d7c:	08017c40 	call	8017c4 <__clzsi2>
  800d80:	117fffc4 	addi	r5,r2,-1
  800d84:	017fee0e 	bge	zero,r5,800d40 <__floatsisf+0x28>
  800d88:	d8800217 	ldw	r2,8(sp)
  800d8c:	8146983a 	sll	r3,r16,r5
  800d90:	1145c83a 	sub	r2,r2,r5
  800d94:	d8c00315 	stw	r3,12(sp)
  800d98:	d8800215 	stw	r2,8(sp)
  800d9c:	003fe806 	br	800d40 <__floatsisf+0x28>
  800da0:	2021883a 	mov	r16,r4
  800da4:	003ff306 	br	800d74 <__floatsisf+0x5c>
  800da8:	00b3c034 	movhi	r2,52992
  800dac:	003fe606 	br	800d48 <__floatsisf+0x30>

00800db0 <__extendsfdf2>:
  800db0:	defff904 	addi	sp,sp,-28
  800db4:	d9000115 	stw	r4,4(sp)
  800db8:	d9400204 	addi	r5,sp,8
  800dbc:	d9000104 	addi	r4,sp,4
  800dc0:	dfc00615 	stw	ra,24(sp)
  800dc4:	08019a40 	call	8019a4 <__unpack_f>
  800dc8:	d9c00517 	ldw	r7,20(sp)
  800dcc:	0011883a 	mov	r8,zero
  800dd0:	400697ba 	slli	r3,r8,30
  800dd4:	3812d0ba 	srli	r9,r7,2
  800dd8:	380497ba 	slli	r2,r7,30
  800ddc:	d9000217 	ldw	r4,8(sp)
  800de0:	d9400317 	ldw	r5,12(sp)
  800de4:	d9800417 	ldw	r6,16(sp)
  800de8:	48c6b03a 	or	r3,r9,r3
  800dec:	100f883a 	mov	r7,r2
  800df0:	d8c00015 	stw	r3,0(sp)
  800df4:	08015600 	call	801560 <__make_dp>
  800df8:	dfc00617 	ldw	ra,24(sp)
  800dfc:	dec00704 	addi	sp,sp,28
  800e00:	f800283a 	ret

00800e04 <_fpadd_parts>:
  800e04:	defff804 	addi	sp,sp,-32
  800e08:	dcc00315 	stw	r19,12(sp)
  800e0c:	2027883a 	mov	r19,r4
  800e10:	21000017 	ldw	r4,0(r4)
  800e14:	00c00044 	movi	r3,1
  800e18:	dd400515 	stw	r21,20(sp)
  800e1c:	dd000415 	stw	r20,16(sp)
  800e20:	ddc00715 	stw	r23,28(sp)
  800e24:	dd800615 	stw	r22,24(sp)
  800e28:	dc800215 	stw	r18,8(sp)
  800e2c:	dc400115 	stw	r17,4(sp)
  800e30:	dc000015 	stw	r16,0(sp)
  800e34:	282b883a 	mov	r21,r5
  800e38:	3029883a 	mov	r20,r6
  800e3c:	1900632e 	bgeu	r3,r4,800fcc <_fpadd_parts+0x1c8>
  800e40:	28800017 	ldw	r2,0(r5)
  800e44:	1880812e 	bgeu	r3,r2,80104c <_fpadd_parts+0x248>
  800e48:	00c00104 	movi	r3,4
  800e4c:	20c0dc26 	beq	r4,r3,8011c0 <_fpadd_parts+0x3bc>
  800e50:	10c07e26 	beq	r2,r3,80104c <_fpadd_parts+0x248>
  800e54:	00c00084 	movi	r3,2
  800e58:	10c06726 	beq	r2,r3,800ff8 <_fpadd_parts+0x1f4>
  800e5c:	20c07b26 	beq	r4,r3,80104c <_fpadd_parts+0x248>
  800e60:	9dc00217 	ldw	r23,8(r19)
  800e64:	28c00217 	ldw	r3,8(r5)
  800e68:	9c400317 	ldw	r17,12(r19)
  800e6c:	2bc00317 	ldw	r15,12(r5)
  800e70:	b8cdc83a 	sub	r6,r23,r3
  800e74:	9c800417 	ldw	r18,16(r19)
  800e78:	2c000417 	ldw	r16,16(r5)
  800e7c:	3009883a 	mov	r4,r6
  800e80:	30009716 	blt	r6,zero,8010e0 <_fpadd_parts+0x2dc>
  800e84:	00800fc4 	movi	r2,63
  800e88:	11806b16 	blt	r2,r6,801038 <_fpadd_parts+0x234>
  800e8c:	0100a40e 	bge	zero,r4,801120 <_fpadd_parts+0x31c>
  800e90:	35bff804 	addi	r22,r6,-32
  800e94:	b000bc16 	blt	r22,zero,801188 <_fpadd_parts+0x384>
  800e98:	8596d83a 	srl	r11,r16,r22
  800e9c:	0019883a 	mov	r12,zero
  800ea0:	0013883a 	mov	r9,zero
  800ea4:	01000044 	movi	r4,1
  800ea8:	0015883a 	mov	r10,zero
  800eac:	b000be16 	blt	r22,zero,8011a8 <_fpadd_parts+0x3a4>
  800eb0:	2590983a 	sll	r8,r4,r22
  800eb4:	000f883a 	mov	r7,zero
  800eb8:	00bfffc4 	movi	r2,-1
  800ebc:	3889883a 	add	r4,r7,r2
  800ec0:	408b883a 	add	r5,r8,r2
  800ec4:	21cd803a 	cmpltu	r6,r4,r7
  800ec8:	314b883a 	add	r5,r6,r5
  800ecc:	7904703a 	and	r2,r15,r4
  800ed0:	8146703a 	and	r3,r16,r5
  800ed4:	10c4b03a 	or	r2,r2,r3
  800ed8:	10000226 	beq	r2,zero,800ee4 <_fpadd_parts+0xe0>
  800edc:	02400044 	movi	r9,1
  800ee0:	0015883a 	mov	r10,zero
  800ee4:	5a5eb03a 	or	r15,r11,r9
  800ee8:	62a0b03a 	or	r16,r12,r10
  800eec:	99400117 	ldw	r5,4(r19)
  800ef0:	a8800117 	ldw	r2,4(r21)
  800ef4:	28806e26 	beq	r5,r2,8010b0 <_fpadd_parts+0x2ac>
  800ef8:	28006626 	beq	r5,zero,801094 <_fpadd_parts+0x290>
  800efc:	7c45c83a 	sub	r2,r15,r17
  800f00:	7889803a 	cmpltu	r4,r15,r2
  800f04:	8487c83a 	sub	r3,r16,r18
  800f08:	1909c83a 	sub	r4,r3,r4
  800f0c:	100d883a 	mov	r6,r2
  800f10:	200f883a 	mov	r7,r4
  800f14:	38007716 	blt	r7,zero,8010f4 <_fpadd_parts+0x2f0>
  800f18:	a5c00215 	stw	r23,8(r20)
  800f1c:	a1c00415 	stw	r7,16(r20)
  800f20:	a0000115 	stw	zero,4(r20)
  800f24:	a1800315 	stw	r6,12(r20)
  800f28:	a2000317 	ldw	r8,12(r20)
  800f2c:	a2400417 	ldw	r9,16(r20)
  800f30:	00bfffc4 	movi	r2,-1
  800f34:	408b883a 	add	r5,r8,r2
  800f38:	2a09803a 	cmpltu	r4,r5,r8
  800f3c:	488d883a 	add	r6,r9,r2
  800f40:	01c40034 	movhi	r7,4096
  800f44:	39ffffc4 	addi	r7,r7,-1
  800f48:	218d883a 	add	r6,r4,r6
  800f4c:	39801736 	bltu	r7,r6,800fac <_fpadd_parts+0x1a8>
  800f50:	31c06526 	beq	r6,r7,8010e8 <_fpadd_parts+0x2e4>
  800f54:	a3000217 	ldw	r12,8(r20)
  800f58:	4209883a 	add	r4,r8,r8
  800f5c:	00bfffc4 	movi	r2,-1
  800f60:	220f803a 	cmpltu	r7,r4,r8
  800f64:	4a4b883a 	add	r5,r9,r9
  800f68:	394f883a 	add	r7,r7,r5
  800f6c:	2095883a 	add	r10,r4,r2
  800f70:	3897883a 	add	r11,r7,r2
  800f74:	510d803a 	cmpltu	r6,r10,r4
  800f78:	6099883a 	add	r12,r12,r2
  800f7c:	32d7883a 	add	r11,r6,r11
  800f80:	00840034 	movhi	r2,4096
  800f84:	10bfffc4 	addi	r2,r2,-1
  800f88:	2011883a 	mov	r8,r4
  800f8c:	3813883a 	mov	r9,r7
  800f90:	a1000315 	stw	r4,12(r20)
  800f94:	a1c00415 	stw	r7,16(r20)
  800f98:	a3000215 	stw	r12,8(r20)
  800f9c:	12c00336 	bltu	r2,r11,800fac <_fpadd_parts+0x1a8>
  800fa0:	58bfed1e 	bne	r11,r2,800f58 <_fpadd_parts+0x154>
  800fa4:	00bfff84 	movi	r2,-2
  800fa8:	12bfeb2e 	bgeu	r2,r10,800f58 <_fpadd_parts+0x154>
  800fac:	a2800417 	ldw	r10,16(r20)
  800fb0:	008000c4 	movi	r2,3
  800fb4:	00c80034 	movhi	r3,8192
  800fb8:	18ffffc4 	addi	r3,r3,-1
  800fbc:	a2400317 	ldw	r9,12(r20)
  800fc0:	a0800015 	stw	r2,0(r20)
  800fc4:	1a802336 	bltu	r3,r10,801054 <_fpadd_parts+0x250>
  800fc8:	a027883a 	mov	r19,r20
  800fcc:	9805883a 	mov	r2,r19
  800fd0:	ddc00717 	ldw	r23,28(sp)
  800fd4:	dd800617 	ldw	r22,24(sp)
  800fd8:	dd400517 	ldw	r21,20(sp)
  800fdc:	dd000417 	ldw	r20,16(sp)
  800fe0:	dcc00317 	ldw	r19,12(sp)
  800fe4:	dc800217 	ldw	r18,8(sp)
  800fe8:	dc400117 	ldw	r17,4(sp)
  800fec:	dc000017 	ldw	r16,0(sp)
  800ff0:	dec00804 	addi	sp,sp,32
  800ff4:	f800283a 	ret
  800ff8:	20fff41e 	bne	r4,r3,800fcc <_fpadd_parts+0x1c8>
  800ffc:	31000015 	stw	r4,0(r6)
  801000:	98800117 	ldw	r2,4(r19)
  801004:	30800115 	stw	r2,4(r6)
  801008:	98c00217 	ldw	r3,8(r19)
  80100c:	30c00215 	stw	r3,8(r6)
  801010:	98800317 	ldw	r2,12(r19)
  801014:	30800315 	stw	r2,12(r6)
  801018:	98c00417 	ldw	r3,16(r19)
  80101c:	30c00415 	stw	r3,16(r6)
  801020:	98800117 	ldw	r2,4(r19)
  801024:	28c00117 	ldw	r3,4(r5)
  801028:	3027883a 	mov	r19,r6
  80102c:	10c4703a 	and	r2,r2,r3
  801030:	30800115 	stw	r2,4(r6)
  801034:	003fe506 	br	800fcc <_fpadd_parts+0x1c8>
  801038:	1dc02616 	blt	r3,r23,8010d4 <_fpadd_parts+0x2d0>
  80103c:	0023883a 	mov	r17,zero
  801040:	182f883a 	mov	r23,r3
  801044:	0025883a 	mov	r18,zero
  801048:	003fa806 	br	800eec <_fpadd_parts+0xe8>
  80104c:	a827883a 	mov	r19,r21
  801050:	003fde06 	br	800fcc <_fpadd_parts+0x1c8>
  801054:	01800044 	movi	r6,1
  801058:	500497fa 	slli	r2,r10,31
  80105c:	4808d07a 	srli	r4,r9,1
  801060:	518ad83a 	srl	r5,r10,r6
  801064:	a2000217 	ldw	r8,8(r20)
  801068:	1108b03a 	or	r4,r2,r4
  80106c:	0007883a 	mov	r3,zero
  801070:	4984703a 	and	r2,r9,r6
  801074:	208cb03a 	or	r6,r4,r2
  801078:	28ceb03a 	or	r7,r5,r3
  80107c:	42000044 	addi	r8,r8,1
  801080:	a027883a 	mov	r19,r20
  801084:	a1c00415 	stw	r7,16(r20)
  801088:	a2000215 	stw	r8,8(r20)
  80108c:	a1800315 	stw	r6,12(r20)
  801090:	003fce06 	br	800fcc <_fpadd_parts+0x1c8>
  801094:	8bc5c83a 	sub	r2,r17,r15
  801098:	8889803a 	cmpltu	r4,r17,r2
  80109c:	9407c83a 	sub	r3,r18,r16
  8010a0:	1909c83a 	sub	r4,r3,r4
  8010a4:	100d883a 	mov	r6,r2
  8010a8:	200f883a 	mov	r7,r4
  8010ac:	003f9906 	br	800f14 <_fpadd_parts+0x110>
  8010b0:	7c45883a 	add	r2,r15,r17
  8010b4:	13c9803a 	cmpltu	r4,r2,r15
  8010b8:	8487883a 	add	r3,r16,r18
  8010bc:	20c9883a 	add	r4,r4,r3
  8010c0:	a1400115 	stw	r5,4(r20)
  8010c4:	a5c00215 	stw	r23,8(r20)
  8010c8:	a0800315 	stw	r2,12(r20)
  8010cc:	a1000415 	stw	r4,16(r20)
  8010d0:	003fb606 	br	800fac <_fpadd_parts+0x1a8>
  8010d4:	001f883a 	mov	r15,zero
  8010d8:	0021883a 	mov	r16,zero
  8010dc:	003f8306 	br	800eec <_fpadd_parts+0xe8>
  8010e0:	018dc83a 	sub	r6,zero,r6
  8010e4:	003f6706 	br	800e84 <_fpadd_parts+0x80>
  8010e8:	00bfff84 	movi	r2,-2
  8010ec:	117faf36 	bltu	r2,r5,800fac <_fpadd_parts+0x1a8>
  8010f0:	003f9806 	br	800f54 <_fpadd_parts+0x150>
  8010f4:	0005883a 	mov	r2,zero
  8010f8:	1189c83a 	sub	r4,r2,r6
  8010fc:	1105803a 	cmpltu	r2,r2,r4
  801100:	01cbc83a 	sub	r5,zero,r7
  801104:	2885c83a 	sub	r2,r5,r2
  801108:	01800044 	movi	r6,1
  80110c:	a1800115 	stw	r6,4(r20)
  801110:	a5c00215 	stw	r23,8(r20)
  801114:	a1000315 	stw	r4,12(r20)
  801118:	a0800415 	stw	r2,16(r20)
  80111c:	003f8206 	br	800f28 <_fpadd_parts+0x124>
  801120:	203f7226 	beq	r4,zero,800eec <_fpadd_parts+0xe8>
  801124:	35bff804 	addi	r22,r6,-32
  801128:	b9af883a 	add	r23,r23,r6
  80112c:	b0003116 	blt	r22,zero,8011f4 <_fpadd_parts+0x3f0>
  801130:	959ad83a 	srl	r13,r18,r22
  801134:	001d883a 	mov	r14,zero
  801138:	000f883a 	mov	r7,zero
  80113c:	01000044 	movi	r4,1
  801140:	0011883a 	mov	r8,zero
  801144:	b0002516 	blt	r22,zero,8011dc <_fpadd_parts+0x3d8>
  801148:	2594983a 	sll	r10,r4,r22
  80114c:	0013883a 	mov	r9,zero
  801150:	00bfffc4 	movi	r2,-1
  801154:	4889883a 	add	r4,r9,r2
  801158:	508b883a 	add	r5,r10,r2
  80115c:	224d803a 	cmpltu	r6,r4,r9
  801160:	314b883a 	add	r5,r6,r5
  801164:	8904703a 	and	r2,r17,r4
  801168:	9146703a 	and	r3,r18,r5
  80116c:	10c4b03a 	or	r2,r2,r3
  801170:	10000226 	beq	r2,zero,80117c <_fpadd_parts+0x378>
  801174:	01c00044 	movi	r7,1
  801178:	0011883a 	mov	r8,zero
  80117c:	69e2b03a 	or	r17,r13,r7
  801180:	7224b03a 	or	r18,r14,r8
  801184:	003f5906 	br	800eec <_fpadd_parts+0xe8>
  801188:	8407883a 	add	r3,r16,r16
  80118c:	008007c4 	movi	r2,31
  801190:	1185c83a 	sub	r2,r2,r6
  801194:	1886983a 	sll	r3,r3,r2
  801198:	7996d83a 	srl	r11,r15,r6
  80119c:	8198d83a 	srl	r12,r16,r6
  8011a0:	1ad6b03a 	or	r11,r3,r11
  8011a4:	003f3e06 	br	800ea0 <_fpadd_parts+0x9c>
  8011a8:	2006d07a 	srli	r3,r4,1
  8011ac:	008007c4 	movi	r2,31
  8011b0:	1185c83a 	sub	r2,r2,r6
  8011b4:	1890d83a 	srl	r8,r3,r2
  8011b8:	218e983a 	sll	r7,r4,r6
  8011bc:	003f3e06 	br	800eb8 <_fpadd_parts+0xb4>
  8011c0:	113f821e 	bne	r2,r4,800fcc <_fpadd_parts+0x1c8>
  8011c4:	28c00117 	ldw	r3,4(r5)
  8011c8:	98800117 	ldw	r2,4(r19)
  8011cc:	10ff7f26 	beq	r2,r3,800fcc <_fpadd_parts+0x1c8>
  8011d0:	04c02074 	movhi	r19,129
  8011d4:	9ce85504 	addi	r19,r19,-24236
  8011d8:	003f7c06 	br	800fcc <_fpadd_parts+0x1c8>
  8011dc:	2006d07a 	srli	r3,r4,1
  8011e0:	008007c4 	movi	r2,31
  8011e4:	1185c83a 	sub	r2,r2,r6
  8011e8:	1894d83a 	srl	r10,r3,r2
  8011ec:	2192983a 	sll	r9,r4,r6
  8011f0:	003fd706 	br	801150 <_fpadd_parts+0x34c>
  8011f4:	9487883a 	add	r3,r18,r18
  8011f8:	008007c4 	movi	r2,31
  8011fc:	1185c83a 	sub	r2,r2,r6
  801200:	1886983a 	sll	r3,r3,r2
  801204:	899ad83a 	srl	r13,r17,r6
  801208:	919cd83a 	srl	r14,r18,r6
  80120c:	1b5ab03a 	or	r13,r3,r13
  801210:	003fc906 	br	801138 <_fpadd_parts+0x334>

00801214 <__subdf3>:
  801214:	deffea04 	addi	sp,sp,-88
  801218:	dcc01415 	stw	r19,80(sp)
  80121c:	dcc00404 	addi	r19,sp,16
  801220:	2011883a 	mov	r8,r4
  801224:	2813883a 	mov	r9,r5
  801228:	dc401315 	stw	r17,76(sp)
  80122c:	d809883a 	mov	r4,sp
  801230:	980b883a 	mov	r5,r19
  801234:	dc400904 	addi	r17,sp,36
  801238:	dfc01515 	stw	ra,84(sp)
  80123c:	da400115 	stw	r9,4(sp)
  801240:	d9c00315 	stw	r7,12(sp)
  801244:	da000015 	stw	r8,0(sp)
  801248:	d9800215 	stw	r6,8(sp)
  80124c:	0801d800 	call	801d80 <__unpack_d>
  801250:	d9000204 	addi	r4,sp,8
  801254:	880b883a 	mov	r5,r17
  801258:	0801d800 	call	801d80 <__unpack_d>
  80125c:	d8800a17 	ldw	r2,40(sp)
  801260:	880b883a 	mov	r5,r17
  801264:	9809883a 	mov	r4,r19
  801268:	d9800e04 	addi	r6,sp,56
  80126c:	1080005c 	xori	r2,r2,1
  801270:	d8800a15 	stw	r2,40(sp)
  801274:	0800e040 	call	800e04 <_fpadd_parts>
  801278:	1009883a 	mov	r4,r2
  80127c:	0801a6c0 	call	801a6c <__pack_d>
  801280:	dfc01517 	ldw	ra,84(sp)
  801284:	dcc01417 	ldw	r19,80(sp)
  801288:	dc401317 	ldw	r17,76(sp)
  80128c:	dec01604 	addi	sp,sp,88
  801290:	f800283a 	ret

00801294 <__adddf3>:
  801294:	deffea04 	addi	sp,sp,-88
  801298:	dcc01415 	stw	r19,80(sp)
  80129c:	dcc00404 	addi	r19,sp,16
  8012a0:	2011883a 	mov	r8,r4
  8012a4:	2813883a 	mov	r9,r5
  8012a8:	dc401315 	stw	r17,76(sp)
  8012ac:	d809883a 	mov	r4,sp
  8012b0:	980b883a 	mov	r5,r19
  8012b4:	dc400904 	addi	r17,sp,36
  8012b8:	dfc01515 	stw	ra,84(sp)
  8012bc:	da400115 	stw	r9,4(sp)
  8012c0:	d9c00315 	stw	r7,12(sp)
  8012c4:	da000015 	stw	r8,0(sp)
  8012c8:	d9800215 	stw	r6,8(sp)
  8012cc:	0801d800 	call	801d80 <__unpack_d>
  8012d0:	d9000204 	addi	r4,sp,8
  8012d4:	880b883a 	mov	r5,r17
  8012d8:	0801d800 	call	801d80 <__unpack_d>
  8012dc:	d9800e04 	addi	r6,sp,56
  8012e0:	9809883a 	mov	r4,r19
  8012e4:	880b883a 	mov	r5,r17
  8012e8:	0800e040 	call	800e04 <_fpadd_parts>
  8012ec:	1009883a 	mov	r4,r2
  8012f0:	0801a6c0 	call	801a6c <__pack_d>
  8012f4:	dfc01517 	ldw	ra,84(sp)
  8012f8:	dcc01417 	ldw	r19,80(sp)
  8012fc:	dc401317 	ldw	r17,76(sp)
  801300:	dec01604 	addi	sp,sp,88
  801304:	f800283a 	ret

00801308 <__divdf3>:
  801308:	deffed04 	addi	sp,sp,-76
  80130c:	dcc01115 	stw	r19,68(sp)
  801310:	dcc00404 	addi	r19,sp,16
  801314:	2011883a 	mov	r8,r4
  801318:	2813883a 	mov	r9,r5
  80131c:	dc000e15 	stw	r16,56(sp)
  801320:	d809883a 	mov	r4,sp
  801324:	980b883a 	mov	r5,r19
  801328:	dc000904 	addi	r16,sp,36
  80132c:	dfc01215 	stw	ra,72(sp)
  801330:	da400115 	stw	r9,4(sp)
  801334:	d9c00315 	stw	r7,12(sp)
  801338:	da000015 	stw	r8,0(sp)
  80133c:	d9800215 	stw	r6,8(sp)
  801340:	dc801015 	stw	r18,64(sp)
  801344:	dc400f15 	stw	r17,60(sp)
  801348:	0801d800 	call	801d80 <__unpack_d>
  80134c:	d9000204 	addi	r4,sp,8
  801350:	800b883a 	mov	r5,r16
  801354:	0801d800 	call	801d80 <__unpack_d>
  801358:	d9000417 	ldw	r4,16(sp)
  80135c:	00800044 	movi	r2,1
  801360:	11000b2e 	bgeu	r2,r4,801390 <__divdf3+0x88>
  801364:	d9400917 	ldw	r5,36(sp)
  801368:	1140762e 	bgeu	r2,r5,801544 <__divdf3+0x23c>
  80136c:	d8800517 	ldw	r2,20(sp)
  801370:	d8c00a17 	ldw	r3,40(sp)
  801374:	01800104 	movi	r6,4
  801378:	10c4f03a 	xor	r2,r2,r3
  80137c:	d8800515 	stw	r2,20(sp)
  801380:	21800226 	beq	r4,r6,80138c <__divdf3+0x84>
  801384:	00800084 	movi	r2,2
  801388:	2080141e 	bne	r4,r2,8013dc <__divdf3+0xd4>
  80138c:	29000926 	beq	r5,r4,8013b4 <__divdf3+0xac>
  801390:	9809883a 	mov	r4,r19
  801394:	0801a6c0 	call	801a6c <__pack_d>
  801398:	dfc01217 	ldw	ra,72(sp)
  80139c:	dcc01117 	ldw	r19,68(sp)
  8013a0:	dc801017 	ldw	r18,64(sp)
  8013a4:	dc400f17 	ldw	r17,60(sp)
  8013a8:	dc000e17 	ldw	r16,56(sp)
  8013ac:	dec01304 	addi	sp,sp,76
  8013b0:	f800283a 	ret
  8013b4:	01002074 	movhi	r4,129
  8013b8:	21285504 	addi	r4,r4,-24236
  8013bc:	0801a6c0 	call	801a6c <__pack_d>
  8013c0:	dfc01217 	ldw	ra,72(sp)
  8013c4:	dcc01117 	ldw	r19,68(sp)
  8013c8:	dc801017 	ldw	r18,64(sp)
  8013cc:	dc400f17 	ldw	r17,60(sp)
  8013d0:	dc000e17 	ldw	r16,56(sp)
  8013d4:	dec01304 	addi	sp,sp,76
  8013d8:	f800283a 	ret
  8013dc:	29805b26 	beq	r5,r6,80154c <__divdf3+0x244>
  8013e0:	28802d26 	beq	r5,r2,801498 <__divdf3+0x190>
  8013e4:	d8c00617 	ldw	r3,24(sp)
  8013e8:	d8800b17 	ldw	r2,44(sp)
  8013ec:	d9c00817 	ldw	r7,32(sp)
  8013f0:	dc400d17 	ldw	r17,52(sp)
  8013f4:	188bc83a 	sub	r5,r3,r2
  8013f8:	d9800717 	ldw	r6,28(sp)
  8013fc:	dc000c17 	ldw	r16,48(sp)
  801400:	d9400615 	stw	r5,24(sp)
  801404:	3c403836 	bltu	r7,r17,8014e8 <__divdf3+0x1e0>
  801408:	89c03626 	beq	r17,r7,8014e4 <__divdf3+0x1dc>
  80140c:	0015883a 	mov	r10,zero
  801410:	001d883a 	mov	r14,zero
  801414:	02c40034 	movhi	r11,4096
  801418:	001f883a 	mov	r15,zero
  80141c:	003f883a 	mov	ra,zero
  801420:	04800f44 	movi	r18,61
  801424:	00000f06 	br	801464 <__divdf3+0x15c>
  801428:	601d883a 	mov	r14,r12
  80142c:	681f883a 	mov	r15,r13
  801430:	400d883a 	mov	r6,r8
  801434:	100f883a 	mov	r7,r2
  801438:	3191883a 	add	r8,r6,r6
  80143c:	5808d07a 	srli	r4,r11,1
  801440:	4185803a 	cmpltu	r2,r8,r6
  801444:	39d3883a 	add	r9,r7,r7
  801448:	28c6b03a 	or	r3,r5,r3
  80144c:	1245883a 	add	r2,r2,r9
  801450:	1815883a 	mov	r10,r3
  801454:	2017883a 	mov	r11,r4
  801458:	400d883a 	mov	r6,r8
  80145c:	100f883a 	mov	r7,r2
  801460:	fc801726 	beq	ra,r18,8014c0 <__divdf3+0x1b8>
  801464:	580a97fa 	slli	r5,r11,31
  801468:	5006d07a 	srli	r3,r10,1
  80146c:	ffc00044 	addi	ra,ra,1
  801470:	3c7ff136 	bltu	r7,r17,801438 <__divdf3+0x130>
  801474:	3411c83a 	sub	r8,r6,r16
  801478:	3205803a 	cmpltu	r2,r6,r8
  80147c:	3c53c83a 	sub	r9,r7,r17
  801480:	7298b03a 	or	r12,r14,r10
  801484:	7adab03a 	or	r13,r15,r11
  801488:	4885c83a 	sub	r2,r9,r2
  80148c:	89ffe61e 	bne	r17,r7,801428 <__divdf3+0x120>
  801490:	343fe936 	bltu	r6,r16,801438 <__divdf3+0x130>
  801494:	003fe406 	br	801428 <__divdf3+0x120>
  801498:	9809883a 	mov	r4,r19
  80149c:	d9800415 	stw	r6,16(sp)
  8014a0:	0801a6c0 	call	801a6c <__pack_d>
  8014a4:	dfc01217 	ldw	ra,72(sp)
  8014a8:	dcc01117 	ldw	r19,68(sp)
  8014ac:	dc801017 	ldw	r18,64(sp)
  8014b0:	dc400f17 	ldw	r17,60(sp)
  8014b4:	dc000e17 	ldw	r16,56(sp)
  8014b8:	dec01304 	addi	sp,sp,76
  8014bc:	f800283a 	ret
  8014c0:	00803fc4 	movi	r2,255
  8014c4:	7090703a 	and	r8,r14,r2
  8014c8:	00802004 	movi	r2,128
  8014cc:	0007883a 	mov	r3,zero
  8014d0:	0013883a 	mov	r9,zero
  8014d4:	40800d26 	beq	r8,r2,80150c <__divdf3+0x204>
  8014d8:	dbc00815 	stw	r15,32(sp)
  8014dc:	db800715 	stw	r14,28(sp)
  8014e0:	003fab06 	br	801390 <__divdf3+0x88>
  8014e4:	343fc92e 	bgeu	r6,r16,80140c <__divdf3+0x104>
  8014e8:	3185883a 	add	r2,r6,r6
  8014ec:	1189803a 	cmpltu	r4,r2,r6
  8014f0:	39c7883a 	add	r3,r7,r7
  8014f4:	20c9883a 	add	r4,r4,r3
  8014f8:	297fffc4 	addi	r5,r5,-1
  8014fc:	100d883a 	mov	r6,r2
  801500:	200f883a 	mov	r7,r4
  801504:	d9400615 	stw	r5,24(sp)
  801508:	003fc006 	br	80140c <__divdf3+0x104>
  80150c:	483ff21e 	bne	r9,zero,8014d8 <__divdf3+0x1d0>
  801510:	01004004 	movi	r4,256
  801514:	7104703a 	and	r2,r14,r4
  801518:	10c4b03a 	or	r2,r2,r3
  80151c:	103fee1e 	bne	r2,zero,8014d8 <__divdf3+0x1d0>
  801520:	31c4b03a 	or	r2,r6,r7
  801524:	103fec26 	beq	r2,zero,8014d8 <__divdf3+0x1d0>
  801528:	7205883a 	add	r2,r14,r8
  80152c:	1391803a 	cmpltu	r8,r2,r14
  801530:	43d1883a 	add	r8,r8,r15
  801534:	013fc004 	movi	r4,-256
  801538:	111c703a 	and	r14,r2,r4
  80153c:	401f883a 	mov	r15,r8
  801540:	003fe506 	br	8014d8 <__divdf3+0x1d0>
  801544:	8009883a 	mov	r4,r16
  801548:	003f9206 	br	801394 <__divdf3+0x8c>
  80154c:	9809883a 	mov	r4,r19
  801550:	d8000715 	stw	zero,28(sp)
  801554:	d8000815 	stw	zero,32(sp)
  801558:	d8000615 	stw	zero,24(sp)
  80155c:	003f8d06 	br	801394 <__divdf3+0x8c>

00801560 <__make_dp>:
  801560:	defff904 	addi	sp,sp,-28
  801564:	d8c00717 	ldw	r3,28(sp)
  801568:	d9000015 	stw	r4,0(sp)
  80156c:	d809883a 	mov	r4,sp
  801570:	dfc00515 	stw	ra,20(sp)
  801574:	d9c00615 	stw	r7,24(sp)
  801578:	d9400115 	stw	r5,4(sp)
  80157c:	d9800215 	stw	r6,8(sp)
  801580:	d8c00415 	stw	r3,16(sp)
  801584:	d9c00315 	stw	r7,12(sp)
  801588:	0801a6c0 	call	801a6c <__pack_d>
  80158c:	dfc00517 	ldw	ra,20(sp)
  801590:	dec00704 	addi	sp,sp,28
  801594:	f800283a 	ret

00801598 <__floatunsidf>:
  801598:	defff204 	addi	sp,sp,-56
  80159c:	dfc00d15 	stw	ra,52(sp)
  8015a0:	ddc00c15 	stw	r23,48(sp)
  8015a4:	dd800b15 	stw	r22,44(sp)
  8015a8:	dd400a15 	stw	r21,40(sp)
  8015ac:	dd000915 	stw	r20,36(sp)
  8015b0:	dcc00815 	stw	r19,32(sp)
  8015b4:	dc800715 	stw	r18,28(sp)
  8015b8:	dc400615 	stw	r17,24(sp)
  8015bc:	dc000515 	stw	r16,20(sp)
  8015c0:	d8000115 	stw	zero,4(sp)
  8015c4:	20000f1e 	bne	r4,zero,801604 <__floatunsidf+0x6c>
  8015c8:	00800084 	movi	r2,2
  8015cc:	d8800015 	stw	r2,0(sp)
  8015d0:	d809883a 	mov	r4,sp
  8015d4:	0801a6c0 	call	801a6c <__pack_d>
  8015d8:	dfc00d17 	ldw	ra,52(sp)
  8015dc:	ddc00c17 	ldw	r23,48(sp)
  8015e0:	dd800b17 	ldw	r22,44(sp)
  8015e4:	dd400a17 	ldw	r21,40(sp)
  8015e8:	dd000917 	ldw	r20,36(sp)
  8015ec:	dcc00817 	ldw	r19,32(sp)
  8015f0:	dc800717 	ldw	r18,28(sp)
  8015f4:	dc400617 	ldw	r17,24(sp)
  8015f8:	dc000517 	ldw	r16,20(sp)
  8015fc:	dec00e04 	addi	sp,sp,56
  801600:	f800283a 	ret
  801604:	008000c4 	movi	r2,3
  801608:	00c00f04 	movi	r3,60
  80160c:	002f883a 	mov	r23,zero
  801610:	202d883a 	mov	r22,r4
  801614:	d8800015 	stw	r2,0(sp)
  801618:	d8c00215 	stw	r3,8(sp)
  80161c:	d9000315 	stw	r4,12(sp)
  801620:	ddc00415 	stw	r23,16(sp)
  801624:	08017c40 	call	8017c4 <__clzsi2>
  801628:	12400744 	addi	r9,r2,29
  80162c:	48000b16 	blt	r9,zero,80165c <__floatunsidf+0xc4>
  801630:	483fe726 	beq	r9,zero,8015d0 <__floatunsidf+0x38>
  801634:	10bfff44 	addi	r2,r2,-3
  801638:	10002e16 	blt	r2,zero,8016f4 <__floatunsidf+0x15c>
  80163c:	b0a2983a 	sll	r17,r22,r2
  801640:	0021883a 	mov	r16,zero
  801644:	d8800217 	ldw	r2,8(sp)
  801648:	dc400415 	stw	r17,16(sp)
  80164c:	dc000315 	stw	r16,12(sp)
  801650:	1245c83a 	sub	r2,r2,r9
  801654:	d8800215 	stw	r2,8(sp)
  801658:	003fdd06 	br	8015d0 <__floatunsidf+0x38>
  80165c:	0255c83a 	sub	r10,zero,r9
  801660:	51bff804 	addi	r6,r10,-32
  801664:	30001b16 	blt	r6,zero,8016d4 <__floatunsidf+0x13c>
  801668:	b9a8d83a 	srl	r20,r23,r6
  80166c:	002b883a 	mov	r21,zero
  801670:	000f883a 	mov	r7,zero
  801674:	01000044 	movi	r4,1
  801678:	0011883a 	mov	r8,zero
  80167c:	30002516 	blt	r6,zero,801714 <__floatunsidf+0x17c>
  801680:	21a6983a 	sll	r19,r4,r6
  801684:	0025883a 	mov	r18,zero
  801688:	00bfffc4 	movi	r2,-1
  80168c:	9089883a 	add	r4,r18,r2
  801690:	988b883a 	add	r5,r19,r2
  801694:	248d803a 	cmpltu	r6,r4,r18
  801698:	314b883a 	add	r5,r6,r5
  80169c:	b104703a 	and	r2,r22,r4
  8016a0:	b946703a 	and	r3,r23,r5
  8016a4:	10c4b03a 	or	r2,r2,r3
  8016a8:	10000226 	beq	r2,zero,8016b4 <__floatunsidf+0x11c>
  8016ac:	01c00044 	movi	r7,1
  8016b0:	0011883a 	mov	r8,zero
  8016b4:	d9000217 	ldw	r4,8(sp)
  8016b8:	a1c4b03a 	or	r2,r20,r7
  8016bc:	aa06b03a 	or	r3,r21,r8
  8016c0:	2249c83a 	sub	r4,r4,r9
  8016c4:	d8c00415 	stw	r3,16(sp)
  8016c8:	d9000215 	stw	r4,8(sp)
  8016cc:	d8800315 	stw	r2,12(sp)
  8016d0:	003fbf06 	br	8015d0 <__floatunsidf+0x38>
  8016d4:	bdc7883a 	add	r3,r23,r23
  8016d8:	008007c4 	movi	r2,31
  8016dc:	1285c83a 	sub	r2,r2,r10
  8016e0:	1886983a 	sll	r3,r3,r2
  8016e4:	b2a8d83a 	srl	r20,r22,r10
  8016e8:	baaad83a 	srl	r21,r23,r10
  8016ec:	1d28b03a 	or	r20,r3,r20
  8016f0:	003fdf06 	br	801670 <__floatunsidf+0xd8>
  8016f4:	b006d07a 	srli	r3,r22,1
  8016f8:	008007c4 	movi	r2,31
  8016fc:	1245c83a 	sub	r2,r2,r9
  801700:	1886d83a 	srl	r3,r3,r2
  801704:	ba62983a 	sll	r17,r23,r9
  801708:	b260983a 	sll	r16,r22,r9
  80170c:	1c62b03a 	or	r17,r3,r17
  801710:	003fcc06 	br	801644 <__floatunsidf+0xac>
  801714:	2006d07a 	srli	r3,r4,1
  801718:	008007c4 	movi	r2,31
  80171c:	1285c83a 	sub	r2,r2,r10
  801720:	18a6d83a 	srl	r19,r3,r2
  801724:	22a4983a 	sll	r18,r4,r10
  801728:	003fd706 	br	801688 <__floatunsidf+0xf0>

0080172c <__muldi3>:
  80172c:	2011883a 	mov	r8,r4
  801730:	427fffcc 	andi	r9,r8,65535
  801734:	4018d43a 	srli	r12,r8,16
  801738:	32bfffcc 	andi	r10,r6,65535
  80173c:	3016d43a 	srli	r11,r6,16
  801740:	4a85383a 	mul	r2,r9,r10
  801744:	6295383a 	mul	r10,r12,r10
  801748:	4ad3383a 	mul	r9,r9,r11
  80174c:	113fffcc 	andi	r4,r2,65535
  801750:	1004d43a 	srli	r2,r2,16
  801754:	4a93883a 	add	r9,r9,r10
  801758:	3807883a 	mov	r3,r7
  80175c:	1245883a 	add	r2,r2,r9
  801760:	280f883a 	mov	r7,r5
  801764:	180b883a 	mov	r5,r3
  801768:	1006943a 	slli	r3,r2,16
  80176c:	defffd04 	addi	sp,sp,-12
  801770:	dc800215 	stw	r18,8(sp)
  801774:	1907883a 	add	r3,r3,r4
  801778:	dc400115 	stw	r17,4(sp)
  80177c:	dc000015 	stw	r16,0(sp)
  801780:	4165383a 	mul	r18,r8,r5
  801784:	31e3383a 	mul	r17,r6,r7
  801788:	1012d43a 	srli	r9,r2,16
  80178c:	62d9383a 	mul	r12,r12,r11
  801790:	181f883a 	mov	r15,r3
  801794:	1280022e 	bgeu	r2,r10,8017a0 <__muldi3+0x74>
  801798:	00800074 	movhi	r2,1
  80179c:	6099883a 	add	r12,r12,r2
  8017a0:	624d883a 	add	r6,r12,r9
  8017a4:	9187883a 	add	r3,r18,r6
  8017a8:	88c7883a 	add	r3,r17,r3
  8017ac:	7805883a 	mov	r2,r15
  8017b0:	dc800217 	ldw	r18,8(sp)
  8017b4:	dc400117 	ldw	r17,4(sp)
  8017b8:	dc000017 	ldw	r16,0(sp)
  8017bc:	dec00304 	addi	sp,sp,12
  8017c0:	f800283a 	ret

008017c4 <__clzsi2>:
  8017c4:	00bfffd4 	movui	r2,65535
  8017c8:	11000e36 	bltu	r2,r4,801804 <__clzsi2+0x40>
  8017cc:	00803fc4 	movi	r2,255
  8017d0:	01400204 	movi	r5,8
  8017d4:	0007883a 	mov	r3,zero
  8017d8:	11001036 	bltu	r2,r4,80181c <__clzsi2+0x58>
  8017dc:	000b883a 	mov	r5,zero
  8017e0:	20c6d83a 	srl	r3,r4,r3
  8017e4:	00802074 	movhi	r2,129
  8017e8:	10a85a04 	addi	r2,r2,-24216
  8017ec:	1887883a 	add	r3,r3,r2
  8017f0:	18800003 	ldbu	r2,0(r3)
  8017f4:	00c00804 	movi	r3,32
  8017f8:	2885883a 	add	r2,r5,r2
  8017fc:	1885c83a 	sub	r2,r3,r2
  801800:	f800283a 	ret
  801804:	01400404 	movi	r5,16
  801808:	00804034 	movhi	r2,256
  80180c:	10bfffc4 	addi	r2,r2,-1
  801810:	2807883a 	mov	r3,r5
  801814:	113ff22e 	bgeu	r2,r4,8017e0 <__clzsi2+0x1c>
  801818:	01400604 	movi	r5,24
  80181c:	2807883a 	mov	r3,r5
  801820:	20c6d83a 	srl	r3,r4,r3
  801824:	00802074 	movhi	r2,129
  801828:	10a85a04 	addi	r2,r2,-24216
  80182c:	1887883a 	add	r3,r3,r2
  801830:	18800003 	ldbu	r2,0(r3)
  801834:	00c00804 	movi	r3,32
  801838:	2885883a 	add	r2,r5,r2
  80183c:	1885c83a 	sub	r2,r3,r2
  801840:	f800283a 	ret

00801844 <__pack_f>:
  801844:	20c00017 	ldw	r3,0(r4)
  801848:	01c00044 	movi	r7,1
  80184c:	21800317 	ldw	r6,12(r4)
  801850:	21400117 	ldw	r5,4(r4)
  801854:	38c02d2e 	bgeu	r7,r3,80190c <__pack_f+0xc8>
  801858:	00800104 	movi	r2,4
  80185c:	18802826 	beq	r3,r2,801900 <__pack_f+0xbc>
  801860:	00800084 	movi	r2,2
  801864:	18800126 	beq	r3,r2,80186c <__pack_f+0x28>
  801868:	3000101e 	bne	r6,zero,8018ac <__pack_f+0x68>
  80186c:	000d883a 	mov	r6,zero
  801870:	0007883a 	mov	r3,zero
  801874:	19003fcc 	andi	r4,r3,255
  801878:	200895fa 	slli	r4,r4,23
  80187c:	00c02034 	movhi	r3,128
  801880:	18ffffc4 	addi	r3,r3,-1
  801884:	30c6703a 	and	r3,r6,r3
  801888:	10a0002c 	andhi	r2,r2,32768
  80188c:	10c4b03a 	or	r2,r2,r3
  801890:	280a97fa 	slli	r5,r5,31
  801894:	1104b03a 	or	r2,r2,r4
  801898:	00e00034 	movhi	r3,32768
  80189c:	18ffffc4 	addi	r3,r3,-1
  8018a0:	10c4703a 	and	r2,r2,r3
  8018a4:	1144b03a 	or	r2,r2,r5
  8018a8:	f800283a 	ret
  8018ac:	21000217 	ldw	r4,8(r4)
  8018b0:	00bfe084 	movi	r2,-126
  8018b4:	20801b16 	blt	r4,r2,801924 <__pack_f+0xe0>
  8018b8:	00801fc4 	movi	r2,127
  8018bc:	11001016 	blt	r2,r4,801900 <__pack_f+0xbc>
  8018c0:	308e703a 	and	r7,r6,r2
  8018c4:	2087883a 	add	r3,r4,r2
  8018c8:	00801004 	movi	r2,64
  8018cc:	38800526 	beq	r7,r2,8018e4 <__pack_f+0xa0>
  8018d0:	31800fc4 	addi	r6,r6,63
  8018d4:	30000716 	blt	r6,zero,8018f4 <__pack_f+0xb0>
  8018d8:	300490ba 	slli	r2,r6,2
  8018dc:	100cd27a 	srli	r6,r2,9
  8018e0:	003fe406 	br	801874 <__pack_f+0x30>
  8018e4:	3080200c 	andi	r2,r6,128
  8018e8:	103ffa26 	beq	r2,zero,8018d4 <__pack_f+0x90>
  8018ec:	31cd883a 	add	r6,r6,r7
  8018f0:	003ff806 	br	8018d4 <__pack_f+0x90>
  8018f4:	300cd07a 	srli	r6,r6,1
  8018f8:	18c00044 	addi	r3,r3,1
  8018fc:	003ff606 	br	8018d8 <__pack_f+0x94>
  801900:	000d883a 	mov	r6,zero
  801904:	00ffffc4 	movi	r3,-1
  801908:	003fda06 	br	801874 <__pack_f+0x30>
  80190c:	31800434 	orhi	r6,r6,16
  801910:	00802034 	movhi	r2,128
  801914:	10bfffc4 	addi	r2,r2,-1
  801918:	308c703a 	and	r6,r6,r2
  80191c:	00ffffc4 	movi	r3,-1
  801920:	003fd406 	br	801874 <__pack_f+0x30>
  801924:	1109c83a 	sub	r4,r2,r4
  801928:	00800644 	movi	r2,25
  80192c:	11001216 	blt	r2,r4,801978 <__pack_f+0x134>
  801930:	3904983a 	sll	r2,r7,r4
  801934:	3106d83a 	srl	r3,r6,r4
  801938:	10bfffc4 	addi	r2,r2,-1
  80193c:	3084703a 	and	r2,r6,r2
  801940:	1004c03a 	cmpne	r2,r2,zero
  801944:	1886b03a 	or	r3,r3,r2
  801948:	19001fcc 	andi	r4,r3,127
  80194c:	00801004 	movi	r2,64
  801950:	20800c26 	beq	r4,r2,801984 <__pack_f+0x140>
  801954:	18c00fc4 	addi	r3,r3,63
  801958:	00900034 	movhi	r2,16384
  80195c:	10bfffc4 	addi	r2,r2,-1
  801960:	180cd1fa 	srli	r6,r3,7
  801964:	10c7803a 	cmpltu	r3,r2,r3
  801968:	00802034 	movhi	r2,128
  80196c:	10bfffc4 	addi	r2,r2,-1
  801970:	308c703a 	and	r6,r6,r2
  801974:	003fbf06 	br	801874 <__pack_f+0x30>
  801978:	0007883a 	mov	r3,zero
  80197c:	000d883a 	mov	r6,zero
  801980:	003ff906 	br	801968 <__pack_f+0x124>
  801984:	1880200c 	andi	r2,r3,128
  801988:	10000126 	beq	r2,zero,801990 <__pack_f+0x14c>
  80198c:	1907883a 	add	r3,r3,r4
  801990:	180cd1fa 	srli	r6,r3,7
  801994:	00900034 	movhi	r2,16384
  801998:	10bfffc4 	addi	r2,r2,-1
  80199c:	10c7803a 	cmpltu	r3,r2,r3
  8019a0:	003ff106 	br	801968 <__pack_f+0x124>

008019a4 <__unpack_f>:
  8019a4:	21800017 	ldw	r6,0(r4)
  8019a8:	00c02034 	movhi	r3,128
  8019ac:	18ffffc4 	addi	r3,r3,-1
  8019b0:	3004d5fa 	srli	r2,r6,23
  8019b4:	3008d7fa 	srli	r4,r6,31
  8019b8:	30ce703a 	and	r7,r6,r3
  8019bc:	10c03fcc 	andi	r3,r2,255
  8019c0:	29000115 	stw	r4,4(r5)
  8019c4:	1800131e 	bne	r3,zero,801a14 <__unpack_f+0x70>
  8019c8:	38000f26 	beq	r7,zero,801a08 <__unpack_f+0x64>
  8019cc:	380691fa 	slli	r3,r7,7
  8019d0:	01bfe084 	movi	r6,-126
  8019d4:	008000c4 	movi	r2,3
  8019d8:	01100034 	movhi	r4,16384
  8019dc:	213fffc4 	addi	r4,r4,-1
  8019e0:	28800015 	stw	r2,0(r5)
  8019e4:	29800215 	stw	r6,8(r5)
  8019e8:	20c00536 	bltu	r4,r3,801a00 <__unpack_f+0x5c>
  8019ec:	3005883a 	mov	r2,r6
  8019f0:	18c7883a 	add	r3,r3,r3
  8019f4:	10bfffc4 	addi	r2,r2,-1
  8019f8:	20fffd2e 	bgeu	r4,r3,8019f0 <__unpack_f+0x4c>
  8019fc:	28800215 	stw	r2,8(r5)
  801a00:	28c00315 	stw	r3,12(r5)
  801a04:	f800283a 	ret
  801a08:	00800084 	movi	r2,2
  801a0c:	28800015 	stw	r2,0(r5)
  801a10:	f800283a 	ret
  801a14:	00803fc4 	movi	r2,255
  801a18:	18800826 	beq	r3,r2,801a3c <__unpack_f+0x98>
  801a1c:	380491fa 	slli	r2,r7,7
  801a20:	18ffe044 	addi	r3,r3,-127
  801a24:	28c00215 	stw	r3,8(r5)
  801a28:	10900034 	orhi	r2,r2,16384
  801a2c:	28800315 	stw	r2,12(r5)
  801a30:	008000c4 	movi	r2,3
  801a34:	28800015 	stw	r2,0(r5)
  801a38:	f800283a 	ret
  801a3c:	3800031e 	bne	r7,zero,801a4c <__unpack_f+0xa8>
  801a40:	00800104 	movi	r2,4
  801a44:	28800015 	stw	r2,0(r5)
  801a48:	f800283a 	ret
  801a4c:	3080042c 	andhi	r2,r6,16
  801a50:	10000426 	beq	r2,zero,801a64 <__unpack_f+0xc0>
  801a54:	00800044 	movi	r2,1
  801a58:	28800015 	stw	r2,0(r5)
  801a5c:	29c00315 	stw	r7,12(r5)
  801a60:	f800283a 	ret
  801a64:	28000015 	stw	zero,0(r5)
  801a68:	003ffc06 	br	801a5c <__unpack_f+0xb8>

00801a6c <__pack_d>:
  801a6c:	20c00017 	ldw	r3,0(r4)
  801a70:	defffd04 	addi	sp,sp,-12
  801a74:	dc000015 	stw	r16,0(sp)
  801a78:	dc800215 	stw	r18,8(sp)
  801a7c:	dc400115 	stw	r17,4(sp)
  801a80:	00800044 	movi	r2,1
  801a84:	22000317 	ldw	r8,12(r4)
  801a88:	001f883a 	mov	r15,zero
  801a8c:	22400417 	ldw	r9,16(r4)
  801a90:	24000117 	ldw	r16,4(r4)
  801a94:	10c0552e 	bgeu	r2,r3,801bec <__pack_d+0x180>
  801a98:	00800104 	movi	r2,4
  801a9c:	18804f26 	beq	r3,r2,801bdc <__pack_d+0x170>
  801aa0:	00800084 	movi	r2,2
  801aa4:	18800226 	beq	r3,r2,801ab0 <__pack_d+0x44>
  801aa8:	4244b03a 	or	r2,r8,r9
  801aac:	10001a1e 	bne	r2,zero,801b18 <__pack_d+0xac>
  801ab0:	000d883a 	mov	r6,zero
  801ab4:	000f883a 	mov	r7,zero
  801ab8:	0011883a 	mov	r8,zero
  801abc:	00800434 	movhi	r2,16
  801ac0:	10bfffc4 	addi	r2,r2,-1
  801ac4:	301d883a 	mov	r14,r6
  801ac8:	3884703a 	and	r2,r7,r2
  801acc:	400a953a 	slli	r5,r8,20
  801ad0:	79bffc2c 	andhi	r6,r15,65520
  801ad4:	308cb03a 	or	r6,r6,r2
  801ad8:	00e00434 	movhi	r3,32784
  801adc:	18ffffc4 	addi	r3,r3,-1
  801ae0:	800497fa 	slli	r2,r16,31
  801ae4:	30c6703a 	and	r3,r6,r3
  801ae8:	1946b03a 	or	r3,r3,r5
  801aec:	01600034 	movhi	r5,32768
  801af0:	297fffc4 	addi	r5,r5,-1
  801af4:	194a703a 	and	r5,r3,r5
  801af8:	288ab03a 	or	r5,r5,r2
  801afc:	2807883a 	mov	r3,r5
  801b00:	7005883a 	mov	r2,r14
  801b04:	dc800217 	ldw	r18,8(sp)
  801b08:	dc400117 	ldw	r17,4(sp)
  801b0c:	dc000017 	ldw	r16,0(sp)
  801b10:	dec00304 	addi	sp,sp,12
  801b14:	f800283a 	ret
  801b18:	21000217 	ldw	r4,8(r4)
  801b1c:	00bf0084 	movi	r2,-1022
  801b20:	20803f16 	blt	r4,r2,801c20 <__pack_d+0x1b4>
  801b24:	0080ffc4 	movi	r2,1023
  801b28:	11002c16 	blt	r2,r4,801bdc <__pack_d+0x170>
  801b2c:	00803fc4 	movi	r2,255
  801b30:	408c703a 	and	r6,r8,r2
  801b34:	00802004 	movi	r2,128
  801b38:	0007883a 	mov	r3,zero
  801b3c:	000f883a 	mov	r7,zero
  801b40:	2280ffc4 	addi	r10,r4,1023
  801b44:	30801e26 	beq	r6,r2,801bc0 <__pack_d+0x154>
  801b48:	00801fc4 	movi	r2,127
  801b4c:	4089883a 	add	r4,r8,r2
  801b50:	220d803a 	cmpltu	r6,r4,r8
  801b54:	324d883a 	add	r6,r6,r9
  801b58:	2011883a 	mov	r8,r4
  801b5c:	3013883a 	mov	r9,r6
  801b60:	00880034 	movhi	r2,8192
  801b64:	10bfffc4 	addi	r2,r2,-1
  801b68:	12400d36 	bltu	r2,r9,801ba0 <__pack_d+0x134>
  801b6c:	4804963a 	slli	r2,r9,24
  801b70:	400cd23a 	srli	r6,r8,8
  801b74:	480ed23a 	srli	r7,r9,8
  801b78:	013fffc4 	movi	r4,-1
  801b7c:	118cb03a 	or	r6,r2,r6
  801b80:	01400434 	movhi	r5,16
  801b84:	297fffc4 	addi	r5,r5,-1
  801b88:	3104703a 	and	r2,r6,r4
  801b8c:	3946703a 	and	r3,r7,r5
  801b90:	5201ffcc 	andi	r8,r10,2047
  801b94:	100d883a 	mov	r6,r2
  801b98:	180f883a 	mov	r7,r3
  801b9c:	003fc706 	br	801abc <__pack_d+0x50>
  801ba0:	480897fa 	slli	r4,r9,31
  801ba4:	4004d07a 	srli	r2,r8,1
  801ba8:	4806d07a 	srli	r3,r9,1
  801bac:	52800044 	addi	r10,r10,1
  801bb0:	2084b03a 	or	r2,r4,r2
  801bb4:	1011883a 	mov	r8,r2
  801bb8:	1813883a 	mov	r9,r3
  801bbc:	003feb06 	br	801b6c <__pack_d+0x100>
  801bc0:	383fe11e 	bne	r7,zero,801b48 <__pack_d+0xdc>
  801bc4:	01004004 	movi	r4,256
  801bc8:	4104703a 	and	r2,r8,r4
  801bcc:	10c4b03a 	or	r2,r2,r3
  801bd0:	103fe326 	beq	r2,zero,801b60 <__pack_d+0xf4>
  801bd4:	3005883a 	mov	r2,r6
  801bd8:	003fdc06 	br	801b4c <__pack_d+0xe0>
  801bdc:	000d883a 	mov	r6,zero
  801be0:	000f883a 	mov	r7,zero
  801be4:	0201ffc4 	movi	r8,2047
  801be8:	003fb406 	br	801abc <__pack_d+0x50>
  801bec:	0005883a 	mov	r2,zero
  801bf0:	00c00234 	movhi	r3,8
  801bf4:	408cb03a 	or	r6,r8,r2
  801bf8:	48ceb03a 	or	r7,r9,r3
  801bfc:	013fffc4 	movi	r4,-1
  801c00:	01400434 	movhi	r5,16
  801c04:	297fffc4 	addi	r5,r5,-1
  801c08:	3104703a 	and	r2,r6,r4
  801c0c:	3946703a 	and	r3,r7,r5
  801c10:	100d883a 	mov	r6,r2
  801c14:	180f883a 	mov	r7,r3
  801c18:	0201ffc4 	movi	r8,2047
  801c1c:	003fa706 	br	801abc <__pack_d+0x50>
  801c20:	1109c83a 	sub	r4,r2,r4
  801c24:	00800e04 	movi	r2,56
  801c28:	11004316 	blt	r2,r4,801d38 <__pack_d+0x2cc>
  801c2c:	21fff804 	addi	r7,r4,-32
  801c30:	38004516 	blt	r7,zero,801d48 <__pack_d+0x2dc>
  801c34:	49d8d83a 	srl	r12,r9,r7
  801c38:	001b883a 	mov	r13,zero
  801c3c:	0023883a 	mov	r17,zero
  801c40:	01400044 	movi	r5,1
  801c44:	0025883a 	mov	r18,zero
  801c48:	38004716 	blt	r7,zero,801d68 <__pack_d+0x2fc>
  801c4c:	29d6983a 	sll	r11,r5,r7
  801c50:	0015883a 	mov	r10,zero
  801c54:	00bfffc4 	movi	r2,-1
  801c58:	5089883a 	add	r4,r10,r2
  801c5c:	588b883a 	add	r5,r11,r2
  801c60:	228d803a 	cmpltu	r6,r4,r10
  801c64:	314b883a 	add	r5,r6,r5
  801c68:	4104703a 	and	r2,r8,r4
  801c6c:	4946703a 	and	r3,r9,r5
  801c70:	10c4b03a 	or	r2,r2,r3
  801c74:	10000226 	beq	r2,zero,801c80 <__pack_d+0x214>
  801c78:	04400044 	movi	r17,1
  801c7c:	0025883a 	mov	r18,zero
  801c80:	00803fc4 	movi	r2,255
  801c84:	644eb03a 	or	r7,r12,r17
  801c88:	3892703a 	and	r9,r7,r2
  801c8c:	00802004 	movi	r2,128
  801c90:	6c90b03a 	or	r8,r13,r18
  801c94:	0015883a 	mov	r10,zero
  801c98:	48801626 	beq	r9,r2,801cf4 <__pack_d+0x288>
  801c9c:	01001fc4 	movi	r4,127
  801ca0:	3905883a 	add	r2,r7,r4
  801ca4:	11cd803a 	cmpltu	r6,r2,r7
  801ca8:	320d883a 	add	r6,r6,r8
  801cac:	100f883a 	mov	r7,r2
  801cb0:	00840034 	movhi	r2,4096
  801cb4:	10bfffc4 	addi	r2,r2,-1
  801cb8:	3011883a 	mov	r8,r6
  801cbc:	0007883a 	mov	r3,zero
  801cc0:	11801b36 	bltu	r2,r6,801d30 <__pack_d+0x2c4>
  801cc4:	4004963a 	slli	r2,r8,24
  801cc8:	3808d23a 	srli	r4,r7,8
  801ccc:	400ad23a 	srli	r5,r8,8
  801cd0:	1813883a 	mov	r9,r3
  801cd4:	1108b03a 	or	r4,r2,r4
  801cd8:	00bfffc4 	movi	r2,-1
  801cdc:	00c00434 	movhi	r3,16
  801ce0:	18ffffc4 	addi	r3,r3,-1
  801ce4:	208c703a 	and	r6,r4,r2
  801ce8:	28ce703a 	and	r7,r5,r3
  801cec:	4a01ffcc 	andi	r8,r9,2047
  801cf0:	003f7206 	br	801abc <__pack_d+0x50>
  801cf4:	503fe91e 	bne	r10,zero,801c9c <__pack_d+0x230>
  801cf8:	01004004 	movi	r4,256
  801cfc:	3904703a 	and	r2,r7,r4
  801d00:	0007883a 	mov	r3,zero
  801d04:	10c4b03a 	or	r2,r2,r3
  801d08:	10000626 	beq	r2,zero,801d24 <__pack_d+0x2b8>
  801d0c:	3a45883a 	add	r2,r7,r9
  801d10:	11cd803a 	cmpltu	r6,r2,r7
  801d14:	320d883a 	add	r6,r6,r8
  801d18:	100f883a 	mov	r7,r2
  801d1c:	3011883a 	mov	r8,r6
  801d20:	0007883a 	mov	r3,zero
  801d24:	00840034 	movhi	r2,4096
  801d28:	10bfffc4 	addi	r2,r2,-1
  801d2c:	123fe52e 	bgeu	r2,r8,801cc4 <__pack_d+0x258>
  801d30:	00c00044 	movi	r3,1
  801d34:	003fe306 	br	801cc4 <__pack_d+0x258>
  801d38:	0009883a 	mov	r4,zero
  801d3c:	0013883a 	mov	r9,zero
  801d40:	000b883a 	mov	r5,zero
  801d44:	003fe406 	br	801cd8 <__pack_d+0x26c>
  801d48:	4a47883a 	add	r3,r9,r9
  801d4c:	008007c4 	movi	r2,31
  801d50:	1105c83a 	sub	r2,r2,r4
  801d54:	1886983a 	sll	r3,r3,r2
  801d58:	4118d83a 	srl	r12,r8,r4
  801d5c:	491ad83a 	srl	r13,r9,r4
  801d60:	1b18b03a 	or	r12,r3,r12
  801d64:	003fb506 	br	801c3c <__pack_d+0x1d0>
  801d68:	2806d07a 	srli	r3,r5,1
  801d6c:	008007c4 	movi	r2,31
  801d70:	1105c83a 	sub	r2,r2,r4
  801d74:	1896d83a 	srl	r11,r3,r2
  801d78:	2914983a 	sll	r10,r5,r4
  801d7c:	003fb506 	br	801c54 <__pack_d+0x1e8>

00801d80 <__unpack_d>:
  801d80:	20c00117 	ldw	r3,4(r4)
  801d84:	22400017 	ldw	r9,0(r4)
  801d88:	00800434 	movhi	r2,16
  801d8c:	10bfffc4 	addi	r2,r2,-1
  801d90:	1808d53a 	srli	r4,r3,20
  801d94:	180cd7fa 	srli	r6,r3,31
  801d98:	1894703a 	and	r10,r3,r2
  801d9c:	2201ffcc 	andi	r8,r4,2047
  801da0:	281b883a 	mov	r13,r5
  801da4:	4817883a 	mov	r11,r9
  801da8:	29800115 	stw	r6,4(r5)
  801dac:	5019883a 	mov	r12,r10
  801db0:	40001e1e 	bne	r8,zero,801e2c <__unpack_d+0xac>
  801db4:	4a84b03a 	or	r2,r9,r10
  801db8:	10001926 	beq	r2,zero,801e20 <__unpack_d+0xa0>
  801dbc:	4804d63a 	srli	r2,r9,24
  801dc0:	500c923a 	slli	r6,r10,8
  801dc4:	013f0084 	movi	r4,-1022
  801dc8:	00c40034 	movhi	r3,4096
  801dcc:	18ffffc4 	addi	r3,r3,-1
  801dd0:	118cb03a 	or	r6,r2,r6
  801dd4:	008000c4 	movi	r2,3
  801dd8:	480a923a 	slli	r5,r9,8
  801ddc:	68800015 	stw	r2,0(r13)
  801de0:	69000215 	stw	r4,8(r13)
  801de4:	19800b36 	bltu	r3,r6,801e14 <__unpack_d+0x94>
  801de8:	200f883a 	mov	r7,r4
  801dec:	1811883a 	mov	r8,r3
  801df0:	2945883a 	add	r2,r5,r5
  801df4:	1149803a 	cmpltu	r4,r2,r5
  801df8:	3187883a 	add	r3,r6,r6
  801dfc:	20c9883a 	add	r4,r4,r3
  801e00:	100b883a 	mov	r5,r2
  801e04:	200d883a 	mov	r6,r4
  801e08:	39ffffc4 	addi	r7,r7,-1
  801e0c:	413ff82e 	bgeu	r8,r4,801df0 <__unpack_d+0x70>
  801e10:	69c00215 	stw	r7,8(r13)
  801e14:	69800415 	stw	r6,16(r13)
  801e18:	69400315 	stw	r5,12(r13)
  801e1c:	f800283a 	ret
  801e20:	00800084 	movi	r2,2
  801e24:	28800015 	stw	r2,0(r5)
  801e28:	f800283a 	ret
  801e2c:	0081ffc4 	movi	r2,2047
  801e30:	40800f26 	beq	r8,r2,801e70 <__unpack_d+0xf0>
  801e34:	480cd63a 	srli	r6,r9,24
  801e38:	5006923a 	slli	r3,r10,8
  801e3c:	4804923a 	slli	r2,r9,8
  801e40:	0009883a 	mov	r4,zero
  801e44:	30c6b03a 	or	r3,r6,r3
  801e48:	01440034 	movhi	r5,4096
  801e4c:	110cb03a 	or	r6,r2,r4
  801e50:	423f0044 	addi	r8,r8,-1023
  801e54:	194eb03a 	or	r7,r3,r5
  801e58:	008000c4 	movi	r2,3
  801e5c:	69c00415 	stw	r7,16(r13)
  801e60:	6a000215 	stw	r8,8(r13)
  801e64:	68800015 	stw	r2,0(r13)
  801e68:	69800315 	stw	r6,12(r13)
  801e6c:	f800283a 	ret
  801e70:	4a84b03a 	or	r2,r9,r10
  801e74:	1000031e 	bne	r2,zero,801e84 <__unpack_d+0x104>
  801e78:	00800104 	movi	r2,4
  801e7c:	28800015 	stw	r2,0(r5)
  801e80:	f800283a 	ret
  801e84:	0009883a 	mov	r4,zero
  801e88:	01400234 	movhi	r5,8
  801e8c:	4904703a 	and	r2,r9,r4
  801e90:	5146703a 	and	r3,r10,r5
  801e94:	10c4b03a 	or	r2,r2,r3
  801e98:	10000526 	beq	r2,zero,801eb0 <__unpack_d+0x130>
  801e9c:	00800044 	movi	r2,1
  801ea0:	68800015 	stw	r2,0(r13)
  801ea4:	6b000415 	stw	r12,16(r13)
  801ea8:	6ac00315 	stw	r11,12(r13)
  801eac:	f800283a 	ret
  801eb0:	68000015 	stw	zero,0(r13)
  801eb4:	003ffb06 	br	801ea4 <__unpack_d+0x124>

00801eb8 <gcvt>:
  801eb8:	defff804 	addi	sp,sp,-32
  801ebc:	0005883a 	mov	r2,zero
  801ec0:	dcc00615 	stw	r19,24(sp)
  801ec4:	dc800515 	stw	r18,20(sp)
  801ec8:	3027883a 	mov	r19,r6
  801ecc:	3825883a 	mov	r18,r7
  801ed0:	100d883a 	mov	r6,r2
  801ed4:	000f883a 	mov	r7,zero
  801ed8:	dc400415 	stw	r17,16(sp)
  801edc:	dc000315 	stw	r16,12(sp)
  801ee0:	dfc00715 	stw	ra,28(sp)
  801ee4:	2021883a 	mov	r16,r4
  801ee8:	2823883a 	mov	r17,r5
  801eec:	0806f080 	call	806f08 <__ltdf2>
  801ef0:	9007883a 	mov	r3,r18
  801ef4:	10001516 	blt	r2,zero,801f4c <gcvt+0x94>
  801ef8:	00802074 	movhi	r2,129
  801efc:	10af7404 	addi	r2,r2,-16944
  801f00:	11000017 	ldw	r4,0(r2)
  801f04:	980f883a 	mov	r7,r19
  801f08:	008019c4 	movi	r2,103
  801f0c:	880d883a 	mov	r6,r17
  801f10:	800b883a 	mov	r5,r16
  801f14:	d8c00015 	stw	r3,0(sp)
  801f18:	d8800115 	stw	r2,4(sp)
  801f1c:	d8000215 	stw	zero,8(sp)
  801f20:	0802bb00 	call	802bb0 <_gcvt>
  801f24:	900f883a 	mov	r7,r18
  801f28:	10000d26 	beq	r2,zero,801f60 <gcvt+0xa8>
  801f2c:	3805883a 	mov	r2,r7
  801f30:	dfc00717 	ldw	ra,28(sp)
  801f34:	dcc00617 	ldw	r19,24(sp)
  801f38:	dc800517 	ldw	r18,20(sp)
  801f3c:	dc400417 	ldw	r17,16(sp)
  801f40:	dc000317 	ldw	r16,12(sp)
  801f44:	dec00804 	addi	sp,sp,32
  801f48:	f800283a 	ret
  801f4c:	00800b44 	movi	r2,45
  801f50:	9cffffc4 	addi	r19,r19,-1
  801f54:	90c00044 	addi	r3,r18,1
  801f58:	90800005 	stb	r2,0(r18)
  801f5c:	003fe606 	br	801ef8 <gcvt+0x40>
  801f60:	000f883a 	mov	r7,zero
  801f64:	3805883a 	mov	r2,r7
  801f68:	dfc00717 	ldw	ra,28(sp)
  801f6c:	dcc00617 	ldw	r19,24(sp)
  801f70:	dc800517 	ldw	r18,20(sp)
  801f74:	dc400417 	ldw	r17,16(sp)
  801f78:	dc000317 	ldw	r16,12(sp)
  801f7c:	dec00804 	addi	sp,sp,32
  801f80:	f800283a 	ret

00801f84 <gcvtf>:
  801f84:	defffd04 	addi	sp,sp,-12
  801f88:	dcc00115 	stw	r19,4(sp)
  801f8c:	dc400015 	stw	r17,0(sp)
  801f90:	3027883a 	mov	r19,r6
  801f94:	2823883a 	mov	r17,r5
  801f98:	dfc00215 	stw	ra,8(sp)
  801f9c:	0800db00 	call	800db0 <__extendsfdf2>
  801fa0:	180b883a 	mov	r5,r3
  801fa4:	880d883a 	mov	r6,r17
  801fa8:	980f883a 	mov	r7,r19
  801fac:	1009883a 	mov	r4,r2
  801fb0:	dfc00217 	ldw	ra,8(sp)
  801fb4:	dcc00117 	ldw	r19,4(sp)
  801fb8:	dc400017 	ldw	r17,0(sp)
  801fbc:	dec00304 	addi	sp,sp,12
  801fc0:	0801eb81 	jmpi	801eb8 <gcvt>

00801fc4 <ecvt>:
  801fc4:	defffd04 	addi	sp,sp,-12
  801fc8:	da000317 	ldw	r8,12(sp)
  801fcc:	dfc00215 	stw	ra,8(sp)
  801fd0:	d8000115 	stw	zero,4(sp)
  801fd4:	da000015 	stw	r8,0(sp)
  801fd8:	08031880 	call	803188 <ecvtbuf>
  801fdc:	dfc00217 	ldw	ra,8(sp)
  801fe0:	dec00304 	addi	sp,sp,12
  801fe4:	f800283a 	ret

00801fe8 <ecvtf>:
  801fe8:	defffb04 	addi	sp,sp,-20
  801fec:	dfc00415 	stw	ra,16(sp)
  801ff0:	dd400315 	stw	r21,12(sp)
  801ff4:	dcc00215 	stw	r19,8(sp)
  801ff8:	382b883a 	mov	r21,r7
  801ffc:	3027883a 	mov	r19,r6
  802000:	dc400115 	stw	r17,4(sp)
  802004:	2823883a 	mov	r17,r5
  802008:	0800db00 	call	800db0 <__extendsfdf2>
  80200c:	180b883a 	mov	r5,r3
  802010:	880d883a 	mov	r6,r17
  802014:	980f883a 	mov	r7,r19
  802018:	1009883a 	mov	r4,r2
  80201c:	dd400015 	stw	r21,0(sp)
  802020:	0801fc40 	call	801fc4 <ecvt>
  802024:	dfc00417 	ldw	ra,16(sp)
  802028:	dd400317 	ldw	r21,12(sp)
  80202c:	dcc00217 	ldw	r19,8(sp)
  802030:	dc400117 	ldw	r17,4(sp)
  802034:	dec00504 	addi	sp,sp,20
  802038:	f800283a 	ret

0080203c <fcvt>:
  80203c:	defffd04 	addi	sp,sp,-12
  802040:	da000317 	ldw	r8,12(sp)
  802044:	dfc00215 	stw	ra,8(sp)
  802048:	d8000115 	stw	zero,4(sp)
  80204c:	da000015 	stw	r8,0(sp)
  802050:	08032d00 	call	8032d0 <fcvtbuf>
  802054:	dfc00217 	ldw	ra,8(sp)
  802058:	dec00304 	addi	sp,sp,12
  80205c:	f800283a 	ret

00802060 <fcvtf>:
  802060:	defffb04 	addi	sp,sp,-20
  802064:	dfc00415 	stw	ra,16(sp)
  802068:	dd400315 	stw	r21,12(sp)
  80206c:	dcc00215 	stw	r19,8(sp)
  802070:	382b883a 	mov	r21,r7
  802074:	3027883a 	mov	r19,r6
  802078:	dc400115 	stw	r17,4(sp)
  80207c:	2823883a 	mov	r17,r5
  802080:	0800db00 	call	800db0 <__extendsfdf2>
  802084:	180b883a 	mov	r5,r3
  802088:	880d883a 	mov	r6,r17
  80208c:	980f883a 	mov	r7,r19
  802090:	1009883a 	mov	r4,r2
  802094:	dd400015 	stw	r21,0(sp)
  802098:	080203c0 	call	80203c <fcvt>
  80209c:	dfc00417 	ldw	ra,16(sp)
  8020a0:	dd400317 	ldw	r21,12(sp)
  8020a4:	dcc00217 	ldw	r19,8(sp)
  8020a8:	dc400117 	ldw	r17,4(sp)
  8020ac:	dec00504 	addi	sp,sp,20
  8020b0:	f800283a 	ret

008020b4 <free>:
  8020b4:	00802074 	movhi	r2,129
  8020b8:	10af7404 	addi	r2,r2,-16944
  8020bc:	200b883a 	mov	r5,r4
  8020c0:	11000017 	ldw	r4,0(r2)
  8020c4:	08035a41 	jmpi	8035a4 <_free_r>

008020c8 <malloc>:
  8020c8:	00802074 	movhi	r2,129
  8020cc:	10af7404 	addi	r2,r2,-16944
  8020d0:	200b883a 	mov	r5,r4
  8020d4:	11000017 	ldw	r4,0(r2)
  8020d8:	08020dc1 	jmpi	8020dc <_malloc_r>

008020dc <_malloc_r>:
  8020dc:	defff604 	addi	sp,sp,-40
  8020e0:	28c002c4 	addi	r3,r5,11
  8020e4:	00800584 	movi	r2,22
  8020e8:	dc800215 	stw	r18,8(sp)
  8020ec:	dfc00915 	stw	ra,36(sp)
  8020f0:	df000815 	stw	fp,32(sp)
  8020f4:	ddc00715 	stw	r23,28(sp)
  8020f8:	dd800615 	stw	r22,24(sp)
  8020fc:	dd400515 	stw	r21,20(sp)
  802100:	dd000415 	stw	r20,16(sp)
  802104:	dcc00315 	stw	r19,12(sp)
  802108:	dc400115 	stw	r17,4(sp)
  80210c:	dc000015 	stw	r16,0(sp)
  802110:	2025883a 	mov	r18,r4
  802114:	10c01236 	bltu	r2,r3,802160 <_malloc_r+0x84>
  802118:	04400404 	movi	r17,16
  80211c:	8940142e 	bgeu	r17,r5,802170 <_malloc_r+0x94>
  802120:	00800304 	movi	r2,12
  802124:	0007883a 	mov	r3,zero
  802128:	90800015 	stw	r2,0(r18)
  80212c:	1805883a 	mov	r2,r3
  802130:	dfc00917 	ldw	ra,36(sp)
  802134:	df000817 	ldw	fp,32(sp)
  802138:	ddc00717 	ldw	r23,28(sp)
  80213c:	dd800617 	ldw	r22,24(sp)
  802140:	dd400517 	ldw	r21,20(sp)
  802144:	dd000417 	ldw	r20,16(sp)
  802148:	dcc00317 	ldw	r19,12(sp)
  80214c:	dc800217 	ldw	r18,8(sp)
  802150:	dc400117 	ldw	r17,4(sp)
  802154:	dc000017 	ldw	r16,0(sp)
  802158:	dec00a04 	addi	sp,sp,40
  80215c:	f800283a 	ret
  802160:	00bffe04 	movi	r2,-8
  802164:	18a2703a 	and	r17,r3,r2
  802168:	883fed16 	blt	r17,zero,802120 <_malloc_r+0x44>
  80216c:	897fec36 	bltu	r17,r5,802120 <_malloc_r+0x44>
  802170:	9009883a 	mov	r4,r18
  802174:	08075000 	call	807500 <__malloc_lock>
  802178:	00807dc4 	movi	r2,503
  80217c:	14402b2e 	bgeu	r2,r17,80222c <_malloc_r+0x150>
  802180:	8806d27a 	srli	r3,r17,9
  802184:	18003f1e 	bne	r3,zero,802284 <_malloc_r+0x1a8>
  802188:	880cd0fa 	srli	r6,r17,3
  80218c:	300490fa 	slli	r2,r6,3
  802190:	02c02074 	movhi	r11,129
  802194:	5ae9f004 	addi	r11,r11,-22592
  802198:	12cb883a 	add	r5,r2,r11
  80219c:	2c000317 	ldw	r16,12(r5)
  8021a0:	580f883a 	mov	r7,r11
  8021a4:	2c00041e 	bne	r5,r16,8021b8 <_malloc_r+0xdc>
  8021a8:	00000a06 	br	8021d4 <_malloc_r+0xf8>
  8021ac:	1800860e 	bge	r3,zero,8023c8 <_malloc_r+0x2ec>
  8021b0:	84000317 	ldw	r16,12(r16)
  8021b4:	2c000726 	beq	r5,r16,8021d4 <_malloc_r+0xf8>
  8021b8:	80800117 	ldw	r2,4(r16)
  8021bc:	00ffff04 	movi	r3,-4
  8021c0:	10c8703a 	and	r4,r2,r3
  8021c4:	2447c83a 	sub	r3,r4,r17
  8021c8:	008003c4 	movi	r2,15
  8021cc:	10fff70e 	bge	r2,r3,8021ac <_malloc_r+0xd0>
  8021d0:	31bfffc4 	addi	r6,r6,-1
  8021d4:	32400044 	addi	r9,r6,1
  8021d8:	02802074 	movhi	r10,129
  8021dc:	52a9f204 	addi	r10,r10,-22584
  8021e0:	54000217 	ldw	r16,8(r10)
  8021e4:	8280a026 	beq	r16,r10,802468 <_malloc_r+0x38c>
  8021e8:	80800117 	ldw	r2,4(r16)
  8021ec:	00ffff04 	movi	r3,-4
  8021f0:	10ca703a 	and	r5,r2,r3
  8021f4:	2c4dc83a 	sub	r6,r5,r17
  8021f8:	008003c4 	movi	r2,15
  8021fc:	11808316 	blt	r2,r6,80240c <_malloc_r+0x330>
  802200:	52800315 	stw	r10,12(r10)
  802204:	52800215 	stw	r10,8(r10)
  802208:	30002916 	blt	r6,zero,8022b0 <_malloc_r+0x1d4>
  80220c:	8147883a 	add	r3,r16,r5
  802210:	18800117 	ldw	r2,4(r3)
  802214:	9009883a 	mov	r4,r18
  802218:	10800054 	ori	r2,r2,1
  80221c:	18800115 	stw	r2,4(r3)
  802220:	08075040 	call	807504 <__malloc_unlock>
  802224:	80c00204 	addi	r3,r16,8
  802228:	003fc006 	br	80212c <_malloc_r+0x50>
  80222c:	02c02074 	movhi	r11,129
  802230:	5ae9f004 	addi	r11,r11,-22592
  802234:	8ac5883a 	add	r2,r17,r11
  802238:	14000317 	ldw	r16,12(r2)
  80223c:	580f883a 	mov	r7,r11
  802240:	8806d0fa 	srli	r3,r17,3
  802244:	14006c26 	beq	r2,r16,8023f8 <_malloc_r+0x31c>
  802248:	80c00117 	ldw	r3,4(r16)
  80224c:	00bfff04 	movi	r2,-4
  802250:	81800317 	ldw	r6,12(r16)
  802254:	1886703a 	and	r3,r3,r2
  802258:	80c7883a 	add	r3,r16,r3
  80225c:	18800117 	ldw	r2,4(r3)
  802260:	81400217 	ldw	r5,8(r16)
  802264:	9009883a 	mov	r4,r18
  802268:	10800054 	ori	r2,r2,1
  80226c:	18800115 	stw	r2,4(r3)
  802270:	31400215 	stw	r5,8(r6)
  802274:	29800315 	stw	r6,12(r5)
  802278:	08075040 	call	807504 <__malloc_unlock>
  80227c:	80c00204 	addi	r3,r16,8
  802280:	003faa06 	br	80212c <_malloc_r+0x50>
  802284:	00800104 	movi	r2,4
  802288:	10c0052e 	bgeu	r2,r3,8022a0 <_malloc_r+0x1c4>
  80228c:	00800504 	movi	r2,20
  802290:	10c07836 	bltu	r2,r3,802474 <_malloc_r+0x398>
  802294:	198016c4 	addi	r6,r3,91
  802298:	300490fa 	slli	r2,r6,3
  80229c:	003fbc06 	br	802190 <_malloc_r+0xb4>
  8022a0:	8804d1ba 	srli	r2,r17,6
  8022a4:	11800e04 	addi	r6,r2,56
  8022a8:	300490fa 	slli	r2,r6,3
  8022ac:	003fb806 	br	802190 <_malloc_r+0xb4>
  8022b0:	00807fc4 	movi	r2,511
  8022b4:	1140bb36 	bltu	r2,r5,8025a4 <_malloc_r+0x4c8>
  8022b8:	2806d0fa 	srli	r3,r5,3
  8022bc:	573ffe04 	addi	fp,r10,-8
  8022c0:	00800044 	movi	r2,1
  8022c4:	180890fa 	slli	r4,r3,3
  8022c8:	1807d0ba 	srai	r3,r3,2
  8022cc:	e1c00117 	ldw	r7,4(fp)
  8022d0:	5909883a 	add	r4,r11,r4
  8022d4:	21400217 	ldw	r5,8(r4)
  8022d8:	10c4983a 	sll	r2,r2,r3
  8022dc:	81000315 	stw	r4,12(r16)
  8022e0:	81400215 	stw	r5,8(r16)
  8022e4:	388eb03a 	or	r7,r7,r2
  8022e8:	2c000315 	stw	r16,12(r5)
  8022ec:	24000215 	stw	r16,8(r4)
  8022f0:	e1c00115 	stw	r7,4(fp)
  8022f4:	4807883a 	mov	r3,r9
  8022f8:	4800cd16 	blt	r9,zero,802630 <_malloc_r+0x554>
  8022fc:	1807d0ba 	srai	r3,r3,2
  802300:	00800044 	movi	r2,1
  802304:	10c8983a 	sll	r4,r2,r3
  802308:	39004436 	bltu	r7,r4,80241c <_malloc_r+0x340>
  80230c:	21c4703a 	and	r2,r4,r7
  802310:	10000a1e 	bne	r2,zero,80233c <_malloc_r+0x260>
  802314:	2109883a 	add	r4,r4,r4
  802318:	00bfff04 	movi	r2,-4
  80231c:	4884703a 	and	r2,r9,r2
  802320:	3906703a 	and	r3,r7,r4
  802324:	12400104 	addi	r9,r2,4
  802328:	1800041e 	bne	r3,zero,80233c <_malloc_r+0x260>
  80232c:	2109883a 	add	r4,r4,r4
  802330:	3904703a 	and	r2,r7,r4
  802334:	4a400104 	addi	r9,r9,4
  802338:	103ffc26 	beq	r2,zero,80232c <_malloc_r+0x250>
  80233c:	480490fa 	slli	r2,r9,3
  802340:	4819883a 	mov	r12,r9
  802344:	023fff04 	movi	r8,-4
  802348:	589b883a 	add	r13,r11,r2
  80234c:	6807883a 	mov	r3,r13
  802350:	014003c4 	movi	r5,15
  802354:	1c000317 	ldw	r16,12(r3)
  802358:	1c00041e 	bne	r3,r16,80236c <_malloc_r+0x290>
  80235c:	0000a706 	br	8025fc <_malloc_r+0x520>
  802360:	3000ab0e 	bge	r6,zero,802610 <_malloc_r+0x534>
  802364:	84000317 	ldw	r16,12(r16)
  802368:	1c00a426 	beq	r3,r16,8025fc <_malloc_r+0x520>
  80236c:	80800117 	ldw	r2,4(r16)
  802370:	1204703a 	and	r2,r2,r8
  802374:	144dc83a 	sub	r6,r2,r17
  802378:	29bff90e 	bge	r5,r6,802360 <_malloc_r+0x284>
  80237c:	81000317 	ldw	r4,12(r16)
  802380:	80c00217 	ldw	r3,8(r16)
  802384:	89400054 	ori	r5,r17,1
  802388:	8445883a 	add	r2,r16,r17
  80238c:	20c00215 	stw	r3,8(r4)
  802390:	19000315 	stw	r4,12(r3)
  802394:	81400115 	stw	r5,4(r16)
  802398:	1187883a 	add	r3,r2,r6
  80239c:	31000054 	ori	r4,r6,1
  8023a0:	50800315 	stw	r2,12(r10)
  8023a4:	50800215 	stw	r2,8(r10)
  8023a8:	19800015 	stw	r6,0(r3)
  8023ac:	11000115 	stw	r4,4(r2)
  8023b0:	12800215 	stw	r10,8(r2)
  8023b4:	12800315 	stw	r10,12(r2)
  8023b8:	9009883a 	mov	r4,r18
  8023bc:	08075040 	call	807504 <__malloc_unlock>
  8023c0:	80c00204 	addi	r3,r16,8
  8023c4:	003f5906 	br	80212c <_malloc_r+0x50>
  8023c8:	8109883a 	add	r4,r16,r4
  8023cc:	20800117 	ldw	r2,4(r4)
  8023d0:	80c00217 	ldw	r3,8(r16)
  8023d4:	81400317 	ldw	r5,12(r16)
  8023d8:	10800054 	ori	r2,r2,1
  8023dc:	20800115 	stw	r2,4(r4)
  8023e0:	28c00215 	stw	r3,8(r5)
  8023e4:	19400315 	stw	r5,12(r3)
  8023e8:	9009883a 	mov	r4,r18
  8023ec:	08075040 	call	807504 <__malloc_unlock>
  8023f0:	80c00204 	addi	r3,r16,8
  8023f4:	003f4d06 	br	80212c <_malloc_r+0x50>
  8023f8:	80800204 	addi	r2,r16,8
  8023fc:	14000317 	ldw	r16,12(r2)
  802400:	143f911e 	bne	r2,r16,802248 <_malloc_r+0x16c>
  802404:	1a400084 	addi	r9,r3,2
  802408:	003f7306 	br	8021d8 <_malloc_r+0xfc>
  80240c:	88c00054 	ori	r3,r17,1
  802410:	8445883a 	add	r2,r16,r17
  802414:	80c00115 	stw	r3,4(r16)
  802418:	003fdf06 	br	802398 <_malloc_r+0x2bc>
  80241c:	e4000217 	ldw	r16,8(fp)
  802420:	00bfff04 	movi	r2,-4
  802424:	80c00117 	ldw	r3,4(r16)
  802428:	802d883a 	mov	r22,r16
  80242c:	18aa703a 	and	r21,r3,r2
  802430:	ac401636 	bltu	r21,r17,80248c <_malloc_r+0x3b0>
  802434:	ac49c83a 	sub	r4,r21,r17
  802438:	008003c4 	movi	r2,15
  80243c:	1100130e 	bge	r2,r4,80248c <_malloc_r+0x3b0>
  802440:	88800054 	ori	r2,r17,1
  802444:	8447883a 	add	r3,r16,r17
  802448:	80800115 	stw	r2,4(r16)
  80244c:	20800054 	ori	r2,r4,1
  802450:	18800115 	stw	r2,4(r3)
  802454:	e0c00215 	stw	r3,8(fp)
  802458:	9009883a 	mov	r4,r18
  80245c:	08075040 	call	807504 <__malloc_unlock>
  802460:	80c00204 	addi	r3,r16,8
  802464:	003f3106 	br	80212c <_malloc_r+0x50>
  802468:	39c00117 	ldw	r7,4(r7)
  80246c:	573ffe04 	addi	fp,r10,-8
  802470:	003fa006 	br	8022f4 <_malloc_r+0x218>
  802474:	00801504 	movi	r2,84
  802478:	10c06736 	bltu	r2,r3,802618 <_malloc_r+0x53c>
  80247c:	8804d33a 	srli	r2,r17,12
  802480:	11801b84 	addi	r6,r2,110
  802484:	300490fa 	slli	r2,r6,3
  802488:	003f4106 	br	802190 <_malloc_r+0xb4>
  80248c:	d0a6a017 	ldw	r2,-25984(gp)
  802490:	d0e00317 	ldw	r3,-32756(gp)
  802494:	053fffc4 	movi	r20,-1
  802498:	10800404 	addi	r2,r2,16
  80249c:	88a7883a 	add	r19,r17,r2
  8024a0:	1d000326 	beq	r3,r20,8024b0 <_malloc_r+0x3d4>
  8024a4:	98c3ffc4 	addi	r3,r19,4095
  8024a8:	00bc0004 	movi	r2,-4096
  8024ac:	18a6703a 	and	r19,r3,r2
  8024b0:	9009883a 	mov	r4,r18
  8024b4:	980b883a 	mov	r5,r19
  8024b8:	08029500 	call	802950 <_sbrk_r>
  8024bc:	1009883a 	mov	r4,r2
  8024c0:	15000426 	beq	r2,r20,8024d4 <_malloc_r+0x3f8>
  8024c4:	854b883a 	add	r5,r16,r21
  8024c8:	1029883a 	mov	r20,r2
  8024cc:	11405a2e 	bgeu	r2,r5,802638 <_malloc_r+0x55c>
  8024d0:	87000c26 	beq	r16,fp,802504 <_malloc_r+0x428>
  8024d4:	e4000217 	ldw	r16,8(fp)
  8024d8:	80c00117 	ldw	r3,4(r16)
  8024dc:	00bfff04 	movi	r2,-4
  8024e0:	1884703a 	and	r2,r3,r2
  8024e4:	14400336 	bltu	r2,r17,8024f4 <_malloc_r+0x418>
  8024e8:	1449c83a 	sub	r4,r2,r17
  8024ec:	008003c4 	movi	r2,15
  8024f0:	113fd316 	blt	r2,r4,802440 <_malloc_r+0x364>
  8024f4:	9009883a 	mov	r4,r18
  8024f8:	08075040 	call	807504 <__malloc_unlock>
  8024fc:	0007883a 	mov	r3,zero
  802500:	003f0a06 	br	80212c <_malloc_r+0x50>
  802504:	05c02074 	movhi	r23,129
  802508:	bdf61e04 	addi	r23,r23,-10120
  80250c:	b8800017 	ldw	r2,0(r23)
  802510:	988d883a 	add	r6,r19,r2
  802514:	b9800015 	stw	r6,0(r23)
  802518:	d0e00317 	ldw	r3,-32756(gp)
  80251c:	00bfffc4 	movi	r2,-1
  802520:	18808e26 	beq	r3,r2,80275c <_malloc_r+0x680>
  802524:	2145c83a 	sub	r2,r4,r5
  802528:	3085883a 	add	r2,r6,r2
  80252c:	b8800015 	stw	r2,0(r23)
  802530:	20c001cc 	andi	r3,r4,7
  802534:	18005f1e 	bne	r3,zero,8026b4 <_malloc_r+0x5d8>
  802538:	000b883a 	mov	r5,zero
  80253c:	a4c5883a 	add	r2,r20,r19
  802540:	1083ffcc 	andi	r2,r2,4095
  802544:	00c40004 	movi	r3,4096
  802548:	1887c83a 	sub	r3,r3,r2
  80254c:	28e7883a 	add	r19,r5,r3
  802550:	9009883a 	mov	r4,r18
  802554:	980b883a 	mov	r5,r19
  802558:	08029500 	call	802950 <_sbrk_r>
  80255c:	1007883a 	mov	r3,r2
  802560:	00bfffc4 	movi	r2,-1
  802564:	18807a26 	beq	r3,r2,802750 <_malloc_r+0x674>
  802568:	1d05c83a 	sub	r2,r3,r20
  80256c:	9885883a 	add	r2,r19,r2
  802570:	10c00054 	ori	r3,r2,1
  802574:	b8800017 	ldw	r2,0(r23)
  802578:	a021883a 	mov	r16,r20
  80257c:	a0c00115 	stw	r3,4(r20)
  802580:	9885883a 	add	r2,r19,r2
  802584:	b8800015 	stw	r2,0(r23)
  802588:	e5000215 	stw	r20,8(fp)
  80258c:	b7003626 	beq	r22,fp,802668 <_malloc_r+0x58c>
  802590:	018003c4 	movi	r6,15
  802594:	35404b36 	bltu	r6,r21,8026c4 <_malloc_r+0x5e8>
  802598:	00800044 	movi	r2,1
  80259c:	a0800115 	stw	r2,4(r20)
  8025a0:	003fcd06 	br	8024d8 <_malloc_r+0x3fc>
  8025a4:	2808d27a 	srli	r4,r5,9
  8025a8:	2000371e 	bne	r4,zero,802688 <_malloc_r+0x5ac>
  8025ac:	2808d0fa 	srli	r4,r5,3
  8025b0:	200690fa 	slli	r3,r4,3
  8025b4:	1ad1883a 	add	r8,r3,r11
  8025b8:	41800217 	ldw	r6,8(r8)
  8025bc:	41805b26 	beq	r8,r6,80272c <_malloc_r+0x650>
  8025c0:	30800117 	ldw	r2,4(r6)
  8025c4:	00ffff04 	movi	r3,-4
  8025c8:	10c4703a 	and	r2,r2,r3
  8025cc:	2880022e 	bgeu	r5,r2,8025d8 <_malloc_r+0x4fc>
  8025d0:	31800217 	ldw	r6,8(r6)
  8025d4:	41bffa1e 	bne	r8,r6,8025c0 <_malloc_r+0x4e4>
  8025d8:	32000317 	ldw	r8,12(r6)
  8025dc:	39c00117 	ldw	r7,4(r7)
  8025e0:	82000315 	stw	r8,12(r16)
  8025e4:	81800215 	stw	r6,8(r16)
  8025e8:	07002074 	movhi	fp,129
  8025ec:	e729f004 	addi	fp,fp,-22592
  8025f0:	34000315 	stw	r16,12(r6)
  8025f4:	44000215 	stw	r16,8(r8)
  8025f8:	003f3e06 	br	8022f4 <_malloc_r+0x218>
  8025fc:	63000044 	addi	r12,r12,1
  802600:	608000cc 	andi	r2,r12,3
  802604:	10005d26 	beq	r2,zero,80277c <_malloc_r+0x6a0>
  802608:	18c00204 	addi	r3,r3,8
  80260c:	003f5106 	br	802354 <_malloc_r+0x278>
  802610:	8089883a 	add	r4,r16,r2
  802614:	003f6d06 	br	8023cc <_malloc_r+0x2f0>
  802618:	00805504 	movi	r2,340
  80261c:	10c02036 	bltu	r2,r3,8026a0 <_malloc_r+0x5c4>
  802620:	8804d3fa 	srli	r2,r17,15
  802624:	11801dc4 	addi	r6,r2,119
  802628:	300490fa 	slli	r2,r6,3
  80262c:	003ed806 	br	802190 <_malloc_r+0xb4>
  802630:	48c000c4 	addi	r3,r9,3
  802634:	003f3106 	br	8022fc <_malloc_r+0x220>
  802638:	05c02074 	movhi	r23,129
  80263c:	bdf61e04 	addi	r23,r23,-10120
  802640:	b8800017 	ldw	r2,0(r23)
  802644:	988d883a 	add	r6,r19,r2
  802648:	b9800015 	stw	r6,0(r23)
  80264c:	293fb21e 	bne	r5,r4,802518 <_malloc_r+0x43c>
  802650:	2083ffcc 	andi	r2,r4,4095
  802654:	103fb01e 	bne	r2,zero,802518 <_malloc_r+0x43c>
  802658:	e4000217 	ldw	r16,8(fp)
  80265c:	9d45883a 	add	r2,r19,r21
  802660:	10800054 	ori	r2,r2,1
  802664:	80800115 	stw	r2,4(r16)
  802668:	b8c00017 	ldw	r3,0(r23)
  80266c:	d0a6a117 	ldw	r2,-25980(gp)
  802670:	10c0012e 	bgeu	r2,r3,802678 <_malloc_r+0x59c>
  802674:	d0e6a115 	stw	r3,-25980(gp)
  802678:	d0a6a217 	ldw	r2,-25976(gp)
  80267c:	10ff962e 	bgeu	r2,r3,8024d8 <_malloc_r+0x3fc>
  802680:	d0e6a215 	stw	r3,-25976(gp)
  802684:	003f9406 	br	8024d8 <_malloc_r+0x3fc>
  802688:	00800104 	movi	r2,4
  80268c:	11001e36 	bltu	r2,r4,802708 <_malloc_r+0x62c>
  802690:	2804d1ba 	srli	r2,r5,6
  802694:	11000e04 	addi	r4,r2,56
  802698:	200690fa 	slli	r3,r4,3
  80269c:	003fc506 	br	8025b4 <_malloc_r+0x4d8>
  8026a0:	00815504 	movi	r2,1364
  8026a4:	10c01d2e 	bgeu	r2,r3,80271c <_malloc_r+0x640>
  8026a8:	01801f84 	movi	r6,126
  8026ac:	0080fc04 	movi	r2,1008
  8026b0:	003eb706 	br	802190 <_malloc_r+0xb4>
  8026b4:	00800204 	movi	r2,8
  8026b8:	10cbc83a 	sub	r5,r2,r3
  8026bc:	2169883a 	add	r20,r4,r5
  8026c0:	003f9e06 	br	80253c <_malloc_r+0x460>
  8026c4:	00bffe04 	movi	r2,-8
  8026c8:	a93ffd04 	addi	r4,r21,-12
  8026cc:	2088703a 	and	r4,r4,r2
  8026d0:	b10b883a 	add	r5,r22,r4
  8026d4:	00c00144 	movi	r3,5
  8026d8:	28c00215 	stw	r3,8(r5)
  8026dc:	28c00115 	stw	r3,4(r5)
  8026e0:	b0800117 	ldw	r2,4(r22)
  8026e4:	1080004c 	andi	r2,r2,1
  8026e8:	2084b03a 	or	r2,r4,r2
  8026ec:	b0800115 	stw	r2,4(r22)
  8026f0:	313fdd2e 	bgeu	r6,r4,802668 <_malloc_r+0x58c>
  8026f4:	b1400204 	addi	r5,r22,8
  8026f8:	9009883a 	mov	r4,r18
  8026fc:	08035a40 	call	8035a4 <_free_r>
  802700:	e4000217 	ldw	r16,8(fp)
  802704:	003fd806 	br	802668 <_malloc_r+0x58c>
  802708:	00800504 	movi	r2,20
  80270c:	11001536 	bltu	r2,r4,802764 <_malloc_r+0x688>
  802710:	210016c4 	addi	r4,r4,91
  802714:	200690fa 	slli	r3,r4,3
  802718:	003fa606 	br	8025b4 <_malloc_r+0x4d8>
  80271c:	8804d4ba 	srli	r2,r17,18
  802720:	11801f04 	addi	r6,r2,124
  802724:	300490fa 	slli	r2,r6,3
  802728:	003e9906 	br	802190 <_malloc_r+0xb4>
  80272c:	2009d0ba 	srai	r4,r4,2
  802730:	01402074 	movhi	r5,129
  802734:	2969f004 	addi	r5,r5,-22592
  802738:	00c00044 	movi	r3,1
  80273c:	28800117 	ldw	r2,4(r5)
  802740:	1906983a 	sll	r3,r3,r4
  802744:	10c4b03a 	or	r2,r2,r3
  802748:	28800115 	stw	r2,4(r5)
  80274c:	003fa306 	br	8025dc <_malloc_r+0x500>
  802750:	0027883a 	mov	r19,zero
  802754:	00c00044 	movi	r3,1
  802758:	003f8606 	br	802574 <_malloc_r+0x498>
  80275c:	d1200315 	stw	r4,-32756(gp)
  802760:	003f7306 	br	802530 <_malloc_r+0x454>
  802764:	00801504 	movi	r2,84
  802768:	11001936 	bltu	r2,r4,8027d0 <_malloc_r+0x6f4>
  80276c:	2804d33a 	srli	r2,r5,12
  802770:	11001b84 	addi	r4,r2,110
  802774:	200690fa 	slli	r3,r4,3
  802778:	003f8e06 	br	8025b4 <_malloc_r+0x4d8>
  80277c:	480b883a 	mov	r5,r9
  802780:	6807883a 	mov	r3,r13
  802784:	288000cc 	andi	r2,r5,3
  802788:	18fffe04 	addi	r3,r3,-8
  80278c:	297fffc4 	addi	r5,r5,-1
  802790:	10001526 	beq	r2,zero,8027e8 <_malloc_r+0x70c>
  802794:	18800217 	ldw	r2,8(r3)
  802798:	10fffa26 	beq	r2,r3,802784 <_malloc_r+0x6a8>
  80279c:	2109883a 	add	r4,r4,r4
  8027a0:	393f1e36 	bltu	r7,r4,80241c <_malloc_r+0x340>
  8027a4:	203f1d26 	beq	r4,zero,80241c <_malloc_r+0x340>
  8027a8:	21c4703a 	and	r2,r4,r7
  8027ac:	10000226 	beq	r2,zero,8027b8 <_malloc_r+0x6dc>
  8027b0:	6013883a 	mov	r9,r12
  8027b4:	003ee106 	br	80233c <_malloc_r+0x260>
  8027b8:	2109883a 	add	r4,r4,r4
  8027bc:	3904703a 	and	r2,r7,r4
  8027c0:	63000104 	addi	r12,r12,4
  8027c4:	103ffc26 	beq	r2,zero,8027b8 <_malloc_r+0x6dc>
  8027c8:	6013883a 	mov	r9,r12
  8027cc:	003edb06 	br	80233c <_malloc_r+0x260>
  8027d0:	00805504 	movi	r2,340
  8027d4:	11000836 	bltu	r2,r4,8027f8 <_malloc_r+0x71c>
  8027d8:	2804d3fa 	srli	r2,r5,15
  8027dc:	11001dc4 	addi	r4,r2,119
  8027e0:	200690fa 	slli	r3,r4,3
  8027e4:	003f7306 	br	8025b4 <_malloc_r+0x4d8>
  8027e8:	0104303a 	nor	r2,zero,r4
  8027ec:	388e703a 	and	r7,r7,r2
  8027f0:	e1c00115 	stw	r7,4(fp)
  8027f4:	003fe906 	br	80279c <_malloc_r+0x6c0>
  8027f8:	00815504 	movi	r2,1364
  8027fc:	1100032e 	bgeu	r2,r4,80280c <_malloc_r+0x730>
  802800:	01001f84 	movi	r4,126
  802804:	00c0fc04 	movi	r3,1008
  802808:	003f6a06 	br	8025b4 <_malloc_r+0x4d8>
  80280c:	2804d4ba 	srli	r2,r5,18
  802810:	11001f04 	addi	r4,r2,124
  802814:	200690fa 	slli	r3,r4,3
  802818:	003f6606 	br	8025b4 <_malloc_r+0x4d8>

0080281c <memcpy>:
  80281c:	01c003c4 	movi	r7,15
  802820:	2007883a 	mov	r3,r4
  802824:	3980032e 	bgeu	r7,r6,802834 <memcpy+0x18>
  802828:	2904b03a 	or	r2,r5,r4
  80282c:	108000cc 	andi	r2,r2,3
  802830:	10000926 	beq	r2,zero,802858 <memcpy+0x3c>
  802834:	30000626 	beq	r6,zero,802850 <memcpy+0x34>
  802838:	30cd883a 	add	r6,r6,r3
  80283c:	28800003 	ldbu	r2,0(r5)
  802840:	29400044 	addi	r5,r5,1
  802844:	18800005 	stb	r2,0(r3)
  802848:	18c00044 	addi	r3,r3,1
  80284c:	30fffb1e 	bne	r6,r3,80283c <memcpy+0x20>
  802850:	2005883a 	mov	r2,r4
  802854:	f800283a 	ret
  802858:	3811883a 	mov	r8,r7
  80285c:	200f883a 	mov	r7,r4
  802860:	28c00017 	ldw	r3,0(r5)
  802864:	31bffc04 	addi	r6,r6,-16
  802868:	38c00015 	stw	r3,0(r7)
  80286c:	28800117 	ldw	r2,4(r5)
  802870:	38800115 	stw	r2,4(r7)
  802874:	28c00217 	ldw	r3,8(r5)
  802878:	38c00215 	stw	r3,8(r7)
  80287c:	28800317 	ldw	r2,12(r5)
  802880:	29400404 	addi	r5,r5,16
  802884:	38800315 	stw	r2,12(r7)
  802888:	39c00404 	addi	r7,r7,16
  80288c:	41bff436 	bltu	r8,r6,802860 <memcpy+0x44>
  802890:	008000c4 	movi	r2,3
  802894:	1180072e 	bgeu	r2,r6,8028b4 <memcpy+0x98>
  802898:	1007883a 	mov	r3,r2
  80289c:	28800017 	ldw	r2,0(r5)
  8028a0:	31bfff04 	addi	r6,r6,-4
  8028a4:	29400104 	addi	r5,r5,4
  8028a8:	38800015 	stw	r2,0(r7)
  8028ac:	39c00104 	addi	r7,r7,4
  8028b0:	19bffa36 	bltu	r3,r6,80289c <memcpy+0x80>
  8028b4:	3807883a 	mov	r3,r7
  8028b8:	003fde06 	br	802834 <memcpy+0x18>

008028bc <srand>:
  8028bc:	00802074 	movhi	r2,129
  8028c0:	10af7404 	addi	r2,r2,-16944
  8028c4:	11400017 	ldw	r5,0(r2)
  8028c8:	0007883a 	mov	r3,zero
  8028cc:	28c02a15 	stw	r3,168(r5)
  8028d0:	29002915 	stw	r4,164(r5)
  8028d4:	f800283a 	ret

008028d8 <rand>:
  8028d8:	defffe04 	addi	sp,sp,-8
  8028dc:	00802074 	movhi	r2,129
  8028e0:	10af7404 	addi	r2,r2,-16944
  8028e4:	dc000015 	stw	r16,0(sp)
  8028e8:	14000017 	ldw	r16,0(r2)
  8028ec:	dfc00115 	stw	ra,4(sp)
  8028f0:	00932574 	movhi	r2,19605
  8028f4:	109fcb44 	addi	r2,r2,32557
  8028f8:	82002917 	ldw	r8,164(r16)
  8028fc:	82402a17 	ldw	r9,168(r16)
  802900:	00d614b4 	movhi	r3,22610
  802904:	18fd0b44 	addi	r3,r3,-3027
  802908:	4009883a 	mov	r4,r8
  80290c:	180f883a 	mov	r7,r3
  802910:	100d883a 	mov	r6,r2
  802914:	480b883a 	mov	r5,r9
  802918:	080172c0 	call	80172c <__muldi3>
  80291c:	02000044 	movi	r8,1
  802920:	1209883a 	add	r4,r2,r8
  802924:	2095803a 	cmpltu	r10,r4,r2
  802928:	50d5883a 	add	r10,r10,r3
  80292c:	81002915 	stw	r4,164(r16)
  802930:	01200034 	movhi	r4,32768
  802934:	213fffc4 	addi	r4,r4,-1
  802938:	2284703a 	and	r2,r4,r10
  80293c:	82802a15 	stw	r10,168(r16)
  802940:	dfc00117 	ldw	ra,4(sp)
  802944:	dc000017 	ldw	r16,0(sp)
  802948:	dec00204 	addi	sp,sp,8
  80294c:	f800283a 	ret

00802950 <_sbrk_r>:
  802950:	defffd04 	addi	sp,sp,-12
  802954:	dc000015 	stw	r16,0(sp)
  802958:	04002074 	movhi	r16,129
  80295c:	84361704 	addi	r16,r16,-10148
  802960:	dc400115 	stw	r17,4(sp)
  802964:	80000015 	stw	zero,0(r16)
  802968:	2023883a 	mov	r17,r4
  80296c:	2809883a 	mov	r4,r5
  802970:	dfc00215 	stw	ra,8(sp)
  802974:	080751c0 	call	80751c <sbrk>
  802978:	1007883a 	mov	r3,r2
  80297c:	00bfffc4 	movi	r2,-1
  802980:	18800626 	beq	r3,r2,80299c <_sbrk_r+0x4c>
  802984:	1805883a 	mov	r2,r3
  802988:	dfc00217 	ldw	ra,8(sp)
  80298c:	dc400117 	ldw	r17,4(sp)
  802990:	dc000017 	ldw	r16,0(sp)
  802994:	dec00304 	addi	sp,sp,12
  802998:	f800283a 	ret
  80299c:	80800017 	ldw	r2,0(r16)
  8029a0:	103ff826 	beq	r2,zero,802984 <_sbrk_r+0x34>
  8029a4:	88800015 	stw	r2,0(r17)
  8029a8:	1805883a 	mov	r2,r3
  8029ac:	dfc00217 	ldw	ra,8(sp)
  8029b0:	dc400117 	ldw	r17,4(sp)
  8029b4:	dc000017 	ldw	r16,0(sp)
  8029b8:	dec00304 	addi	sp,sp,12
  8029bc:	f800283a 	ret

008029c0 <print_e>:
  8029c0:	defff404 	addi	sp,sp,-48
  8029c4:	dcc00a15 	stw	r19,40(sp)
  8029c8:	dcc00c17 	ldw	r19,48(sp)
  8029cc:	3005883a 	mov	r2,r6
  8029d0:	dc400815 	stw	r17,32(sp)
  8029d4:	2823883a 	mov	r17,r5
  8029d8:	100b883a 	mov	r5,r2
  8029dc:	d8800604 	addi	r2,sp,24
  8029e0:	380d883a 	mov	r6,r7
  8029e4:	9a000044 	addi	r8,r19,1
  8029e8:	d8800115 	stw	r2,4(sp)
  8029ec:	d8c00504 	addi	r3,sp,20
  8029f0:	d8800404 	addi	r2,sp,16
  8029f4:	01c00084 	movi	r7,2
  8029f8:	dc800915 	stw	r18,36(sp)
  8029fc:	dc000715 	stw	r16,28(sp)
  802a00:	dfc00b15 	stw	ra,44(sp)
  802a04:	da000015 	stw	r8,0(sp)
  802a08:	d8c00315 	stw	r3,12(sp)
  802a0c:	d8800215 	stw	r2,8(sp)
  802a10:	dc800d03 	ldbu	r18,52(sp)
  802a14:	08051f80 	call	8051f8 <_dtoa_r>
  802a18:	dc000617 	ldw	r16,24(sp)
  802a1c:	100b883a 	mov	r5,r2
  802a20:	0089c3c4 	movi	r2,9999
  802a24:	80805926 	beq	r16,r2,802b8c <print_e+0x1cc>
  802a28:	28c00003 	ldbu	r3,0(r5)
  802a2c:	89000044 	addi	r4,r17,1
  802a30:	29400044 	addi	r5,r5,1
  802a34:	88c00005 	stb	r3,0(r17)
  802a38:	d8800e17 	ldw	r2,56(sp)
  802a3c:	10004326 	beq	r2,zero,802b4c <print_e+0x18c>
  802a40:	00800b84 	movi	r2,46
  802a44:	20800005 	stb	r2,0(r4)
  802a48:	9811883a 	mov	r8,r19
  802a4c:	21000044 	addi	r4,r4,1
  802a50:	28800003 	ldbu	r2,0(r5)
  802a54:	10000926 	beq	r2,zero,802a7c <print_e+0xbc>
  802a58:	02000216 	blt	zero,r8,802a64 <print_e+0xa4>
  802a5c:	00000706 	br	802a7c <print_e+0xbc>
  802a60:	40000626 	beq	r8,zero,802a7c <print_e+0xbc>
  802a64:	20800005 	stb	r2,0(r4)
  802a68:	29400044 	addi	r5,r5,1
  802a6c:	28800003 	ldbu	r2,0(r5)
  802a70:	423fffc4 	addi	r8,r8,-1
  802a74:	21000044 	addi	r4,r4,1
  802a78:	103ff91e 	bne	r2,zero,802a60 <print_e+0xa0>
  802a7c:	90c03fcc 	andi	r3,r18,255
  802a80:	18c0201c 	xori	r3,r3,128
  802a84:	18ffe004 	addi	r3,r3,-128
  802a88:	008019c4 	movi	r2,103
  802a8c:	18803226 	beq	r3,r2,802b58 <print_e+0x198>
  802a90:	008011c4 	movi	r2,71
  802a94:	18803b26 	beq	r3,r2,802b84 <print_e+0x1c4>
  802a98:	0200080e 	bge	zero,r8,802abc <print_e+0xfc>
  802a9c:	2007883a 	mov	r3,r4
  802aa0:	4005883a 	mov	r2,r8
  802aa4:	01400c04 	movi	r5,48
  802aa8:	10bfffc4 	addi	r2,r2,-1
  802aac:	19400005 	stb	r5,0(r3)
  802ab0:	18c00044 	addi	r3,r3,1
  802ab4:	103ffc1e 	bne	r2,zero,802aa8 <print_e+0xe8>
  802ab8:	2209883a 	add	r4,r4,r8
  802abc:	843fffc4 	addi	r16,r16,-1
  802ac0:	24800005 	stb	r18,0(r4)
  802ac4:	dc000615 	stw	r16,24(sp)
  802ac8:	80002816 	blt	r16,zero,802b6c <print_e+0x1ac>
  802acc:	00800ac4 	movi	r2,43
  802ad0:	20800045 	stb	r2,1(r4)
  802ad4:	24400084 	addi	r17,r4,2
  802ad8:	008018c4 	movi	r2,99
  802adc:	1400090e 	bge	r2,r16,802b04 <print_e+0x144>
  802ae0:	8009883a 	mov	r4,r16
  802ae4:	01401904 	movi	r5,100
  802ae8:	08072640 	call	807264 <__divsi3>
  802aec:	10c01924 	muli	r3,r2,100
  802af0:	10800c04 	addi	r2,r2,48
  802af4:	88800005 	stb	r2,0(r17)
  802af8:	80e1c83a 	sub	r16,r16,r3
  802afc:	8c400044 	addi	r17,r17,1
  802b00:	dc000615 	stw	r16,24(sp)
  802b04:	8009883a 	mov	r4,r16
  802b08:	01400284 	movi	r5,10
  802b0c:	08072640 	call	807264 <__divsi3>
  802b10:	10c002a4 	muli	r3,r2,10
  802b14:	10800c04 	addi	r2,r2,48
  802b18:	88800005 	stb	r2,0(r17)
  802b1c:	80c7c83a 	sub	r3,r16,r3
  802b20:	18800c04 	addi	r2,r3,48
  802b24:	88800045 	stb	r2,1(r17)
  802b28:	88000085 	stb	zero,2(r17)
  802b2c:	d8c00615 	stw	r3,24(sp)
  802b30:	dfc00b17 	ldw	ra,44(sp)
  802b34:	dcc00a17 	ldw	r19,40(sp)
  802b38:	dc800917 	ldw	r18,36(sp)
  802b3c:	dc400817 	ldw	r17,32(sp)
  802b40:	dc000717 	ldw	r16,28(sp)
  802b44:	dec00c04 	addi	sp,sp,48
  802b48:	f800283a 	ret
  802b4c:	983fbc1e 	bne	r19,zero,802a40 <print_e+0x80>
  802b50:	0011883a 	mov	r8,zero
  802b54:	003fbe06 	br	802a50 <print_e+0x90>
  802b58:	04801944 	movi	r18,101
  802b5c:	843fffc4 	addi	r16,r16,-1
  802b60:	24800005 	stb	r18,0(r4)
  802b64:	dc000615 	stw	r16,24(sp)
  802b68:	803fd80e 	bge	r16,zero,802acc <print_e+0x10c>
  802b6c:	00800b44 	movi	r2,45
  802b70:	0421c83a 	sub	r16,zero,r16
  802b74:	20800045 	stb	r2,1(r4)
  802b78:	24400084 	addi	r17,r4,2
  802b7c:	dc000615 	stw	r16,24(sp)
  802b80:	003fd506 	br	802ad8 <print_e+0x118>
  802b84:	04801144 	movi	r18,69
  802b88:	003fcc06 	br	802abc <print_e+0xfc>
  802b8c:	8809883a 	mov	r4,r17
  802b90:	0804ea00 	call	804ea0 <strcpy>
  802b94:	dfc00b17 	ldw	ra,44(sp)
  802b98:	dcc00a17 	ldw	r19,40(sp)
  802b9c:	dc800917 	ldw	r18,36(sp)
  802ba0:	dc400817 	ldw	r17,32(sp)
  802ba4:	dc000717 	ldw	r16,28(sp)
  802ba8:	dec00c04 	addi	sp,sp,48
  802bac:	f800283a 	ret

00802bb0 <_gcvt>:
  802bb0:	defff104 	addi	sp,sp,-60
  802bb4:	dc400815 	stw	r17,32(sp)
  802bb8:	0005883a 	mov	r2,zero
  802bbc:	3023883a 	mov	r17,r6
  802bc0:	dcc00a15 	stw	r19,40(sp)
  802bc4:	dc800915 	stw	r18,36(sp)
  802bc8:	dc000715 	stw	r16,28(sp)
  802bcc:	2027883a 	mov	r19,r4
  802bd0:	2821883a 	mov	r16,r5
  802bd4:	3825883a 	mov	r18,r7
  802bd8:	2809883a 	mov	r4,r5
  802bdc:	100d883a 	mov	r6,r2
  802be0:	880b883a 	mov	r5,r17
  802be4:	000f883a 	mov	r7,zero
  802be8:	dd800d15 	stw	r22,52(sp)
  802bec:	dd400c15 	stw	r21,48(sp)
  802bf0:	dd000b15 	stw	r20,44(sp)
  802bf4:	dfc00e15 	stw	ra,56(sp)
  802bf8:	dd400f17 	ldw	r21,60(sp)
  802bfc:	dd801117 	ldw	r22,68(sp)
  802c00:	dd001003 	ldbu	r20,64(sp)
  802c04:	0806f080 	call	806f08 <__ltdf2>
  802c08:	10008e16 	blt	r2,zero,802e44 <_gcvt+0x294>
  802c0c:	000d883a 	mov	r6,zero
  802c10:	000f883a 	mov	r7,zero
  802c14:	8009883a 	mov	r4,r16
  802c18:	880b883a 	mov	r5,r17
  802c1c:	0806ce80 	call	806ce8 <__eqdf2>
  802c20:	10000e1e 	bne	r2,zero,802c5c <_gcvt+0xac>
  802c24:	00800c04 	movi	r2,48
  802c28:	a8800005 	stb	r2,0(r21)
  802c2c:	a8000045 	stb	zero,1(r21)
  802c30:	a805883a 	mov	r2,r21
  802c34:	dfc00e17 	ldw	ra,56(sp)
  802c38:	dd800d17 	ldw	r22,52(sp)
  802c3c:	dd400c17 	ldw	r21,48(sp)
  802c40:	dd000b17 	ldw	r20,44(sp)
  802c44:	dcc00a17 	ldw	r19,40(sp)
  802c48:	dc800917 	ldw	r18,36(sp)
  802c4c:	dc400817 	ldw	r17,32(sp)
  802c50:	dc000717 	ldw	r16,28(sp)
  802c54:	dec00f04 	addi	sp,sp,60
  802c58:	f800283a 	ret
  802c5c:	00bac734 	movhi	r2,60188
  802c60:	1090cb44 	addi	r2,r2,17197
  802c64:	00cfc6b4 	movhi	r3,16154
  802c68:	18cdb884 	addi	r3,r3,14050
  802c6c:	180f883a 	mov	r7,r3
  802c70:	8009883a 	mov	r4,r16
  802c74:	880b883a 	mov	r5,r17
  802c78:	100d883a 	mov	r6,r2
  802c7c:	0806f900 	call	806f90 <__ledf2>
  802c80:	00800d16 	blt	zero,r2,802cb8 <_gcvt+0x108>
  802c84:	a0c03fcc 	andi	r3,r20,255
  802c88:	18c0201c 	xori	r3,r3,128
  802c8c:	90bfffc4 	addi	r2,r18,-1
  802c90:	18ffe004 	addi	r3,r3,-128
  802c94:	9809883a 	mov	r4,r19
  802c98:	880f883a 	mov	r7,r17
  802c9c:	a80b883a 	mov	r5,r21
  802ca0:	800d883a 	mov	r6,r16
  802ca4:	d8800015 	stw	r2,0(sp)
  802ca8:	d8c00115 	stw	r3,4(sp)
  802cac:	dd800215 	stw	r22,8(sp)
  802cb0:	08029c00 	call	8029c0 <print_e>
  802cb4:	003fde06 	br	802c30 <_gcvt+0x80>
  802cb8:	9009883a 	mov	r4,r18
  802cbc:	0803cc40 	call	803cc4 <_mprec_log10>
  802cc0:	180f883a 	mov	r7,r3
  802cc4:	8009883a 	mov	r4,r16
  802cc8:	880b883a 	mov	r5,r17
  802ccc:	100d883a 	mov	r6,r2
  802cd0:	0806e800 	call	806e80 <__gedf2>
  802cd4:	103feb0e 	bge	r2,zero,802c84 <_gcvt+0xd4>
  802cd8:	0005883a 	mov	r2,zero
  802cdc:	00cffc34 	movhi	r3,16368
  802ce0:	180f883a 	mov	r7,r3
  802ce4:	8009883a 	mov	r4,r16
  802ce8:	880b883a 	mov	r5,r17
  802cec:	100d883a 	mov	r6,r2
  802cf0:	0806f080 	call	806f08 <__ltdf2>
  802cf4:	10005616 	blt	r2,zero,802e50 <_gcvt+0x2a0>
  802cf8:	9809883a 	mov	r4,r19
  802cfc:	880d883a 	mov	r6,r17
  802d00:	800b883a 	mov	r5,r16
  802d04:	01c00084 	movi	r7,2
  802d08:	d8800504 	addi	r2,sp,20
  802d0c:	d8800215 	stw	r2,8(sp)
  802d10:	d8c00604 	addi	r3,sp,24
  802d14:	d8800404 	addi	r2,sp,16
  802d18:	d8c00315 	stw	r3,12(sp)
  802d1c:	dc800015 	stw	r18,0(sp)
  802d20:	d8800115 	stw	r2,4(sp)
  802d24:	08051f80 	call	8051f8 <_dtoa_r>
  802d28:	d9000417 	ldw	r4,16(sp)
  802d2c:	100b883a 	mov	r5,r2
  802d30:	0089c3c4 	movi	r2,9999
  802d34:	20804b26 	beq	r4,r2,802e64 <_gcvt+0x2b4>
  802d38:	28800003 	ldbu	r2,0(r5)
  802d3c:	10005026 	beq	r2,zero,802e80 <_gcvt+0x2d0>
  802d40:	0100510e 	bge	zero,r4,802e88 <_gcvt+0x2d8>
  802d44:	a807883a 	mov	r3,r21
  802d48:	00000106 	br	802d50 <_gcvt+0x1a0>
  802d4c:	0100130e 	bge	zero,r4,802d9c <_gcvt+0x1ec>
  802d50:	18800005 	stb	r2,0(r3)
  802d54:	213fffc4 	addi	r4,r4,-1
  802d58:	d9000415 	stw	r4,16(sp)
  802d5c:	29400044 	addi	r5,r5,1
  802d60:	28800003 	ldbu	r2,0(r5)
  802d64:	18c00044 	addi	r3,r3,1
  802d68:	94bfffc4 	addi	r18,r18,-1
  802d6c:	103ff71e 	bne	r2,zero,802d4c <_gcvt+0x19c>
  802d70:	01000a0e 	bge	zero,r4,802d9c <_gcvt+0x1ec>
  802d74:	0480090e 	bge	zero,r18,802d9c <_gcvt+0x1ec>
  802d78:	00800c04 	movi	r2,48
  802d7c:	00000106 	br	802d84 <_gcvt+0x1d4>
  802d80:	90000526 	beq	r18,zero,802d98 <_gcvt+0x1e8>
  802d84:	213fffc4 	addi	r4,r4,-1
  802d88:	18800005 	stb	r2,0(r3)
  802d8c:	94bfffc4 	addi	r18,r18,-1
  802d90:	18c00044 	addi	r3,r3,1
  802d94:	013ffa16 	blt	zero,r4,802d80 <_gcvt+0x1d0>
  802d98:	d9000415 	stw	r4,16(sp)
  802d9c:	b000021e 	bne	r22,zero,802da8 <_gcvt+0x1f8>
  802da0:	28800007 	ldb	r2,0(r5)
  802da4:	10002526 	beq	r2,zero,802e3c <_gcvt+0x28c>
  802da8:	a8c03126 	beq	r21,r3,802e70 <_gcvt+0x2c0>
  802dac:	00800b84 	movi	r2,46
  802db0:	18800005 	stb	r2,0(r3)
  802db4:	18c00044 	addi	r3,r3,1
  802db8:	20000b0e 	bge	r4,zero,802de8 <_gcvt+0x238>
  802dbc:	04800a0e 	bge	zero,r18,802de8 <_gcvt+0x238>
  802dc0:	01800c04 	movi	r6,48
  802dc4:	00000106 	br	802dcc <_gcvt+0x21c>
  802dc8:	90000626 	beq	r18,zero,802de4 <_gcvt+0x234>
  802dcc:	20800044 	addi	r2,r4,1
  802dd0:	19800005 	stb	r6,0(r3)
  802dd4:	94bfffc4 	addi	r18,r18,-1
  802dd8:	18c00044 	addi	r3,r3,1
  802ddc:	1009883a 	mov	r4,r2
  802de0:	103ff916 	blt	r2,zero,802dc8 <_gcvt+0x218>
  802de4:	d8800415 	stw	r2,16(sp)
  802de8:	28800003 	ldbu	r2,0(r5)
  802dec:	10000926 	beq	r2,zero,802e14 <_gcvt+0x264>
  802df0:	04800216 	blt	zero,r18,802dfc <_gcvt+0x24c>
  802df4:	00000706 	br	802e14 <_gcvt+0x264>
  802df8:	90000626 	beq	r18,zero,802e14 <_gcvt+0x264>
  802dfc:	18800005 	stb	r2,0(r3)
  802e00:	29400044 	addi	r5,r5,1
  802e04:	28800003 	ldbu	r2,0(r5)
  802e08:	94bfffc4 	addi	r18,r18,-1
  802e0c:	18c00044 	addi	r3,r3,1
  802e10:	103ff91e 	bne	r2,zero,802df8 <_gcvt+0x248>
  802e14:	b0000926 	beq	r22,zero,802e3c <_gcvt+0x28c>
  802e18:	0480080e 	bge	zero,r18,802e3c <_gcvt+0x28c>
  802e1c:	9009883a 	mov	r4,r18
  802e20:	1805883a 	mov	r2,r3
  802e24:	01400c04 	movi	r5,48
  802e28:	213fffc4 	addi	r4,r4,-1
  802e2c:	11400005 	stb	r5,0(r2)
  802e30:	10800044 	addi	r2,r2,1
  802e34:	203ffc1e 	bne	r4,zero,802e28 <_gcvt+0x278>
  802e38:	1c87883a 	add	r3,r3,r18
  802e3c:	18000005 	stb	zero,0(r3)
  802e40:	003f7b06 	br	802c30 <_gcvt+0x80>
  802e44:	88e0003c 	xorhi	r3,r17,32768
  802e48:	1823883a 	mov	r17,r3
  802e4c:	003f6f06 	br	802c0c <_gcvt+0x5c>
  802e50:	9809883a 	mov	r4,r19
  802e54:	880d883a 	mov	r6,r17
  802e58:	800b883a 	mov	r5,r16
  802e5c:	01c000c4 	movi	r7,3
  802e60:	003fa906 	br	802d08 <_gcvt+0x158>
  802e64:	a809883a 	mov	r4,r21
  802e68:	0804ea00 	call	804ea0 <strcpy>
  802e6c:	003f7006 	br	802c30 <_gcvt+0x80>
  802e70:	00800c04 	movi	r2,48
  802e74:	a8c00044 	addi	r3,r21,1
  802e78:	a8800005 	stb	r2,0(r21)
  802e7c:	003fcb06 	br	802dac <_gcvt+0x1fc>
  802e80:	a807883a 	mov	r3,r21
  802e84:	003fba06 	br	802d70 <_gcvt+0x1c0>
  802e88:	a807883a 	mov	r3,r21
  802e8c:	003fc306 	br	802d9c <_gcvt+0x1ec>

00802e90 <_dcvt>:
  802e90:	defff504 	addi	sp,sp,-44
  802e94:	d8800d17 	ldw	r2,52(sp)
  802e98:	3011883a 	mov	r8,r6
  802e9c:	dc800915 	stw	r18,36(sp)
  802ea0:	10ffeec4 	addi	r3,r2,-69
  802ea4:	12c03fcc 	andi	r11,r2,255
  802ea8:	19803fcc 	andi	r6,r3,255
  802eac:	5ac0201c 	xori	r11,r11,128
  802eb0:	00c00884 	movi	r3,34
  802eb4:	dc400815 	stw	r17,32(sp)
  802eb8:	dc000715 	stw	r16,28(sp)
  802ebc:	dfc00a15 	stw	ra,40(sp)
  802ec0:	2015883a 	mov	r10,r4
  802ec4:	2823883a 	mov	r17,r5
  802ec8:	3813883a 	mov	r9,r7
  802ecc:	dc000b17 	ldw	r16,44(sp)
  802ed0:	dc800e17 	ldw	r18,56(sp)
  802ed4:	5affe004 	addi	r11,r11,-128
  802ed8:	19803436 	bltu	r3,r6,802fac <_dcvt+0x11c>
  802edc:	3185883a 	add	r2,r6,r6
  802ee0:	1085883a 	add	r2,r2,r2
  802ee4:	00c02034 	movhi	r3,128
  802ee8:	18cbbe04 	addi	r3,r3,12024
  802eec:	10c5883a 	add	r2,r2,r3
  802ef0:	11000017 	ldw	r4,0(r2)
  802ef4:	2000683a 	jmp	r4
  802ef8:	00802fc8 	cmpgei	r2,zero,191
  802efc:	00802ffc 	xorhi	r2,zero,191
  802f00:	00802f84 	movi	r2,190
  802f04:	00802fac 	andhi	r2,zero,190
  802f08:	00802fac 	andhi	r2,zero,190
  802f0c:	00802fac 	andhi	r2,zero,190
  802f10:	00802fac 	andhi	r2,zero,190
  802f14:	00802fac 	andhi	r2,zero,190
  802f18:	00802fac 	andhi	r2,zero,190
  802f1c:	00802fac 	andhi	r2,zero,190
  802f20:	00802fac 	andhi	r2,zero,190
  802f24:	00802fac 	andhi	r2,zero,190
  802f28:	00802fac 	andhi	r2,zero,190
  802f2c:	00802fac 	andhi	r2,zero,190
  802f30:	00802fac 	andhi	r2,zero,190
  802f34:	00802fac 	andhi	r2,zero,190
  802f38:	00802fac 	andhi	r2,zero,190
  802f3c:	00802fac 	andhi	r2,zero,190
  802f40:	00802fac 	andhi	r2,zero,190
  802f44:	00802fac 	andhi	r2,zero,190
  802f48:	00802fac 	andhi	r2,zero,190
  802f4c:	00802fac 	andhi	r2,zero,190
  802f50:	00802fac 	andhi	r2,zero,190
  802f54:	00802fac 	andhi	r2,zero,190
  802f58:	00802fac 	andhi	r2,zero,190
  802f5c:	00802fac 	andhi	r2,zero,190
  802f60:	00802fac 	andhi	r2,zero,190
  802f64:	00802fac 	andhi	r2,zero,190
  802f68:	00802fac 	andhi	r2,zero,190
  802f6c:	00802fac 	andhi	r2,zero,190
  802f70:	00802fac 	andhi	r2,zero,190
  802f74:	00802fac 	andhi	r2,zero,190
  802f78:	00802fc8 	cmpgei	r2,zero,191
  802f7c:	00802ffc 	xorhi	r2,zero,191
  802f80:	00802f84 	movi	r2,190
  802f84:	8000011e 	bne	r16,zero,802f8c <_dcvt+0xfc>
  802f88:	04000044 	movi	r16,1
  802f8c:	5009883a 	mov	r4,r10
  802f90:	480d883a 	mov	r6,r9
  802f94:	800f883a 	mov	r7,r16
  802f98:	400b883a 	mov	r5,r8
  802f9c:	dac00115 	stw	r11,4(sp)
  802fa0:	dc800215 	stw	r18,8(sp)
  802fa4:	dc400015 	stw	r17,0(sp)
  802fa8:	0802bb00 	call	802bb0 <_gcvt>
  802fac:	8805883a 	mov	r2,r17
  802fb0:	dfc00a17 	ldw	ra,40(sp)
  802fb4:	dc800917 	ldw	r18,36(sp)
  802fb8:	dc400817 	ldw	r17,32(sp)
  802fbc:	dc000717 	ldw	r16,28(sp)
  802fc0:	dec00b04 	addi	sp,sp,44
  802fc4:	f800283a 	ret
  802fc8:	5009883a 	mov	r4,r10
  802fcc:	400d883a 	mov	r6,r8
  802fd0:	dc000015 	stw	r16,0(sp)
  802fd4:	dac00115 	stw	r11,4(sp)
  802fd8:	dc800215 	stw	r18,8(sp)
  802fdc:	08029c00 	call	8029c0 <print_e>
  802fe0:	8805883a 	mov	r2,r17
  802fe4:	dfc00a17 	ldw	ra,40(sp)
  802fe8:	dc800917 	ldw	r18,36(sp)
  802fec:	dc400817 	ldw	r17,32(sp)
  802ff0:	dc000717 	ldw	r16,28(sp)
  802ff4:	dec00b04 	addi	sp,sp,44
  802ff8:	f800283a 	ret
  802ffc:	80000126 	beq	r16,zero,803004 <_dcvt+0x174>
  803000:	04800044 	movi	r18,1
  803004:	d8800504 	addi	r2,sp,20
  803008:	d8c00604 	addi	r3,sp,24
  80300c:	400b883a 	mov	r5,r8
  803010:	d8800215 	stw	r2,8(sp)
  803014:	5009883a 	mov	r4,r10
  803018:	d8800404 	addi	r2,sp,16
  80301c:	480d883a 	mov	r6,r9
  803020:	01c000c4 	movi	r7,3
  803024:	d8c00315 	stw	r3,12(sp)
  803028:	dc000015 	stw	r16,0(sp)
  80302c:	d8800115 	stw	r2,4(sp)
  803030:	08051f80 	call	8051f8 <_dtoa_r>
  803034:	d9400417 	ldw	r5,16(sp)
  803038:	1007883a 	mov	r3,r2
  80303c:	0089c3c4 	movi	r2,9999
  803040:	28804626 	beq	r5,r2,80315c <_dcvt+0x2cc>
  803044:	18800003 	ldbu	r2,0(r3)
  803048:	10004c26 	beq	r2,zero,80317c <_dcvt+0x2ec>
  80304c:	0140120e 	bge	zero,r5,803098 <_dcvt+0x208>
  803050:	8809883a 	mov	r4,r17
  803054:	180d883a 	mov	r6,r3
  803058:	00000106 	br	803060 <_dcvt+0x1d0>
  80305c:	0140100e 	bge	zero,r5,8030a0 <_dcvt+0x210>
  803060:	20800005 	stb	r2,0(r4)
  803064:	297fffc4 	addi	r5,r5,-1
  803068:	31800044 	addi	r6,r6,1
  80306c:	d9400415 	stw	r5,16(sp)
  803070:	30800003 	ldbu	r2,0(r6)
  803074:	21000044 	addi	r4,r4,1
  803078:	103ff81e 	bne	r2,zero,80305c <_dcvt+0x1cc>
  80307c:	0140080e 	bge	zero,r5,8030a0 <_dcvt+0x210>
  803080:	00800c04 	movi	r2,48
  803084:	20800005 	stb	r2,0(r4)
  803088:	297fffc4 	addi	r5,r5,-1
  80308c:	21000044 	addi	r4,r4,1
  803090:	d9400415 	stw	r5,16(sp)
  803094:	003ff906 	br	80307c <_dcvt+0x1ec>
  803098:	8809883a 	mov	r4,r17
  80309c:	180d883a 	mov	r6,r3
  8030a0:	9000021e 	bne	r18,zero,8030ac <_dcvt+0x21c>
  8030a4:	30800007 	ldb	r2,0(r6)
  8030a8:	10002426 	beq	r2,zero,80313c <_dcvt+0x2ac>
  8030ac:	19802f26 	beq	r3,r6,80316c <_dcvt+0x2dc>
  8030b0:	00800b84 	movi	r2,46
  8030b4:	20800005 	stb	r2,0(r4)
  8030b8:	21000044 	addi	r4,r4,1
  8030bc:	28000b0e 	bge	r5,zero,8030ec <_dcvt+0x25c>
  8030c0:	04000216 	blt	zero,r16,8030cc <_dcvt+0x23c>
  8030c4:	00000906 	br	8030ec <_dcvt+0x25c>
  8030c8:	80000826 	beq	r16,zero,8030ec <_dcvt+0x25c>
  8030cc:	00800c04 	movi	r2,48
  8030d0:	28c00044 	addi	r3,r5,1
  8030d4:	20800005 	stb	r2,0(r4)
  8030d8:	d8c00415 	stw	r3,16(sp)
  8030dc:	21000044 	addi	r4,r4,1
  8030e0:	843fffc4 	addi	r16,r16,-1
  8030e4:	180b883a 	mov	r5,r3
  8030e8:	183ff716 	blt	r3,zero,8030c8 <_dcvt+0x238>
  8030ec:	30800003 	ldbu	r2,0(r6)
  8030f0:	10000926 	beq	r2,zero,803118 <_dcvt+0x288>
  8030f4:	04000216 	blt	zero,r16,803100 <_dcvt+0x270>
  8030f8:	00001006 	br	80313c <_dcvt+0x2ac>
  8030fc:	80000f26 	beq	r16,zero,80313c <_dcvt+0x2ac>
  803100:	20800005 	stb	r2,0(r4)
  803104:	31800044 	addi	r6,r6,1
  803108:	30800003 	ldbu	r2,0(r6)
  80310c:	21000044 	addi	r4,r4,1
  803110:	843fffc4 	addi	r16,r16,-1
  803114:	103ff91e 	bne	r2,zero,8030fc <_dcvt+0x26c>
  803118:	0400080e 	bge	zero,r16,80313c <_dcvt+0x2ac>
  80311c:	2007883a 	mov	r3,r4
  803120:	8005883a 	mov	r2,r16
  803124:	01400c04 	movi	r5,48
  803128:	10bfffc4 	addi	r2,r2,-1
  80312c:	19400005 	stb	r5,0(r3)
  803130:	18c00044 	addi	r3,r3,1
  803134:	103ffc1e 	bne	r2,zero,803128 <_dcvt+0x298>
  803138:	2409883a 	add	r4,r4,r16
  80313c:	8805883a 	mov	r2,r17
  803140:	20000005 	stb	zero,0(r4)
  803144:	dfc00a17 	ldw	ra,40(sp)
  803148:	dc800917 	ldw	r18,36(sp)
  80314c:	dc400817 	ldw	r17,32(sp)
  803150:	dc000717 	ldw	r16,28(sp)
  803154:	dec00b04 	addi	sp,sp,44
  803158:	f800283a 	ret
  80315c:	180b883a 	mov	r5,r3
  803160:	8809883a 	mov	r4,r17
  803164:	0804ea00 	call	804ea0 <strcpy>
  803168:	003f9006 	br	802fac <_dcvt+0x11c>
  80316c:	00800c04 	movi	r2,48
  803170:	20800005 	stb	r2,0(r4)
  803174:	21000044 	addi	r4,r4,1
  803178:	003fcd06 	br	8030b0 <_dcvt+0x220>
  80317c:	8809883a 	mov	r4,r17
  803180:	180d883a 	mov	r6,r3
  803184:	003fbd06 	br	80307c <_dcvt+0x1ec>

00803188 <ecvtbuf>:
  803188:	defff404 	addi	sp,sp,-48
  80318c:	dc800715 	stw	r18,28(sp)
  803190:	dc800d17 	ldw	r18,52(sp)
  803194:	dd000915 	stw	r20,36(sp)
  803198:	dcc00815 	stw	r19,32(sp)
  80319c:	dc400615 	stw	r17,24(sp)
  8031a0:	dc000515 	stw	r16,20(sp)
  8031a4:	dfc00b15 	stw	ra,44(sp)
  8031a8:	dd400a15 	stw	r21,40(sp)
  8031ac:	2021883a 	mov	r16,r4
  8031b0:	2823883a 	mov	r17,r5
  8031b4:	3027883a 	mov	r19,r6
  8031b8:	3829883a 	mov	r20,r7
  8031bc:	90002d26 	beq	r18,zero,803274 <ecvtbuf+0xec>
  8031c0:	05402074 	movhi	r21,129
  8031c4:	ad6f7404 	addi	r21,r21,-16944
  8031c8:	d8800c17 	ldw	r2,48(sp)
  8031cc:	a9000017 	ldw	r4,0(r21)
  8031d0:	880d883a 	mov	r6,r17
  8031d4:	d8800215 	stw	r2,8(sp)
  8031d8:	800b883a 	mov	r5,r16
  8031dc:	d8800404 	addi	r2,sp,16
  8031e0:	01c00084 	movi	r7,2
  8031e4:	dd000115 	stw	r20,4(sp)
  8031e8:	dcc00015 	stw	r19,0(sp)
  8031ec:	d8800315 	stw	r2,12(sp)
  8031f0:	08051f80 	call	8051f8 <_dtoa_r>
  8031f4:	1007883a 	mov	r3,r2
  8031f8:	d8800417 	ldw	r2,16(sp)
  8031fc:	1880252e 	bgeu	r3,r2,803294 <ecvtbuf+0x10c>
  803200:	900d883a 	mov	r6,r18
  803204:	0009883a 	mov	r4,zero
  803208:	18800003 	ldbu	r2,0(r3)
  80320c:	18c00044 	addi	r3,r3,1
  803210:	21000044 	addi	r4,r4,1
  803214:	30800005 	stb	r2,0(r6)
  803218:	d8800417 	ldw	r2,16(sp)
  80321c:	31800044 	addi	r6,r6,1
  803220:	18bff936 	bltu	r3,r2,803208 <ecvtbuf+0x80>
  803224:	24c0080e 	bge	r4,r19,803248 <ecvtbuf+0xc0>
  803228:	9905c83a 	sub	r2,r19,r4
  80322c:	3007883a 	mov	r3,r6
  803230:	1185883a 	add	r2,r2,r6
  803234:	01000c04 	movi	r4,48
  803238:	19000005 	stb	r4,0(r3)
  80323c:	18c00044 	addi	r3,r3,1
  803240:	10fffd1e 	bne	r2,r3,803238 <ecvtbuf+0xb0>
  803244:	100d883a 	mov	r6,r2
  803248:	30000005 	stb	zero,0(r6)
  80324c:	9005883a 	mov	r2,r18
  803250:	dfc00b17 	ldw	ra,44(sp)
  803254:	dd400a17 	ldw	r21,40(sp)
  803258:	dd000917 	ldw	r20,36(sp)
  80325c:	dcc00817 	ldw	r19,32(sp)
  803260:	dc800717 	ldw	r18,28(sp)
  803264:	dc400617 	ldw	r17,24(sp)
  803268:	dc000517 	ldw	r16,20(sp)
  80326c:	dec00c04 	addi	sp,sp,48
  803270:	f800283a 	ret
  803274:	05402074 	movhi	r21,129
  803278:	ad6f7404 	addi	r21,r21,-16944
  80327c:	a9000017 	ldw	r4,0(r21)
  803280:	20801417 	ldw	r2,80(r4)
  803284:	3080060e 	bge	r6,r2,8032a0 <ecvtbuf+0x118>
  803288:	a8800017 	ldw	r2,0(r21)
  80328c:	14801517 	ldw	r18,84(r2)
  803290:	003fcd06 	br	8031c8 <ecvtbuf+0x40>
  803294:	900d883a 	mov	r6,r18
  803298:	0009883a 	mov	r4,zero
  80329c:	003fe106 	br	803224 <ecvtbuf+0x9c>
  8032a0:	21401517 	ldw	r5,84(r4)
  8032a4:	34800044 	addi	r18,r6,1
  8032a8:	900d883a 	mov	r6,r18
  8032ac:	08048ac0 	call	8048ac <_realloc_r>
  8032b0:	1007883a 	mov	r3,r2
  8032b4:	10000426 	beq	r2,zero,8032c8 <ecvtbuf+0x140>
  8032b8:	a8800017 	ldw	r2,0(r21)
  8032bc:	10c01515 	stw	r3,84(r2)
  8032c0:	14801415 	stw	r18,80(r2)
  8032c4:	003ff006 	br	803288 <ecvtbuf+0x100>
  8032c8:	0005883a 	mov	r2,zero
  8032cc:	003fe006 	br	803250 <ecvtbuf+0xc8>

008032d0 <fcvtbuf>:
  8032d0:	defff304 	addi	sp,sp,-52
  8032d4:	dc800715 	stw	r18,28(sp)
  8032d8:	dc800e17 	ldw	r18,56(sp)
  8032dc:	dd800b15 	stw	r22,44(sp)
  8032e0:	dd000915 	stw	r20,36(sp)
  8032e4:	dcc00815 	stw	r19,32(sp)
  8032e8:	dc400615 	stw	r17,24(sp)
  8032ec:	dc000515 	stw	r16,20(sp)
  8032f0:	dfc00c15 	stw	ra,48(sp)
  8032f4:	dd400a15 	stw	r21,40(sp)
  8032f8:	2021883a 	mov	r16,r4
  8032fc:	2823883a 	mov	r17,r5
  803300:	3027883a 	mov	r19,r6
  803304:	3829883a 	mov	r20,r7
  803308:	dd800d17 	ldw	r22,52(sp)
  80330c:	90004326 	beq	r18,zero,80341c <fcvtbuf+0x14c>
  803310:	05402074 	movhi	r21,129
  803314:	ad6f7404 	addi	r21,r21,-16944
  803318:	0005883a 	mov	r2,zero
  80331c:	00cffc34 	movhi	r3,16368
  803320:	180f883a 	mov	r7,r3
  803324:	8009883a 	mov	r4,r16
  803328:	880b883a 	mov	r5,r17
  80332c:	100d883a 	mov	r6,r2
  803330:	0806f080 	call	806f08 <__ltdf2>
  803334:	1000080e 	bge	r2,zero,803358 <fcvtbuf+0x88>
  803338:	0005883a 	mov	r2,zero
  80333c:	00effc34 	movhi	r3,49136
  803340:	180f883a 	mov	r7,r3
  803344:	8009883a 	mov	r4,r16
  803348:	880b883a 	mov	r5,r17
  80334c:	100d883a 	mov	r6,r2
  803350:	0806df80 	call	806df8 <__gtdf2>
  803354:	00802c16 	blt	zero,r2,803408 <fcvtbuf+0x138>
  803358:	a9000017 	ldw	r4,0(r21)
  80335c:	880d883a 	mov	r6,r17
  803360:	800b883a 	mov	r5,r16
  803364:	01c000c4 	movi	r7,3
  803368:	d8800404 	addi	r2,sp,16
  80336c:	dd800215 	stw	r22,8(sp)
  803370:	dcc00015 	stw	r19,0(sp)
  803374:	dd000115 	stw	r20,4(sp)
  803378:	d8800315 	stw	r2,12(sp)
  80337c:	08051f80 	call	8051f8 <_dtoa_r>
  803380:	1009883a 	mov	r4,r2
  803384:	d8c00417 	ldw	r3,16(sp)
  803388:	a0800017 	ldw	r2,0(r20)
  80338c:	008dc83a 	sub	r6,zero,r2
  803390:	20c02b2e 	bgeu	r4,r3,803440 <fcvtbuf+0x170>
  803394:	9007883a 	mov	r3,r18
  803398:	20800003 	ldbu	r2,0(r4)
  80339c:	21000044 	addi	r4,r4,1
  8033a0:	31800044 	addi	r6,r6,1
  8033a4:	18800005 	stb	r2,0(r3)
  8033a8:	d8800417 	ldw	r2,16(sp)
  8033ac:	18c00044 	addi	r3,r3,1
  8033b0:	20bff936 	bltu	r4,r2,803398 <fcvtbuf+0xc8>
  8033b4:	34c0080e 	bge	r6,r19,8033d8 <fcvtbuf+0x108>
  8033b8:	9985c83a 	sub	r2,r19,r6
  8033bc:	1809883a 	mov	r4,r3
  8033c0:	10c5883a 	add	r2,r2,r3
  8033c4:	00c00c04 	movi	r3,48
  8033c8:	20c00005 	stb	r3,0(r4)
  8033cc:	21000044 	addi	r4,r4,1
  8033d0:	113ffd1e 	bne	r2,r4,8033c8 <fcvtbuf+0xf8>
  8033d4:	1007883a 	mov	r3,r2
  8033d8:	18000005 	stb	zero,0(r3)
  8033dc:	9005883a 	mov	r2,r18
  8033e0:	dfc00c17 	ldw	ra,48(sp)
  8033e4:	dd800b17 	ldw	r22,44(sp)
  8033e8:	dd400a17 	ldw	r21,40(sp)
  8033ec:	dd000917 	ldw	r20,36(sp)
  8033f0:	dcc00817 	ldw	r19,32(sp)
  8033f4:	dc800717 	ldw	r18,28(sp)
  8033f8:	dc400617 	ldw	r17,24(sp)
  8033fc:	dc000517 	ldw	r16,20(sp)
  803400:	dec00d04 	addi	sp,sp,52
  803404:	f800283a 	ret
  803408:	a9000017 	ldw	r4,0(r21)
  80340c:	880d883a 	mov	r6,r17
  803410:	800b883a 	mov	r5,r16
  803414:	01c00084 	movi	r7,2
  803418:	003fd306 	br	803368 <fcvtbuf+0x98>
  80341c:	05402074 	movhi	r21,129
  803420:	ad6f7404 	addi	r21,r21,-16944
  803424:	a9000017 	ldw	r4,0(r21)
  803428:	30c008c4 	addi	r3,r6,35
  80342c:	20801417 	ldw	r2,80(r4)
  803430:	1880050e 	bge	r3,r2,803448 <fcvtbuf+0x178>
  803434:	a8800017 	ldw	r2,0(r21)
  803438:	14801517 	ldw	r18,84(r2)
  80343c:	003fb606 	br	803318 <fcvtbuf+0x48>
  803440:	9007883a 	mov	r3,r18
  803444:	003fdb06 	br	8033b4 <fcvtbuf+0xe4>
  803448:	21401517 	ldw	r5,84(r4)
  80344c:	34800904 	addi	r18,r6,36
  803450:	900d883a 	mov	r6,r18
  803454:	08048ac0 	call	8048ac <_realloc_r>
  803458:	1007883a 	mov	r3,r2
  80345c:	10000426 	beq	r2,zero,803470 <fcvtbuf+0x1a0>
  803460:	a8800017 	ldw	r2,0(r21)
  803464:	10c01515 	stw	r3,84(r2)
  803468:	14801415 	stw	r18,80(r2)
  80346c:	003ff106 	br	803434 <fcvtbuf+0x164>
  803470:	0005883a 	mov	r2,zero
  803474:	003fda06 	br	8033e0 <fcvtbuf+0x110>

00803478 <_malloc_trim_r>:
  803478:	defffb04 	addi	sp,sp,-20
  80347c:	dcc00315 	stw	r19,12(sp)
  803480:	04c02074 	movhi	r19,129
  803484:	9ce9f004 	addi	r19,r19,-22592
  803488:	dc800215 	stw	r18,8(sp)
  80348c:	dc400115 	stw	r17,4(sp)
  803490:	dc000015 	stw	r16,0(sp)
  803494:	2823883a 	mov	r17,r5
  803498:	2025883a 	mov	r18,r4
  80349c:	dfc00415 	stw	ra,16(sp)
  8034a0:	08075000 	call	807500 <__malloc_lock>
  8034a4:	98800217 	ldw	r2,8(r19)
  8034a8:	9009883a 	mov	r4,r18
  8034ac:	000b883a 	mov	r5,zero
  8034b0:	10c00117 	ldw	r3,4(r2)
  8034b4:	00bfff04 	movi	r2,-4
  8034b8:	18a0703a 	and	r16,r3,r2
  8034bc:	8463c83a 	sub	r17,r16,r17
  8034c0:	8c43fbc4 	addi	r17,r17,4079
  8034c4:	8822d33a 	srli	r17,r17,12
  8034c8:	0083ffc4 	movi	r2,4095
  8034cc:	8c7fffc4 	addi	r17,r17,-1
  8034d0:	8822933a 	slli	r17,r17,12
  8034d4:	1440060e 	bge	r2,r17,8034f0 <_malloc_trim_r+0x78>
  8034d8:	08029500 	call	802950 <_sbrk_r>
  8034dc:	98c00217 	ldw	r3,8(r19)
  8034e0:	9009883a 	mov	r4,r18
  8034e4:	044bc83a 	sub	r5,zero,r17
  8034e8:	80c7883a 	add	r3,r16,r3
  8034ec:	10c00926 	beq	r2,r3,803514 <_malloc_trim_r+0x9c>
  8034f0:	08075040 	call	807504 <__malloc_unlock>
  8034f4:	0005883a 	mov	r2,zero
  8034f8:	dfc00417 	ldw	ra,16(sp)
  8034fc:	dcc00317 	ldw	r19,12(sp)
  803500:	dc800217 	ldw	r18,8(sp)
  803504:	dc400117 	ldw	r17,4(sp)
  803508:	dc000017 	ldw	r16,0(sp)
  80350c:	dec00504 	addi	sp,sp,20
  803510:	f800283a 	ret
  803514:	9009883a 	mov	r4,r18
  803518:	08029500 	call	802950 <_sbrk_r>
  80351c:	844dc83a 	sub	r6,r16,r17
  803520:	00ffffc4 	movi	r3,-1
  803524:	9009883a 	mov	r4,r18
  803528:	000b883a 	mov	r5,zero
  80352c:	01c02074 	movhi	r7,129
  803530:	39f61e04 	addi	r7,r7,-10120
  803534:	31800054 	ori	r6,r6,1
  803538:	10c00926 	beq	r2,r3,803560 <_malloc_trim_r+0xe8>
  80353c:	38800017 	ldw	r2,0(r7)
  803540:	98c00217 	ldw	r3,8(r19)
  803544:	9009883a 	mov	r4,r18
  803548:	1445c83a 	sub	r2,r2,r17
  80354c:	38800015 	stw	r2,0(r7)
  803550:	19800115 	stw	r6,4(r3)
  803554:	08075040 	call	807504 <__malloc_unlock>
  803558:	00800044 	movi	r2,1
  80355c:	003fe606 	br	8034f8 <_malloc_trim_r+0x80>
  803560:	08029500 	call	802950 <_sbrk_r>
  803564:	99800217 	ldw	r6,8(r19)
  803568:	100f883a 	mov	r7,r2
  80356c:	9009883a 	mov	r4,r18
  803570:	1187c83a 	sub	r3,r2,r6
  803574:	008003c4 	movi	r2,15
  803578:	19400054 	ori	r5,r3,1
  80357c:	10ffdc0e 	bge	r2,r3,8034f0 <_malloc_trim_r+0x78>
  803580:	00802074 	movhi	r2,129
  803584:	10af7704 	addi	r2,r2,-16932
  803588:	10c00017 	ldw	r3,0(r2)
  80358c:	00802074 	movhi	r2,129
  803590:	10b61e04 	addi	r2,r2,-10120
  803594:	31400115 	stw	r5,4(r6)
  803598:	38c7c83a 	sub	r3,r7,r3
  80359c:	10c00015 	stw	r3,0(r2)
  8035a0:	003fd306 	br	8034f0 <_malloc_trim_r+0x78>

008035a4 <_free_r>:
  8035a4:	defffd04 	addi	sp,sp,-12
  8035a8:	dc400115 	stw	r17,4(sp)
  8035ac:	dc000015 	stw	r16,0(sp)
  8035b0:	dfc00215 	stw	ra,8(sp)
  8035b4:	2821883a 	mov	r16,r5
  8035b8:	2023883a 	mov	r17,r4
  8035bc:	28005a26 	beq	r5,zero,803728 <_free_r+0x184>
  8035c0:	08075000 	call	807500 <__malloc_lock>
  8035c4:	823ffe04 	addi	r8,r16,-8
  8035c8:	41400117 	ldw	r5,4(r8)
  8035cc:	00bfff84 	movi	r2,-2
  8035d0:	02802074 	movhi	r10,129
  8035d4:	52a9f004 	addi	r10,r10,-22592
  8035d8:	288e703a 	and	r7,r5,r2
  8035dc:	41cd883a 	add	r6,r8,r7
  8035e0:	30c00117 	ldw	r3,4(r6)
  8035e4:	51000217 	ldw	r4,8(r10)
  8035e8:	00bfff04 	movi	r2,-4
  8035ec:	1892703a 	and	r9,r3,r2
  8035f0:	5017883a 	mov	r11,r10
  8035f4:	31006726 	beq	r6,r4,803794 <_free_r+0x1f0>
  8035f8:	2880004c 	andi	r2,r5,1
  8035fc:	1005003a 	cmpeq	r2,r2,zero
  803600:	32400115 	stw	r9,4(r6)
  803604:	10001a1e 	bne	r2,zero,803670 <_free_r+0xcc>
  803608:	000b883a 	mov	r5,zero
  80360c:	3247883a 	add	r3,r6,r9
  803610:	18800117 	ldw	r2,4(r3)
  803614:	1080004c 	andi	r2,r2,1
  803618:	1000231e 	bne	r2,zero,8036a8 <_free_r+0x104>
  80361c:	280ac03a 	cmpne	r5,r5,zero
  803620:	3a4f883a 	add	r7,r7,r9
  803624:	2800451e 	bne	r5,zero,80373c <_free_r+0x198>
  803628:	31000217 	ldw	r4,8(r6)
  80362c:	00802074 	movhi	r2,129
  803630:	10a9f204 	addi	r2,r2,-22584
  803634:	20807b26 	beq	r4,r2,803824 <_free_r+0x280>
  803638:	30800317 	ldw	r2,12(r6)
  80363c:	3a07883a 	add	r3,r7,r8
  803640:	19c00015 	stw	r7,0(r3)
  803644:	11000215 	stw	r4,8(r2)
  803648:	20800315 	stw	r2,12(r4)
  80364c:	38800054 	ori	r2,r7,1
  803650:	40800115 	stw	r2,4(r8)
  803654:	28001a26 	beq	r5,zero,8036c0 <_free_r+0x11c>
  803658:	8809883a 	mov	r4,r17
  80365c:	dfc00217 	ldw	ra,8(sp)
  803660:	dc400117 	ldw	r17,4(sp)
  803664:	dc000017 	ldw	r16,0(sp)
  803668:	dec00304 	addi	sp,sp,12
  80366c:	08075041 	jmpi	807504 <__malloc_unlock>
  803670:	80bffe17 	ldw	r2,-8(r16)
  803674:	50c00204 	addi	r3,r10,8
  803678:	4091c83a 	sub	r8,r8,r2
  80367c:	41000217 	ldw	r4,8(r8)
  803680:	388f883a 	add	r7,r7,r2
  803684:	20c06126 	beq	r4,r3,80380c <_free_r+0x268>
  803688:	40800317 	ldw	r2,12(r8)
  80368c:	3247883a 	add	r3,r6,r9
  803690:	000b883a 	mov	r5,zero
  803694:	11000215 	stw	r4,8(r2)
  803698:	20800315 	stw	r2,12(r4)
  80369c:	18800117 	ldw	r2,4(r3)
  8036a0:	1080004c 	andi	r2,r2,1
  8036a4:	103fdd26 	beq	r2,zero,80361c <_free_r+0x78>
  8036a8:	38800054 	ori	r2,r7,1
  8036ac:	3a07883a 	add	r3,r7,r8
  8036b0:	280ac03a 	cmpne	r5,r5,zero
  8036b4:	40800115 	stw	r2,4(r8)
  8036b8:	19c00015 	stw	r7,0(r3)
  8036bc:	283fe61e 	bne	r5,zero,803658 <_free_r+0xb4>
  8036c0:	00807fc4 	movi	r2,511
  8036c4:	11c01f2e 	bgeu	r2,r7,803744 <_free_r+0x1a0>
  8036c8:	3806d27a 	srli	r3,r7,9
  8036cc:	1800481e 	bne	r3,zero,8037f0 <_free_r+0x24c>
  8036d0:	3804d0fa 	srli	r2,r7,3
  8036d4:	100690fa 	slli	r3,r2,3
  8036d8:	1acd883a 	add	r6,r3,r11
  8036dc:	31400217 	ldw	r5,8(r6)
  8036e0:	31405926 	beq	r6,r5,803848 <_free_r+0x2a4>
  8036e4:	28800117 	ldw	r2,4(r5)
  8036e8:	00ffff04 	movi	r3,-4
  8036ec:	10c4703a 	and	r2,r2,r3
  8036f0:	3880022e 	bgeu	r7,r2,8036fc <_free_r+0x158>
  8036f4:	29400217 	ldw	r5,8(r5)
  8036f8:	317ffa1e 	bne	r6,r5,8036e4 <_free_r+0x140>
  8036fc:	29800317 	ldw	r6,12(r5)
  803700:	41800315 	stw	r6,12(r8)
  803704:	41400215 	stw	r5,8(r8)
  803708:	8809883a 	mov	r4,r17
  80370c:	2a000315 	stw	r8,12(r5)
  803710:	32000215 	stw	r8,8(r6)
  803714:	dfc00217 	ldw	ra,8(sp)
  803718:	dc400117 	ldw	r17,4(sp)
  80371c:	dc000017 	ldw	r16,0(sp)
  803720:	dec00304 	addi	sp,sp,12
  803724:	08075041 	jmpi	807504 <__malloc_unlock>
  803728:	dfc00217 	ldw	ra,8(sp)
  80372c:	dc400117 	ldw	r17,4(sp)
  803730:	dc000017 	ldw	r16,0(sp)
  803734:	dec00304 	addi	sp,sp,12
  803738:	f800283a 	ret
  80373c:	31000217 	ldw	r4,8(r6)
  803740:	003fbd06 	br	803638 <_free_r+0x94>
  803744:	3806d0fa 	srli	r3,r7,3
  803748:	00800044 	movi	r2,1
  80374c:	51400117 	ldw	r5,4(r10)
  803750:	180890fa 	slli	r4,r3,3
  803754:	1807d0ba 	srai	r3,r3,2
  803758:	22c9883a 	add	r4,r4,r11
  80375c:	21800217 	ldw	r6,8(r4)
  803760:	10c4983a 	sll	r2,r2,r3
  803764:	41000315 	stw	r4,12(r8)
  803768:	41800215 	stw	r6,8(r8)
  80376c:	288ab03a 	or	r5,r5,r2
  803770:	22000215 	stw	r8,8(r4)
  803774:	8809883a 	mov	r4,r17
  803778:	51400115 	stw	r5,4(r10)
  80377c:	32000315 	stw	r8,12(r6)
  803780:	dfc00217 	ldw	ra,8(sp)
  803784:	dc400117 	ldw	r17,4(sp)
  803788:	dc000017 	ldw	r16,0(sp)
  80378c:	dec00304 	addi	sp,sp,12
  803790:	08075041 	jmpi	807504 <__malloc_unlock>
  803794:	2880004c 	andi	r2,r5,1
  803798:	3a4d883a 	add	r6,r7,r9
  80379c:	1000071e 	bne	r2,zero,8037bc <_free_r+0x218>
  8037a0:	80bffe17 	ldw	r2,-8(r16)
  8037a4:	4091c83a 	sub	r8,r8,r2
  8037a8:	41000317 	ldw	r4,12(r8)
  8037ac:	40c00217 	ldw	r3,8(r8)
  8037b0:	308d883a 	add	r6,r6,r2
  8037b4:	20c00215 	stw	r3,8(r4)
  8037b8:	19000315 	stw	r4,12(r3)
  8037bc:	00802074 	movhi	r2,129
  8037c0:	10af7604 	addi	r2,r2,-16936
  8037c4:	11000017 	ldw	r4,0(r2)
  8037c8:	30c00054 	ori	r3,r6,1
  8037cc:	52000215 	stw	r8,8(r10)
  8037d0:	40c00115 	stw	r3,4(r8)
  8037d4:	313fa036 	bltu	r6,r4,803658 <_free_r+0xb4>
  8037d8:	00802074 	movhi	r2,129
  8037dc:	10b61404 	addi	r2,r2,-10160
  8037e0:	11400017 	ldw	r5,0(r2)
  8037e4:	8809883a 	mov	r4,r17
  8037e8:	08034780 	call	803478 <_malloc_trim_r>
  8037ec:	003f9a06 	br	803658 <_free_r+0xb4>
  8037f0:	00800104 	movi	r2,4
  8037f4:	10c0072e 	bgeu	r2,r3,803814 <_free_r+0x270>
  8037f8:	00800504 	movi	r2,20
  8037fc:	10c01936 	bltu	r2,r3,803864 <_free_r+0x2c0>
  803800:	188016c4 	addi	r2,r3,91
  803804:	100690fa 	slli	r3,r2,3
  803808:	003fb306 	br	8036d8 <_free_r+0x134>
  80380c:	01400044 	movi	r5,1
  803810:	003f7e06 	br	80360c <_free_r+0x68>
  803814:	3804d1ba 	srli	r2,r7,6
  803818:	10800e04 	addi	r2,r2,56
  80381c:	100690fa 	slli	r3,r2,3
  803820:	003fad06 	br	8036d8 <_free_r+0x134>
  803824:	22000315 	stw	r8,12(r4)
  803828:	22000215 	stw	r8,8(r4)
  80382c:	3a05883a 	add	r2,r7,r8
  803830:	38c00054 	ori	r3,r7,1
  803834:	11c00015 	stw	r7,0(r2)
  803838:	41000215 	stw	r4,8(r8)
  80383c:	40c00115 	stw	r3,4(r8)
  803840:	41000315 	stw	r4,12(r8)
  803844:	003f8406 	br	803658 <_free_r+0xb4>
  803848:	1005d0ba 	srai	r2,r2,2
  80384c:	00c00044 	movi	r3,1
  803850:	51000117 	ldw	r4,4(r10)
  803854:	1886983a 	sll	r3,r3,r2
  803858:	20c8b03a 	or	r4,r4,r3
  80385c:	51000115 	stw	r4,4(r10)
  803860:	003fa706 	br	803700 <_free_r+0x15c>
  803864:	00801504 	movi	r2,84
  803868:	10c00436 	bltu	r2,r3,80387c <_free_r+0x2d8>
  80386c:	3804d33a 	srli	r2,r7,12
  803870:	10801b84 	addi	r2,r2,110
  803874:	100690fa 	slli	r3,r2,3
  803878:	003f9706 	br	8036d8 <_free_r+0x134>
  80387c:	00805504 	movi	r2,340
  803880:	10c00436 	bltu	r2,r3,803894 <_free_r+0x2f0>
  803884:	3804d3fa 	srli	r2,r7,15
  803888:	10801dc4 	addi	r2,r2,119
  80388c:	100690fa 	slli	r3,r2,3
  803890:	003f9106 	br	8036d8 <_free_r+0x134>
  803894:	00815504 	movi	r2,1364
  803898:	10c0032e 	bgeu	r2,r3,8038a8 <_free_r+0x304>
  80389c:	00801f84 	movi	r2,126
  8038a0:	00c0fc04 	movi	r3,1008
  8038a4:	003f8c06 	br	8036d8 <_free_r+0x134>
  8038a8:	3804d4ba 	srli	r2,r7,18
  8038ac:	10801f04 	addi	r2,r2,124
  8038b0:	100690fa 	slli	r3,r2,3
  8038b4:	003f8806 	br	8036d8 <_free_r+0x134>

008038b8 <_Bfree>:
  8038b8:	28000826 	beq	r5,zero,8038dc <_Bfree+0x24>
  8038bc:	28800117 	ldw	r2,4(r5)
  8038c0:	21001317 	ldw	r4,76(r4)
  8038c4:	1085883a 	add	r2,r2,r2
  8038c8:	1085883a 	add	r2,r2,r2
  8038cc:	1105883a 	add	r2,r2,r4
  8038d0:	10c00017 	ldw	r3,0(r2)
  8038d4:	28c00015 	stw	r3,0(r5)
  8038d8:	11400015 	stw	r5,0(r2)
  8038dc:	f800283a 	ret

008038e0 <__hi0bits>:
  8038e0:	20bfffec 	andhi	r2,r4,65535
  8038e4:	10001426 	beq	r2,zero,803938 <__hi0bits+0x58>
  8038e8:	0007883a 	mov	r3,zero
  8038ec:	20bfc02c 	andhi	r2,r4,65280
  8038f0:	1000021e 	bne	r2,zero,8038fc <__hi0bits+0x1c>
  8038f4:	2008923a 	slli	r4,r4,8
  8038f8:	18c00204 	addi	r3,r3,8
  8038fc:	20bc002c 	andhi	r2,r4,61440
  803900:	1000021e 	bne	r2,zero,80390c <__hi0bits+0x2c>
  803904:	2008913a 	slli	r4,r4,4
  803908:	18c00104 	addi	r3,r3,4
  80390c:	20b0002c 	andhi	r2,r4,49152
  803910:	1000031e 	bne	r2,zero,803920 <__hi0bits+0x40>
  803914:	2105883a 	add	r2,r4,r4
  803918:	18c00084 	addi	r3,r3,2
  80391c:	1089883a 	add	r4,r2,r2
  803920:	20000316 	blt	r4,zero,803930 <__hi0bits+0x50>
  803924:	2090002c 	andhi	r2,r4,16384
  803928:	10000626 	beq	r2,zero,803944 <__hi0bits+0x64>
  80392c:	18c00044 	addi	r3,r3,1
  803930:	1805883a 	mov	r2,r3
  803934:	f800283a 	ret
  803938:	2008943a 	slli	r4,r4,16
  80393c:	00c00404 	movi	r3,16
  803940:	003fea06 	br	8038ec <__hi0bits+0xc>
  803944:	00c00804 	movi	r3,32
  803948:	1805883a 	mov	r2,r3
  80394c:	f800283a 	ret

00803950 <__lo0bits>:
  803950:	20c00017 	ldw	r3,0(r4)
  803954:	188001cc 	andi	r2,r3,7
  803958:	10000a26 	beq	r2,zero,803984 <__lo0bits+0x34>
  80395c:	1880004c 	andi	r2,r3,1
  803960:	1005003a 	cmpeq	r2,r2,zero
  803964:	10002126 	beq	r2,zero,8039ec <__lo0bits+0x9c>
  803968:	1880008c 	andi	r2,r3,2
  80396c:	1000251e 	bne	r2,zero,803a04 <__lo0bits+0xb4>
  803970:	1804d0ba 	srli	r2,r3,2
  803974:	01400084 	movi	r5,2
  803978:	20800015 	stw	r2,0(r4)
  80397c:	2805883a 	mov	r2,r5
  803980:	f800283a 	ret
  803984:	18bfffcc 	andi	r2,r3,65535
  803988:	10001526 	beq	r2,zero,8039e0 <__lo0bits+0x90>
  80398c:	000b883a 	mov	r5,zero
  803990:	18803fcc 	andi	r2,r3,255
  803994:	1000021e 	bne	r2,zero,8039a0 <__lo0bits+0x50>
  803998:	1806d23a 	srli	r3,r3,8
  80399c:	29400204 	addi	r5,r5,8
  8039a0:	188003cc 	andi	r2,r3,15
  8039a4:	1000021e 	bne	r2,zero,8039b0 <__lo0bits+0x60>
  8039a8:	1806d13a 	srli	r3,r3,4
  8039ac:	29400104 	addi	r5,r5,4
  8039b0:	188000cc 	andi	r2,r3,3
  8039b4:	1000021e 	bne	r2,zero,8039c0 <__lo0bits+0x70>
  8039b8:	1806d0ba 	srli	r3,r3,2
  8039bc:	29400084 	addi	r5,r5,2
  8039c0:	1880004c 	andi	r2,r3,1
  8039c4:	1000031e 	bne	r2,zero,8039d4 <__lo0bits+0x84>
  8039c8:	1806d07a 	srli	r3,r3,1
  8039cc:	18000a26 	beq	r3,zero,8039f8 <__lo0bits+0xa8>
  8039d0:	29400044 	addi	r5,r5,1
  8039d4:	2805883a 	mov	r2,r5
  8039d8:	20c00015 	stw	r3,0(r4)
  8039dc:	f800283a 	ret
  8039e0:	1806d43a 	srli	r3,r3,16
  8039e4:	01400404 	movi	r5,16
  8039e8:	003fe906 	br	803990 <__lo0bits+0x40>
  8039ec:	000b883a 	mov	r5,zero
  8039f0:	2805883a 	mov	r2,r5
  8039f4:	f800283a 	ret
  8039f8:	01400804 	movi	r5,32
  8039fc:	2805883a 	mov	r2,r5
  803a00:	f800283a 	ret
  803a04:	1804d07a 	srli	r2,r3,1
  803a08:	01400044 	movi	r5,1
  803a0c:	20800015 	stw	r2,0(r4)
  803a10:	003fda06 	br	80397c <__lo0bits+0x2c>

00803a14 <__mcmp>:
  803a14:	20800417 	ldw	r2,16(r4)
  803a18:	28c00417 	ldw	r3,16(r5)
  803a1c:	10cfc83a 	sub	r7,r2,r3
  803a20:	38000c1e 	bne	r7,zero,803a54 <__mcmp+0x40>
  803a24:	18c5883a 	add	r2,r3,r3
  803a28:	1085883a 	add	r2,r2,r2
  803a2c:	10c00504 	addi	r3,r2,20
  803a30:	21000504 	addi	r4,r4,20
  803a34:	28cb883a 	add	r5,r5,r3
  803a38:	2085883a 	add	r2,r4,r2
  803a3c:	10bfff04 	addi	r2,r2,-4
  803a40:	297fff04 	addi	r5,r5,-4
  803a44:	11800017 	ldw	r6,0(r2)
  803a48:	28c00017 	ldw	r3,0(r5)
  803a4c:	30c0031e 	bne	r6,r3,803a5c <__mcmp+0x48>
  803a50:	20bffa36 	bltu	r4,r2,803a3c <__mcmp+0x28>
  803a54:	3805883a 	mov	r2,r7
  803a58:	f800283a 	ret
  803a5c:	30c00336 	bltu	r6,r3,803a6c <__mcmp+0x58>
  803a60:	01c00044 	movi	r7,1
  803a64:	3805883a 	mov	r2,r7
  803a68:	f800283a 	ret
  803a6c:	01ffffc4 	movi	r7,-1
  803a70:	003ff806 	br	803a54 <__mcmp+0x40>

00803a74 <__ulp>:
  803a74:	295ffc2c 	andhi	r5,r5,32752
  803a78:	013f3034 	movhi	r4,64704
  803a7c:	290b883a 	add	r5,r5,r4
  803a80:	0145c83a 	sub	r2,zero,r5
  803a84:	1007d53a 	srai	r3,r2,20
  803a88:	000d883a 	mov	r6,zero
  803a8c:	0140040e 	bge	zero,r5,803aa0 <__ulp+0x2c>
  803a90:	280f883a 	mov	r7,r5
  803a94:	3807883a 	mov	r3,r7
  803a98:	3005883a 	mov	r2,r6
  803a9c:	f800283a 	ret
  803aa0:	008004c4 	movi	r2,19
  803aa4:	193ffb04 	addi	r4,r3,-20
  803aa8:	10c00c0e 	bge	r2,r3,803adc <__ulp+0x68>
  803aac:	008007c4 	movi	r2,31
  803ab0:	1107c83a 	sub	r3,r2,r4
  803ab4:	00800784 	movi	r2,30
  803ab8:	01400044 	movi	r5,1
  803abc:	11000216 	blt	r2,r4,803ac8 <__ulp+0x54>
  803ac0:	00800044 	movi	r2,1
  803ac4:	10ca983a 	sll	r5,r2,r3
  803ac8:	000f883a 	mov	r7,zero
  803acc:	280d883a 	mov	r6,r5
  803ad0:	3807883a 	mov	r3,r7
  803ad4:	3005883a 	mov	r2,r6
  803ad8:	f800283a 	ret
  803adc:	00800234 	movhi	r2,8
  803ae0:	10cfd83a 	sra	r7,r2,r3
  803ae4:	000d883a 	mov	r6,zero
  803ae8:	3005883a 	mov	r2,r6
  803aec:	3807883a 	mov	r3,r7
  803af0:	f800283a 	ret

00803af4 <__b2d>:
  803af4:	20800417 	ldw	r2,16(r4)
  803af8:	defff904 	addi	sp,sp,-28
  803afc:	dd000415 	stw	r20,16(sp)
  803b00:	1085883a 	add	r2,r2,r2
  803b04:	25000504 	addi	r20,r4,20
  803b08:	1085883a 	add	r2,r2,r2
  803b0c:	dc000015 	stw	r16,0(sp)
  803b10:	a0a1883a 	add	r16,r20,r2
  803b14:	dd400515 	stw	r21,20(sp)
  803b18:	857fff17 	ldw	r21,-4(r16)
  803b1c:	dc400115 	stw	r17,4(sp)
  803b20:	dfc00615 	stw	ra,24(sp)
  803b24:	a809883a 	mov	r4,r21
  803b28:	2823883a 	mov	r17,r5
  803b2c:	dcc00315 	stw	r19,12(sp)
  803b30:	dc800215 	stw	r18,8(sp)
  803b34:	08038e00 	call	8038e0 <__hi0bits>
  803b38:	100b883a 	mov	r5,r2
  803b3c:	00800804 	movi	r2,32
  803b40:	1145c83a 	sub	r2,r2,r5
  803b44:	88800015 	stw	r2,0(r17)
  803b48:	00800284 	movi	r2,10
  803b4c:	80ffff04 	addi	r3,r16,-4
  803b50:	11401416 	blt	r2,r5,803ba4 <__b2d+0xb0>
  803b54:	008002c4 	movi	r2,11
  803b58:	1149c83a 	sub	r4,r2,r5
  803b5c:	a0c02736 	bltu	r20,r3,803bfc <__b2d+0x108>
  803b60:	000d883a 	mov	r6,zero
  803b64:	28800544 	addi	r2,r5,21
  803b68:	a906d83a 	srl	r3,r21,r4
  803b6c:	a884983a 	sll	r2,r21,r2
  803b70:	1ccffc34 	orhi	r19,r3,16368
  803b74:	11a4b03a 	or	r18,r2,r6
  803b78:	9005883a 	mov	r2,r18
  803b7c:	9807883a 	mov	r3,r19
  803b80:	dfc00617 	ldw	ra,24(sp)
  803b84:	dd400517 	ldw	r21,20(sp)
  803b88:	dd000417 	ldw	r20,16(sp)
  803b8c:	dcc00317 	ldw	r19,12(sp)
  803b90:	dc800217 	ldw	r18,8(sp)
  803b94:	dc400117 	ldw	r17,4(sp)
  803b98:	dc000017 	ldw	r16,0(sp)
  803b9c:	dec00704 	addi	sp,sp,28
  803ba0:	f800283a 	ret
  803ba4:	a0c00e36 	bltu	r20,r3,803be0 <__b2d+0xec>
  803ba8:	293ffd44 	addi	r4,r5,-11
  803bac:	000d883a 	mov	r6,zero
  803bb0:	20000f26 	beq	r4,zero,803bf0 <__b2d+0xfc>
  803bb4:	00800804 	movi	r2,32
  803bb8:	110bc83a 	sub	r5,r2,r4
  803bbc:	a0c01236 	bltu	r20,r3,803c08 <__b2d+0x114>
  803bc0:	000f883a 	mov	r7,zero
  803bc4:	a904983a 	sll	r2,r21,r4
  803bc8:	3146d83a 	srl	r3,r6,r5
  803bcc:	3108983a 	sll	r4,r6,r4
  803bd0:	108ffc34 	orhi	r2,r2,16368
  803bd4:	18a6b03a 	or	r19,r3,r2
  803bd8:	3924b03a 	or	r18,r7,r4
  803bdc:	003fe606 	br	803b78 <__b2d+0x84>
  803be0:	293ffd44 	addi	r4,r5,-11
  803be4:	81bffe17 	ldw	r6,-8(r16)
  803be8:	80fffe04 	addi	r3,r16,-8
  803bec:	203ff11e 	bne	r4,zero,803bb4 <__b2d+0xc0>
  803bf0:	accffc34 	orhi	r19,r21,16368
  803bf4:	3025883a 	mov	r18,r6
  803bf8:	003fdf06 	br	803b78 <__b2d+0x84>
  803bfc:	18bfff17 	ldw	r2,-4(r3)
  803c00:	110cd83a 	srl	r6,r2,r4
  803c04:	003fd706 	br	803b64 <__b2d+0x70>
  803c08:	18bfff17 	ldw	r2,-4(r3)
  803c0c:	114ed83a 	srl	r7,r2,r5
  803c10:	003fec06 	br	803bc4 <__b2d+0xd0>

00803c14 <__ratio>:
  803c14:	defff904 	addi	sp,sp,-28
  803c18:	dc400215 	stw	r17,8(sp)
  803c1c:	2823883a 	mov	r17,r5
  803c20:	d80b883a 	mov	r5,sp
  803c24:	dfc00615 	stw	ra,24(sp)
  803c28:	dd000515 	stw	r20,20(sp)
  803c2c:	dcc00415 	stw	r19,16(sp)
  803c30:	dc800315 	stw	r18,12(sp)
  803c34:	2025883a 	mov	r18,r4
  803c38:	0803af40 	call	803af4 <__b2d>
  803c3c:	8809883a 	mov	r4,r17
  803c40:	d9400104 	addi	r5,sp,4
  803c44:	1027883a 	mov	r19,r2
  803c48:	1829883a 	mov	r20,r3
  803c4c:	0803af40 	call	803af4 <__b2d>
  803c50:	89000417 	ldw	r4,16(r17)
  803c54:	91c00417 	ldw	r7,16(r18)
  803c58:	d9800117 	ldw	r6,4(sp)
  803c5c:	180b883a 	mov	r5,r3
  803c60:	390fc83a 	sub	r7,r7,r4
  803c64:	1009883a 	mov	r4,r2
  803c68:	d8800017 	ldw	r2,0(sp)
  803c6c:	380e917a 	slli	r7,r7,5
  803c70:	2011883a 	mov	r8,r4
  803c74:	1185c83a 	sub	r2,r2,r6
  803c78:	11c5883a 	add	r2,r2,r7
  803c7c:	1006953a 	slli	r3,r2,20
  803c80:	2813883a 	mov	r9,r5
  803c84:	00800d0e 	bge	zero,r2,803cbc <__ratio+0xa8>
  803c88:	1d29883a 	add	r20,r3,r20
  803c8c:	a00b883a 	mov	r5,r20
  803c90:	480f883a 	mov	r7,r9
  803c94:	9809883a 	mov	r4,r19
  803c98:	400d883a 	mov	r6,r8
  803c9c:	08013080 	call	801308 <__divdf3>
  803ca0:	dfc00617 	ldw	ra,24(sp)
  803ca4:	dd000517 	ldw	r20,20(sp)
  803ca8:	dcc00417 	ldw	r19,16(sp)
  803cac:	dc800317 	ldw	r18,12(sp)
  803cb0:	dc400217 	ldw	r17,8(sp)
  803cb4:	dec00704 	addi	sp,sp,28
  803cb8:	f800283a 	ret
  803cbc:	28d3c83a 	sub	r9,r5,r3
  803cc0:	003ff206 	br	803c8c <__ratio+0x78>

00803cc4 <_mprec_log10>:
  803cc4:	defffe04 	addi	sp,sp,-8
  803cc8:	008005c4 	movi	r2,23
  803ccc:	dc000015 	stw	r16,0(sp)
  803cd0:	dfc00115 	stw	ra,4(sp)
  803cd4:	2021883a 	mov	r16,r4
  803cd8:	11000c16 	blt	r2,r4,803d0c <_mprec_log10+0x48>
  803cdc:	200490fa 	slli	r2,r4,3
  803ce0:	00c02074 	movhi	r3,129
  803ce4:	18e89b04 	addi	r3,r3,-23956
  803ce8:	10c5883a 	add	r2,r2,r3
  803cec:	12400117 	ldw	r9,4(r2)
  803cf0:	12000017 	ldw	r8,0(r2)
  803cf4:	4807883a 	mov	r3,r9
  803cf8:	4005883a 	mov	r2,r8
  803cfc:	dfc00117 	ldw	ra,4(sp)
  803d00:	dc000017 	ldw	r16,0(sp)
  803d04:	dec00204 	addi	sp,sp,8
  803d08:	f800283a 	ret
  803d0c:	0011883a 	mov	r8,zero
  803d10:	024ffc34 	movhi	r9,16368
  803d14:	0005883a 	mov	r2,zero
  803d18:	00d00934 	movhi	r3,16420
  803d1c:	480b883a 	mov	r5,r9
  803d20:	4009883a 	mov	r4,r8
  803d24:	180f883a 	mov	r7,r3
  803d28:	100d883a 	mov	r6,r2
  803d2c:	08069240 	call	806924 <__muldf3>
  803d30:	843fffc4 	addi	r16,r16,-1
  803d34:	1011883a 	mov	r8,r2
  803d38:	1813883a 	mov	r9,r3
  803d3c:	803ff51e 	bne	r16,zero,803d14 <_mprec_log10+0x50>
  803d40:	4005883a 	mov	r2,r8
  803d44:	4807883a 	mov	r3,r9
  803d48:	dfc00117 	ldw	ra,4(sp)
  803d4c:	dc000017 	ldw	r16,0(sp)
  803d50:	dec00204 	addi	sp,sp,8
  803d54:	f800283a 	ret

00803d58 <__copybits>:
  803d58:	297fffc4 	addi	r5,r5,-1
  803d5c:	30800417 	ldw	r2,16(r6)
  803d60:	280bd17a 	srai	r5,r5,5
  803d64:	31800504 	addi	r6,r6,20
  803d68:	1085883a 	add	r2,r2,r2
  803d6c:	294b883a 	add	r5,r5,r5
  803d70:	294b883a 	add	r5,r5,r5
  803d74:	1085883a 	add	r2,r2,r2
  803d78:	290b883a 	add	r5,r5,r4
  803d7c:	3087883a 	add	r3,r6,r2
  803d80:	29400104 	addi	r5,r5,4
  803d84:	30c0052e 	bgeu	r6,r3,803d9c <__copybits+0x44>
  803d88:	30800017 	ldw	r2,0(r6)
  803d8c:	31800104 	addi	r6,r6,4
  803d90:	20800015 	stw	r2,0(r4)
  803d94:	21000104 	addi	r4,r4,4
  803d98:	30fffb36 	bltu	r6,r3,803d88 <__copybits+0x30>
  803d9c:	2140032e 	bgeu	r4,r5,803dac <__copybits+0x54>
  803da0:	20000015 	stw	zero,0(r4)
  803da4:	21000104 	addi	r4,r4,4
  803da8:	217ffd36 	bltu	r4,r5,803da0 <__copybits+0x48>
  803dac:	f800283a 	ret

00803db0 <__any_on>:
  803db0:	20800417 	ldw	r2,16(r4)
  803db4:	2807d17a 	srai	r3,r5,5
  803db8:	21000504 	addi	r4,r4,20
  803dbc:	10c00d0e 	bge	r2,r3,803df4 <__any_on+0x44>
  803dc0:	1085883a 	add	r2,r2,r2
  803dc4:	1085883a 	add	r2,r2,r2
  803dc8:	208d883a 	add	r6,r4,r2
  803dcc:	2180182e 	bgeu	r4,r6,803e30 <__any_on+0x80>
  803dd0:	30bfff17 	ldw	r2,-4(r6)
  803dd4:	30ffff04 	addi	r3,r6,-4
  803dd8:	1000041e 	bne	r2,zero,803dec <__any_on+0x3c>
  803ddc:	20c0142e 	bgeu	r4,r3,803e30 <__any_on+0x80>
  803de0:	18ffff04 	addi	r3,r3,-4
  803de4:	18800017 	ldw	r2,0(r3)
  803de8:	103ffc26 	beq	r2,zero,803ddc <__any_on+0x2c>
  803dec:	00800044 	movi	r2,1
  803df0:	f800283a 	ret
  803df4:	18800a0e 	bge	r3,r2,803e20 <__any_on+0x70>
  803df8:	294007cc 	andi	r5,r5,31
  803dfc:	28000826 	beq	r5,zero,803e20 <__any_on+0x70>
  803e00:	18c5883a 	add	r2,r3,r3
  803e04:	1085883a 	add	r2,r2,r2
  803e08:	208d883a 	add	r6,r4,r2
  803e0c:	30c00017 	ldw	r3,0(r6)
  803e10:	1944d83a 	srl	r2,r3,r5
  803e14:	1144983a 	sll	r2,r2,r5
  803e18:	18bff41e 	bne	r3,r2,803dec <__any_on+0x3c>
  803e1c:	003feb06 	br	803dcc <__any_on+0x1c>
  803e20:	18c5883a 	add	r2,r3,r3
  803e24:	1085883a 	add	r2,r2,r2
  803e28:	208d883a 	add	r6,r4,r2
  803e2c:	003fe706 	br	803dcc <__any_on+0x1c>
  803e30:	0005883a 	mov	r2,zero
  803e34:	f800283a 	ret

00803e38 <_Balloc>:
  803e38:	20c01317 	ldw	r3,76(r4)
  803e3c:	defffb04 	addi	sp,sp,-20
  803e40:	dcc00315 	stw	r19,12(sp)
  803e44:	dc800215 	stw	r18,8(sp)
  803e48:	dfc00415 	stw	ra,16(sp)
  803e4c:	2825883a 	mov	r18,r5
  803e50:	dc400115 	stw	r17,4(sp)
  803e54:	dc000015 	stw	r16,0(sp)
  803e58:	2027883a 	mov	r19,r4
  803e5c:	01800404 	movi	r6,16
  803e60:	01400104 	movi	r5,4
  803e64:	18001726 	beq	r3,zero,803ec4 <_Balloc+0x8c>
  803e68:	01400044 	movi	r5,1
  803e6c:	9485883a 	add	r2,r18,r18
  803e70:	2ca2983a 	sll	r17,r5,r18
  803e74:	1085883a 	add	r2,r2,r2
  803e78:	10c7883a 	add	r3,r2,r3
  803e7c:	1c000017 	ldw	r16,0(r3)
  803e80:	8c4d883a 	add	r6,r17,r17
  803e84:	318d883a 	add	r6,r6,r6
  803e88:	9809883a 	mov	r4,r19
  803e8c:	31800504 	addi	r6,r6,20
  803e90:	80001226 	beq	r16,zero,803edc <_Balloc+0xa4>
  803e94:	80800017 	ldw	r2,0(r16)
  803e98:	18800015 	stw	r2,0(r3)
  803e9c:	80000415 	stw	zero,16(r16)
  803ea0:	80000315 	stw	zero,12(r16)
  803ea4:	8005883a 	mov	r2,r16
  803ea8:	dfc00417 	ldw	ra,16(sp)
  803eac:	dcc00317 	ldw	r19,12(sp)
  803eb0:	dc800217 	ldw	r18,8(sp)
  803eb4:	dc400117 	ldw	r17,4(sp)
  803eb8:	dc000017 	ldw	r16,0(sp)
  803ebc:	dec00504 	addi	sp,sp,20
  803ec0:	f800283a 	ret
  803ec4:	0804f2c0 	call	804f2c <_calloc_r>
  803ec8:	1007883a 	mov	r3,r2
  803ecc:	0021883a 	mov	r16,zero
  803ed0:	98801315 	stw	r2,76(r19)
  803ed4:	103fe41e 	bne	r2,zero,803e68 <_Balloc+0x30>
  803ed8:	003ff206 	br	803ea4 <_Balloc+0x6c>
  803edc:	0804f2c0 	call	804f2c <_calloc_r>
  803ee0:	103ff026 	beq	r2,zero,803ea4 <_Balloc+0x6c>
  803ee4:	1021883a 	mov	r16,r2
  803ee8:	14800115 	stw	r18,4(r2)
  803eec:	14400215 	stw	r17,8(r2)
  803ef0:	003fea06 	br	803e9c <_Balloc+0x64>

00803ef4 <__d2b>:
  803ef4:	defff504 	addi	sp,sp,-44
  803ef8:	dcc00515 	stw	r19,20(sp)
  803efc:	04c00044 	movi	r19,1
  803f00:	dc000215 	stw	r16,8(sp)
  803f04:	2821883a 	mov	r16,r5
  803f08:	980b883a 	mov	r5,r19
  803f0c:	ddc00915 	stw	r23,36(sp)
  803f10:	dd800815 	stw	r22,32(sp)
  803f14:	dd400715 	stw	r21,28(sp)
  803f18:	dd000615 	stw	r20,24(sp)
  803f1c:	dc800415 	stw	r18,16(sp)
  803f20:	dc400315 	stw	r17,12(sp)
  803f24:	dfc00a15 	stw	ra,40(sp)
  803f28:	3023883a 	mov	r17,r6
  803f2c:	382d883a 	mov	r22,r7
  803f30:	ddc00b17 	ldw	r23,44(sp)
  803f34:	0803e380 	call	803e38 <_Balloc>
  803f38:	1025883a 	mov	r18,r2
  803f3c:	00a00034 	movhi	r2,32768
  803f40:	10bfffc4 	addi	r2,r2,-1
  803f44:	8888703a 	and	r4,r17,r2
  803f48:	202ad53a 	srli	r21,r4,20
  803f4c:	00800434 	movhi	r2,16
  803f50:	10bfffc4 	addi	r2,r2,-1
  803f54:	8886703a 	and	r3,r17,r2
  803f58:	a829003a 	cmpeq	r20,r21,zero
  803f5c:	800b883a 	mov	r5,r16
  803f60:	d8c00115 	stw	r3,4(sp)
  803f64:	94000504 	addi	r16,r18,20
  803f68:	a000021e 	bne	r20,zero,803f74 <__d2b+0x80>
  803f6c:	18c00434 	orhi	r3,r3,16
  803f70:	d8c00115 	stw	r3,4(sp)
  803f74:	28002726 	beq	r5,zero,804014 <__d2b+0x120>
  803f78:	d809883a 	mov	r4,sp
  803f7c:	d9400015 	stw	r5,0(sp)
  803f80:	08039500 	call	803950 <__lo0bits>
  803f84:	100d883a 	mov	r6,r2
  803f88:	10003526 	beq	r2,zero,804060 <__d2b+0x16c>
  803f8c:	d8c00117 	ldw	r3,4(sp)
  803f90:	00800804 	movi	r2,32
  803f94:	1185c83a 	sub	r2,r2,r6
  803f98:	d9000017 	ldw	r4,0(sp)
  803f9c:	1886983a 	sll	r3,r3,r2
  803fa0:	1906b03a 	or	r3,r3,r4
  803fa4:	90c00515 	stw	r3,20(r18)
  803fa8:	d8c00117 	ldw	r3,4(sp)
  803fac:	1986d83a 	srl	r3,r3,r6
  803fb0:	d8c00115 	stw	r3,4(sp)
  803fb4:	180b003a 	cmpeq	r5,r3,zero
  803fb8:	00800084 	movi	r2,2
  803fbc:	114bc83a 	sub	r5,r2,r5
  803fc0:	80c00115 	stw	r3,4(r16)
  803fc4:	91400415 	stw	r5,16(r18)
  803fc8:	a0001a1e 	bne	r20,zero,804034 <__d2b+0x140>
  803fcc:	3545883a 	add	r2,r6,r21
  803fd0:	10bef344 	addi	r2,r2,-1075
  803fd4:	00c00d44 	movi	r3,53
  803fd8:	b0800015 	stw	r2,0(r22)
  803fdc:	1987c83a 	sub	r3,r3,r6
  803fe0:	b8c00015 	stw	r3,0(r23)
  803fe4:	9005883a 	mov	r2,r18
  803fe8:	dfc00a17 	ldw	ra,40(sp)
  803fec:	ddc00917 	ldw	r23,36(sp)
  803ff0:	dd800817 	ldw	r22,32(sp)
  803ff4:	dd400717 	ldw	r21,28(sp)
  803ff8:	dd000617 	ldw	r20,24(sp)
  803ffc:	dcc00517 	ldw	r19,20(sp)
  804000:	dc800417 	ldw	r18,16(sp)
  804004:	dc400317 	ldw	r17,12(sp)
  804008:	dc000217 	ldw	r16,8(sp)
  80400c:	dec00b04 	addi	sp,sp,44
  804010:	f800283a 	ret
  804014:	d9000104 	addi	r4,sp,4
  804018:	08039500 	call	803950 <__lo0bits>
  80401c:	11800804 	addi	r6,r2,32
  804020:	d8800117 	ldw	r2,4(sp)
  804024:	94c00415 	stw	r19,16(r18)
  804028:	980b883a 	mov	r5,r19
  80402c:	90800515 	stw	r2,20(r18)
  804030:	a03fe626 	beq	r20,zero,803fcc <__d2b+0xd8>
  804034:	2945883a 	add	r2,r5,r5
  804038:	1085883a 	add	r2,r2,r2
  80403c:	1405883a 	add	r2,r2,r16
  804040:	113fff17 	ldw	r4,-4(r2)
  804044:	30fef384 	addi	r3,r6,-1074
  804048:	2820917a 	slli	r16,r5,5
  80404c:	b0c00015 	stw	r3,0(r22)
  804050:	08038e00 	call	8038e0 <__hi0bits>
  804054:	80a1c83a 	sub	r16,r16,r2
  804058:	bc000015 	stw	r16,0(r23)
  80405c:	003fe106 	br	803fe4 <__d2b+0xf0>
  804060:	d8800017 	ldw	r2,0(sp)
  804064:	90800515 	stw	r2,20(r18)
  804068:	d8c00117 	ldw	r3,4(sp)
  80406c:	003fd106 	br	803fb4 <__d2b+0xc0>

00804070 <__mdiff>:
  804070:	defffb04 	addi	sp,sp,-20
  804074:	dc000015 	stw	r16,0(sp)
  804078:	2821883a 	mov	r16,r5
  80407c:	dc800215 	stw	r18,8(sp)
  804080:	300b883a 	mov	r5,r6
  804084:	2025883a 	mov	r18,r4
  804088:	8009883a 	mov	r4,r16
  80408c:	dc400115 	stw	r17,4(sp)
  804090:	dfc00415 	stw	ra,16(sp)
  804094:	dcc00315 	stw	r19,12(sp)
  804098:	3023883a 	mov	r17,r6
  80409c:	0803a140 	call	803a14 <__mcmp>
  8040a0:	10004226 	beq	r2,zero,8041ac <__mdiff+0x13c>
  8040a4:	10005016 	blt	r2,zero,8041e8 <__mdiff+0x178>
  8040a8:	0027883a 	mov	r19,zero
  8040ac:	81400117 	ldw	r5,4(r16)
  8040b0:	9009883a 	mov	r4,r18
  8040b4:	0803e380 	call	803e38 <_Balloc>
  8040b8:	1019883a 	mov	r12,r2
  8040bc:	82800417 	ldw	r10,16(r16)
  8040c0:	88800417 	ldw	r2,16(r17)
  8040c4:	81800504 	addi	r6,r16,20
  8040c8:	5287883a 	add	r3,r10,r10
  8040cc:	1085883a 	add	r2,r2,r2
  8040d0:	18c7883a 	add	r3,r3,r3
  8040d4:	1085883a 	add	r2,r2,r2
  8040d8:	8a000504 	addi	r8,r17,20
  8040dc:	64c00315 	stw	r19,12(r12)
  8040e0:	30db883a 	add	r13,r6,r3
  8040e4:	4097883a 	add	r11,r8,r2
  8040e8:	61c00504 	addi	r7,r12,20
  8040ec:	0013883a 	mov	r9,zero
  8040f0:	31000017 	ldw	r4,0(r6)
  8040f4:	41400017 	ldw	r5,0(r8)
  8040f8:	42000104 	addi	r8,r8,4
  8040fc:	20bfffcc 	andi	r2,r4,65535
  804100:	28ffffcc 	andi	r3,r5,65535
  804104:	10c5c83a 	sub	r2,r2,r3
  804108:	1245883a 	add	r2,r2,r9
  80410c:	2008d43a 	srli	r4,r4,16
  804110:	280ad43a 	srli	r5,r5,16
  804114:	1007d43a 	srai	r3,r2,16
  804118:	3880000d 	sth	r2,0(r7)
  80411c:	2149c83a 	sub	r4,r4,r5
  804120:	20c9883a 	add	r4,r4,r3
  804124:	3900008d 	sth	r4,2(r7)
  804128:	31800104 	addi	r6,r6,4
  80412c:	39c00104 	addi	r7,r7,4
  804130:	2013d43a 	srai	r9,r4,16
  804134:	42ffee36 	bltu	r8,r11,8040f0 <__mdiff+0x80>
  804138:	33400c2e 	bgeu	r6,r13,80416c <__mdiff+0xfc>
  80413c:	30800017 	ldw	r2,0(r6)
  804140:	31800104 	addi	r6,r6,4
  804144:	10ffffcc 	andi	r3,r2,65535
  804148:	1a47883a 	add	r3,r3,r9
  80414c:	1004d43a 	srli	r2,r2,16
  804150:	1809d43a 	srai	r4,r3,16
  804154:	38c0000d 	sth	r3,0(r7)
  804158:	1105883a 	add	r2,r2,r4
  80415c:	3880008d 	sth	r2,2(r7)
  804160:	1013d43a 	srai	r9,r2,16
  804164:	39c00104 	addi	r7,r7,4
  804168:	337ff436 	bltu	r6,r13,80413c <__mdiff+0xcc>
  80416c:	38bfff17 	ldw	r2,-4(r7)
  804170:	38ffff04 	addi	r3,r7,-4
  804174:	1000041e 	bne	r2,zero,804188 <__mdiff+0x118>
  804178:	18ffff04 	addi	r3,r3,-4
  80417c:	18800017 	ldw	r2,0(r3)
  804180:	52bfffc4 	addi	r10,r10,-1
  804184:	103ffc26 	beq	r2,zero,804178 <__mdiff+0x108>
  804188:	6005883a 	mov	r2,r12
  80418c:	62800415 	stw	r10,16(r12)
  804190:	dfc00417 	ldw	ra,16(sp)
  804194:	dcc00317 	ldw	r19,12(sp)
  804198:	dc800217 	ldw	r18,8(sp)
  80419c:	dc400117 	ldw	r17,4(sp)
  8041a0:	dc000017 	ldw	r16,0(sp)
  8041a4:	dec00504 	addi	sp,sp,20
  8041a8:	f800283a 	ret
  8041ac:	9009883a 	mov	r4,r18
  8041b0:	000b883a 	mov	r5,zero
  8041b4:	0803e380 	call	803e38 <_Balloc>
  8041b8:	1019883a 	mov	r12,r2
  8041bc:	00800044 	movi	r2,1
  8041c0:	60800415 	stw	r2,16(r12)
  8041c4:	6005883a 	mov	r2,r12
  8041c8:	60000515 	stw	zero,20(r12)
  8041cc:	dfc00417 	ldw	ra,16(sp)
  8041d0:	dcc00317 	ldw	r19,12(sp)
  8041d4:	dc800217 	ldw	r18,8(sp)
  8041d8:	dc400117 	ldw	r17,4(sp)
  8041dc:	dc000017 	ldw	r16,0(sp)
  8041e0:	dec00504 	addi	sp,sp,20
  8041e4:	f800283a 	ret
  8041e8:	880d883a 	mov	r6,r17
  8041ec:	04c00044 	movi	r19,1
  8041f0:	8023883a 	mov	r17,r16
  8041f4:	3021883a 	mov	r16,r6
  8041f8:	003fac06 	br	8040ac <__mdiff+0x3c>

008041fc <__lshift>:
  8041fc:	defff904 	addi	sp,sp,-28
  804200:	28800417 	ldw	r2,16(r5)
  804204:	dc000015 	stw	r16,0(sp)
  804208:	3021d17a 	srai	r16,r6,5
  80420c:	28c00217 	ldw	r3,8(r5)
  804210:	10800044 	addi	r2,r2,1
  804214:	dc400115 	stw	r17,4(sp)
  804218:	80a3883a 	add	r17,r16,r2
  80421c:	dd400515 	stw	r21,20(sp)
  804220:	dd000415 	stw	r20,16(sp)
  804224:	dc800215 	stw	r18,8(sp)
  804228:	dfc00615 	stw	ra,24(sp)
  80422c:	2825883a 	mov	r18,r5
  804230:	dcc00315 	stw	r19,12(sp)
  804234:	3029883a 	mov	r20,r6
  804238:	202b883a 	mov	r21,r4
  80423c:	29400117 	ldw	r5,4(r5)
  804240:	1c40030e 	bge	r3,r17,804250 <__lshift+0x54>
  804244:	18c7883a 	add	r3,r3,r3
  804248:	29400044 	addi	r5,r5,1
  80424c:	1c7ffd16 	blt	r3,r17,804244 <__lshift+0x48>
  804250:	a809883a 	mov	r4,r21
  804254:	0803e380 	call	803e38 <_Balloc>
  804258:	1027883a 	mov	r19,r2
  80425c:	11400504 	addi	r5,r2,20
  804260:	0400090e 	bge	zero,r16,804288 <__lshift+0x8c>
  804264:	2805883a 	mov	r2,r5
  804268:	0007883a 	mov	r3,zero
  80426c:	18c00044 	addi	r3,r3,1
  804270:	10000015 	stw	zero,0(r2)
  804274:	10800104 	addi	r2,r2,4
  804278:	80fffc1e 	bne	r16,r3,80426c <__lshift+0x70>
  80427c:	8405883a 	add	r2,r16,r16
  804280:	1085883a 	add	r2,r2,r2
  804284:	288b883a 	add	r5,r5,r2
  804288:	90800417 	ldw	r2,16(r18)
  80428c:	91000504 	addi	r4,r18,20
  804290:	a18007cc 	andi	r6,r20,31
  804294:	1085883a 	add	r2,r2,r2
  804298:	1085883a 	add	r2,r2,r2
  80429c:	208f883a 	add	r7,r4,r2
  8042a0:	30001e26 	beq	r6,zero,80431c <__lshift+0x120>
  8042a4:	00800804 	movi	r2,32
  8042a8:	1191c83a 	sub	r8,r2,r6
  8042ac:	0007883a 	mov	r3,zero
  8042b0:	20800017 	ldw	r2,0(r4)
  8042b4:	1184983a 	sll	r2,r2,r6
  8042b8:	1884b03a 	or	r2,r3,r2
  8042bc:	28800015 	stw	r2,0(r5)
  8042c0:	20c00017 	ldw	r3,0(r4)
  8042c4:	21000104 	addi	r4,r4,4
  8042c8:	29400104 	addi	r5,r5,4
  8042cc:	1a06d83a 	srl	r3,r3,r8
  8042d0:	21fff736 	bltu	r4,r7,8042b0 <__lshift+0xb4>
  8042d4:	28c00015 	stw	r3,0(r5)
  8042d8:	18000126 	beq	r3,zero,8042e0 <__lshift+0xe4>
  8042dc:	8c400044 	addi	r17,r17,1
  8042e0:	88bfffc4 	addi	r2,r17,-1
  8042e4:	98800415 	stw	r2,16(r19)
  8042e8:	a809883a 	mov	r4,r21
  8042ec:	900b883a 	mov	r5,r18
  8042f0:	08038b80 	call	8038b8 <_Bfree>
  8042f4:	9805883a 	mov	r2,r19
  8042f8:	dfc00617 	ldw	ra,24(sp)
  8042fc:	dd400517 	ldw	r21,20(sp)
  804300:	dd000417 	ldw	r20,16(sp)
  804304:	dcc00317 	ldw	r19,12(sp)
  804308:	dc800217 	ldw	r18,8(sp)
  80430c:	dc400117 	ldw	r17,4(sp)
  804310:	dc000017 	ldw	r16,0(sp)
  804314:	dec00704 	addi	sp,sp,28
  804318:	f800283a 	ret
  80431c:	20800017 	ldw	r2,0(r4)
  804320:	21000104 	addi	r4,r4,4
  804324:	28800015 	stw	r2,0(r5)
  804328:	29400104 	addi	r5,r5,4
  80432c:	21ffec2e 	bgeu	r4,r7,8042e0 <__lshift+0xe4>
  804330:	20800017 	ldw	r2,0(r4)
  804334:	21000104 	addi	r4,r4,4
  804338:	28800015 	stw	r2,0(r5)
  80433c:	29400104 	addi	r5,r5,4
  804340:	21fff636 	bltu	r4,r7,80431c <__lshift+0x120>
  804344:	003fe606 	br	8042e0 <__lshift+0xe4>

00804348 <__multiply>:
  804348:	defff904 	addi	sp,sp,-28
  80434c:	dcc00315 	stw	r19,12(sp)
  804350:	dc800215 	stw	r18,8(sp)
  804354:	2cc00417 	ldw	r19,16(r5)
  804358:	34800417 	ldw	r18,16(r6)
  80435c:	dd000415 	stw	r20,16(sp)
  804360:	dc400115 	stw	r17,4(sp)
  804364:	dfc00615 	stw	ra,24(sp)
  804368:	dd400515 	stw	r21,20(sp)
  80436c:	dc000015 	stw	r16,0(sp)
  804370:	2823883a 	mov	r17,r5
  804374:	3029883a 	mov	r20,r6
  804378:	9c80040e 	bge	r19,r18,80438c <__multiply+0x44>
  80437c:	9027883a 	mov	r19,r18
  804380:	2c800417 	ldw	r18,16(r5)
  804384:	2829883a 	mov	r20,r5
  804388:	3023883a 	mov	r17,r6
  80438c:	88800217 	ldw	r2,8(r17)
  804390:	9ca1883a 	add	r16,r19,r18
  804394:	89400117 	ldw	r5,4(r17)
  804398:	1400010e 	bge	r2,r16,8043a0 <__multiply+0x58>
  80439c:	29400044 	addi	r5,r5,1
  8043a0:	0803e380 	call	803e38 <_Balloc>
  8043a4:	102b883a 	mov	r21,r2
  8043a8:	8405883a 	add	r2,r16,r16
  8043ac:	1085883a 	add	r2,r2,r2
  8043b0:	a9000504 	addi	r4,r21,20
  8043b4:	209d883a 	add	r14,r4,r2
  8043b8:	2380042e 	bgeu	r4,r14,8043cc <__multiply+0x84>
  8043bc:	2005883a 	mov	r2,r4
  8043c0:	10000015 	stw	zero,0(r2)
  8043c4:	10800104 	addi	r2,r2,4
  8043c8:	13bffd36 	bltu	r2,r14,8043c0 <__multiply+0x78>
  8043cc:	9485883a 	add	r2,r18,r18
  8043d0:	9cc7883a 	add	r3,r19,r19
  8043d4:	a1800504 	addi	r6,r20,20
  8043d8:	1085883a 	add	r2,r2,r2
  8043dc:	8b400504 	addi	r13,r17,20
  8043e0:	18c7883a 	add	r3,r3,r3
  8043e4:	309f883a 	add	r15,r6,r2
  8043e8:	68d7883a 	add	r11,r13,r3
  8043ec:	33c03b2e 	bgeu	r6,r15,8044dc <__multiply+0x194>
  8043f0:	2019883a 	mov	r12,r4
  8043f4:	30800017 	ldw	r2,0(r6)
  8043f8:	127fffcc 	andi	r9,r2,65535
  8043fc:	48001826 	beq	r9,zero,804460 <__multiply+0x118>
  804400:	6811883a 	mov	r8,r13
  804404:	600f883a 	mov	r7,r12
  804408:	0015883a 	mov	r10,zero
  80440c:	40c00017 	ldw	r3,0(r8)
  804410:	39400017 	ldw	r5,0(r7)
  804414:	42000104 	addi	r8,r8,4
  804418:	193fffcc 	andi	r4,r3,65535
  80441c:	4909383a 	mul	r4,r9,r4
  804420:	1806d43a 	srli	r3,r3,16
  804424:	28bfffcc 	andi	r2,r5,65535
  804428:	5085883a 	add	r2,r10,r2
  80442c:	2089883a 	add	r4,r4,r2
  804430:	48c7383a 	mul	r3,r9,r3
  804434:	280ad43a 	srli	r5,r5,16
  804438:	2004d43a 	srli	r2,r4,16
  80443c:	3900000d 	sth	r4,0(r7)
  804440:	1947883a 	add	r3,r3,r5
  804444:	10c5883a 	add	r2,r2,r3
  804448:	3880008d 	sth	r2,2(r7)
  80444c:	1014d43a 	srli	r10,r2,16
  804450:	39c00104 	addi	r7,r7,4
  804454:	42ffed36 	bltu	r8,r11,80440c <__multiply+0xc4>
  804458:	3a800015 	stw	r10,0(r7)
  80445c:	30800017 	ldw	r2,0(r6)
  804460:	1012d43a 	srli	r9,r2,16
  804464:	48001926 	beq	r9,zero,8044cc <__multiply+0x184>
  804468:	60800017 	ldw	r2,0(r12)
  80446c:	6811883a 	mov	r8,r13
  804470:	600f883a 	mov	r7,r12
  804474:	0015883a 	mov	r10,zero
  804478:	100b883a 	mov	r5,r2
  80447c:	41000017 	ldw	r4,0(r8)
  804480:	2806d43a 	srli	r3,r5,16
  804484:	3880000d 	sth	r2,0(r7)
  804488:	20bfffcc 	andi	r2,r4,65535
  80448c:	4885383a 	mul	r2,r9,r2
  804490:	50c7883a 	add	r3,r10,r3
  804494:	2008d43a 	srli	r4,r4,16
  804498:	10c5883a 	add	r2,r2,r3
  80449c:	3880008d 	sth	r2,2(r7)
  8044a0:	39c00104 	addi	r7,r7,4
  8044a4:	39400017 	ldw	r5,0(r7)
  8044a8:	4909383a 	mul	r4,r9,r4
  8044ac:	1004d43a 	srli	r2,r2,16
  8044b0:	28ffffcc 	andi	r3,r5,65535
  8044b4:	20c9883a 	add	r4,r4,r3
  8044b8:	1105883a 	add	r2,r2,r4
  8044bc:	42000104 	addi	r8,r8,4
  8044c0:	1014d43a 	srli	r10,r2,16
  8044c4:	42ffed36 	bltu	r8,r11,80447c <__multiply+0x134>
  8044c8:	38800015 	stw	r2,0(r7)
  8044cc:	31800104 	addi	r6,r6,4
  8044d0:	33c0022e 	bgeu	r6,r15,8044dc <__multiply+0x194>
  8044d4:	63000104 	addi	r12,r12,4
  8044d8:	003fc606 	br	8043f4 <__multiply+0xac>
  8044dc:	0400090e 	bge	zero,r16,804504 <__multiply+0x1bc>
  8044e0:	70bfff17 	ldw	r2,-4(r14)
  8044e4:	70ffff04 	addi	r3,r14,-4
  8044e8:	10000326 	beq	r2,zero,8044f8 <__multiply+0x1b0>
  8044ec:	00000506 	br	804504 <__multiply+0x1bc>
  8044f0:	18800017 	ldw	r2,0(r3)
  8044f4:	1000031e 	bne	r2,zero,804504 <__multiply+0x1bc>
  8044f8:	843fffc4 	addi	r16,r16,-1
  8044fc:	18ffff04 	addi	r3,r3,-4
  804500:	803ffb1e 	bne	r16,zero,8044f0 <__multiply+0x1a8>
  804504:	a805883a 	mov	r2,r21
  804508:	ac000415 	stw	r16,16(r21)
  80450c:	dfc00617 	ldw	ra,24(sp)
  804510:	dd400517 	ldw	r21,20(sp)
  804514:	dd000417 	ldw	r20,16(sp)
  804518:	dcc00317 	ldw	r19,12(sp)
  80451c:	dc800217 	ldw	r18,8(sp)
  804520:	dc400117 	ldw	r17,4(sp)
  804524:	dc000017 	ldw	r16,0(sp)
  804528:	dec00704 	addi	sp,sp,28
  80452c:	f800283a 	ret

00804530 <__i2b>:
  804530:	defffd04 	addi	sp,sp,-12
  804534:	dc000015 	stw	r16,0(sp)
  804538:	04000044 	movi	r16,1
  80453c:	dc800115 	stw	r18,4(sp)
  804540:	2825883a 	mov	r18,r5
  804544:	800b883a 	mov	r5,r16
  804548:	dfc00215 	stw	ra,8(sp)
  80454c:	0803e380 	call	803e38 <_Balloc>
  804550:	14000415 	stw	r16,16(r2)
  804554:	14800515 	stw	r18,20(r2)
  804558:	dfc00217 	ldw	ra,8(sp)
  80455c:	dc800117 	ldw	r18,4(sp)
  804560:	dc000017 	ldw	r16,0(sp)
  804564:	dec00304 	addi	sp,sp,12
  804568:	f800283a 	ret

0080456c <__multadd>:
  80456c:	defffa04 	addi	sp,sp,-24
  804570:	dc800215 	stw	r18,8(sp)
  804574:	2c800417 	ldw	r18,16(r5)
  804578:	dd000415 	stw	r20,16(sp)
  80457c:	dcc00315 	stw	r19,12(sp)
  804580:	dc000015 	stw	r16,0(sp)
  804584:	dfc00515 	stw	ra,20(sp)
  804588:	3821883a 	mov	r16,r7
  80458c:	dc400115 	stw	r17,4(sp)
  804590:	2827883a 	mov	r19,r5
  804594:	2029883a 	mov	r20,r4
  804598:	2a000504 	addi	r8,r5,20
  80459c:	000f883a 	mov	r7,zero
  8045a0:	40800017 	ldw	r2,0(r8)
  8045a4:	39c00044 	addi	r7,r7,1
  8045a8:	10ffffcc 	andi	r3,r2,65535
  8045ac:	1987383a 	mul	r3,r3,r6
  8045b0:	1004d43a 	srli	r2,r2,16
  8045b4:	1c07883a 	add	r3,r3,r16
  8045b8:	180ad43a 	srli	r5,r3,16
  8045bc:	1185383a 	mul	r2,r2,r6
  8045c0:	18ffffcc 	andi	r3,r3,65535
  8045c4:	1145883a 	add	r2,r2,r5
  8045c8:	1008943a 	slli	r4,r2,16
  8045cc:	1020d43a 	srli	r16,r2,16
  8045d0:	20c9883a 	add	r4,r4,r3
  8045d4:	41000015 	stw	r4,0(r8)
  8045d8:	42000104 	addi	r8,r8,4
  8045dc:	3cbff016 	blt	r7,r18,8045a0 <__multadd+0x34>
  8045e0:	80000826 	beq	r16,zero,804604 <__multadd+0x98>
  8045e4:	98800217 	ldw	r2,8(r19)
  8045e8:	90800f0e 	bge	r18,r2,804628 <__multadd+0xbc>
  8045ec:	9485883a 	add	r2,r18,r18
  8045f0:	1085883a 	add	r2,r2,r2
  8045f4:	14c5883a 	add	r2,r2,r19
  8045f8:	90c00044 	addi	r3,r18,1
  8045fc:	14000515 	stw	r16,20(r2)
  804600:	98c00415 	stw	r3,16(r19)
  804604:	9805883a 	mov	r2,r19
  804608:	dfc00517 	ldw	ra,20(sp)
  80460c:	dd000417 	ldw	r20,16(sp)
  804610:	dcc00317 	ldw	r19,12(sp)
  804614:	dc800217 	ldw	r18,8(sp)
  804618:	dc400117 	ldw	r17,4(sp)
  80461c:	dc000017 	ldw	r16,0(sp)
  804620:	dec00604 	addi	sp,sp,24
  804624:	f800283a 	ret
  804628:	99400117 	ldw	r5,4(r19)
  80462c:	a009883a 	mov	r4,r20
  804630:	29400044 	addi	r5,r5,1
  804634:	0803e380 	call	803e38 <_Balloc>
  804638:	99800417 	ldw	r6,16(r19)
  80463c:	99400304 	addi	r5,r19,12
  804640:	11000304 	addi	r4,r2,12
  804644:	318d883a 	add	r6,r6,r6
  804648:	318d883a 	add	r6,r6,r6
  80464c:	31800204 	addi	r6,r6,8
  804650:	1023883a 	mov	r17,r2
  804654:	080281c0 	call	80281c <memcpy>
  804658:	980b883a 	mov	r5,r19
  80465c:	a009883a 	mov	r4,r20
  804660:	08038b80 	call	8038b8 <_Bfree>
  804664:	8827883a 	mov	r19,r17
  804668:	003fe006 	br	8045ec <__multadd+0x80>

0080466c <__pow5mult>:
  80466c:	defffa04 	addi	sp,sp,-24
  804670:	308000cc 	andi	r2,r6,3
  804674:	dd000415 	stw	r20,16(sp)
  804678:	dcc00315 	stw	r19,12(sp)
  80467c:	dc000015 	stw	r16,0(sp)
  804680:	dfc00515 	stw	ra,20(sp)
  804684:	dc800215 	stw	r18,8(sp)
  804688:	dc400115 	stw	r17,4(sp)
  80468c:	3021883a 	mov	r16,r6
  804690:	2027883a 	mov	r19,r4
  804694:	2829883a 	mov	r20,r5
  804698:	10002b1e 	bne	r2,zero,804748 <__pow5mult+0xdc>
  80469c:	8025d0ba 	srai	r18,r16,2
  8046a0:	90001b26 	beq	r18,zero,804710 <__pow5mult+0xa4>
  8046a4:	9c001217 	ldw	r16,72(r19)
  8046a8:	8000081e 	bne	r16,zero,8046cc <__pow5mult+0x60>
  8046ac:	00003006 	br	804770 <__pow5mult+0x104>
  8046b0:	800b883a 	mov	r5,r16
  8046b4:	800d883a 	mov	r6,r16
  8046b8:	9809883a 	mov	r4,r19
  8046bc:	90001426 	beq	r18,zero,804710 <__pow5mult+0xa4>
  8046c0:	80800017 	ldw	r2,0(r16)
  8046c4:	10001b26 	beq	r2,zero,804734 <__pow5mult+0xc8>
  8046c8:	1021883a 	mov	r16,r2
  8046cc:	9080004c 	andi	r2,r18,1
  8046d0:	1005003a 	cmpeq	r2,r2,zero
  8046d4:	9025d07a 	srai	r18,r18,1
  8046d8:	800d883a 	mov	r6,r16
  8046dc:	9809883a 	mov	r4,r19
  8046e0:	a00b883a 	mov	r5,r20
  8046e4:	103ff21e 	bne	r2,zero,8046b0 <__pow5mult+0x44>
  8046e8:	08043480 	call	804348 <__multiply>
  8046ec:	a00b883a 	mov	r5,r20
  8046f0:	9809883a 	mov	r4,r19
  8046f4:	1023883a 	mov	r17,r2
  8046f8:	08038b80 	call	8038b8 <_Bfree>
  8046fc:	8829883a 	mov	r20,r17
  804700:	800b883a 	mov	r5,r16
  804704:	800d883a 	mov	r6,r16
  804708:	9809883a 	mov	r4,r19
  80470c:	903fec1e 	bne	r18,zero,8046c0 <__pow5mult+0x54>
  804710:	a005883a 	mov	r2,r20
  804714:	dfc00517 	ldw	ra,20(sp)
  804718:	dd000417 	ldw	r20,16(sp)
  80471c:	dcc00317 	ldw	r19,12(sp)
  804720:	dc800217 	ldw	r18,8(sp)
  804724:	dc400117 	ldw	r17,4(sp)
  804728:	dc000017 	ldw	r16,0(sp)
  80472c:	dec00604 	addi	sp,sp,24
  804730:	f800283a 	ret
  804734:	08043480 	call	804348 <__multiply>
  804738:	80800015 	stw	r2,0(r16)
  80473c:	1021883a 	mov	r16,r2
  804740:	10000015 	stw	zero,0(r2)
  804744:	003fe106 	br	8046cc <__pow5mult+0x60>
  804748:	1085883a 	add	r2,r2,r2
  80474c:	00c02074 	movhi	r3,129
  804750:	18e8e104 	addi	r3,r3,-23676
  804754:	1085883a 	add	r2,r2,r2
  804758:	10c5883a 	add	r2,r2,r3
  80475c:	11bfff17 	ldw	r6,-4(r2)
  804760:	000f883a 	mov	r7,zero
  804764:	080456c0 	call	80456c <__multadd>
  804768:	1029883a 	mov	r20,r2
  80476c:	003fcb06 	br	80469c <__pow5mult+0x30>
  804770:	9809883a 	mov	r4,r19
  804774:	01409c44 	movi	r5,625
  804778:	08045300 	call	804530 <__i2b>
  80477c:	98801215 	stw	r2,72(r19)
  804780:	1021883a 	mov	r16,r2
  804784:	10000015 	stw	zero,0(r2)
  804788:	003fd006 	br	8046cc <__pow5mult+0x60>

0080478c <__s2b>:
  80478c:	defff904 	addi	sp,sp,-28
  804790:	dcc00315 	stw	r19,12(sp)
  804794:	dc800215 	stw	r18,8(sp)
  804798:	2827883a 	mov	r19,r5
  80479c:	2025883a 	mov	r18,r4
  8047a0:	01400244 	movi	r5,9
  8047a4:	39000204 	addi	r4,r7,8
  8047a8:	dd000415 	stw	r20,16(sp)
  8047ac:	dc400115 	stw	r17,4(sp)
  8047b0:	dfc00615 	stw	ra,24(sp)
  8047b4:	dd400515 	stw	r21,20(sp)
  8047b8:	dc000015 	stw	r16,0(sp)
  8047bc:	3829883a 	mov	r20,r7
  8047c0:	3023883a 	mov	r17,r6
  8047c4:	08072640 	call	807264 <__divsi3>
  8047c8:	00c00044 	movi	r3,1
  8047cc:	1880350e 	bge	r3,r2,8048a4 <__s2b+0x118>
  8047d0:	000b883a 	mov	r5,zero
  8047d4:	18c7883a 	add	r3,r3,r3
  8047d8:	29400044 	addi	r5,r5,1
  8047dc:	18bffd16 	blt	r3,r2,8047d4 <__s2b+0x48>
  8047e0:	9009883a 	mov	r4,r18
  8047e4:	0803e380 	call	803e38 <_Balloc>
  8047e8:	1011883a 	mov	r8,r2
  8047ec:	d8800717 	ldw	r2,28(sp)
  8047f0:	00c00044 	movi	r3,1
  8047f4:	01800244 	movi	r6,9
  8047f8:	40800515 	stw	r2,20(r8)
  8047fc:	40c00415 	stw	r3,16(r8)
  804800:	3440260e 	bge	r6,r17,80489c <__s2b+0x110>
  804804:	3021883a 	mov	r16,r6
  804808:	99ab883a 	add	r21,r19,r6
  80480c:	9c05883a 	add	r2,r19,r16
  804810:	11c00007 	ldb	r7,0(r2)
  804814:	400b883a 	mov	r5,r8
  804818:	9009883a 	mov	r4,r18
  80481c:	39fff404 	addi	r7,r7,-48
  804820:	01800284 	movi	r6,10
  804824:	080456c0 	call	80456c <__multadd>
  804828:	84000044 	addi	r16,r16,1
  80482c:	1011883a 	mov	r8,r2
  804830:	8c3ff61e 	bne	r17,r16,80480c <__s2b+0x80>
  804834:	ac45883a 	add	r2,r21,r17
  804838:	117ffe04 	addi	r5,r2,-8
  80483c:	880d883a 	mov	r6,r17
  804840:	35000c0e 	bge	r6,r20,804874 <__s2b+0xe8>
  804844:	a185c83a 	sub	r2,r20,r6
  804848:	2821883a 	mov	r16,r5
  80484c:	28a3883a 	add	r17,r5,r2
  804850:	81c00007 	ldb	r7,0(r16)
  804854:	400b883a 	mov	r5,r8
  804858:	9009883a 	mov	r4,r18
  80485c:	39fff404 	addi	r7,r7,-48
  804860:	01800284 	movi	r6,10
  804864:	080456c0 	call	80456c <__multadd>
  804868:	84000044 	addi	r16,r16,1
  80486c:	1011883a 	mov	r8,r2
  804870:	847ff71e 	bne	r16,r17,804850 <__s2b+0xc4>
  804874:	4005883a 	mov	r2,r8
  804878:	dfc00617 	ldw	ra,24(sp)
  80487c:	dd400517 	ldw	r21,20(sp)
  804880:	dd000417 	ldw	r20,16(sp)
  804884:	dcc00317 	ldw	r19,12(sp)
  804888:	dc800217 	ldw	r18,8(sp)
  80488c:	dc400117 	ldw	r17,4(sp)
  804890:	dc000017 	ldw	r16,0(sp)
  804894:	dec00704 	addi	sp,sp,28
  804898:	f800283a 	ret
  80489c:	99400284 	addi	r5,r19,10
  8048a0:	003fe706 	br	804840 <__s2b+0xb4>
  8048a4:	000b883a 	mov	r5,zero
  8048a8:	003fcd06 	br	8047e0 <__s2b+0x54>

008048ac <_realloc_r>:
  8048ac:	defff404 	addi	sp,sp,-48
  8048b0:	dd800815 	stw	r22,32(sp)
  8048b4:	dc800415 	stw	r18,16(sp)
  8048b8:	dc400315 	stw	r17,12(sp)
  8048bc:	dfc00b15 	stw	ra,44(sp)
  8048c0:	df000a15 	stw	fp,40(sp)
  8048c4:	ddc00915 	stw	r23,36(sp)
  8048c8:	dd400715 	stw	r21,28(sp)
  8048cc:	dd000615 	stw	r20,24(sp)
  8048d0:	dcc00515 	stw	r19,20(sp)
  8048d4:	dc000215 	stw	r16,8(sp)
  8048d8:	2825883a 	mov	r18,r5
  8048dc:	3023883a 	mov	r17,r6
  8048e0:	202d883a 	mov	r22,r4
  8048e4:	2800c926 	beq	r5,zero,804c0c <_realloc_r+0x360>
  8048e8:	08075000 	call	807500 <__malloc_lock>
  8048ec:	943ffe04 	addi	r16,r18,-8
  8048f0:	88c002c4 	addi	r3,r17,11
  8048f4:	00800584 	movi	r2,22
  8048f8:	82000117 	ldw	r8,4(r16)
  8048fc:	10c01b2e 	bgeu	r2,r3,80496c <_realloc_r+0xc0>
  804900:	00bffe04 	movi	r2,-8
  804904:	188e703a 	and	r7,r3,r2
  804908:	3839883a 	mov	fp,r7
  80490c:	38001a16 	blt	r7,zero,804978 <_realloc_r+0xcc>
  804910:	e4401936 	bltu	fp,r17,804978 <_realloc_r+0xcc>
  804914:	013fff04 	movi	r4,-4
  804918:	4126703a 	and	r19,r8,r4
  80491c:	99c02616 	blt	r19,r7,8049b8 <_realloc_r+0x10c>
  804920:	802b883a 	mov	r21,r16
  804924:	9829883a 	mov	r20,r19
  804928:	84000204 	addi	r16,r16,8
  80492c:	a80f883a 	mov	r7,r21
  804930:	a70dc83a 	sub	r6,r20,fp
  804934:	008003c4 	movi	r2,15
  804938:	1180c136 	bltu	r2,r6,804c40 <_realloc_r+0x394>
  80493c:	38800117 	ldw	r2,4(r7)
  804940:	a549883a 	add	r4,r20,r21
  804944:	1080004c 	andi	r2,r2,1
  804948:	a084b03a 	or	r2,r20,r2
  80494c:	38800115 	stw	r2,4(r7)
  804950:	20c00117 	ldw	r3,4(r4)
  804954:	18c00054 	ori	r3,r3,1
  804958:	20c00115 	stw	r3,4(r4)
  80495c:	b009883a 	mov	r4,r22
  804960:	08075040 	call	807504 <__malloc_unlock>
  804964:	8023883a 	mov	r17,r16
  804968:	00000606 	br	804984 <_realloc_r+0xd8>
  80496c:	01c00404 	movi	r7,16
  804970:	3839883a 	mov	fp,r7
  804974:	e47fe72e 	bgeu	fp,r17,804914 <_realloc_r+0x68>
  804978:	00800304 	movi	r2,12
  80497c:	0023883a 	mov	r17,zero
  804980:	b0800015 	stw	r2,0(r22)
  804984:	8805883a 	mov	r2,r17
  804988:	dfc00b17 	ldw	ra,44(sp)
  80498c:	df000a17 	ldw	fp,40(sp)
  804990:	ddc00917 	ldw	r23,36(sp)
  804994:	dd800817 	ldw	r22,32(sp)
  804998:	dd400717 	ldw	r21,28(sp)
  80499c:	dd000617 	ldw	r20,24(sp)
  8049a0:	dcc00517 	ldw	r19,20(sp)
  8049a4:	dc800417 	ldw	r18,16(sp)
  8049a8:	dc400317 	ldw	r17,12(sp)
  8049ac:	dc000217 	ldw	r16,8(sp)
  8049b0:	dec00c04 	addi	sp,sp,48
  8049b4:	f800283a 	ret
  8049b8:	00802074 	movhi	r2,129
  8049bc:	10a9f004 	addi	r2,r2,-22592
  8049c0:	12400217 	ldw	r9,8(r2)
  8049c4:	84cd883a 	add	r6,r16,r19
  8049c8:	802b883a 	mov	r21,r16
  8049cc:	3240b926 	beq	r6,r9,804cb4 <_realloc_r+0x408>
  8049d0:	31400117 	ldw	r5,4(r6)
  8049d4:	00bfff84 	movi	r2,-2
  8049d8:	2884703a 	and	r2,r5,r2
  8049dc:	1185883a 	add	r2,r2,r6
  8049e0:	10c00117 	ldw	r3,4(r2)
  8049e4:	18c0004c 	andi	r3,r3,1
  8049e8:	1807003a 	cmpeq	r3,r3,zero
  8049ec:	1800a326 	beq	r3,zero,804c7c <_realloc_r+0x3d0>
  8049f0:	2908703a 	and	r4,r5,r4
  8049f4:	9929883a 	add	r20,r19,r4
  8049f8:	a1c0a30e 	bge	r20,r7,804c88 <_realloc_r+0x3dc>
  8049fc:	4080004c 	andi	r2,r8,1
  804a00:	1000551e 	bne	r2,zero,804b58 <_realloc_r+0x2ac>
  804a04:	80800017 	ldw	r2,0(r16)
  804a08:	80afc83a 	sub	r23,r16,r2
  804a0c:	b8c00117 	ldw	r3,4(r23)
  804a10:	00bfff04 	movi	r2,-4
  804a14:	1884703a 	and	r2,r3,r2
  804a18:	30002e26 	beq	r6,zero,804ad4 <_realloc_r+0x228>
  804a1c:	3240b926 	beq	r6,r9,804d04 <_realloc_r+0x458>
  804a20:	98a9883a 	add	r20,r19,r2
  804a24:	2509883a 	add	r4,r4,r20
  804a28:	d9000015 	stw	r4,0(sp)
  804a2c:	21c02a16 	blt	r4,r7,804ad8 <_realloc_r+0x22c>
  804a30:	30800317 	ldw	r2,12(r6)
  804a34:	30c00217 	ldw	r3,8(r6)
  804a38:	01400904 	movi	r5,36
  804a3c:	99bfff04 	addi	r6,r19,-4
  804a40:	18800315 	stw	r2,12(r3)
  804a44:	10c00215 	stw	r3,8(r2)
  804a48:	b9000317 	ldw	r4,12(r23)
  804a4c:	b8800217 	ldw	r2,8(r23)
  804a50:	b82b883a 	mov	r21,r23
  804a54:	bc000204 	addi	r16,r23,8
  804a58:	20800215 	stw	r2,8(r4)
  804a5c:	11000315 	stw	r4,12(r2)
  804a60:	2980e436 	bltu	r5,r6,804df4 <_realloc_r+0x548>
  804a64:	008004c4 	movi	r2,19
  804a68:	9009883a 	mov	r4,r18
  804a6c:	8011883a 	mov	r8,r16
  804a70:	11800f2e 	bgeu	r2,r6,804ab0 <_realloc_r+0x204>
  804a74:	90800017 	ldw	r2,0(r18)
  804a78:	ba000404 	addi	r8,r23,16
  804a7c:	91000204 	addi	r4,r18,8
  804a80:	b8800215 	stw	r2,8(r23)
  804a84:	90c00117 	ldw	r3,4(r18)
  804a88:	008006c4 	movi	r2,27
  804a8c:	b8c00315 	stw	r3,12(r23)
  804a90:	1180072e 	bgeu	r2,r6,804ab0 <_realloc_r+0x204>
  804a94:	90c00217 	ldw	r3,8(r18)
  804a98:	ba000604 	addi	r8,r23,24
  804a9c:	91000404 	addi	r4,r18,16
  804aa0:	b8c00415 	stw	r3,16(r23)
  804aa4:	90800317 	ldw	r2,12(r18)
  804aa8:	b8800515 	stw	r2,20(r23)
  804aac:	3140e726 	beq	r6,r5,804e4c <_realloc_r+0x5a0>
  804ab0:	20800017 	ldw	r2,0(r4)
  804ab4:	dd000017 	ldw	r20,0(sp)
  804ab8:	b80f883a 	mov	r7,r23
  804abc:	40800015 	stw	r2,0(r8)
  804ac0:	20c00117 	ldw	r3,4(r4)
  804ac4:	40c00115 	stw	r3,4(r8)
  804ac8:	20800217 	ldw	r2,8(r4)
  804acc:	40800215 	stw	r2,8(r8)
  804ad0:	003f9706 	br	804930 <_realloc_r+0x84>
  804ad4:	98a9883a 	add	r20,r19,r2
  804ad8:	a1c01f16 	blt	r20,r7,804b58 <_realloc_r+0x2ac>
  804adc:	b8c00317 	ldw	r3,12(r23)
  804ae0:	b8800217 	ldw	r2,8(r23)
  804ae4:	99bfff04 	addi	r6,r19,-4
  804ae8:	01400904 	movi	r5,36
  804aec:	b82b883a 	mov	r21,r23
  804af0:	18800215 	stw	r2,8(r3)
  804af4:	10c00315 	stw	r3,12(r2)
  804af8:	bc000204 	addi	r16,r23,8
  804afc:	2980c336 	bltu	r5,r6,804e0c <_realloc_r+0x560>
  804b00:	008004c4 	movi	r2,19
  804b04:	9009883a 	mov	r4,r18
  804b08:	8011883a 	mov	r8,r16
  804b0c:	11800f2e 	bgeu	r2,r6,804b4c <_realloc_r+0x2a0>
  804b10:	90800017 	ldw	r2,0(r18)
  804b14:	ba000404 	addi	r8,r23,16
  804b18:	91000204 	addi	r4,r18,8
  804b1c:	b8800215 	stw	r2,8(r23)
  804b20:	90c00117 	ldw	r3,4(r18)
  804b24:	008006c4 	movi	r2,27
  804b28:	b8c00315 	stw	r3,12(r23)
  804b2c:	1180072e 	bgeu	r2,r6,804b4c <_realloc_r+0x2a0>
  804b30:	90c00217 	ldw	r3,8(r18)
  804b34:	ba000604 	addi	r8,r23,24
  804b38:	91000404 	addi	r4,r18,16
  804b3c:	b8c00415 	stw	r3,16(r23)
  804b40:	90800317 	ldw	r2,12(r18)
  804b44:	b8800515 	stw	r2,20(r23)
  804b48:	3140c726 	beq	r6,r5,804e68 <_realloc_r+0x5bc>
  804b4c:	20800017 	ldw	r2,0(r4)
  804b50:	b80f883a 	mov	r7,r23
  804b54:	003fd906 	br	804abc <_realloc_r+0x210>
  804b58:	880b883a 	mov	r5,r17
  804b5c:	b009883a 	mov	r4,r22
  804b60:	08020dc0 	call	8020dc <_malloc_r>
  804b64:	1023883a 	mov	r17,r2
  804b68:	10002526 	beq	r2,zero,804c00 <_realloc_r+0x354>
  804b6c:	80800117 	ldw	r2,4(r16)
  804b70:	00ffff84 	movi	r3,-2
  804b74:	893ffe04 	addi	r4,r17,-8
  804b78:	10c4703a 	and	r2,r2,r3
  804b7c:	8085883a 	add	r2,r16,r2
  804b80:	20809526 	beq	r4,r2,804dd8 <_realloc_r+0x52c>
  804b84:	99bfff04 	addi	r6,r19,-4
  804b88:	01c00904 	movi	r7,36
  804b8c:	39804536 	bltu	r7,r6,804ca4 <_realloc_r+0x3f8>
  804b90:	008004c4 	movi	r2,19
  804b94:	9009883a 	mov	r4,r18
  804b98:	880b883a 	mov	r5,r17
  804b9c:	11800f2e 	bgeu	r2,r6,804bdc <_realloc_r+0x330>
  804ba0:	90800017 	ldw	r2,0(r18)
  804ba4:	89400204 	addi	r5,r17,8
  804ba8:	91000204 	addi	r4,r18,8
  804bac:	88800015 	stw	r2,0(r17)
  804bb0:	90c00117 	ldw	r3,4(r18)
  804bb4:	008006c4 	movi	r2,27
  804bb8:	88c00115 	stw	r3,4(r17)
  804bbc:	1180072e 	bgeu	r2,r6,804bdc <_realloc_r+0x330>
  804bc0:	90c00217 	ldw	r3,8(r18)
  804bc4:	89400404 	addi	r5,r17,16
  804bc8:	91000404 	addi	r4,r18,16
  804bcc:	88c00215 	stw	r3,8(r17)
  804bd0:	90800317 	ldw	r2,12(r18)
  804bd4:	88800315 	stw	r2,12(r17)
  804bd8:	31c09126 	beq	r6,r7,804e20 <_realloc_r+0x574>
  804bdc:	20800017 	ldw	r2,0(r4)
  804be0:	28800015 	stw	r2,0(r5)
  804be4:	20c00117 	ldw	r3,4(r4)
  804be8:	28c00115 	stw	r3,4(r5)
  804bec:	20800217 	ldw	r2,8(r4)
  804bf0:	28800215 	stw	r2,8(r5)
  804bf4:	900b883a 	mov	r5,r18
  804bf8:	b009883a 	mov	r4,r22
  804bfc:	08035a40 	call	8035a4 <_free_r>
  804c00:	b009883a 	mov	r4,r22
  804c04:	08075040 	call	807504 <__malloc_unlock>
  804c08:	003f5e06 	br	804984 <_realloc_r+0xd8>
  804c0c:	300b883a 	mov	r5,r6
  804c10:	dfc00b17 	ldw	ra,44(sp)
  804c14:	df000a17 	ldw	fp,40(sp)
  804c18:	ddc00917 	ldw	r23,36(sp)
  804c1c:	dd800817 	ldw	r22,32(sp)
  804c20:	dd400717 	ldw	r21,28(sp)
  804c24:	dd000617 	ldw	r20,24(sp)
  804c28:	dcc00517 	ldw	r19,20(sp)
  804c2c:	dc800417 	ldw	r18,16(sp)
  804c30:	dc400317 	ldw	r17,12(sp)
  804c34:	dc000217 	ldw	r16,8(sp)
  804c38:	dec00c04 	addi	sp,sp,48
  804c3c:	08020dc1 	jmpi	8020dc <_malloc_r>
  804c40:	38800117 	ldw	r2,4(r7)
  804c44:	e54b883a 	add	r5,fp,r21
  804c48:	31000054 	ori	r4,r6,1
  804c4c:	1080004c 	andi	r2,r2,1
  804c50:	1704b03a 	or	r2,r2,fp
  804c54:	38800115 	stw	r2,4(r7)
  804c58:	29000115 	stw	r4,4(r5)
  804c5c:	2987883a 	add	r3,r5,r6
  804c60:	18800117 	ldw	r2,4(r3)
  804c64:	29400204 	addi	r5,r5,8
  804c68:	b009883a 	mov	r4,r22
  804c6c:	10800054 	ori	r2,r2,1
  804c70:	18800115 	stw	r2,4(r3)
  804c74:	08035a40 	call	8035a4 <_free_r>
  804c78:	003f3806 	br	80495c <_realloc_r+0xb0>
  804c7c:	000d883a 	mov	r6,zero
  804c80:	0009883a 	mov	r4,zero
  804c84:	003f5d06 	br	8049fc <_realloc_r+0x150>
  804c88:	30c00217 	ldw	r3,8(r6)
  804c8c:	30800317 	ldw	r2,12(r6)
  804c90:	800f883a 	mov	r7,r16
  804c94:	84000204 	addi	r16,r16,8
  804c98:	10c00215 	stw	r3,8(r2)
  804c9c:	18800315 	stw	r2,12(r3)
  804ca0:	003f2306 	br	804930 <_realloc_r+0x84>
  804ca4:	8809883a 	mov	r4,r17
  804ca8:	900b883a 	mov	r5,r18
  804cac:	08067ac0 	call	8067ac <memmove>
  804cb0:	003fd006 	br	804bf4 <_realloc_r+0x348>
  804cb4:	30800117 	ldw	r2,4(r6)
  804cb8:	e0c00404 	addi	r3,fp,16
  804cbc:	1108703a 	and	r4,r2,r4
  804cc0:	9905883a 	add	r2,r19,r4
  804cc4:	10ff4d16 	blt	r2,r3,8049fc <_realloc_r+0x150>
  804cc8:	1705c83a 	sub	r2,r2,fp
  804ccc:	870b883a 	add	r5,r16,fp
  804cd0:	10800054 	ori	r2,r2,1
  804cd4:	28800115 	stw	r2,4(r5)
  804cd8:	80c00117 	ldw	r3,4(r16)
  804cdc:	00802074 	movhi	r2,129
  804ce0:	10a9f004 	addi	r2,r2,-22592
  804ce4:	b009883a 	mov	r4,r22
  804ce8:	18c0004c 	andi	r3,r3,1
  804cec:	e0c6b03a 	or	r3,fp,r3
  804cf0:	11400215 	stw	r5,8(r2)
  804cf4:	80c00115 	stw	r3,4(r16)
  804cf8:	08075040 	call	807504 <__malloc_unlock>
  804cfc:	84400204 	addi	r17,r16,8
  804d00:	003f2006 	br	804984 <_realloc_r+0xd8>
  804d04:	98a9883a 	add	r20,r19,r2
  804d08:	2509883a 	add	r4,r4,r20
  804d0c:	e0800404 	addi	r2,fp,16
  804d10:	d9000115 	stw	r4,4(sp)
  804d14:	20bf7016 	blt	r4,r2,804ad8 <_realloc_r+0x22c>
  804d18:	b8c00317 	ldw	r3,12(r23)
  804d1c:	b8800217 	ldw	r2,8(r23)
  804d20:	99bfff04 	addi	r6,r19,-4
  804d24:	01400904 	movi	r5,36
  804d28:	18800215 	stw	r2,8(r3)
  804d2c:	10c00315 	stw	r3,12(r2)
  804d30:	bc400204 	addi	r17,r23,8
  804d34:	29804136 	bltu	r5,r6,804e3c <_realloc_r+0x590>
  804d38:	008004c4 	movi	r2,19
  804d3c:	9009883a 	mov	r4,r18
  804d40:	880f883a 	mov	r7,r17
  804d44:	11800f2e 	bgeu	r2,r6,804d84 <_realloc_r+0x4d8>
  804d48:	90800017 	ldw	r2,0(r18)
  804d4c:	b9c00404 	addi	r7,r23,16
  804d50:	91000204 	addi	r4,r18,8
  804d54:	b8800215 	stw	r2,8(r23)
  804d58:	90c00117 	ldw	r3,4(r18)
  804d5c:	008006c4 	movi	r2,27
  804d60:	b8c00315 	stw	r3,12(r23)
  804d64:	1180072e 	bgeu	r2,r6,804d84 <_realloc_r+0x4d8>
  804d68:	90c00217 	ldw	r3,8(r18)
  804d6c:	b9c00604 	addi	r7,r23,24
  804d70:	91000404 	addi	r4,r18,16
  804d74:	b8c00415 	stw	r3,16(r23)
  804d78:	90800317 	ldw	r2,12(r18)
  804d7c:	b8800515 	stw	r2,20(r23)
  804d80:	31404026 	beq	r6,r5,804e84 <_realloc_r+0x5d8>
  804d84:	20800017 	ldw	r2,0(r4)
  804d88:	38800015 	stw	r2,0(r7)
  804d8c:	20c00117 	ldw	r3,4(r4)
  804d90:	38c00115 	stw	r3,4(r7)
  804d94:	20800217 	ldw	r2,8(r4)
  804d98:	38800215 	stw	r2,8(r7)
  804d9c:	d8c00117 	ldw	r3,4(sp)
  804da0:	bf0b883a 	add	r5,r23,fp
  804da4:	b009883a 	mov	r4,r22
  804da8:	1f05c83a 	sub	r2,r3,fp
  804dac:	10800054 	ori	r2,r2,1
  804db0:	28800115 	stw	r2,4(r5)
  804db4:	b8c00117 	ldw	r3,4(r23)
  804db8:	00802074 	movhi	r2,129
  804dbc:	10a9f004 	addi	r2,r2,-22592
  804dc0:	11400215 	stw	r5,8(r2)
  804dc4:	18c0004c 	andi	r3,r3,1
  804dc8:	e0c6b03a 	or	r3,fp,r3
  804dcc:	b8c00115 	stw	r3,4(r23)
  804dd0:	08075040 	call	807504 <__malloc_unlock>
  804dd4:	003eeb06 	br	804984 <_realloc_r+0xd8>
  804dd8:	20800117 	ldw	r2,4(r4)
  804ddc:	00ffff04 	movi	r3,-4
  804de0:	800f883a 	mov	r7,r16
  804de4:	10c4703a 	and	r2,r2,r3
  804de8:	98a9883a 	add	r20,r19,r2
  804dec:	84000204 	addi	r16,r16,8
  804df0:	003ecf06 	br	804930 <_realloc_r+0x84>
  804df4:	900b883a 	mov	r5,r18
  804df8:	8009883a 	mov	r4,r16
  804dfc:	08067ac0 	call	8067ac <memmove>
  804e00:	dd000017 	ldw	r20,0(sp)
  804e04:	b80f883a 	mov	r7,r23
  804e08:	003ec906 	br	804930 <_realloc_r+0x84>
  804e0c:	900b883a 	mov	r5,r18
  804e10:	8009883a 	mov	r4,r16
  804e14:	08067ac0 	call	8067ac <memmove>
  804e18:	b80f883a 	mov	r7,r23
  804e1c:	003ec406 	br	804930 <_realloc_r+0x84>
  804e20:	90c00417 	ldw	r3,16(r18)
  804e24:	89400604 	addi	r5,r17,24
  804e28:	91000604 	addi	r4,r18,24
  804e2c:	88c00415 	stw	r3,16(r17)
  804e30:	90800517 	ldw	r2,20(r18)
  804e34:	88800515 	stw	r2,20(r17)
  804e38:	003f6806 	br	804bdc <_realloc_r+0x330>
  804e3c:	900b883a 	mov	r5,r18
  804e40:	8809883a 	mov	r4,r17
  804e44:	08067ac0 	call	8067ac <memmove>
  804e48:	003fd406 	br	804d9c <_realloc_r+0x4f0>
  804e4c:	90c00417 	ldw	r3,16(r18)
  804e50:	91000604 	addi	r4,r18,24
  804e54:	ba000804 	addi	r8,r23,32
  804e58:	b8c00615 	stw	r3,24(r23)
  804e5c:	90800517 	ldw	r2,20(r18)
  804e60:	b8800715 	stw	r2,28(r23)
  804e64:	003f1206 	br	804ab0 <_realloc_r+0x204>
  804e68:	90c00417 	ldw	r3,16(r18)
  804e6c:	91000604 	addi	r4,r18,24
  804e70:	ba000804 	addi	r8,r23,32
  804e74:	b8c00615 	stw	r3,24(r23)
  804e78:	90800517 	ldw	r2,20(r18)
  804e7c:	b8800715 	stw	r2,28(r23)
  804e80:	003f3206 	br	804b4c <_realloc_r+0x2a0>
  804e84:	90c00417 	ldw	r3,16(r18)
  804e88:	91000604 	addi	r4,r18,24
  804e8c:	b9c00804 	addi	r7,r23,32
  804e90:	b8c00615 	stw	r3,24(r23)
  804e94:	90800517 	ldw	r2,20(r18)
  804e98:	b8800715 	stw	r2,28(r23)
  804e9c:	003fb906 	br	804d84 <_realloc_r+0x4d8>

00804ea0 <strcpy>:
  804ea0:	2904b03a 	or	r2,r5,r4
  804ea4:	108000cc 	andi	r2,r2,3
  804ea8:	10000826 	beq	r2,zero,804ecc <strcpy+0x2c>
  804eac:	2007883a 	mov	r3,r4
  804eb0:	28800003 	ldbu	r2,0(r5)
  804eb4:	29400044 	addi	r5,r5,1
  804eb8:	18800005 	stb	r2,0(r3)
  804ebc:	18c00044 	addi	r3,r3,1
  804ec0:	103ffb1e 	bne	r2,zero,804eb0 <strcpy+0x10>
  804ec4:	2005883a 	mov	r2,r4
  804ec8:	f800283a 	ret
  804ecc:	29800017 	ldw	r6,0(r5)
  804ed0:	023fbff4 	movhi	r8,65279
  804ed4:	423fbfc4 	addi	r8,r8,-257
  804ed8:	02a02074 	movhi	r10,32897
  804edc:	52a02004 	addi	r10,r10,-32640
  804ee0:	3205883a 	add	r2,r6,r8
  804ee4:	0186303a 	nor	r3,zero,r6
  804ee8:	10c4703a 	and	r2,r2,r3
  804eec:	1284703a 	and	r2,r2,r10
  804ef0:	200f883a 	mov	r7,r4
  804ef4:	10000b1e 	bne	r2,zero,804f24 <strcpy+0x84>
  804ef8:	4013883a 	mov	r9,r8
  804efc:	5011883a 	mov	r8,r10
  804f00:	39800015 	stw	r6,0(r7)
  804f04:	29400104 	addi	r5,r5,4
  804f08:	29800017 	ldw	r6,0(r5)
  804f0c:	39c00104 	addi	r7,r7,4
  804f10:	3245883a 	add	r2,r6,r9
  804f14:	0186303a 	nor	r3,zero,r6
  804f18:	10c4703a 	and	r2,r2,r3
  804f1c:	1204703a 	and	r2,r2,r8
  804f20:	103ff726 	beq	r2,zero,804f00 <strcpy+0x60>
  804f24:	3807883a 	mov	r3,r7
  804f28:	003fe106 	br	804eb0 <strcpy+0x10>

00804f2c <_calloc_r>:
  804f2c:	298b383a 	mul	r5,r5,r6
  804f30:	defffe04 	addi	sp,sp,-8
  804f34:	dc000015 	stw	r16,0(sp)
  804f38:	dfc00115 	stw	ra,4(sp)
  804f3c:	08020dc0 	call	8020dc <_malloc_r>
  804f40:	1021883a 	mov	r16,r2
  804f44:	01c00904 	movi	r7,36
  804f48:	10000d26 	beq	r2,zero,804f80 <_calloc_r+0x54>
  804f4c:	10ffff17 	ldw	r3,-4(r2)
  804f50:	1009883a 	mov	r4,r2
  804f54:	00bfff04 	movi	r2,-4
  804f58:	1886703a 	and	r3,r3,r2
  804f5c:	1887883a 	add	r3,r3,r2
  804f60:	180d883a 	mov	r6,r3
  804f64:	000b883a 	mov	r5,zero
  804f68:	38c01736 	bltu	r7,r3,804fc8 <_calloc_r+0x9c>
  804f6c:	008004c4 	movi	r2,19
  804f70:	10c00836 	bltu	r2,r3,804f94 <_calloc_r+0x68>
  804f74:	20000215 	stw	zero,8(r4)
  804f78:	20000015 	stw	zero,0(r4)
  804f7c:	20000115 	stw	zero,4(r4)
  804f80:	8005883a 	mov	r2,r16
  804f84:	dfc00117 	ldw	ra,4(sp)
  804f88:	dc000017 	ldw	r16,0(sp)
  804f8c:	dec00204 	addi	sp,sp,8
  804f90:	f800283a 	ret
  804f94:	008006c4 	movi	r2,27
  804f98:	80000015 	stw	zero,0(r16)
  804f9c:	80000115 	stw	zero,4(r16)
  804fa0:	81000204 	addi	r4,r16,8
  804fa4:	10fff32e 	bgeu	r2,r3,804f74 <_calloc_r+0x48>
  804fa8:	80000215 	stw	zero,8(r16)
  804fac:	80000315 	stw	zero,12(r16)
  804fb0:	81000404 	addi	r4,r16,16
  804fb4:	19ffef1e 	bne	r3,r7,804f74 <_calloc_r+0x48>
  804fb8:	81000604 	addi	r4,r16,24
  804fbc:	80000415 	stw	zero,16(r16)
  804fc0:	80000515 	stw	zero,20(r16)
  804fc4:	003feb06 	br	804f74 <_calloc_r+0x48>
  804fc8:	080688c0 	call	80688c <memset>
  804fcc:	8005883a 	mov	r2,r16
  804fd0:	dfc00117 	ldw	ra,4(sp)
  804fd4:	dc000017 	ldw	r16,0(sp)
  804fd8:	dec00204 	addi	sp,sp,8
  804fdc:	f800283a 	ret

00804fe0 <quorem>:
  804fe0:	28c00417 	ldw	r3,16(r5)
  804fe4:	20800417 	ldw	r2,16(r4)
  804fe8:	defff604 	addi	sp,sp,-40
  804fec:	ddc00715 	stw	r23,28(sp)
  804ff0:	dd400515 	stw	r21,20(sp)
  804ff4:	dfc00915 	stw	ra,36(sp)
  804ff8:	df000815 	stw	fp,32(sp)
  804ffc:	dd800615 	stw	r22,24(sp)
  805000:	dd000415 	stw	r20,16(sp)
  805004:	dcc00315 	stw	r19,12(sp)
  805008:	dc800215 	stw	r18,8(sp)
  80500c:	dc400115 	stw	r17,4(sp)
  805010:	dc000015 	stw	r16,0(sp)
  805014:	202f883a 	mov	r23,r4
  805018:	282b883a 	mov	r21,r5
  80501c:	10c07416 	blt	r2,r3,8051f0 <quorem+0x210>
  805020:	1c7fffc4 	addi	r17,r3,-1
  805024:	8c45883a 	add	r2,r17,r17
  805028:	1085883a 	add	r2,r2,r2
  80502c:	2c000504 	addi	r16,r5,20
  805030:	24c00504 	addi	r19,r4,20
  805034:	14ed883a 	add	r22,r2,r19
  805038:	80a5883a 	add	r18,r16,r2
  80503c:	b7000017 	ldw	fp,0(r22)
  805040:	91400017 	ldw	r5,0(r18)
  805044:	e009883a 	mov	r4,fp
  805048:	29400044 	addi	r5,r5,1
  80504c:	08073240 	call	807324 <__udivsi3>
  805050:	1029883a 	mov	r20,r2
  805054:	10003c1e 	bne	r2,zero,805148 <quorem+0x168>
  805058:	a80b883a 	mov	r5,r21
  80505c:	b809883a 	mov	r4,r23
  805060:	0803a140 	call	803a14 <__mcmp>
  805064:	10002b16 	blt	r2,zero,805114 <quorem+0x134>
  805068:	a5000044 	addi	r20,r20,1
  80506c:	980f883a 	mov	r7,r19
  805070:	0011883a 	mov	r8,zero
  805074:	0009883a 	mov	r4,zero
  805078:	81400017 	ldw	r5,0(r16)
  80507c:	38c00017 	ldw	r3,0(r7)
  805080:	84000104 	addi	r16,r16,4
  805084:	28bfffcc 	andi	r2,r5,65535
  805088:	2085883a 	add	r2,r4,r2
  80508c:	11bfffcc 	andi	r6,r2,65535
  805090:	193fffcc 	andi	r4,r3,65535
  805094:	1004d43a 	srli	r2,r2,16
  805098:	280ad43a 	srli	r5,r5,16
  80509c:	2189c83a 	sub	r4,r4,r6
  8050a0:	2209883a 	add	r4,r4,r8
  8050a4:	1806d43a 	srli	r3,r3,16
  8050a8:	288b883a 	add	r5,r5,r2
  8050ac:	200dd43a 	srai	r6,r4,16
  8050b0:	28bfffcc 	andi	r2,r5,65535
  8050b4:	1887c83a 	sub	r3,r3,r2
  8050b8:	1987883a 	add	r3,r3,r6
  8050bc:	3900000d 	sth	r4,0(r7)
  8050c0:	38c0008d 	sth	r3,2(r7)
  8050c4:	2808d43a 	srli	r4,r5,16
  8050c8:	39c00104 	addi	r7,r7,4
  8050cc:	1811d43a 	srai	r8,r3,16
  8050d0:	943fe92e 	bgeu	r18,r16,805078 <quorem+0x98>
  8050d4:	8c45883a 	add	r2,r17,r17
  8050d8:	1085883a 	add	r2,r2,r2
  8050dc:	9885883a 	add	r2,r19,r2
  8050e0:	10c00017 	ldw	r3,0(r2)
  8050e4:	18000b1e 	bne	r3,zero,805114 <quorem+0x134>
  8050e8:	113fff04 	addi	r4,r2,-4
  8050ec:	9900082e 	bgeu	r19,r4,805110 <quorem+0x130>
  8050f0:	10bfff17 	ldw	r2,-4(r2)
  8050f4:	10000326 	beq	r2,zero,805104 <quorem+0x124>
  8050f8:	00000506 	br	805110 <quorem+0x130>
  8050fc:	20800017 	ldw	r2,0(r4)
  805100:	1000031e 	bne	r2,zero,805110 <quorem+0x130>
  805104:	213fff04 	addi	r4,r4,-4
  805108:	8c7fffc4 	addi	r17,r17,-1
  80510c:	993ffb36 	bltu	r19,r4,8050fc <quorem+0x11c>
  805110:	bc400415 	stw	r17,16(r23)
  805114:	a005883a 	mov	r2,r20
  805118:	dfc00917 	ldw	ra,36(sp)
  80511c:	df000817 	ldw	fp,32(sp)
  805120:	ddc00717 	ldw	r23,28(sp)
  805124:	dd800617 	ldw	r22,24(sp)
  805128:	dd400517 	ldw	r21,20(sp)
  80512c:	dd000417 	ldw	r20,16(sp)
  805130:	dcc00317 	ldw	r19,12(sp)
  805134:	dc800217 	ldw	r18,8(sp)
  805138:	dc400117 	ldw	r17,4(sp)
  80513c:	dc000017 	ldw	r16,0(sp)
  805140:	dec00a04 	addi	sp,sp,40
  805144:	f800283a 	ret
  805148:	980f883a 	mov	r7,r19
  80514c:	8011883a 	mov	r8,r16
  805150:	0013883a 	mov	r9,zero
  805154:	000d883a 	mov	r6,zero
  805158:	40c00017 	ldw	r3,0(r8)
  80515c:	39000017 	ldw	r4,0(r7)
  805160:	42000104 	addi	r8,r8,4
  805164:	18bfffcc 	andi	r2,r3,65535
  805168:	a085383a 	mul	r2,r20,r2
  80516c:	1806d43a 	srli	r3,r3,16
  805170:	217fffcc 	andi	r5,r4,65535
  805174:	3085883a 	add	r2,r6,r2
  805178:	11bfffcc 	andi	r6,r2,65535
  80517c:	a0c7383a 	mul	r3,r20,r3
  805180:	1004d43a 	srli	r2,r2,16
  805184:	298bc83a 	sub	r5,r5,r6
  805188:	2a4b883a 	add	r5,r5,r9
  80518c:	2008d43a 	srli	r4,r4,16
  805190:	1887883a 	add	r3,r3,r2
  805194:	280dd43a 	srai	r6,r5,16
  805198:	18bfffcc 	andi	r2,r3,65535
  80519c:	2089c83a 	sub	r4,r4,r2
  8051a0:	2189883a 	add	r4,r4,r6
  8051a4:	3900008d 	sth	r4,2(r7)
  8051a8:	3940000d 	sth	r5,0(r7)
  8051ac:	180cd43a 	srli	r6,r3,16
  8051b0:	39c00104 	addi	r7,r7,4
  8051b4:	2013d43a 	srai	r9,r4,16
  8051b8:	923fe72e 	bgeu	r18,r8,805158 <quorem+0x178>
  8051bc:	e03fa61e 	bne	fp,zero,805058 <quorem+0x78>
  8051c0:	b0ffff04 	addi	r3,r22,-4
  8051c4:	98c0082e 	bgeu	r19,r3,8051e8 <quorem+0x208>
  8051c8:	b0bfff17 	ldw	r2,-4(r22)
  8051cc:	10000326 	beq	r2,zero,8051dc <quorem+0x1fc>
  8051d0:	00000506 	br	8051e8 <quorem+0x208>
  8051d4:	18800017 	ldw	r2,0(r3)
  8051d8:	1000031e 	bne	r2,zero,8051e8 <quorem+0x208>
  8051dc:	18ffff04 	addi	r3,r3,-4
  8051e0:	8c7fffc4 	addi	r17,r17,-1
  8051e4:	98fffb36 	bltu	r19,r3,8051d4 <quorem+0x1f4>
  8051e8:	bc400415 	stw	r17,16(r23)
  8051ec:	003f9a06 	br	805058 <quorem+0x78>
  8051f0:	0005883a 	mov	r2,zero
  8051f4:	003fc806 	br	805118 <quorem+0x138>

008051f8 <_dtoa_r>:
  8051f8:	22001017 	ldw	r8,64(r4)
  8051fc:	deffda04 	addi	sp,sp,-152
  805200:	dd402115 	stw	r21,132(sp)
  805204:	dd002015 	stw	r20,128(sp)
  805208:	dc801e15 	stw	r18,120(sp)
  80520c:	dc401d15 	stw	r17,116(sp)
  805210:	dfc02515 	stw	ra,148(sp)
  805214:	df002415 	stw	fp,144(sp)
  805218:	ddc02315 	stw	r23,140(sp)
  80521c:	dd802215 	stw	r22,136(sp)
  805220:	dcc01f15 	stw	r19,124(sp)
  805224:	dc001c15 	stw	r16,112(sp)
  805228:	d9001615 	stw	r4,88(sp)
  80522c:	3023883a 	mov	r17,r6
  805230:	2829883a 	mov	r20,r5
  805234:	d9c01715 	stw	r7,92(sp)
  805238:	dc802817 	ldw	r18,160(sp)
  80523c:	302b883a 	mov	r21,r6
  805240:	40000a26 	beq	r8,zero,80526c <_dtoa_r+0x74>
  805244:	20801117 	ldw	r2,68(r4)
  805248:	400b883a 	mov	r5,r8
  80524c:	40800115 	stw	r2,4(r8)
  805250:	20c01117 	ldw	r3,68(r4)
  805254:	00800044 	movi	r2,1
  805258:	10c4983a 	sll	r2,r2,r3
  80525c:	40800215 	stw	r2,8(r8)
  805260:	08038b80 	call	8038b8 <_Bfree>
  805264:	d8c01617 	ldw	r3,88(sp)
  805268:	18001015 	stw	zero,64(r3)
  80526c:	8800a316 	blt	r17,zero,8054fc <_dtoa_r+0x304>
  805270:	90000015 	stw	zero,0(r18)
  805274:	a8dffc2c 	andhi	r3,r21,32752
  805278:	009ffc34 	movhi	r2,32752
  80527c:	18809126 	beq	r3,r2,8054c4 <_dtoa_r+0x2cc>
  805280:	000d883a 	mov	r6,zero
  805284:	000f883a 	mov	r7,zero
  805288:	a009883a 	mov	r4,r20
  80528c:	a80b883a 	mov	r5,r21
  805290:	dd001215 	stw	r20,72(sp)
  805294:	dd401315 	stw	r21,76(sp)
  805298:	0806d700 	call	806d70 <__nedf2>
  80529c:	1000171e 	bne	r2,zero,8052fc <_dtoa_r+0x104>
  8052a0:	d9802717 	ldw	r6,156(sp)
  8052a4:	00800044 	movi	r2,1
  8052a8:	30800015 	stw	r2,0(r6)
  8052ac:	d8802917 	ldw	r2,164(sp)
  8052b0:	10029b26 	beq	r2,zero,805d20 <_dtoa_r+0xb28>
  8052b4:	d9002917 	ldw	r4,164(sp)
  8052b8:	00802074 	movhi	r2,129
  8052bc:	10a8e844 	addi	r2,r2,-23647
  8052c0:	10ffffc4 	addi	r3,r2,-1
  8052c4:	20800015 	stw	r2,0(r4)
  8052c8:	1805883a 	mov	r2,r3
  8052cc:	dfc02517 	ldw	ra,148(sp)
  8052d0:	df002417 	ldw	fp,144(sp)
  8052d4:	ddc02317 	ldw	r23,140(sp)
  8052d8:	dd802217 	ldw	r22,136(sp)
  8052dc:	dd402117 	ldw	r21,132(sp)
  8052e0:	dd002017 	ldw	r20,128(sp)
  8052e4:	dcc01f17 	ldw	r19,124(sp)
  8052e8:	dc801e17 	ldw	r18,120(sp)
  8052ec:	dc401d17 	ldw	r17,116(sp)
  8052f0:	dc001c17 	ldw	r16,112(sp)
  8052f4:	dec02604 	addi	sp,sp,152
  8052f8:	f800283a 	ret
  8052fc:	d9001617 	ldw	r4,88(sp)
  805300:	d9401217 	ldw	r5,72(sp)
  805304:	d8800104 	addi	r2,sp,4
  805308:	a80d883a 	mov	r6,r21
  80530c:	d9c00204 	addi	r7,sp,8
  805310:	d8800015 	stw	r2,0(sp)
  805314:	0803ef40 	call	803ef4 <__d2b>
  805318:	d8800715 	stw	r2,28(sp)
  80531c:	a804d53a 	srli	r2,r21,20
  805320:	1101ffcc 	andi	r4,r2,2047
  805324:	20008626 	beq	r4,zero,805540 <_dtoa_r+0x348>
  805328:	d8c01217 	ldw	r3,72(sp)
  80532c:	00800434 	movhi	r2,16
  805330:	10bfffc4 	addi	r2,r2,-1
  805334:	ddc00117 	ldw	r23,4(sp)
  805338:	a884703a 	and	r2,r21,r2
  80533c:	1811883a 	mov	r8,r3
  805340:	124ffc34 	orhi	r9,r2,16368
  805344:	25bf0044 	addi	r22,r4,-1023
  805348:	d8000815 	stw	zero,32(sp)
  80534c:	0005883a 	mov	r2,zero
  805350:	00cffe34 	movhi	r3,16376
  805354:	480b883a 	mov	r5,r9
  805358:	4009883a 	mov	r4,r8
  80535c:	180f883a 	mov	r7,r3
  805360:	100d883a 	mov	r6,r2
  805364:	08012140 	call	801214 <__subdf3>
  805368:	0218dbf4 	movhi	r8,25455
  80536c:	4210d844 	addi	r8,r8,17249
  805370:	024ff4f4 	movhi	r9,16339
  805374:	4a61e9c4 	addi	r9,r9,-30809
  805378:	480f883a 	mov	r7,r9
  80537c:	400d883a 	mov	r6,r8
  805380:	180b883a 	mov	r5,r3
  805384:	1009883a 	mov	r4,r2
  805388:	08069240 	call	806924 <__muldf3>
  80538c:	0222d874 	movhi	r8,35681
  805390:	42322cc4 	addi	r8,r8,-14157
  805394:	024ff1f4 	movhi	r9,16327
  805398:	4a628a04 	addi	r9,r9,-30168
  80539c:	480f883a 	mov	r7,r9
  8053a0:	400d883a 	mov	r6,r8
  8053a4:	180b883a 	mov	r5,r3
  8053a8:	1009883a 	mov	r4,r2
  8053ac:	08012940 	call	801294 <__adddf3>
  8053b0:	b009883a 	mov	r4,r22
  8053b4:	1021883a 	mov	r16,r2
  8053b8:	1823883a 	mov	r17,r3
  8053bc:	08070180 	call	807018 <__floatsidf>
  8053c0:	021427f4 	movhi	r8,20639
  8053c4:	421e7ec4 	addi	r8,r8,31227
  8053c8:	024ff4f4 	movhi	r9,16339
  8053cc:	4a5104c4 	addi	r9,r9,17427
  8053d0:	480f883a 	mov	r7,r9
  8053d4:	400d883a 	mov	r6,r8
  8053d8:	180b883a 	mov	r5,r3
  8053dc:	1009883a 	mov	r4,r2
  8053e0:	08069240 	call	806924 <__muldf3>
  8053e4:	180f883a 	mov	r7,r3
  8053e8:	880b883a 	mov	r5,r17
  8053ec:	100d883a 	mov	r6,r2
  8053f0:	8009883a 	mov	r4,r16
  8053f4:	08012940 	call	801294 <__adddf3>
  8053f8:	1009883a 	mov	r4,r2
  8053fc:	180b883a 	mov	r5,r3
  805400:	1021883a 	mov	r16,r2
  805404:	1823883a 	mov	r17,r3
  805408:	08071100 	call	807110 <__fixdfsi>
  80540c:	000d883a 	mov	r6,zero
  805410:	000f883a 	mov	r7,zero
  805414:	8009883a 	mov	r4,r16
  805418:	880b883a 	mov	r5,r17
  80541c:	d8800d15 	stw	r2,52(sp)
  805420:	0806f080 	call	806f08 <__ltdf2>
  805424:	10031716 	blt	r2,zero,806084 <_dtoa_r+0xe8c>
  805428:	d8c00d17 	ldw	r3,52(sp)
  80542c:	00800584 	movi	r2,22
  805430:	10c1482e 	bgeu	r2,r3,805954 <_dtoa_r+0x75c>
  805434:	01000044 	movi	r4,1
  805438:	d9000c15 	stw	r4,48(sp)
  80543c:	bd85c83a 	sub	r2,r23,r22
  805440:	11bfffc4 	addi	r6,r2,-1
  805444:	30030b16 	blt	r6,zero,806074 <_dtoa_r+0xe7c>
  805448:	d9800a15 	stw	r6,40(sp)
  80544c:	d8001115 	stw	zero,68(sp)
  805450:	d8c00d17 	ldw	r3,52(sp)
  805454:	1802ff16 	blt	r3,zero,806054 <_dtoa_r+0xe5c>
  805458:	d9000a17 	ldw	r4,40(sp)
  80545c:	d8c00915 	stw	r3,36(sp)
  805460:	d8001015 	stw	zero,64(sp)
  805464:	20c9883a 	add	r4,r4,r3
  805468:	d9000a15 	stw	r4,40(sp)
  80546c:	d9001717 	ldw	r4,92(sp)
  805470:	00800244 	movi	r2,9
  805474:	11004636 	bltu	r2,r4,805590 <_dtoa_r+0x398>
  805478:	00800144 	movi	r2,5
  80547c:	11020416 	blt	r2,r4,805c90 <_dtoa_r+0xa98>
  805480:	04400044 	movi	r17,1
  805484:	d8c01717 	ldw	r3,92(sp)
  805488:	00800144 	movi	r2,5
  80548c:	10c1ed36 	bltu	r2,r3,805c44 <_dtoa_r+0xa4c>
  805490:	18c5883a 	add	r2,r3,r3
  805494:	1085883a 	add	r2,r2,r2
  805498:	00c02034 	movhi	r3,128
  80549c:	18d52b04 	addi	r3,r3,21676
  8054a0:	10c5883a 	add	r2,r2,r3
  8054a4:	11000017 	ldw	r4,0(r2)
  8054a8:	2000683a 	jmp	r4
  8054ac:	00805598 	cmpnei	r2,zero,342
  8054b0:	00805598 	cmpnei	r2,zero,342
  8054b4:	00805f98 	cmpnei	r2,zero,382
  8054b8:	00805f70 	cmpltui	r2,zero,381
  8054bc:	00805fb4 	movhi	r2,382
  8054c0:	00805fc0 	call	805fc <__reset-0x77fa04>
  8054c4:	d9002717 	ldw	r4,156(sp)
  8054c8:	0089c3c4 	movi	r2,9999
  8054cc:	20800015 	stw	r2,0(r4)
  8054d0:	a0001026 	beq	r20,zero,805514 <_dtoa_r+0x31c>
  8054d4:	00c02074 	movhi	r3,129
  8054d8:	18e8e704 	addi	r3,r3,-23652
  8054dc:	d9802917 	ldw	r6,164(sp)
  8054e0:	303f7926 	beq	r6,zero,8052c8 <_dtoa_r+0xd0>
  8054e4:	188000c7 	ldb	r2,3(r3)
  8054e8:	190000c4 	addi	r4,r3,3
  8054ec:	1000101e 	bne	r2,zero,805530 <_dtoa_r+0x338>
  8054f0:	d8802917 	ldw	r2,164(sp)
  8054f4:	11000015 	stw	r4,0(r2)
  8054f8:	003f7306 	br	8052c8 <_dtoa_r+0xd0>
  8054fc:	00a00034 	movhi	r2,32768
  805500:	10bfffc4 	addi	r2,r2,-1
  805504:	00c00044 	movi	r3,1
  805508:	88aa703a 	and	r21,r17,r2
  80550c:	90c00015 	stw	r3,0(r18)
  805510:	003f5806 	br	805274 <_dtoa_r+0x7c>
  805514:	00800434 	movhi	r2,16
  805518:	10bfffc4 	addi	r2,r2,-1
  80551c:	a884703a 	and	r2,r21,r2
  805520:	103fec1e 	bne	r2,zero,8054d4 <_dtoa_r+0x2dc>
  805524:	00c02074 	movhi	r3,129
  805528:	18e8e404 	addi	r3,r3,-23664
  80552c:	003feb06 	br	8054dc <_dtoa_r+0x2e4>
  805530:	d8802917 	ldw	r2,164(sp)
  805534:	19000204 	addi	r4,r3,8
  805538:	11000015 	stw	r4,0(r2)
  80553c:	003f6206 	br	8052c8 <_dtoa_r+0xd0>
  805540:	ddc00117 	ldw	r23,4(sp)
  805544:	d8800217 	ldw	r2,8(sp)
  805548:	01000804 	movi	r4,32
  80554c:	b8c10c84 	addi	r3,r23,1074
  805550:	18a3883a 	add	r17,r3,r2
  805554:	2441b80e 	bge	r4,r17,805c38 <_dtoa_r+0xa40>
  805558:	00c01004 	movi	r3,64
  80555c:	1c47c83a 	sub	r3,r3,r17
  805560:	88bff804 	addi	r2,r17,-32
  805564:	a8c6983a 	sll	r3,r21,r3
  805568:	a084d83a 	srl	r2,r20,r2
  80556c:	1888b03a 	or	r4,r3,r2
  805570:	08015980 	call	801598 <__floatunsidf>
  805574:	1011883a 	mov	r8,r2
  805578:	00bf8434 	movhi	r2,65040
  80557c:	01000044 	movi	r4,1
  805580:	10d3883a 	add	r9,r2,r3
  805584:	8dbef344 	addi	r22,r17,-1075
  805588:	d9000815 	stw	r4,32(sp)
  80558c:	003f6f06 	br	80534c <_dtoa_r+0x154>
  805590:	d8001715 	stw	zero,92(sp)
  805594:	04400044 	movi	r17,1
  805598:	00bfffc4 	movi	r2,-1
  80559c:	00c00044 	movi	r3,1
  8055a0:	d8800e15 	stw	r2,56(sp)
  8055a4:	d8002615 	stw	zero,152(sp)
  8055a8:	d8800f15 	stw	r2,60(sp)
  8055ac:	d8c00b15 	stw	r3,44(sp)
  8055b0:	1021883a 	mov	r16,r2
  8055b4:	d8801617 	ldw	r2,88(sp)
  8055b8:	10001115 	stw	zero,68(r2)
  8055bc:	d8801617 	ldw	r2,88(sp)
  8055c0:	11401117 	ldw	r5,68(r2)
  8055c4:	1009883a 	mov	r4,r2
  8055c8:	0803e380 	call	803e38 <_Balloc>
  8055cc:	d8c01617 	ldw	r3,88(sp)
  8055d0:	d8800515 	stw	r2,20(sp)
  8055d4:	18801015 	stw	r2,64(r3)
  8055d8:	00800384 	movi	r2,14
  8055dc:	14006836 	bltu	r2,r16,805780 <_dtoa_r+0x588>
  8055e0:	8805003a 	cmpeq	r2,r17,zero
  8055e4:	1000661e 	bne	r2,zero,805780 <_dtoa_r+0x588>
  8055e8:	d9000d17 	ldw	r4,52(sp)
  8055ec:	0102300e 	bge	zero,r4,805eb0 <_dtoa_r+0xcb8>
  8055f0:	208003cc 	andi	r2,r4,15
  8055f4:	100490fa 	slli	r2,r2,3
  8055f8:	2025d13a 	srai	r18,r4,4
  8055fc:	00c02074 	movhi	r3,129
  805600:	18e89b04 	addi	r3,r3,-23956
  805604:	10c5883a 	add	r2,r2,r3
  805608:	90c0040c 	andi	r3,r18,16
  80560c:	14000017 	ldw	r16,0(r2)
  805610:	14400117 	ldw	r17,4(r2)
  805614:	18036a1e 	bne	r3,zero,8063c0 <_dtoa_r+0x11c8>
  805618:	05800084 	movi	r22,2
  80561c:	90001026 	beq	r18,zero,805660 <_dtoa_r+0x468>
  805620:	04c02074 	movhi	r19,129
  805624:	9ce8cd04 	addi	r19,r19,-23756
  805628:	9080004c 	andi	r2,r18,1
  80562c:	1005003a 	cmpeq	r2,r2,zero
  805630:	1000081e 	bne	r2,zero,805654 <_dtoa_r+0x45c>
  805634:	99800017 	ldw	r6,0(r19)
  805638:	99c00117 	ldw	r7,4(r19)
  80563c:	880b883a 	mov	r5,r17
  805640:	8009883a 	mov	r4,r16
  805644:	08069240 	call	806924 <__muldf3>
  805648:	1021883a 	mov	r16,r2
  80564c:	b5800044 	addi	r22,r22,1
  805650:	1823883a 	mov	r17,r3
  805654:	9025d07a 	srai	r18,r18,1
  805658:	9cc00204 	addi	r19,r19,8
  80565c:	903ff21e 	bne	r18,zero,805628 <_dtoa_r+0x430>
  805660:	a80b883a 	mov	r5,r21
  805664:	a009883a 	mov	r4,r20
  805668:	880f883a 	mov	r7,r17
  80566c:	800d883a 	mov	r6,r16
  805670:	08013080 	call	801308 <__divdf3>
  805674:	1029883a 	mov	r20,r2
  805678:	182b883a 	mov	r21,r3
  80567c:	d8c00c17 	ldw	r3,48(sp)
  805680:	1805003a 	cmpeq	r2,r3,zero
  805684:	1000081e 	bne	r2,zero,8056a8 <_dtoa_r+0x4b0>
  805688:	0005883a 	mov	r2,zero
  80568c:	00cffc34 	movhi	r3,16368
  805690:	180f883a 	mov	r7,r3
  805694:	a009883a 	mov	r4,r20
  805698:	a80b883a 	mov	r5,r21
  80569c:	100d883a 	mov	r6,r2
  8056a0:	0806f080 	call	806f08 <__ltdf2>
  8056a4:	1003fe16 	blt	r2,zero,8066a0 <_dtoa_r+0x14a8>
  8056a8:	b009883a 	mov	r4,r22
  8056ac:	08070180 	call	807018 <__floatsidf>
  8056b0:	180b883a 	mov	r5,r3
  8056b4:	1009883a 	mov	r4,r2
  8056b8:	a00d883a 	mov	r6,r20
  8056bc:	a80f883a 	mov	r7,r21
  8056c0:	08069240 	call	806924 <__muldf3>
  8056c4:	0011883a 	mov	r8,zero
  8056c8:	02500734 	movhi	r9,16412
  8056cc:	1009883a 	mov	r4,r2
  8056d0:	180b883a 	mov	r5,r3
  8056d4:	480f883a 	mov	r7,r9
  8056d8:	400d883a 	mov	r6,r8
  8056dc:	08012940 	call	801294 <__adddf3>
  8056e0:	d9000f17 	ldw	r4,60(sp)
  8056e4:	102d883a 	mov	r22,r2
  8056e8:	00bf3034 	movhi	r2,64704
  8056ec:	18b9883a 	add	fp,r3,r2
  8056f0:	e02f883a 	mov	r23,fp
  8056f4:	20028f1e 	bne	r4,zero,806134 <_dtoa_r+0xf3c>
  8056f8:	0005883a 	mov	r2,zero
  8056fc:	00d00534 	movhi	r3,16404
  805700:	a009883a 	mov	r4,r20
  805704:	a80b883a 	mov	r5,r21
  805708:	180f883a 	mov	r7,r3
  80570c:	100d883a 	mov	r6,r2
  805710:	08012140 	call	801214 <__subdf3>
  805714:	1009883a 	mov	r4,r2
  805718:	e00f883a 	mov	r7,fp
  80571c:	180b883a 	mov	r5,r3
  805720:	b00d883a 	mov	r6,r22
  805724:	1025883a 	mov	r18,r2
  805728:	1827883a 	mov	r19,r3
  80572c:	0806df80 	call	806df8 <__gtdf2>
  805730:	00834f16 	blt	zero,r2,806470 <_dtoa_r+0x1278>
  805734:	e0e0003c 	xorhi	r3,fp,32768
  805738:	9009883a 	mov	r4,r18
  80573c:	980b883a 	mov	r5,r19
  805740:	180f883a 	mov	r7,r3
  805744:	b00d883a 	mov	r6,r22
  805748:	0806f080 	call	806f08 <__ltdf2>
  80574c:	1000080e 	bge	r2,zero,805770 <_dtoa_r+0x578>
  805750:	0027883a 	mov	r19,zero
  805754:	0025883a 	mov	r18,zero
  805758:	d8802617 	ldw	r2,152(sp)
  80575c:	df000517 	ldw	fp,20(sp)
  805760:	d8000615 	stw	zero,24(sp)
  805764:	0084303a 	nor	r2,zero,r2
  805768:	d8800d15 	stw	r2,52(sp)
  80576c:	00019b06 	br	805ddc <_dtoa_r+0xbe4>
  805770:	d9801217 	ldw	r6,72(sp)
  805774:	d8801317 	ldw	r2,76(sp)
  805778:	3029883a 	mov	r20,r6
  80577c:	102b883a 	mov	r21,r2
  805780:	d8c00217 	ldw	r3,8(sp)
  805784:	18008516 	blt	r3,zero,80599c <_dtoa_r+0x7a4>
  805788:	d9000d17 	ldw	r4,52(sp)
  80578c:	00800384 	movi	r2,14
  805790:	11008216 	blt	r2,r4,80599c <_dtoa_r+0x7a4>
  805794:	200490fa 	slli	r2,r4,3
  805798:	d9802617 	ldw	r6,152(sp)
  80579c:	00c02074 	movhi	r3,129
  8057a0:	18e89b04 	addi	r3,r3,-23956
  8057a4:	10c5883a 	add	r2,r2,r3
  8057a8:	14800017 	ldw	r18,0(r2)
  8057ac:	14c00117 	ldw	r19,4(r2)
  8057b0:	30031e16 	blt	r6,zero,80642c <_dtoa_r+0x1234>
  8057b4:	d9000517 	ldw	r4,20(sp)
  8057b8:	d8c00f17 	ldw	r3,60(sp)
  8057bc:	a823883a 	mov	r17,r21
  8057c0:	a021883a 	mov	r16,r20
  8057c4:	192b883a 	add	r21,r3,r4
  8057c8:	2039883a 	mov	fp,r4
  8057cc:	00000f06 	br	80580c <_dtoa_r+0x614>
  8057d0:	0005883a 	mov	r2,zero
  8057d4:	00d00934 	movhi	r3,16420
  8057d8:	5009883a 	mov	r4,r10
  8057dc:	580b883a 	mov	r5,r11
  8057e0:	180f883a 	mov	r7,r3
  8057e4:	100d883a 	mov	r6,r2
  8057e8:	08069240 	call	806924 <__muldf3>
  8057ec:	180b883a 	mov	r5,r3
  8057f0:	000d883a 	mov	r6,zero
  8057f4:	000f883a 	mov	r7,zero
  8057f8:	1009883a 	mov	r4,r2
  8057fc:	1021883a 	mov	r16,r2
  805800:	1823883a 	mov	r17,r3
  805804:	0806d700 	call	806d70 <__nedf2>
  805808:	10004526 	beq	r2,zero,805920 <_dtoa_r+0x728>
  80580c:	900d883a 	mov	r6,r18
  805810:	980f883a 	mov	r7,r19
  805814:	8009883a 	mov	r4,r16
  805818:	880b883a 	mov	r5,r17
  80581c:	08013080 	call	801308 <__divdf3>
  805820:	180b883a 	mov	r5,r3
  805824:	1009883a 	mov	r4,r2
  805828:	08071100 	call	807110 <__fixdfsi>
  80582c:	1009883a 	mov	r4,r2
  805830:	1029883a 	mov	r20,r2
  805834:	08070180 	call	807018 <__floatsidf>
  805838:	180f883a 	mov	r7,r3
  80583c:	9009883a 	mov	r4,r18
  805840:	980b883a 	mov	r5,r19
  805844:	100d883a 	mov	r6,r2
  805848:	08069240 	call	806924 <__muldf3>
  80584c:	180f883a 	mov	r7,r3
  805850:	880b883a 	mov	r5,r17
  805854:	8009883a 	mov	r4,r16
  805858:	100d883a 	mov	r6,r2
  80585c:	08012140 	call	801214 <__subdf3>
  805860:	1015883a 	mov	r10,r2
  805864:	a0800c04 	addi	r2,r20,48
  805868:	e0800005 	stb	r2,0(fp)
  80586c:	e7000044 	addi	fp,fp,1
  805870:	1817883a 	mov	r11,r3
  805874:	e57fd61e 	bne	fp,r21,8057d0 <_dtoa_r+0x5d8>
  805878:	500d883a 	mov	r6,r10
  80587c:	180f883a 	mov	r7,r3
  805880:	5009883a 	mov	r4,r10
  805884:	180b883a 	mov	r5,r3
  805888:	08012940 	call	801294 <__adddf3>
  80588c:	100d883a 	mov	r6,r2
  805890:	9009883a 	mov	r4,r18
  805894:	980b883a 	mov	r5,r19
  805898:	180f883a 	mov	r7,r3
  80589c:	1021883a 	mov	r16,r2
  8058a0:	1823883a 	mov	r17,r3
  8058a4:	0806f080 	call	806f08 <__ltdf2>
  8058a8:	10000816 	blt	r2,zero,8058cc <_dtoa_r+0x6d4>
  8058ac:	980b883a 	mov	r5,r19
  8058b0:	800d883a 	mov	r6,r16
  8058b4:	880f883a 	mov	r7,r17
  8058b8:	9009883a 	mov	r4,r18
  8058bc:	0806ce80 	call	806ce8 <__eqdf2>
  8058c0:	1000171e 	bne	r2,zero,805920 <_dtoa_r+0x728>
  8058c4:	a080004c 	andi	r2,r20,1
  8058c8:	10001526 	beq	r2,zero,805920 <_dtoa_r+0x728>
  8058cc:	d8800d17 	ldw	r2,52(sp)
  8058d0:	d8800415 	stw	r2,16(sp)
  8058d4:	e009883a 	mov	r4,fp
  8058d8:	213fffc4 	addi	r4,r4,-1
  8058dc:	20c00007 	ldb	r3,0(r4)
  8058e0:	00800e44 	movi	r2,57
  8058e4:	1880081e 	bne	r3,r2,805908 <_dtoa_r+0x710>
  8058e8:	d8800517 	ldw	r2,20(sp)
  8058ec:	113ffa1e 	bne	r2,r4,8058d8 <_dtoa_r+0x6e0>
  8058f0:	d8c00417 	ldw	r3,16(sp)
  8058f4:	d9800517 	ldw	r6,20(sp)
  8058f8:	00800c04 	movi	r2,48
  8058fc:	18c00044 	addi	r3,r3,1
  805900:	d8c00415 	stw	r3,16(sp)
  805904:	30800005 	stb	r2,0(r6)
  805908:	20800003 	ldbu	r2,0(r4)
  80590c:	d8c00417 	ldw	r3,16(sp)
  805910:	27000044 	addi	fp,r4,1
  805914:	10800044 	addi	r2,r2,1
  805918:	d8c00d15 	stw	r3,52(sp)
  80591c:	20800005 	stb	r2,0(r4)
  805920:	d9001617 	ldw	r4,88(sp)
  805924:	d9400717 	ldw	r5,28(sp)
  805928:	08038b80 	call	8038b8 <_Bfree>
  80592c:	e0000005 	stb	zero,0(fp)
  805930:	d9800d17 	ldw	r6,52(sp)
  805934:	d8c02717 	ldw	r3,156(sp)
  805938:	d9002917 	ldw	r4,164(sp)
  80593c:	30800044 	addi	r2,r6,1
  805940:	18800015 	stw	r2,0(r3)
  805944:	20029c26 	beq	r4,zero,8063b8 <_dtoa_r+0x11c0>
  805948:	d8c00517 	ldw	r3,20(sp)
  80594c:	27000015 	stw	fp,0(r4)
  805950:	003e5d06 	br	8052c8 <_dtoa_r+0xd0>
  805954:	d9800d17 	ldw	r6,52(sp)
  805958:	00c02074 	movhi	r3,129
  80595c:	18e89b04 	addi	r3,r3,-23956
  805960:	d9001217 	ldw	r4,72(sp)
  805964:	300490fa 	slli	r2,r6,3
  805968:	d9401317 	ldw	r5,76(sp)
  80596c:	10c5883a 	add	r2,r2,r3
  805970:	12000017 	ldw	r8,0(r2)
  805974:	12400117 	ldw	r9,4(r2)
  805978:	400d883a 	mov	r6,r8
  80597c:	480f883a 	mov	r7,r9
  805980:	0806f080 	call	806f08 <__ltdf2>
  805984:	1000030e 	bge	r2,zero,805994 <_dtoa_r+0x79c>
  805988:	d8800d17 	ldw	r2,52(sp)
  80598c:	10bfffc4 	addi	r2,r2,-1
  805990:	d8800d15 	stw	r2,52(sp)
  805994:	d8000c15 	stw	zero,48(sp)
  805998:	003ea806 	br	80543c <_dtoa_r+0x244>
  80599c:	d9000b17 	ldw	r4,44(sp)
  8059a0:	202cc03a 	cmpne	r22,r4,zero
  8059a4:	b000c71e 	bne	r22,zero,805cc4 <_dtoa_r+0xacc>
  8059a8:	dc001117 	ldw	r16,68(sp)
  8059ac:	dc801017 	ldw	r18,64(sp)
  8059b0:	0027883a 	mov	r19,zero
  8059b4:	04000b0e 	bge	zero,r16,8059e4 <_dtoa_r+0x7ec>
  8059b8:	d8c00a17 	ldw	r3,40(sp)
  8059bc:	00c0090e 	bge	zero,r3,8059e4 <_dtoa_r+0x7ec>
  8059c0:	8005883a 	mov	r2,r16
  8059c4:	1c011316 	blt	r3,r16,805e14 <_dtoa_r+0xc1c>
  8059c8:	d9000a17 	ldw	r4,40(sp)
  8059cc:	d9801117 	ldw	r6,68(sp)
  8059d0:	80a1c83a 	sub	r16,r16,r2
  8059d4:	2089c83a 	sub	r4,r4,r2
  8059d8:	308dc83a 	sub	r6,r6,r2
  8059dc:	d9000a15 	stw	r4,40(sp)
  8059e0:	d9801115 	stw	r6,68(sp)
  8059e4:	d8801017 	ldw	r2,64(sp)
  8059e8:	0080150e 	bge	zero,r2,805a40 <_dtoa_r+0x848>
  8059ec:	d8c00b17 	ldw	r3,44(sp)
  8059f0:	1805003a 	cmpeq	r2,r3,zero
  8059f4:	1001c91e 	bne	r2,zero,80611c <_dtoa_r+0xf24>
  8059f8:	04800e0e 	bge	zero,r18,805a34 <_dtoa_r+0x83c>
  8059fc:	d9001617 	ldw	r4,88(sp)
  805a00:	980b883a 	mov	r5,r19
  805a04:	900d883a 	mov	r6,r18
  805a08:	080466c0 	call	80466c <__pow5mult>
  805a0c:	d9001617 	ldw	r4,88(sp)
  805a10:	d9800717 	ldw	r6,28(sp)
  805a14:	100b883a 	mov	r5,r2
  805a18:	1027883a 	mov	r19,r2
  805a1c:	08043480 	call	804348 <__multiply>
  805a20:	d9001617 	ldw	r4,88(sp)
  805a24:	d9400717 	ldw	r5,28(sp)
  805a28:	1023883a 	mov	r17,r2
  805a2c:	08038b80 	call	8038b8 <_Bfree>
  805a30:	dc400715 	stw	r17,28(sp)
  805a34:	d9001017 	ldw	r4,64(sp)
  805a38:	248dc83a 	sub	r6,r4,r18
  805a3c:	30010e1e 	bne	r6,zero,805e78 <_dtoa_r+0xc80>
  805a40:	d9001617 	ldw	r4,88(sp)
  805a44:	04400044 	movi	r17,1
  805a48:	880b883a 	mov	r5,r17
  805a4c:	08045300 	call	804530 <__i2b>
  805a50:	d9800917 	ldw	r6,36(sp)
  805a54:	1025883a 	mov	r18,r2
  805a58:	0180040e 	bge	zero,r6,805a6c <_dtoa_r+0x874>
  805a5c:	d9001617 	ldw	r4,88(sp)
  805a60:	100b883a 	mov	r5,r2
  805a64:	080466c0 	call	80466c <__pow5mult>
  805a68:	1025883a 	mov	r18,r2
  805a6c:	d8801717 	ldw	r2,92(sp)
  805a70:	8880f30e 	bge	r17,r2,805e40 <_dtoa_r+0xc48>
  805a74:	0023883a 	mov	r17,zero
  805a78:	d9800917 	ldw	r6,36(sp)
  805a7c:	30019e1e 	bne	r6,zero,8060f8 <_dtoa_r+0xf00>
  805a80:	00c00044 	movi	r3,1
  805a84:	d9000a17 	ldw	r4,40(sp)
  805a88:	20c5883a 	add	r2,r4,r3
  805a8c:	10c007cc 	andi	r3,r2,31
  805a90:	1800841e 	bne	r3,zero,805ca4 <_dtoa_r+0xaac>
  805a94:	00800704 	movi	r2,28
  805a98:	d9000a17 	ldw	r4,40(sp)
  805a9c:	d9801117 	ldw	r6,68(sp)
  805aa0:	80a1883a 	add	r16,r16,r2
  805aa4:	2089883a 	add	r4,r4,r2
  805aa8:	308d883a 	add	r6,r6,r2
  805aac:	d9000a15 	stw	r4,40(sp)
  805ab0:	d9801115 	stw	r6,68(sp)
  805ab4:	d8801117 	ldw	r2,68(sp)
  805ab8:	0080050e 	bge	zero,r2,805ad0 <_dtoa_r+0x8d8>
  805abc:	d9400717 	ldw	r5,28(sp)
  805ac0:	d9001617 	ldw	r4,88(sp)
  805ac4:	100d883a 	mov	r6,r2
  805ac8:	08041fc0 	call	8041fc <__lshift>
  805acc:	d8800715 	stw	r2,28(sp)
  805ad0:	d8c00a17 	ldw	r3,40(sp)
  805ad4:	00c0050e 	bge	zero,r3,805aec <_dtoa_r+0x8f4>
  805ad8:	d9001617 	ldw	r4,88(sp)
  805adc:	900b883a 	mov	r5,r18
  805ae0:	180d883a 	mov	r6,r3
  805ae4:	08041fc0 	call	8041fc <__lshift>
  805ae8:	1025883a 	mov	r18,r2
  805aec:	d9000c17 	ldw	r4,48(sp)
  805af0:	2005003a 	cmpeq	r2,r4,zero
  805af4:	10016f26 	beq	r2,zero,8060b4 <_dtoa_r+0xebc>
  805af8:	d9000f17 	ldw	r4,60(sp)
  805afc:	0102170e 	bge	zero,r4,80635c <_dtoa_r+0x1164>
  805b00:	d9800b17 	ldw	r6,44(sp)
  805b04:	3005003a 	cmpeq	r2,r6,zero
  805b08:	1000881e 	bne	r2,zero,805d2c <_dtoa_r+0xb34>
  805b0c:	0400050e 	bge	zero,r16,805b24 <_dtoa_r+0x92c>
  805b10:	d9001617 	ldw	r4,88(sp)
  805b14:	980b883a 	mov	r5,r19
  805b18:	800d883a 	mov	r6,r16
  805b1c:	08041fc0 	call	8041fc <__lshift>
  805b20:	1027883a 	mov	r19,r2
  805b24:	8804c03a 	cmpne	r2,r17,zero
  805b28:	1002541e 	bne	r2,zero,80647c <_dtoa_r+0x1284>
  805b2c:	980b883a 	mov	r5,r19
  805b30:	dd800517 	ldw	r22,20(sp)
  805b34:	dcc00615 	stw	r19,24(sp)
  805b38:	a700004c 	andi	fp,r20,1
  805b3c:	2827883a 	mov	r19,r5
  805b40:	d9000717 	ldw	r4,28(sp)
  805b44:	900b883a 	mov	r5,r18
  805b48:	0804fe00 	call	804fe0 <quorem>
  805b4c:	d9000717 	ldw	r4,28(sp)
  805b50:	d9400617 	ldw	r5,24(sp)
  805b54:	1023883a 	mov	r17,r2
  805b58:	8dc00c04 	addi	r23,r17,48
  805b5c:	0803a140 	call	803a14 <__mcmp>
  805b60:	d9001617 	ldw	r4,88(sp)
  805b64:	900b883a 	mov	r5,r18
  805b68:	980d883a 	mov	r6,r19
  805b6c:	1029883a 	mov	r20,r2
  805b70:	08040700 	call	804070 <__mdiff>
  805b74:	102b883a 	mov	r21,r2
  805b78:	10800317 	ldw	r2,12(r2)
  805b7c:	1001281e 	bne	r2,zero,806020 <_dtoa_r+0xe28>
  805b80:	d9000717 	ldw	r4,28(sp)
  805b84:	a80b883a 	mov	r5,r21
  805b88:	0803a140 	call	803a14 <__mcmp>
  805b8c:	d9001617 	ldw	r4,88(sp)
  805b90:	1021883a 	mov	r16,r2
  805b94:	a80b883a 	mov	r5,r21
  805b98:	08038b80 	call	8038b8 <_Bfree>
  805b9c:	8000041e 	bne	r16,zero,805bb0 <_dtoa_r+0x9b8>
  805ba0:	d8801717 	ldw	r2,92(sp)
  805ba4:	1000021e 	bne	r2,zero,805bb0 <_dtoa_r+0x9b8>
  805ba8:	e004c03a 	cmpne	r2,fp,zero
  805bac:	10011726 	beq	r2,zero,80600c <_dtoa_r+0xe14>
  805bb0:	a0010616 	blt	r20,zero,805fcc <_dtoa_r+0xdd4>
  805bb4:	a000041e 	bne	r20,zero,805bc8 <_dtoa_r+0x9d0>
  805bb8:	d8c01717 	ldw	r3,92(sp)
  805bbc:	1800021e 	bne	r3,zero,805bc8 <_dtoa_r+0x9d0>
  805bc0:	e004c03a 	cmpne	r2,fp,zero
  805bc4:	10010126 	beq	r2,zero,805fcc <_dtoa_r+0xdd4>
  805bc8:	04023d16 	blt	zero,r16,8064c0 <_dtoa_r+0x12c8>
  805bcc:	b5c00005 	stb	r23,0(r22)
  805bd0:	d9800517 	ldw	r6,20(sp)
  805bd4:	d9000f17 	ldw	r4,60(sp)
  805bd8:	b5800044 	addi	r22,r22,1
  805bdc:	3105883a 	add	r2,r6,r4
  805be0:	b0806526 	beq	r22,r2,805d78 <_dtoa_r+0xb80>
  805be4:	d9400717 	ldw	r5,28(sp)
  805be8:	d9001617 	ldw	r4,88(sp)
  805bec:	01800284 	movi	r6,10
  805bf0:	000f883a 	mov	r7,zero
  805bf4:	080456c0 	call	80456c <__multadd>
  805bf8:	d8800715 	stw	r2,28(sp)
  805bfc:	d8800617 	ldw	r2,24(sp)
  805c00:	14c10c26 	beq	r2,r19,806034 <_dtoa_r+0xe3c>
  805c04:	d9400617 	ldw	r5,24(sp)
  805c08:	d9001617 	ldw	r4,88(sp)
  805c0c:	01800284 	movi	r6,10
  805c10:	000f883a 	mov	r7,zero
  805c14:	080456c0 	call	80456c <__multadd>
  805c18:	d9001617 	ldw	r4,88(sp)
  805c1c:	980b883a 	mov	r5,r19
  805c20:	01800284 	movi	r6,10
  805c24:	000f883a 	mov	r7,zero
  805c28:	d8800615 	stw	r2,24(sp)
  805c2c:	080456c0 	call	80456c <__multadd>
  805c30:	1027883a 	mov	r19,r2
  805c34:	003fc206 	br	805b40 <_dtoa_r+0x948>
  805c38:	2445c83a 	sub	r2,r4,r17
  805c3c:	a088983a 	sll	r4,r20,r2
  805c40:	003e4b06 	br	805570 <_dtoa_r+0x378>
  805c44:	01bfffc4 	movi	r6,-1
  805c48:	00800044 	movi	r2,1
  805c4c:	d9800e15 	stw	r6,56(sp)
  805c50:	d9800f15 	stw	r6,60(sp)
  805c54:	d8800b15 	stw	r2,44(sp)
  805c58:	d8c01617 	ldw	r3,88(sp)
  805c5c:	008005c4 	movi	r2,23
  805c60:	18001115 	stw	zero,68(r3)
  805c64:	1580082e 	bgeu	r2,r22,805c88 <_dtoa_r+0xa90>
  805c68:	00c00104 	movi	r3,4
  805c6c:	0009883a 	mov	r4,zero
  805c70:	18c7883a 	add	r3,r3,r3
  805c74:	18800504 	addi	r2,r3,20
  805c78:	21000044 	addi	r4,r4,1
  805c7c:	b0bffc2e 	bgeu	r22,r2,805c70 <_dtoa_r+0xa78>
  805c80:	d9801617 	ldw	r6,88(sp)
  805c84:	31001115 	stw	r4,68(r6)
  805c88:	dc000f17 	ldw	r16,60(sp)
  805c8c:	003e4b06 	br	8055bc <_dtoa_r+0x3c4>
  805c90:	d9801717 	ldw	r6,92(sp)
  805c94:	0023883a 	mov	r17,zero
  805c98:	31bfff04 	addi	r6,r6,-4
  805c9c:	d9801715 	stw	r6,92(sp)
  805ca0:	003df806 	br	805484 <_dtoa_r+0x28c>
  805ca4:	00800804 	movi	r2,32
  805ca8:	10c9c83a 	sub	r4,r2,r3
  805cac:	00c00104 	movi	r3,4
  805cb0:	19005a16 	blt	r3,r4,805e1c <_dtoa_r+0xc24>
  805cb4:	008000c4 	movi	r2,3
  805cb8:	113f7e16 	blt	r2,r4,805ab4 <_dtoa_r+0x8bc>
  805cbc:	20800704 	addi	r2,r4,28
  805cc0:	003f7506 	br	805a98 <_dtoa_r+0x8a0>
  805cc4:	d9801717 	ldw	r6,92(sp)
  805cc8:	00800044 	movi	r2,1
  805ccc:	1180a10e 	bge	r2,r6,805f54 <_dtoa_r+0xd5c>
  805cd0:	d9800f17 	ldw	r6,60(sp)
  805cd4:	d8c01017 	ldw	r3,64(sp)
  805cd8:	30bfffc4 	addi	r2,r6,-1
  805cdc:	1881c616 	blt	r3,r2,8063f8 <_dtoa_r+0x1200>
  805ce0:	18a5c83a 	sub	r18,r3,r2
  805ce4:	d8800f17 	ldw	r2,60(sp)
  805ce8:	10026216 	blt	r2,zero,806674 <_dtoa_r+0x147c>
  805cec:	dc001117 	ldw	r16,68(sp)
  805cf0:	1007883a 	mov	r3,r2
  805cf4:	d9800a17 	ldw	r6,40(sp)
  805cf8:	d8801117 	ldw	r2,68(sp)
  805cfc:	d9001617 	ldw	r4,88(sp)
  805d00:	30cd883a 	add	r6,r6,r3
  805d04:	10c5883a 	add	r2,r2,r3
  805d08:	01400044 	movi	r5,1
  805d0c:	d9800a15 	stw	r6,40(sp)
  805d10:	d8801115 	stw	r2,68(sp)
  805d14:	08045300 	call	804530 <__i2b>
  805d18:	1027883a 	mov	r19,r2
  805d1c:	003f2506 	br	8059b4 <_dtoa_r+0x7bc>
  805d20:	00c02074 	movhi	r3,129
  805d24:	18e8e804 	addi	r3,r3,-23648
  805d28:	003d6706 	br	8052c8 <_dtoa_r+0xd0>
  805d2c:	dd800517 	ldw	r22,20(sp)
  805d30:	04000044 	movi	r16,1
  805d34:	00000706 	br	805d54 <_dtoa_r+0xb5c>
  805d38:	d9400717 	ldw	r5,28(sp)
  805d3c:	d9001617 	ldw	r4,88(sp)
  805d40:	01800284 	movi	r6,10
  805d44:	000f883a 	mov	r7,zero
  805d48:	080456c0 	call	80456c <__multadd>
  805d4c:	d8800715 	stw	r2,28(sp)
  805d50:	84000044 	addi	r16,r16,1
  805d54:	d9000717 	ldw	r4,28(sp)
  805d58:	900b883a 	mov	r5,r18
  805d5c:	0804fe00 	call	804fe0 <quorem>
  805d60:	15c00c04 	addi	r23,r2,48
  805d64:	b5c00005 	stb	r23,0(r22)
  805d68:	d8c00f17 	ldw	r3,60(sp)
  805d6c:	b5800044 	addi	r22,r22,1
  805d70:	80fff116 	blt	r16,r3,805d38 <_dtoa_r+0xb40>
  805d74:	d8000615 	stw	zero,24(sp)
  805d78:	d9400717 	ldw	r5,28(sp)
  805d7c:	d9001617 	ldw	r4,88(sp)
  805d80:	01800044 	movi	r6,1
  805d84:	08041fc0 	call	8041fc <__lshift>
  805d88:	1009883a 	mov	r4,r2
  805d8c:	900b883a 	mov	r5,r18
  805d90:	d8800715 	stw	r2,28(sp)
  805d94:	0803a140 	call	803a14 <__mcmp>
  805d98:	00803c0e 	bge	zero,r2,805e8c <_dtoa_r+0xc94>
  805d9c:	b009883a 	mov	r4,r22
  805da0:	213fffc4 	addi	r4,r4,-1
  805da4:	21400003 	ldbu	r5,0(r4)
  805da8:	00800e44 	movi	r2,57
  805dac:	28c03fcc 	andi	r3,r5,255
  805db0:	18c0201c 	xori	r3,r3,128
  805db4:	18ffe004 	addi	r3,r3,-128
  805db8:	1881981e 	bne	r3,r2,80641c <_dtoa_r+0x1224>
  805dbc:	d9800517 	ldw	r6,20(sp)
  805dc0:	21bff71e 	bne	r4,r6,805da0 <_dtoa_r+0xba8>
  805dc4:	d8800d17 	ldw	r2,52(sp)
  805dc8:	37000044 	addi	fp,r6,1
  805dcc:	10800044 	addi	r2,r2,1
  805dd0:	d8800d15 	stw	r2,52(sp)
  805dd4:	00800c44 	movi	r2,49
  805dd8:	30800005 	stb	r2,0(r6)
  805ddc:	d9001617 	ldw	r4,88(sp)
  805de0:	900b883a 	mov	r5,r18
  805de4:	08038b80 	call	8038b8 <_Bfree>
  805de8:	983ecd26 	beq	r19,zero,805920 <_dtoa_r+0x728>
  805dec:	d8c00617 	ldw	r3,24(sp)
  805df0:	18000426 	beq	r3,zero,805e04 <_dtoa_r+0xc0c>
  805df4:	1cc00326 	beq	r3,r19,805e04 <_dtoa_r+0xc0c>
  805df8:	d9001617 	ldw	r4,88(sp)
  805dfc:	180b883a 	mov	r5,r3
  805e00:	08038b80 	call	8038b8 <_Bfree>
  805e04:	d9001617 	ldw	r4,88(sp)
  805e08:	980b883a 	mov	r5,r19
  805e0c:	08038b80 	call	8038b8 <_Bfree>
  805e10:	003ec306 	br	805920 <_dtoa_r+0x728>
  805e14:	1805883a 	mov	r2,r3
  805e18:	003eeb06 	br	8059c8 <_dtoa_r+0x7d0>
  805e1c:	d9800a17 	ldw	r6,40(sp)
  805e20:	d8c01117 	ldw	r3,68(sp)
  805e24:	20bfff04 	addi	r2,r4,-4
  805e28:	308d883a 	add	r6,r6,r2
  805e2c:	1887883a 	add	r3,r3,r2
  805e30:	80a1883a 	add	r16,r16,r2
  805e34:	d9800a15 	stw	r6,40(sp)
  805e38:	d8c01115 	stw	r3,68(sp)
  805e3c:	003f1d06 	br	805ab4 <_dtoa_r+0x8bc>
  805e40:	a03f0c1e 	bne	r20,zero,805a74 <_dtoa_r+0x87c>
  805e44:	00800434 	movhi	r2,16
  805e48:	10bfffc4 	addi	r2,r2,-1
  805e4c:	a884703a 	and	r2,r21,r2
  805e50:	103f081e 	bne	r2,zero,805a74 <_dtoa_r+0x87c>
  805e54:	a89ffc2c 	andhi	r2,r21,32752
  805e58:	103f0626 	beq	r2,zero,805a74 <_dtoa_r+0x87c>
  805e5c:	d8c01117 	ldw	r3,68(sp)
  805e60:	d9000a17 	ldw	r4,40(sp)
  805e64:	18c00044 	addi	r3,r3,1
  805e68:	21000044 	addi	r4,r4,1
  805e6c:	d8c01115 	stw	r3,68(sp)
  805e70:	d9000a15 	stw	r4,40(sp)
  805e74:	003f0006 	br	805a78 <_dtoa_r+0x880>
  805e78:	d9400717 	ldw	r5,28(sp)
  805e7c:	d9001617 	ldw	r4,88(sp)
  805e80:	080466c0 	call	80466c <__pow5mult>
  805e84:	d8800715 	stw	r2,28(sp)
  805e88:	003eed06 	br	805a40 <_dtoa_r+0x848>
  805e8c:	1000021e 	bne	r2,zero,805e98 <_dtoa_r+0xca0>
  805e90:	b880004c 	andi	r2,r23,1
  805e94:	103fc11e 	bne	r2,zero,805d9c <_dtoa_r+0xba4>
  805e98:	b5bfffc4 	addi	r22,r22,-1
  805e9c:	b0c00007 	ldb	r3,0(r22)
  805ea0:	00800c04 	movi	r2,48
  805ea4:	18bffc26 	beq	r3,r2,805e98 <_dtoa_r+0xca0>
  805ea8:	b7000044 	addi	fp,r22,1
  805eac:	003fcb06 	br	805ddc <_dtoa_r+0xbe4>
  805eb0:	d9800d17 	ldw	r6,52(sp)
  805eb4:	018fc83a 	sub	r7,zero,r6
  805eb8:	3801f726 	beq	r7,zero,806698 <_dtoa_r+0x14a0>
  805ebc:	398003cc 	andi	r6,r7,15
  805ec0:	300c90fa 	slli	r6,r6,3
  805ec4:	01402074 	movhi	r5,129
  805ec8:	29689b04 	addi	r5,r5,-23956
  805ecc:	d9001217 	ldw	r4,72(sp)
  805ed0:	314d883a 	add	r6,r6,r5
  805ed4:	30c00117 	ldw	r3,4(r6)
  805ed8:	30800017 	ldw	r2,0(r6)
  805edc:	d9401317 	ldw	r5,76(sp)
  805ee0:	3821d13a 	srai	r16,r7,4
  805ee4:	100d883a 	mov	r6,r2
  805ee8:	180f883a 	mov	r7,r3
  805eec:	08069240 	call	806924 <__muldf3>
  805ef0:	1011883a 	mov	r8,r2
  805ef4:	1813883a 	mov	r9,r3
  805ef8:	1029883a 	mov	r20,r2
  805efc:	182b883a 	mov	r21,r3
  805f00:	8001e526 	beq	r16,zero,806698 <_dtoa_r+0x14a0>
  805f04:	05800084 	movi	r22,2
  805f08:	04402074 	movhi	r17,129
  805f0c:	8c68cd04 	addi	r17,r17,-23756
  805f10:	8080004c 	andi	r2,r16,1
  805f14:	1005003a 	cmpeq	r2,r2,zero
  805f18:	1000081e 	bne	r2,zero,805f3c <_dtoa_r+0xd44>
  805f1c:	89800017 	ldw	r6,0(r17)
  805f20:	89c00117 	ldw	r7,4(r17)
  805f24:	480b883a 	mov	r5,r9
  805f28:	4009883a 	mov	r4,r8
  805f2c:	08069240 	call	806924 <__muldf3>
  805f30:	1011883a 	mov	r8,r2
  805f34:	b5800044 	addi	r22,r22,1
  805f38:	1813883a 	mov	r9,r3
  805f3c:	8021d07a 	srai	r16,r16,1
  805f40:	8c400204 	addi	r17,r17,8
  805f44:	803ff21e 	bne	r16,zero,805f10 <_dtoa_r+0xd18>
  805f48:	4029883a 	mov	r20,r8
  805f4c:	482b883a 	mov	r21,r9
  805f50:	003dca06 	br	80567c <_dtoa_r+0x484>
  805f54:	d9000817 	ldw	r4,32(sp)
  805f58:	2005003a 	cmpeq	r2,r4,zero
  805f5c:	1001f61e 	bne	r2,zero,806738 <_dtoa_r+0x1540>
  805f60:	dc001117 	ldw	r16,68(sp)
  805f64:	dc801017 	ldw	r18,64(sp)
  805f68:	18c10cc4 	addi	r3,r3,1075
  805f6c:	003f6106 	br	805cf4 <_dtoa_r+0xafc>
  805f70:	d8000b15 	stw	zero,44(sp)
  805f74:	d9802617 	ldw	r6,152(sp)
  805f78:	d8c00d17 	ldw	r3,52(sp)
  805f7c:	30800044 	addi	r2,r6,1
  805f80:	18ad883a 	add	r22,r3,r2
  805f84:	b13fffc4 	addi	r4,r22,-1
  805f88:	d9000e15 	stw	r4,56(sp)
  805f8c:	0581f60e 	bge	zero,r22,806768 <_dtoa_r+0x1570>
  805f90:	dd800f15 	stw	r22,60(sp)
  805f94:	003f3006 	br	805c58 <_dtoa_r+0xa60>
  805f98:	d8000b15 	stw	zero,44(sp)
  805f9c:	d9002617 	ldw	r4,152(sp)
  805fa0:	0101eb0e 	bge	zero,r4,806750 <_dtoa_r+0x1558>
  805fa4:	202d883a 	mov	r22,r4
  805fa8:	d9000e15 	stw	r4,56(sp)
  805fac:	d9000f15 	stw	r4,60(sp)
  805fb0:	003f2906 	br	805c58 <_dtoa_r+0xa60>
  805fb4:	01800044 	movi	r6,1
  805fb8:	d9800b15 	stw	r6,44(sp)
  805fbc:	003ff706 	br	805f9c <_dtoa_r+0xda4>
  805fc0:	01000044 	movi	r4,1
  805fc4:	d9000b15 	stw	r4,44(sp)
  805fc8:	003fea06 	br	805f74 <_dtoa_r+0xd7c>
  805fcc:	04000c0e 	bge	zero,r16,806000 <_dtoa_r+0xe08>
  805fd0:	d9400717 	ldw	r5,28(sp)
  805fd4:	d9001617 	ldw	r4,88(sp)
  805fd8:	01800044 	movi	r6,1
  805fdc:	08041fc0 	call	8041fc <__lshift>
  805fe0:	1009883a 	mov	r4,r2
  805fe4:	900b883a 	mov	r5,r18
  805fe8:	d8800715 	stw	r2,28(sp)
  805fec:	0803a140 	call	803a14 <__mcmp>
  805ff0:	0081e00e 	bge	zero,r2,806774 <_dtoa_r+0x157c>
  805ff4:	bdc00044 	addi	r23,r23,1
  805ff8:	00800e84 	movi	r2,58
  805ffc:	b881a226 	beq	r23,r2,806688 <_dtoa_r+0x1490>
  806000:	b7000044 	addi	fp,r22,1
  806004:	b5c00005 	stb	r23,0(r22)
  806008:	003f7406 	br	805ddc <_dtoa_r+0xbe4>
  80600c:	00800e44 	movi	r2,57
  806010:	b8819d26 	beq	r23,r2,806688 <_dtoa_r+0x1490>
  806014:	053ffa0e 	bge	zero,r20,806000 <_dtoa_r+0xe08>
  806018:	8dc00c44 	addi	r23,r17,49
  80601c:	003ff806 	br	806000 <_dtoa_r+0xe08>
  806020:	d9001617 	ldw	r4,88(sp)
  806024:	a80b883a 	mov	r5,r21
  806028:	04000044 	movi	r16,1
  80602c:	08038b80 	call	8038b8 <_Bfree>
  806030:	003edf06 	br	805bb0 <_dtoa_r+0x9b8>
  806034:	d9001617 	ldw	r4,88(sp)
  806038:	980b883a 	mov	r5,r19
  80603c:	01800284 	movi	r6,10
  806040:	000f883a 	mov	r7,zero
  806044:	080456c0 	call	80456c <__multadd>
  806048:	1027883a 	mov	r19,r2
  80604c:	d8800615 	stw	r2,24(sp)
  806050:	003ebb06 	br	805b40 <_dtoa_r+0x948>
  806054:	d9801117 	ldw	r6,68(sp)
  806058:	d8800d17 	ldw	r2,52(sp)
  80605c:	d8000915 	stw	zero,36(sp)
  806060:	308dc83a 	sub	r6,r6,r2
  806064:	0087c83a 	sub	r3,zero,r2
  806068:	d9801115 	stw	r6,68(sp)
  80606c:	d8c01015 	stw	r3,64(sp)
  806070:	003cfe06 	br	80546c <_dtoa_r+0x274>
  806074:	018dc83a 	sub	r6,zero,r6
  806078:	d9801115 	stw	r6,68(sp)
  80607c:	d8000a15 	stw	zero,40(sp)
  806080:	003cf306 	br	805450 <_dtoa_r+0x258>
  806084:	d9000d17 	ldw	r4,52(sp)
  806088:	08070180 	call	807018 <__floatsidf>
  80608c:	880b883a 	mov	r5,r17
  806090:	8009883a 	mov	r4,r16
  806094:	180f883a 	mov	r7,r3
  806098:	100d883a 	mov	r6,r2
  80609c:	0806d700 	call	806d70 <__nedf2>
  8060a0:	103ce126 	beq	r2,zero,805428 <_dtoa_r+0x230>
  8060a4:	d9800d17 	ldw	r6,52(sp)
  8060a8:	31bfffc4 	addi	r6,r6,-1
  8060ac:	d9800d15 	stw	r6,52(sp)
  8060b0:	003cdd06 	br	805428 <_dtoa_r+0x230>
  8060b4:	d9000717 	ldw	r4,28(sp)
  8060b8:	900b883a 	mov	r5,r18
  8060bc:	0803a140 	call	803a14 <__mcmp>
  8060c0:	103e8d0e 	bge	r2,zero,805af8 <_dtoa_r+0x900>
  8060c4:	d9400717 	ldw	r5,28(sp)
  8060c8:	d9001617 	ldw	r4,88(sp)
  8060cc:	01800284 	movi	r6,10
  8060d0:	000f883a 	mov	r7,zero
  8060d4:	080456c0 	call	80456c <__multadd>
  8060d8:	d9800d17 	ldw	r6,52(sp)
  8060dc:	d8800715 	stw	r2,28(sp)
  8060e0:	31bfffc4 	addi	r6,r6,-1
  8060e4:	d9800d15 	stw	r6,52(sp)
  8060e8:	b001a71e 	bne	r22,zero,806788 <_dtoa_r+0x1590>
  8060ec:	d8800e17 	ldw	r2,56(sp)
  8060f0:	d8800f15 	stw	r2,60(sp)
  8060f4:	003e8006 	br	805af8 <_dtoa_r+0x900>
  8060f8:	90800417 	ldw	r2,16(r18)
  8060fc:	1085883a 	add	r2,r2,r2
  806100:	1085883a 	add	r2,r2,r2
  806104:	1485883a 	add	r2,r2,r18
  806108:	11000417 	ldw	r4,16(r2)
  80610c:	08038e00 	call	8038e0 <__hi0bits>
  806110:	00c00804 	movi	r3,32
  806114:	1887c83a 	sub	r3,r3,r2
  806118:	003e5a06 	br	805a84 <_dtoa_r+0x88c>
  80611c:	d9400717 	ldw	r5,28(sp)
  806120:	d9801017 	ldw	r6,64(sp)
  806124:	d9001617 	ldw	r4,88(sp)
  806128:	080466c0 	call	80466c <__pow5mult>
  80612c:	d8800715 	stw	r2,28(sp)
  806130:	003e4306 	br	805a40 <_dtoa_r+0x848>
  806134:	d9800f17 	ldw	r6,60(sp)
  806138:	d8800d17 	ldw	r2,52(sp)
  80613c:	d9800315 	stw	r6,12(sp)
  806140:	d8800415 	stw	r2,16(sp)
  806144:	d8c00b17 	ldw	r3,44(sp)
  806148:	1805003a 	cmpeq	r2,r3,zero
  80614c:	1000e21e 	bne	r2,zero,8064d8 <_dtoa_r+0x12e0>
  806150:	d9000317 	ldw	r4,12(sp)
  806154:	0005883a 	mov	r2,zero
  806158:	00cff834 	movhi	r3,16352
  80615c:	200c90fa 	slli	r6,r4,3
  806160:	01002074 	movhi	r4,129
  806164:	21289b04 	addi	r4,r4,-23956
  806168:	180b883a 	mov	r5,r3
  80616c:	310d883a 	add	r6,r6,r4
  806170:	327fff17 	ldw	r9,-4(r6)
  806174:	323ffe17 	ldw	r8,-8(r6)
  806178:	1009883a 	mov	r4,r2
  80617c:	480f883a 	mov	r7,r9
  806180:	400d883a 	mov	r6,r8
  806184:	08013080 	call	801308 <__divdf3>
  806188:	180b883a 	mov	r5,r3
  80618c:	b00d883a 	mov	r6,r22
  806190:	b80f883a 	mov	r7,r23
  806194:	1009883a 	mov	r4,r2
  806198:	08012140 	call	801214 <__subdf3>
  80619c:	a80b883a 	mov	r5,r21
  8061a0:	a009883a 	mov	r4,r20
  8061a4:	d8c01915 	stw	r3,100(sp)
  8061a8:	d8801815 	stw	r2,96(sp)
  8061ac:	08071100 	call	807110 <__fixdfsi>
  8061b0:	1009883a 	mov	r4,r2
  8061b4:	1027883a 	mov	r19,r2
  8061b8:	08070180 	call	807018 <__floatsidf>
  8061bc:	a80b883a 	mov	r5,r21
  8061c0:	a009883a 	mov	r4,r20
  8061c4:	180f883a 	mov	r7,r3
  8061c8:	100d883a 	mov	r6,r2
  8061cc:	08012140 	call	801214 <__subdf3>
  8061d0:	d9801817 	ldw	r6,96(sp)
  8061d4:	1823883a 	mov	r17,r3
  8061d8:	d8801415 	stw	r2,80(sp)
  8061dc:	302d883a 	mov	r22,r6
  8061e0:	d9800517 	ldw	r6,20(sp)
  8061e4:	9cc00c04 	addi	r19,r19,48
  8061e8:	dc401515 	stw	r17,84(sp)
  8061ec:	d8c01917 	ldw	r3,100(sp)
  8061f0:	34c00005 	stb	r19,0(r6)
  8061f4:	d8800517 	ldw	r2,20(sp)
  8061f8:	d9401917 	ldw	r5,100(sp)
  8061fc:	d9801417 	ldw	r6,80(sp)
  806200:	b009883a 	mov	r4,r22
  806204:	880f883a 	mov	r7,r17
  806208:	182f883a 	mov	r23,r3
  80620c:	17000044 	addi	fp,r2,1
  806210:	0806df80 	call	806df8 <__gtdf2>
  806214:	00804e16 	blt	zero,r2,806350 <_dtoa_r+0x1158>
  806218:	d9801417 	ldw	r6,80(sp)
  80621c:	0005883a 	mov	r2,zero
  806220:	00cffc34 	movhi	r3,16368
  806224:	180b883a 	mov	r5,r3
  806228:	880f883a 	mov	r7,r17
  80622c:	1009883a 	mov	r4,r2
  806230:	08012140 	call	801214 <__subdf3>
  806234:	d9401917 	ldw	r5,100(sp)
  806238:	180f883a 	mov	r7,r3
  80623c:	b009883a 	mov	r4,r22
  806240:	100d883a 	mov	r6,r2
  806244:	0806df80 	call	806df8 <__gtdf2>
  806248:	00bda216 	blt	zero,r2,8058d4 <_dtoa_r+0x6dc>
  80624c:	d8c00317 	ldw	r3,12(sp)
  806250:	00800044 	movi	r2,1
  806254:	10c01216 	blt	r2,r3,8062a0 <_dtoa_r+0x10a8>
  806258:	003d4506 	br	805770 <_dtoa_r+0x578>
  80625c:	d9801417 	ldw	r6,80(sp)
  806260:	0005883a 	mov	r2,zero
  806264:	00cffc34 	movhi	r3,16368
  806268:	180b883a 	mov	r5,r3
  80626c:	880f883a 	mov	r7,r17
  806270:	1009883a 	mov	r4,r2
  806274:	08012140 	call	801214 <__subdf3>
  806278:	d9c01b17 	ldw	r7,108(sp)
  80627c:	180b883a 	mov	r5,r3
  806280:	1009883a 	mov	r4,r2
  806284:	b00d883a 	mov	r6,r22
  806288:	0806f080 	call	806f08 <__ltdf2>
  80628c:	103d9116 	blt	r2,zero,8058d4 <_dtoa_r+0x6dc>
  806290:	d9800517 	ldw	r6,20(sp)
  806294:	d9000317 	ldw	r4,12(sp)
  806298:	3105883a 	add	r2,r6,r4
  80629c:	e0bd3426 	beq	fp,r2,805770 <_dtoa_r+0x578>
  8062a0:	04500934 	movhi	r17,16420
  8062a4:	0021883a 	mov	r16,zero
  8062a8:	b80b883a 	mov	r5,r23
  8062ac:	b009883a 	mov	r4,r22
  8062b0:	800d883a 	mov	r6,r16
  8062b4:	880f883a 	mov	r7,r17
  8062b8:	08069240 	call	806924 <__muldf3>
  8062bc:	d9401517 	ldw	r5,84(sp)
  8062c0:	d9001417 	ldw	r4,80(sp)
  8062c4:	880f883a 	mov	r7,r17
  8062c8:	000d883a 	mov	r6,zero
  8062cc:	d8801a15 	stw	r2,104(sp)
  8062d0:	d8c01b15 	stw	r3,108(sp)
  8062d4:	08069240 	call	806924 <__muldf3>
  8062d8:	180b883a 	mov	r5,r3
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	1823883a 	mov	r17,r3
  8062e4:	1021883a 	mov	r16,r2
  8062e8:	08071100 	call	807110 <__fixdfsi>
  8062ec:	1009883a 	mov	r4,r2
  8062f0:	102b883a 	mov	r21,r2
  8062f4:	08070180 	call	807018 <__floatsidf>
  8062f8:	880b883a 	mov	r5,r17
  8062fc:	8009883a 	mov	r4,r16
  806300:	180f883a 	mov	r7,r3
  806304:	100d883a 	mov	r6,r2
  806308:	08012140 	call	801214 <__subdf3>
  80630c:	1021883a 	mov	r16,r2
  806310:	d9001b17 	ldw	r4,108(sp)
  806314:	1823883a 	mov	r17,r3
  806318:	dc001415 	stw	r16,80(sp)
  80631c:	ad400c04 	addi	r21,r21,48
  806320:	dc401515 	stw	r17,84(sp)
  806324:	d8801a17 	ldw	r2,104(sp)
  806328:	e5400005 	stb	r21,0(fp)
  80632c:	202f883a 	mov	r23,r4
  806330:	d9c01b17 	ldw	r7,108(sp)
  806334:	d9001417 	ldw	r4,80(sp)
  806338:	880b883a 	mov	r5,r17
  80633c:	100d883a 	mov	r6,r2
  806340:	102d883a 	mov	r22,r2
  806344:	e7000044 	addi	fp,fp,1
  806348:	0806f080 	call	806f08 <__ltdf2>
  80634c:	103fc30e 	bge	r2,zero,80625c <_dtoa_r+0x1064>
  806350:	d9000417 	ldw	r4,16(sp)
  806354:	d9000d15 	stw	r4,52(sp)
  806358:	003d7106 	br	805920 <_dtoa_r+0x728>
  80635c:	d9801717 	ldw	r6,92(sp)
  806360:	00800084 	movi	r2,2
  806364:	11bde60e 	bge	r2,r6,805b00 <_dtoa_r+0x908>
  806368:	203cfb1e 	bne	r4,zero,805758 <_dtoa_r+0x560>
  80636c:	d9001617 	ldw	r4,88(sp)
  806370:	900b883a 	mov	r5,r18
  806374:	01800144 	movi	r6,5
  806378:	000f883a 	mov	r7,zero
  80637c:	080456c0 	call	80456c <__multadd>
  806380:	d9000717 	ldw	r4,28(sp)
  806384:	100b883a 	mov	r5,r2
  806388:	1025883a 	mov	r18,r2
  80638c:	0803a140 	call	803a14 <__mcmp>
  806390:	00bcf10e 	bge	zero,r2,805758 <_dtoa_r+0x560>
  806394:	d8c00d17 	ldw	r3,52(sp)
  806398:	d9000517 	ldw	r4,20(sp)
  80639c:	d8000615 	stw	zero,24(sp)
  8063a0:	18c00044 	addi	r3,r3,1
  8063a4:	d8c00d15 	stw	r3,52(sp)
  8063a8:	00800c44 	movi	r2,49
  8063ac:	27000044 	addi	fp,r4,1
  8063b0:	20800005 	stb	r2,0(r4)
  8063b4:	003e8906 	br	805ddc <_dtoa_r+0xbe4>
  8063b8:	d8c00517 	ldw	r3,20(sp)
  8063bc:	003bc206 	br	8052c8 <_dtoa_r+0xd0>
  8063c0:	01802074 	movhi	r6,129
  8063c4:	31a8cd04 	addi	r6,r6,-23756
  8063c8:	30c00917 	ldw	r3,36(r6)
  8063cc:	30800817 	ldw	r2,32(r6)
  8063d0:	d9001217 	ldw	r4,72(sp)
  8063d4:	d9401317 	ldw	r5,76(sp)
  8063d8:	180f883a 	mov	r7,r3
  8063dc:	100d883a 	mov	r6,r2
  8063e0:	08013080 	call	801308 <__divdf3>
  8063e4:	948003cc 	andi	r18,r18,15
  8063e8:	058000c4 	movi	r22,3
  8063ec:	1029883a 	mov	r20,r2
  8063f0:	182b883a 	mov	r21,r3
  8063f4:	003c8906 	br	80561c <_dtoa_r+0x424>
  8063f8:	d9001017 	ldw	r4,64(sp)
  8063fc:	d9800917 	ldw	r6,36(sp)
  806400:	0025883a 	mov	r18,zero
  806404:	1105c83a 	sub	r2,r2,r4
  806408:	2089883a 	add	r4,r4,r2
  80640c:	308d883a 	add	r6,r6,r2
  806410:	d9001015 	stw	r4,64(sp)
  806414:	d9800915 	stw	r6,36(sp)
  806418:	003e3206 	br	805ce4 <_dtoa_r+0xaec>
  80641c:	28800044 	addi	r2,r5,1
  806420:	27000044 	addi	fp,r4,1
  806424:	20800005 	stb	r2,0(r4)
  806428:	003e6c06 	br	805ddc <_dtoa_r+0xbe4>
  80642c:	d8800f17 	ldw	r2,60(sp)
  806430:	00bce016 	blt	zero,r2,8057b4 <_dtoa_r+0x5bc>
  806434:	d9800f17 	ldw	r6,60(sp)
  806438:	303cc51e 	bne	r6,zero,805750 <_dtoa_r+0x558>
  80643c:	0005883a 	mov	r2,zero
  806440:	00d00534 	movhi	r3,16404
  806444:	980b883a 	mov	r5,r19
  806448:	180f883a 	mov	r7,r3
  80644c:	9009883a 	mov	r4,r18
  806450:	100d883a 	mov	r6,r2
  806454:	08069240 	call	806924 <__muldf3>
  806458:	180b883a 	mov	r5,r3
  80645c:	a80f883a 	mov	r7,r21
  806460:	1009883a 	mov	r4,r2
  806464:	a00d883a 	mov	r6,r20
  806468:	0806e800 	call	806e80 <__gedf2>
  80646c:	103cb80e 	bge	r2,zero,805750 <_dtoa_r+0x558>
  806470:	0027883a 	mov	r19,zero
  806474:	0025883a 	mov	r18,zero
  806478:	003fc606 	br	806394 <_dtoa_r+0x119c>
  80647c:	99400117 	ldw	r5,4(r19)
  806480:	d9001617 	ldw	r4,88(sp)
  806484:	0803e380 	call	803e38 <_Balloc>
  806488:	99800417 	ldw	r6,16(r19)
  80648c:	11000304 	addi	r4,r2,12
  806490:	99400304 	addi	r5,r19,12
  806494:	318d883a 	add	r6,r6,r6
  806498:	318d883a 	add	r6,r6,r6
  80649c:	31800204 	addi	r6,r6,8
  8064a0:	1023883a 	mov	r17,r2
  8064a4:	080281c0 	call	80281c <memcpy>
  8064a8:	d9001617 	ldw	r4,88(sp)
  8064ac:	880b883a 	mov	r5,r17
  8064b0:	01800044 	movi	r6,1
  8064b4:	08041fc0 	call	8041fc <__lshift>
  8064b8:	100b883a 	mov	r5,r2
  8064bc:	003d9c06 	br	805b30 <_dtoa_r+0x938>
  8064c0:	00800e44 	movi	r2,57
  8064c4:	b8807026 	beq	r23,r2,806688 <_dtoa_r+0x1490>
  8064c8:	b8800044 	addi	r2,r23,1
  8064cc:	b7000044 	addi	fp,r22,1
  8064d0:	b0800005 	stb	r2,0(r22)
  8064d4:	003e4106 	br	805ddc <_dtoa_r+0xbe4>
  8064d8:	d8800317 	ldw	r2,12(sp)
  8064dc:	01802074 	movhi	r6,129
  8064e0:	31a89b04 	addi	r6,r6,-23956
  8064e4:	b009883a 	mov	r4,r22
  8064e8:	100e90fa 	slli	r7,r2,3
  8064ec:	b80b883a 	mov	r5,r23
  8064f0:	398f883a 	add	r7,r7,r6
  8064f4:	38bffe17 	ldw	r2,-8(r7)
  8064f8:	d9800517 	ldw	r6,20(sp)
  8064fc:	38ffff17 	ldw	r3,-4(r7)
  806500:	37000044 	addi	fp,r6,1
  806504:	180f883a 	mov	r7,r3
  806508:	100d883a 	mov	r6,r2
  80650c:	08069240 	call	806924 <__muldf3>
  806510:	a80b883a 	mov	r5,r21
  806514:	a009883a 	mov	r4,r20
  806518:	182f883a 	mov	r23,r3
  80651c:	102d883a 	mov	r22,r2
  806520:	08071100 	call	807110 <__fixdfsi>
  806524:	1009883a 	mov	r4,r2
  806528:	1027883a 	mov	r19,r2
  80652c:	08070180 	call	807018 <__floatsidf>
  806530:	a80b883a 	mov	r5,r21
  806534:	a009883a 	mov	r4,r20
  806538:	180f883a 	mov	r7,r3
  80653c:	100d883a 	mov	r6,r2
  806540:	08012140 	call	801214 <__subdf3>
  806544:	180b883a 	mov	r5,r3
  806548:	d8c00517 	ldw	r3,20(sp)
  80654c:	9cc00c04 	addi	r19,r19,48
  806550:	1009883a 	mov	r4,r2
  806554:	1cc00005 	stb	r19,0(r3)
  806558:	2021883a 	mov	r16,r4
  80655c:	d9000317 	ldw	r4,12(sp)
  806560:	00800044 	movi	r2,1
  806564:	2823883a 	mov	r17,r5
  806568:	20802226 	beq	r4,r2,8065f4 <_dtoa_r+0x13fc>
  80656c:	1029883a 	mov	r20,r2
  806570:	0005883a 	mov	r2,zero
  806574:	00d00934 	movhi	r3,16420
  806578:	180f883a 	mov	r7,r3
  80657c:	100d883a 	mov	r6,r2
  806580:	880b883a 	mov	r5,r17
  806584:	8009883a 	mov	r4,r16
  806588:	08069240 	call	806924 <__muldf3>
  80658c:	180b883a 	mov	r5,r3
  806590:	1009883a 	mov	r4,r2
  806594:	1823883a 	mov	r17,r3
  806598:	1021883a 	mov	r16,r2
  80659c:	08071100 	call	807110 <__fixdfsi>
  8065a0:	1009883a 	mov	r4,r2
  8065a4:	102b883a 	mov	r21,r2
  8065a8:	08070180 	call	807018 <__floatsidf>
  8065ac:	880b883a 	mov	r5,r17
  8065b0:	8009883a 	mov	r4,r16
  8065b4:	180f883a 	mov	r7,r3
  8065b8:	100d883a 	mov	r6,r2
  8065bc:	08012140 	call	801214 <__subdf3>
  8065c0:	180b883a 	mov	r5,r3
  8065c4:	d8c00517 	ldw	r3,20(sp)
  8065c8:	1009883a 	mov	r4,r2
  8065cc:	ad400c04 	addi	r21,r21,48
  8065d0:	1d05883a 	add	r2,r3,r20
  8065d4:	15400005 	stb	r21,0(r2)
  8065d8:	2021883a 	mov	r16,r4
  8065dc:	d9000317 	ldw	r4,12(sp)
  8065e0:	a5000044 	addi	r20,r20,1
  8065e4:	2823883a 	mov	r17,r5
  8065e8:	a13fe11e 	bne	r20,r4,806570 <_dtoa_r+0x1378>
  8065ec:	e505883a 	add	r2,fp,r20
  8065f0:	173fffc4 	addi	fp,r2,-1
  8065f4:	0025883a 	mov	r18,zero
  8065f8:	04cff834 	movhi	r19,16352
  8065fc:	b009883a 	mov	r4,r22
  806600:	b80b883a 	mov	r5,r23
  806604:	900d883a 	mov	r6,r18
  806608:	980f883a 	mov	r7,r19
  80660c:	08012940 	call	801294 <__adddf3>
  806610:	180b883a 	mov	r5,r3
  806614:	1009883a 	mov	r4,r2
  806618:	800d883a 	mov	r6,r16
  80661c:	880f883a 	mov	r7,r17
  806620:	0806f080 	call	806f08 <__ltdf2>
  806624:	103cab16 	blt	r2,zero,8058d4 <_dtoa_r+0x6dc>
  806628:	0009883a 	mov	r4,zero
  80662c:	980b883a 	mov	r5,r19
  806630:	b80f883a 	mov	r7,r23
  806634:	b00d883a 	mov	r6,r22
  806638:	08012140 	call	801214 <__subdf3>
  80663c:	180b883a 	mov	r5,r3
  806640:	880f883a 	mov	r7,r17
  806644:	1009883a 	mov	r4,r2
  806648:	800d883a 	mov	r6,r16
  80664c:	0806df80 	call	806df8 <__gtdf2>
  806650:	00bc470e 	bge	zero,r2,805770 <_dtoa_r+0x578>
  806654:	00c00c04 	movi	r3,48
  806658:	e73fffc4 	addi	fp,fp,-1
  80665c:	e0800007 	ldb	r2,0(fp)
  806660:	10fffd26 	beq	r2,r3,806658 <_dtoa_r+0x1460>
  806664:	d9800417 	ldw	r6,16(sp)
  806668:	e7000044 	addi	fp,fp,1
  80666c:	d9800d15 	stw	r6,52(sp)
  806670:	003cab06 	br	805920 <_dtoa_r+0x728>
  806674:	d8c00f17 	ldw	r3,60(sp)
  806678:	d9001117 	ldw	r4,68(sp)
  80667c:	20e1c83a 	sub	r16,r4,r3
  806680:	0007883a 	mov	r3,zero
  806684:	003d9b06 	br	805cf4 <_dtoa_r+0xafc>
  806688:	00800e44 	movi	r2,57
  80668c:	b0800005 	stb	r2,0(r22)
  806690:	b5800044 	addi	r22,r22,1
  806694:	003dc106 	br	805d9c <_dtoa_r+0xba4>
  806698:	05800084 	movi	r22,2
  80669c:	003bf706 	br	80567c <_dtoa_r+0x484>
  8066a0:	d9000f17 	ldw	r4,60(sp)
  8066a4:	013c000e 	bge	zero,r4,8056a8 <_dtoa_r+0x4b0>
  8066a8:	d9800e17 	ldw	r6,56(sp)
  8066ac:	01bc300e 	bge	zero,r6,805770 <_dtoa_r+0x578>
  8066b0:	0005883a 	mov	r2,zero
  8066b4:	00d00934 	movhi	r3,16420
  8066b8:	a80b883a 	mov	r5,r21
  8066bc:	180f883a 	mov	r7,r3
  8066c0:	a009883a 	mov	r4,r20
  8066c4:	100d883a 	mov	r6,r2
  8066c8:	08069240 	call	806924 <__muldf3>
  8066cc:	b1000044 	addi	r4,r22,1
  8066d0:	1021883a 	mov	r16,r2
  8066d4:	1823883a 	mov	r17,r3
  8066d8:	08070180 	call	807018 <__floatsidf>
  8066dc:	880b883a 	mov	r5,r17
  8066e0:	8009883a 	mov	r4,r16
  8066e4:	180f883a 	mov	r7,r3
  8066e8:	100d883a 	mov	r6,r2
  8066ec:	08069240 	call	806924 <__muldf3>
  8066f0:	0011883a 	mov	r8,zero
  8066f4:	02500734 	movhi	r9,16412
  8066f8:	180b883a 	mov	r5,r3
  8066fc:	480f883a 	mov	r7,r9
  806700:	1009883a 	mov	r4,r2
  806704:	400d883a 	mov	r6,r8
  806708:	08012940 	call	801294 <__adddf3>
  80670c:	102d883a 	mov	r22,r2
  806710:	00bf3034 	movhi	r2,64704
  806714:	10ef883a 	add	r23,r2,r3
  806718:	d8800d17 	ldw	r2,52(sp)
  80671c:	d8c00e17 	ldw	r3,56(sp)
  806720:	8029883a 	mov	r20,r16
  806724:	10bfffc4 	addi	r2,r2,-1
  806728:	882b883a 	mov	r21,r17
  80672c:	d8800415 	stw	r2,16(sp)
  806730:	d8c00315 	stw	r3,12(sp)
  806734:	003e8306 	br	806144 <_dtoa_r+0xf4c>
  806738:	d8800117 	ldw	r2,4(sp)
  80673c:	dc001117 	ldw	r16,68(sp)
  806740:	dc801017 	ldw	r18,64(sp)
  806744:	00c00d84 	movi	r3,54
  806748:	1887c83a 	sub	r3,r3,r2
  80674c:	003d6906 	br	805cf4 <_dtoa_r+0xafc>
  806750:	01800044 	movi	r6,1
  806754:	3021883a 	mov	r16,r6
  806758:	d9800f15 	stw	r6,60(sp)
  80675c:	d9802615 	stw	r6,152(sp)
  806760:	d9800e15 	stw	r6,56(sp)
  806764:	003b9306 	br	8055b4 <_dtoa_r+0x3bc>
  806768:	b021883a 	mov	r16,r22
  80676c:	dd800f15 	stw	r22,60(sp)
  806770:	003b9006 	br	8055b4 <_dtoa_r+0x3bc>
  806774:	103e221e 	bne	r2,zero,806000 <_dtoa_r+0xe08>
  806778:	b880004c 	andi	r2,r23,1
  80677c:	1005003a 	cmpeq	r2,r2,zero
  806780:	103e1f1e 	bne	r2,zero,806000 <_dtoa_r+0xe08>
  806784:	003e1b06 	br	805ff4 <_dtoa_r+0xdfc>
  806788:	d9001617 	ldw	r4,88(sp)
  80678c:	980b883a 	mov	r5,r19
  806790:	01800284 	movi	r6,10
  806794:	000f883a 	mov	r7,zero
  806798:	080456c0 	call	80456c <__multadd>
  80679c:	d8c00e17 	ldw	r3,56(sp)
  8067a0:	1027883a 	mov	r19,r2
  8067a4:	d8c00f15 	stw	r3,60(sp)
  8067a8:	003cd306 	br	805af8 <_dtoa_r+0x900>

008067ac <memmove>:
  8067ac:	2807883a 	mov	r3,r5
  8067b0:	2011883a 	mov	r8,r4
  8067b4:	29000c2e 	bgeu	r5,r4,8067e8 <memmove+0x3c>
  8067b8:	298f883a 	add	r7,r5,r6
  8067bc:	21c00a2e 	bgeu	r4,r7,8067e8 <memmove+0x3c>
  8067c0:	30000726 	beq	r6,zero,8067e0 <memmove+0x34>
  8067c4:	2187883a 	add	r3,r4,r6
  8067c8:	198dc83a 	sub	r6,r3,r6
  8067cc:	39ffffc4 	addi	r7,r7,-1
  8067d0:	38800003 	ldbu	r2,0(r7)
  8067d4:	18ffffc4 	addi	r3,r3,-1
  8067d8:	18800005 	stb	r2,0(r3)
  8067dc:	19bffb1e 	bne	r3,r6,8067cc <memmove+0x20>
  8067e0:	2005883a 	mov	r2,r4
  8067e4:	f800283a 	ret
  8067e8:	01c003c4 	movi	r7,15
  8067ec:	39800a36 	bltu	r7,r6,806818 <memmove+0x6c>
  8067f0:	303ffb26 	beq	r6,zero,8067e0 <memmove+0x34>
  8067f4:	400f883a 	mov	r7,r8
  8067f8:	320d883a 	add	r6,r6,r8
  8067fc:	28800003 	ldbu	r2,0(r5)
  806800:	29400044 	addi	r5,r5,1
  806804:	38800005 	stb	r2,0(r7)
  806808:	39c00044 	addi	r7,r7,1
  80680c:	39bffb1e 	bne	r7,r6,8067fc <memmove+0x50>
  806810:	2005883a 	mov	r2,r4
  806814:	f800283a 	ret
  806818:	1904b03a 	or	r2,r3,r4
  80681c:	108000cc 	andi	r2,r2,3
  806820:	103ff31e 	bne	r2,zero,8067f0 <memmove+0x44>
  806824:	3811883a 	mov	r8,r7
  806828:	180b883a 	mov	r5,r3
  80682c:	200f883a 	mov	r7,r4
  806830:	28c00017 	ldw	r3,0(r5)
  806834:	31bffc04 	addi	r6,r6,-16
  806838:	38c00015 	stw	r3,0(r7)
  80683c:	28800117 	ldw	r2,4(r5)
  806840:	38800115 	stw	r2,4(r7)
  806844:	28c00217 	ldw	r3,8(r5)
  806848:	38c00215 	stw	r3,8(r7)
  80684c:	28800317 	ldw	r2,12(r5)
  806850:	29400404 	addi	r5,r5,16
  806854:	38800315 	stw	r2,12(r7)
  806858:	39c00404 	addi	r7,r7,16
  80685c:	41bff436 	bltu	r8,r6,806830 <memmove+0x84>
  806860:	008000c4 	movi	r2,3
  806864:	1180072e 	bgeu	r2,r6,806884 <memmove+0xd8>
  806868:	1007883a 	mov	r3,r2
  80686c:	28800017 	ldw	r2,0(r5)
  806870:	31bfff04 	addi	r6,r6,-4
  806874:	29400104 	addi	r5,r5,4
  806878:	38800015 	stw	r2,0(r7)
  80687c:	39c00104 	addi	r7,r7,4
  806880:	19bffa36 	bltu	r3,r6,80686c <memmove+0xc0>
  806884:	3811883a 	mov	r8,r7
  806888:	003fd906 	br	8067f0 <memmove+0x44>

0080688c <memset>:
  80688c:	008000c4 	movi	r2,3
  806890:	29403fcc 	andi	r5,r5,255
  806894:	2007883a 	mov	r3,r4
  806898:	1180022e 	bgeu	r2,r6,8068a4 <memset+0x18>
  80689c:	2084703a 	and	r2,r4,r2
  8068a0:	10000826 	beq	r2,zero,8068c4 <memset+0x38>
  8068a4:	30000526 	beq	r6,zero,8068bc <memset+0x30>
  8068a8:	2805883a 	mov	r2,r5
  8068ac:	30cd883a 	add	r6,r6,r3
  8068b0:	18800005 	stb	r2,0(r3)
  8068b4:	18c00044 	addi	r3,r3,1
  8068b8:	19bffd1e 	bne	r3,r6,8068b0 <memset+0x24>
  8068bc:	2005883a 	mov	r2,r4
  8068c0:	f800283a 	ret
  8068c4:	2804923a 	slli	r2,r5,8
  8068c8:	020003c4 	movi	r8,15
  8068cc:	200f883a 	mov	r7,r4
  8068d0:	2884b03a 	or	r2,r5,r2
  8068d4:	1006943a 	slli	r3,r2,16
  8068d8:	10c6b03a 	or	r3,r2,r3
  8068dc:	41800a2e 	bgeu	r8,r6,806908 <memset+0x7c>
  8068e0:	4005883a 	mov	r2,r8
  8068e4:	31bffc04 	addi	r6,r6,-16
  8068e8:	38c00015 	stw	r3,0(r7)
  8068ec:	38c00115 	stw	r3,4(r7)
  8068f0:	38c00215 	stw	r3,8(r7)
  8068f4:	38c00315 	stw	r3,12(r7)
  8068f8:	39c00404 	addi	r7,r7,16
  8068fc:	11bff936 	bltu	r2,r6,8068e4 <memset+0x58>
  806900:	008000c4 	movi	r2,3
  806904:	1180052e 	bgeu	r2,r6,80691c <memset+0x90>
  806908:	31bfff04 	addi	r6,r6,-4
  80690c:	008000c4 	movi	r2,3
  806910:	38c00015 	stw	r3,0(r7)
  806914:	39c00104 	addi	r7,r7,4
  806918:	11bffb36 	bltu	r2,r6,806908 <memset+0x7c>
  80691c:	3807883a 	mov	r3,r7
  806920:	003fe006 	br	8068a4 <memset+0x18>

00806924 <__muldf3>:
  806924:	deffe004 	addi	sp,sp,-128
  806928:	dc401815 	stw	r17,96(sp)
  80692c:	dc400404 	addi	r17,sp,16
  806930:	2011883a 	mov	r8,r4
  806934:	2813883a 	mov	r9,r5
  806938:	dc001715 	stw	r16,92(sp)
  80693c:	d809883a 	mov	r4,sp
  806940:	880b883a 	mov	r5,r17
  806944:	dc000904 	addi	r16,sp,36
  806948:	dfc01f15 	stw	ra,124(sp)
  80694c:	da400115 	stw	r9,4(sp)
  806950:	d9c00315 	stw	r7,12(sp)
  806954:	da000015 	stw	r8,0(sp)
  806958:	d9800215 	stw	r6,8(sp)
  80695c:	ddc01e15 	stw	r23,120(sp)
  806960:	dd801d15 	stw	r22,116(sp)
  806964:	dd401c15 	stw	r21,112(sp)
  806968:	dd001b15 	stw	r20,108(sp)
  80696c:	dcc01a15 	stw	r19,104(sp)
  806970:	dc801915 	stw	r18,100(sp)
  806974:	0801d800 	call	801d80 <__unpack_d>
  806978:	d9000204 	addi	r4,sp,8
  80697c:	800b883a 	mov	r5,r16
  806980:	0801d800 	call	801d80 <__unpack_d>
  806984:	d9000417 	ldw	r4,16(sp)
  806988:	00800044 	movi	r2,1
  80698c:	1100102e 	bgeu	r2,r4,8069d0 <__muldf3+0xac>
  806990:	d8c00917 	ldw	r3,36(sp)
  806994:	10c0062e 	bgeu	r2,r3,8069b0 <__muldf3+0x8c>
  806998:	00800104 	movi	r2,4
  80699c:	20800a26 	beq	r4,r2,8069c8 <__muldf3+0xa4>
  8069a0:	1880cc26 	beq	r3,r2,806cd4 <__muldf3+0x3b0>
  8069a4:	00800084 	movi	r2,2
  8069a8:	20800926 	beq	r4,r2,8069d0 <__muldf3+0xac>
  8069ac:	1880191e 	bne	r3,r2,806a14 <__muldf3+0xf0>
  8069b0:	d8c00a17 	ldw	r3,40(sp)
  8069b4:	d8800517 	ldw	r2,20(sp)
  8069b8:	8009883a 	mov	r4,r16
  8069bc:	10c4c03a 	cmpne	r2,r2,r3
  8069c0:	d8800a15 	stw	r2,40(sp)
  8069c4:	00000706 	br	8069e4 <__muldf3+0xc0>
  8069c8:	00800084 	movi	r2,2
  8069cc:	1880c326 	beq	r3,r2,806cdc <__muldf3+0x3b8>
  8069d0:	d8800517 	ldw	r2,20(sp)
  8069d4:	d8c00a17 	ldw	r3,40(sp)
  8069d8:	8809883a 	mov	r4,r17
  8069dc:	10c4c03a 	cmpne	r2,r2,r3
  8069e0:	d8800515 	stw	r2,20(sp)
  8069e4:	0801a6c0 	call	801a6c <__pack_d>
  8069e8:	dfc01f17 	ldw	ra,124(sp)
  8069ec:	ddc01e17 	ldw	r23,120(sp)
  8069f0:	dd801d17 	ldw	r22,116(sp)
  8069f4:	dd401c17 	ldw	r21,112(sp)
  8069f8:	dd001b17 	ldw	r20,108(sp)
  8069fc:	dcc01a17 	ldw	r19,104(sp)
  806a00:	dc801917 	ldw	r18,100(sp)
  806a04:	dc401817 	ldw	r17,96(sp)
  806a08:	dc001717 	ldw	r16,92(sp)
  806a0c:	dec02004 	addi	sp,sp,128
  806a10:	f800283a 	ret
  806a14:	dd800717 	ldw	r22,28(sp)
  806a18:	dc800c17 	ldw	r18,48(sp)
  806a1c:	002b883a 	mov	r21,zero
  806a20:	0023883a 	mov	r17,zero
  806a24:	a80b883a 	mov	r5,r21
  806a28:	b00d883a 	mov	r6,r22
  806a2c:	880f883a 	mov	r7,r17
  806a30:	ddc00817 	ldw	r23,32(sp)
  806a34:	dcc00d17 	ldw	r19,52(sp)
  806a38:	9009883a 	mov	r4,r18
  806a3c:	080172c0 	call	80172c <__muldi3>
  806a40:	001b883a 	mov	r13,zero
  806a44:	680f883a 	mov	r7,r13
  806a48:	b009883a 	mov	r4,r22
  806a4c:	000b883a 	mov	r5,zero
  806a50:	980d883a 	mov	r6,r19
  806a54:	b82d883a 	mov	r22,r23
  806a58:	002f883a 	mov	r23,zero
  806a5c:	db401615 	stw	r13,88(sp)
  806a60:	d8801315 	stw	r2,76(sp)
  806a64:	d8c01415 	stw	r3,80(sp)
  806a68:	dcc01515 	stw	r19,84(sp)
  806a6c:	080172c0 	call	80172c <__muldi3>
  806a70:	b00d883a 	mov	r6,r22
  806a74:	000b883a 	mov	r5,zero
  806a78:	9009883a 	mov	r4,r18
  806a7c:	b80f883a 	mov	r7,r23
  806a80:	1021883a 	mov	r16,r2
  806a84:	1823883a 	mov	r17,r3
  806a88:	080172c0 	call	80172c <__muldi3>
  806a8c:	8085883a 	add	r2,r16,r2
  806a90:	140d803a 	cmpltu	r6,r2,r16
  806a94:	88c7883a 	add	r3,r17,r3
  806a98:	30cd883a 	add	r6,r6,r3
  806a9c:	1029883a 	mov	r20,r2
  806aa0:	302b883a 	mov	r21,r6
  806aa4:	da801317 	ldw	r10,76(sp)
  806aa8:	dac01417 	ldw	r11,80(sp)
  806aac:	db001517 	ldw	r12,84(sp)
  806ab0:	db401617 	ldw	r13,88(sp)
  806ab4:	3440612e 	bgeu	r6,r17,806c3c <__muldf3+0x318>
  806ab8:	0009883a 	mov	r4,zero
  806abc:	5105883a 	add	r2,r10,r4
  806ac0:	128d803a 	cmpltu	r6,r2,r10
  806ac4:	5d07883a 	add	r3,r11,r20
  806ac8:	30cd883a 	add	r6,r6,r3
  806acc:	0021883a 	mov	r16,zero
  806ad0:	04400044 	movi	r17,1
  806ad4:	1025883a 	mov	r18,r2
  806ad8:	3027883a 	mov	r19,r6
  806adc:	32c06236 	bltu	r6,r11,806c68 <__muldf3+0x344>
  806ae0:	59807a26 	beq	r11,r6,806ccc <__muldf3+0x3a8>
  806ae4:	680b883a 	mov	r5,r13
  806ae8:	b80f883a 	mov	r7,r23
  806aec:	6009883a 	mov	r4,r12
  806af0:	b00d883a 	mov	r6,r22
  806af4:	080172c0 	call	80172c <__muldi3>
  806af8:	1009883a 	mov	r4,r2
  806afc:	000f883a 	mov	r7,zero
  806b00:	1545883a 	add	r2,r2,r21
  806b04:	1111803a 	cmpltu	r8,r2,r4
  806b08:	19c7883a 	add	r3,r3,r7
  806b0c:	40c7883a 	add	r3,r8,r3
  806b10:	88cb883a 	add	r5,r17,r3
  806b14:	d8c00617 	ldw	r3,24(sp)
  806b18:	8089883a 	add	r4,r16,r2
  806b1c:	d8800b17 	ldw	r2,44(sp)
  806b20:	18c00104 	addi	r3,r3,4
  806b24:	240d803a 	cmpltu	r6,r4,r16
  806b28:	10c7883a 	add	r3,r2,r3
  806b2c:	2013883a 	mov	r9,r4
  806b30:	d8800a17 	ldw	r2,40(sp)
  806b34:	d9000517 	ldw	r4,20(sp)
  806b38:	314d883a 	add	r6,r6,r5
  806b3c:	3015883a 	mov	r10,r6
  806b40:	2088c03a 	cmpne	r4,r4,r2
  806b44:	00880034 	movhi	r2,8192
  806b48:	10bfffc4 	addi	r2,r2,-1
  806b4c:	d9000f15 	stw	r4,60(sp)
  806b50:	d8c01015 	stw	r3,64(sp)
  806b54:	1180162e 	bgeu	r2,r6,806bb0 <__muldf3+0x28c>
  806b58:	1811883a 	mov	r8,r3
  806b5c:	101f883a 	mov	r15,r2
  806b60:	980497fa 	slli	r2,r19,31
  806b64:	9016d07a 	srli	r11,r18,1
  806b68:	500697fa 	slli	r3,r10,31
  806b6c:	480cd07a 	srli	r6,r9,1
  806b70:	500ed07a 	srli	r7,r10,1
  806b74:	12d6b03a 	or	r11,r2,r11
  806b78:	00800044 	movi	r2,1
  806b7c:	198cb03a 	or	r6,r3,r6
  806b80:	4888703a 	and	r4,r9,r2
  806b84:	9818d07a 	srli	r12,r19,1
  806b88:	001b883a 	mov	r13,zero
  806b8c:	03a00034 	movhi	r14,32768
  806b90:	3013883a 	mov	r9,r6
  806b94:	3815883a 	mov	r10,r7
  806b98:	4091883a 	add	r8,r8,r2
  806b9c:	20000226 	beq	r4,zero,806ba8 <__muldf3+0x284>
  806ba0:	5b64b03a 	or	r18,r11,r13
  806ba4:	63a6b03a 	or	r19,r12,r14
  806ba8:	7abfed36 	bltu	r15,r10,806b60 <__muldf3+0x23c>
  806bac:	da001015 	stw	r8,64(sp)
  806bb0:	00840034 	movhi	r2,4096
  806bb4:	10bfffc4 	addi	r2,r2,-1
  806bb8:	12801436 	bltu	r2,r10,806c0c <__muldf3+0x2e8>
  806bbc:	da001017 	ldw	r8,64(sp)
  806bc0:	101f883a 	mov	r15,r2
  806bc4:	4a45883a 	add	r2,r9,r9
  806bc8:	124d803a 	cmpltu	r6,r2,r9
  806bcc:	5287883a 	add	r3,r10,r10
  806bd0:	9497883a 	add	r11,r18,r18
  806bd4:	5c8f803a 	cmpltu	r7,r11,r18
  806bd8:	9cd9883a 	add	r12,r19,r19
  806bdc:	01000044 	movi	r4,1
  806be0:	30cd883a 	add	r6,r6,r3
  806be4:	3b0f883a 	add	r7,r7,r12
  806be8:	423fffc4 	addi	r8,r8,-1
  806bec:	1013883a 	mov	r9,r2
  806bf0:	3015883a 	mov	r10,r6
  806bf4:	111ab03a 	or	r13,r2,r4
  806bf8:	98003016 	blt	r19,zero,806cbc <__muldf3+0x398>
  806bfc:	5825883a 	mov	r18,r11
  806c00:	3827883a 	mov	r19,r7
  806c04:	7abfef2e 	bgeu	r15,r10,806bc4 <__muldf3+0x2a0>
  806c08:	da001015 	stw	r8,64(sp)
  806c0c:	00803fc4 	movi	r2,255
  806c10:	488e703a 	and	r7,r9,r2
  806c14:	00802004 	movi	r2,128
  806c18:	0007883a 	mov	r3,zero
  806c1c:	0011883a 	mov	r8,zero
  806c20:	38801826 	beq	r7,r2,806c84 <__muldf3+0x360>
  806c24:	008000c4 	movi	r2,3
  806c28:	d9000e04 	addi	r4,sp,56
  806c2c:	da801215 	stw	r10,72(sp)
  806c30:	d8800e15 	stw	r2,56(sp)
  806c34:	da401115 	stw	r9,68(sp)
  806c38:	003f6a06 	br	8069e4 <__muldf3+0xc0>
  806c3c:	89802126 	beq	r17,r6,806cc4 <__muldf3+0x3a0>
  806c40:	0009883a 	mov	r4,zero
  806c44:	5105883a 	add	r2,r10,r4
  806c48:	128d803a 	cmpltu	r6,r2,r10
  806c4c:	5d07883a 	add	r3,r11,r20
  806c50:	30cd883a 	add	r6,r6,r3
  806c54:	0021883a 	mov	r16,zero
  806c58:	0023883a 	mov	r17,zero
  806c5c:	1025883a 	mov	r18,r2
  806c60:	3027883a 	mov	r19,r6
  806c64:	32ff9e2e 	bgeu	r6,r11,806ae0 <__muldf3+0x1bc>
  806c68:	00800044 	movi	r2,1
  806c6c:	8089883a 	add	r4,r16,r2
  806c70:	240d803a 	cmpltu	r6,r4,r16
  806c74:	344d883a 	add	r6,r6,r17
  806c78:	2021883a 	mov	r16,r4
  806c7c:	3023883a 	mov	r17,r6
  806c80:	003f9806 	br	806ae4 <__muldf3+0x1c0>
  806c84:	403fe71e 	bne	r8,zero,806c24 <__muldf3+0x300>
  806c88:	01004004 	movi	r4,256
  806c8c:	4904703a 	and	r2,r9,r4
  806c90:	10c4b03a 	or	r2,r2,r3
  806c94:	103fe31e 	bne	r2,zero,806c24 <__muldf3+0x300>
  806c98:	94c4b03a 	or	r2,r18,r19
  806c9c:	103fe126 	beq	r2,zero,806c24 <__muldf3+0x300>
  806ca0:	49c5883a 	add	r2,r9,r7
  806ca4:	1251803a 	cmpltu	r8,r2,r9
  806ca8:	4291883a 	add	r8,r8,r10
  806cac:	013fc004 	movi	r4,-256
  806cb0:	1112703a 	and	r9,r2,r4
  806cb4:	4015883a 	mov	r10,r8
  806cb8:	003fda06 	br	806c24 <__muldf3+0x300>
  806cbc:	6813883a 	mov	r9,r13
  806cc0:	003fce06 	br	806bfc <__muldf3+0x2d8>
  806cc4:	143f7c36 	bltu	r2,r16,806ab8 <__muldf3+0x194>
  806cc8:	003fdd06 	br	806c40 <__muldf3+0x31c>
  806ccc:	12bf852e 	bgeu	r2,r10,806ae4 <__muldf3+0x1c0>
  806cd0:	003fe506 	br	806c68 <__muldf3+0x344>
  806cd4:	00800084 	movi	r2,2
  806cd8:	20bf351e 	bne	r4,r2,8069b0 <__muldf3+0x8c>
  806cdc:	01002074 	movhi	r4,129
  806ce0:	21285504 	addi	r4,r4,-24236
  806ce4:	003f3f06 	br	8069e4 <__muldf3+0xc0>

00806ce8 <__eqdf2>:
  806ce8:	deffef04 	addi	sp,sp,-68
  806cec:	dc400f15 	stw	r17,60(sp)
  806cf0:	dc400404 	addi	r17,sp,16
  806cf4:	2005883a 	mov	r2,r4
  806cf8:	2807883a 	mov	r3,r5
  806cfc:	dc000e15 	stw	r16,56(sp)
  806d00:	d809883a 	mov	r4,sp
  806d04:	880b883a 	mov	r5,r17
  806d08:	dc000904 	addi	r16,sp,36
  806d0c:	d8c00115 	stw	r3,4(sp)
  806d10:	d8800015 	stw	r2,0(sp)
  806d14:	d9800215 	stw	r6,8(sp)
  806d18:	dfc01015 	stw	ra,64(sp)
  806d1c:	d9c00315 	stw	r7,12(sp)
  806d20:	0801d800 	call	801d80 <__unpack_d>
  806d24:	d9000204 	addi	r4,sp,8
  806d28:	800b883a 	mov	r5,r16
  806d2c:	0801d800 	call	801d80 <__unpack_d>
  806d30:	d8800417 	ldw	r2,16(sp)
  806d34:	00c00044 	movi	r3,1
  806d38:	180d883a 	mov	r6,r3
  806d3c:	1880062e 	bgeu	r3,r2,806d58 <__eqdf2+0x70>
  806d40:	d8800917 	ldw	r2,36(sp)
  806d44:	8809883a 	mov	r4,r17
  806d48:	800b883a 	mov	r5,r16
  806d4c:	1880022e 	bgeu	r3,r2,806d58 <__eqdf2+0x70>
  806d50:	08073340 	call	807334 <__fpcmp_parts_d>
  806d54:	100d883a 	mov	r6,r2
  806d58:	3005883a 	mov	r2,r6
  806d5c:	dfc01017 	ldw	ra,64(sp)
  806d60:	dc400f17 	ldw	r17,60(sp)
  806d64:	dc000e17 	ldw	r16,56(sp)
  806d68:	dec01104 	addi	sp,sp,68
  806d6c:	f800283a 	ret

00806d70 <__nedf2>:
  806d70:	deffef04 	addi	sp,sp,-68
  806d74:	dc400f15 	stw	r17,60(sp)
  806d78:	dc400404 	addi	r17,sp,16
  806d7c:	2005883a 	mov	r2,r4
  806d80:	2807883a 	mov	r3,r5
  806d84:	dc000e15 	stw	r16,56(sp)
  806d88:	d809883a 	mov	r4,sp
  806d8c:	880b883a 	mov	r5,r17
  806d90:	dc000904 	addi	r16,sp,36
  806d94:	d8c00115 	stw	r3,4(sp)
  806d98:	d8800015 	stw	r2,0(sp)
  806d9c:	d9800215 	stw	r6,8(sp)
  806da0:	dfc01015 	stw	ra,64(sp)
  806da4:	d9c00315 	stw	r7,12(sp)
  806da8:	0801d800 	call	801d80 <__unpack_d>
  806dac:	d9000204 	addi	r4,sp,8
  806db0:	800b883a 	mov	r5,r16
  806db4:	0801d800 	call	801d80 <__unpack_d>
  806db8:	d8800417 	ldw	r2,16(sp)
  806dbc:	00c00044 	movi	r3,1
  806dc0:	180d883a 	mov	r6,r3
  806dc4:	1880062e 	bgeu	r3,r2,806de0 <__nedf2+0x70>
  806dc8:	d8800917 	ldw	r2,36(sp)
  806dcc:	8809883a 	mov	r4,r17
  806dd0:	800b883a 	mov	r5,r16
  806dd4:	1880022e 	bgeu	r3,r2,806de0 <__nedf2+0x70>
  806dd8:	08073340 	call	807334 <__fpcmp_parts_d>
  806ddc:	100d883a 	mov	r6,r2
  806de0:	3005883a 	mov	r2,r6
  806de4:	dfc01017 	ldw	ra,64(sp)
  806de8:	dc400f17 	ldw	r17,60(sp)
  806dec:	dc000e17 	ldw	r16,56(sp)
  806df0:	dec01104 	addi	sp,sp,68
  806df4:	f800283a 	ret

00806df8 <__gtdf2>:
  806df8:	deffef04 	addi	sp,sp,-68
  806dfc:	dc400f15 	stw	r17,60(sp)
  806e00:	dc400404 	addi	r17,sp,16
  806e04:	2005883a 	mov	r2,r4
  806e08:	2807883a 	mov	r3,r5
  806e0c:	dc000e15 	stw	r16,56(sp)
  806e10:	d809883a 	mov	r4,sp
  806e14:	880b883a 	mov	r5,r17
  806e18:	dc000904 	addi	r16,sp,36
  806e1c:	d8c00115 	stw	r3,4(sp)
  806e20:	d8800015 	stw	r2,0(sp)
  806e24:	d9800215 	stw	r6,8(sp)
  806e28:	dfc01015 	stw	ra,64(sp)
  806e2c:	d9c00315 	stw	r7,12(sp)
  806e30:	0801d800 	call	801d80 <__unpack_d>
  806e34:	d9000204 	addi	r4,sp,8
  806e38:	800b883a 	mov	r5,r16
  806e3c:	0801d800 	call	801d80 <__unpack_d>
  806e40:	d8800417 	ldw	r2,16(sp)
  806e44:	00c00044 	movi	r3,1
  806e48:	01bfffc4 	movi	r6,-1
  806e4c:	1880062e 	bgeu	r3,r2,806e68 <__gtdf2+0x70>
  806e50:	d8800917 	ldw	r2,36(sp)
  806e54:	8809883a 	mov	r4,r17
  806e58:	800b883a 	mov	r5,r16
  806e5c:	1880022e 	bgeu	r3,r2,806e68 <__gtdf2+0x70>
  806e60:	08073340 	call	807334 <__fpcmp_parts_d>
  806e64:	100d883a 	mov	r6,r2
  806e68:	3005883a 	mov	r2,r6
  806e6c:	dfc01017 	ldw	ra,64(sp)
  806e70:	dc400f17 	ldw	r17,60(sp)
  806e74:	dc000e17 	ldw	r16,56(sp)
  806e78:	dec01104 	addi	sp,sp,68
  806e7c:	f800283a 	ret

00806e80 <__gedf2>:
  806e80:	deffef04 	addi	sp,sp,-68
  806e84:	dc400f15 	stw	r17,60(sp)
  806e88:	dc400404 	addi	r17,sp,16
  806e8c:	2005883a 	mov	r2,r4
  806e90:	2807883a 	mov	r3,r5
  806e94:	dc000e15 	stw	r16,56(sp)
  806e98:	d809883a 	mov	r4,sp
  806e9c:	880b883a 	mov	r5,r17
  806ea0:	dc000904 	addi	r16,sp,36
  806ea4:	d8c00115 	stw	r3,4(sp)
  806ea8:	d8800015 	stw	r2,0(sp)
  806eac:	d9800215 	stw	r6,8(sp)
  806eb0:	dfc01015 	stw	ra,64(sp)
  806eb4:	d9c00315 	stw	r7,12(sp)
  806eb8:	0801d800 	call	801d80 <__unpack_d>
  806ebc:	d9000204 	addi	r4,sp,8
  806ec0:	800b883a 	mov	r5,r16
  806ec4:	0801d800 	call	801d80 <__unpack_d>
  806ec8:	d8800417 	ldw	r2,16(sp)
  806ecc:	00c00044 	movi	r3,1
  806ed0:	01bfffc4 	movi	r6,-1
  806ed4:	1880062e 	bgeu	r3,r2,806ef0 <__gedf2+0x70>
  806ed8:	d8800917 	ldw	r2,36(sp)
  806edc:	8809883a 	mov	r4,r17
  806ee0:	800b883a 	mov	r5,r16
  806ee4:	1880022e 	bgeu	r3,r2,806ef0 <__gedf2+0x70>
  806ee8:	08073340 	call	807334 <__fpcmp_parts_d>
  806eec:	100d883a 	mov	r6,r2
  806ef0:	3005883a 	mov	r2,r6
  806ef4:	dfc01017 	ldw	ra,64(sp)
  806ef8:	dc400f17 	ldw	r17,60(sp)
  806efc:	dc000e17 	ldw	r16,56(sp)
  806f00:	dec01104 	addi	sp,sp,68
  806f04:	f800283a 	ret

00806f08 <__ltdf2>:
  806f08:	deffef04 	addi	sp,sp,-68
  806f0c:	dc400f15 	stw	r17,60(sp)
  806f10:	dc400404 	addi	r17,sp,16
  806f14:	2005883a 	mov	r2,r4
  806f18:	2807883a 	mov	r3,r5
  806f1c:	dc000e15 	stw	r16,56(sp)
  806f20:	d809883a 	mov	r4,sp
  806f24:	880b883a 	mov	r5,r17
  806f28:	dc000904 	addi	r16,sp,36
  806f2c:	d8c00115 	stw	r3,4(sp)
  806f30:	d8800015 	stw	r2,0(sp)
  806f34:	d9800215 	stw	r6,8(sp)
  806f38:	dfc01015 	stw	ra,64(sp)
  806f3c:	d9c00315 	stw	r7,12(sp)
  806f40:	0801d800 	call	801d80 <__unpack_d>
  806f44:	d9000204 	addi	r4,sp,8
  806f48:	800b883a 	mov	r5,r16
  806f4c:	0801d800 	call	801d80 <__unpack_d>
  806f50:	d8800417 	ldw	r2,16(sp)
  806f54:	00c00044 	movi	r3,1
  806f58:	180d883a 	mov	r6,r3
  806f5c:	1880062e 	bgeu	r3,r2,806f78 <__ltdf2+0x70>
  806f60:	d8800917 	ldw	r2,36(sp)
  806f64:	8809883a 	mov	r4,r17
  806f68:	800b883a 	mov	r5,r16
  806f6c:	1880022e 	bgeu	r3,r2,806f78 <__ltdf2+0x70>
  806f70:	08073340 	call	807334 <__fpcmp_parts_d>
  806f74:	100d883a 	mov	r6,r2
  806f78:	3005883a 	mov	r2,r6
  806f7c:	dfc01017 	ldw	ra,64(sp)
  806f80:	dc400f17 	ldw	r17,60(sp)
  806f84:	dc000e17 	ldw	r16,56(sp)
  806f88:	dec01104 	addi	sp,sp,68
  806f8c:	f800283a 	ret

00806f90 <__ledf2>:
  806f90:	deffef04 	addi	sp,sp,-68
  806f94:	dc400f15 	stw	r17,60(sp)
  806f98:	dc400404 	addi	r17,sp,16
  806f9c:	2005883a 	mov	r2,r4
  806fa0:	2807883a 	mov	r3,r5
  806fa4:	dc000e15 	stw	r16,56(sp)
  806fa8:	d809883a 	mov	r4,sp
  806fac:	880b883a 	mov	r5,r17
  806fb0:	dc000904 	addi	r16,sp,36
  806fb4:	d8c00115 	stw	r3,4(sp)
  806fb8:	d8800015 	stw	r2,0(sp)
  806fbc:	d9800215 	stw	r6,8(sp)
  806fc0:	dfc01015 	stw	ra,64(sp)
  806fc4:	d9c00315 	stw	r7,12(sp)
  806fc8:	0801d800 	call	801d80 <__unpack_d>
  806fcc:	d9000204 	addi	r4,sp,8
  806fd0:	800b883a 	mov	r5,r16
  806fd4:	0801d800 	call	801d80 <__unpack_d>
  806fd8:	d8800417 	ldw	r2,16(sp)
  806fdc:	00c00044 	movi	r3,1
  806fe0:	180d883a 	mov	r6,r3
  806fe4:	1880062e 	bgeu	r3,r2,807000 <__ledf2+0x70>
  806fe8:	d8800917 	ldw	r2,36(sp)
  806fec:	8809883a 	mov	r4,r17
  806ff0:	800b883a 	mov	r5,r16
  806ff4:	1880022e 	bgeu	r3,r2,807000 <__ledf2+0x70>
  806ff8:	08073340 	call	807334 <__fpcmp_parts_d>
  806ffc:	100d883a 	mov	r6,r2
  807000:	3005883a 	mov	r2,r6
  807004:	dfc01017 	ldw	ra,64(sp)
  807008:	dc400f17 	ldw	r17,60(sp)
  80700c:	dc000e17 	ldw	r16,56(sp)
  807010:	dec01104 	addi	sp,sp,68
  807014:	f800283a 	ret

00807018 <__floatsidf>:
  807018:	2006d7fa 	srli	r3,r4,31
  80701c:	defff604 	addi	sp,sp,-40
  807020:	008000c4 	movi	r2,3
  807024:	dfc00915 	stw	ra,36(sp)
  807028:	dcc00815 	stw	r19,32(sp)
  80702c:	dc800715 	stw	r18,28(sp)
  807030:	dc400615 	stw	r17,24(sp)
  807034:	dc000515 	stw	r16,20(sp)
  807038:	d8800015 	stw	r2,0(sp)
  80703c:	d8c00115 	stw	r3,4(sp)
  807040:	20000f1e 	bne	r4,zero,807080 <__floatsidf+0x68>
  807044:	00800084 	movi	r2,2
  807048:	d8800015 	stw	r2,0(sp)
  80704c:	d809883a 	mov	r4,sp
  807050:	0801a6c0 	call	801a6c <__pack_d>
  807054:	1009883a 	mov	r4,r2
  807058:	180b883a 	mov	r5,r3
  80705c:	2005883a 	mov	r2,r4
  807060:	2807883a 	mov	r3,r5
  807064:	dfc00917 	ldw	ra,36(sp)
  807068:	dcc00817 	ldw	r19,32(sp)
  80706c:	dc800717 	ldw	r18,28(sp)
  807070:	dc400617 	ldw	r17,24(sp)
  807074:	dc000517 	ldw	r16,20(sp)
  807078:	dec00a04 	addi	sp,sp,40
  80707c:	f800283a 	ret
  807080:	00800f04 	movi	r2,60
  807084:	1807003a 	cmpeq	r3,r3,zero
  807088:	d8800215 	stw	r2,8(sp)
  80708c:	18001126 	beq	r3,zero,8070d4 <__floatsidf+0xbc>
  807090:	0027883a 	mov	r19,zero
  807094:	2025883a 	mov	r18,r4
  807098:	d9000315 	stw	r4,12(sp)
  80709c:	dcc00415 	stw	r19,16(sp)
  8070a0:	08017c40 	call	8017c4 <__clzsi2>
  8070a4:	11000744 	addi	r4,r2,29
  8070a8:	013fe80e 	bge	zero,r4,80704c <__floatsidf+0x34>
  8070ac:	10bfff44 	addi	r2,r2,-3
  8070b0:	10000c16 	blt	r2,zero,8070e4 <__floatsidf+0xcc>
  8070b4:	90a2983a 	sll	r17,r18,r2
  8070b8:	0021883a 	mov	r16,zero
  8070bc:	d8800217 	ldw	r2,8(sp)
  8070c0:	dc400415 	stw	r17,16(sp)
  8070c4:	dc000315 	stw	r16,12(sp)
  8070c8:	1105c83a 	sub	r2,r2,r4
  8070cc:	d8800215 	stw	r2,8(sp)
  8070d0:	003fde06 	br	80704c <__floatsidf+0x34>
  8070d4:	00a00034 	movhi	r2,32768
  8070d8:	20800a26 	beq	r4,r2,807104 <__floatsidf+0xec>
  8070dc:	0109c83a 	sub	r4,zero,r4
  8070e0:	003feb06 	br	807090 <__floatsidf+0x78>
  8070e4:	9006d07a 	srli	r3,r18,1
  8070e8:	008007c4 	movi	r2,31
  8070ec:	1105c83a 	sub	r2,r2,r4
  8070f0:	1886d83a 	srl	r3,r3,r2
  8070f4:	9922983a 	sll	r17,r19,r4
  8070f8:	9120983a 	sll	r16,r18,r4
  8070fc:	1c62b03a 	or	r17,r3,r17
  807100:	003fee06 	br	8070bc <__floatsidf+0xa4>
  807104:	0009883a 	mov	r4,zero
  807108:	01707834 	movhi	r5,49632
  80710c:	003fd306 	br	80705c <__floatsidf+0x44>

00807110 <__fixdfsi>:
  807110:	defff804 	addi	sp,sp,-32
  807114:	2005883a 	mov	r2,r4
  807118:	2807883a 	mov	r3,r5
  80711c:	d809883a 	mov	r4,sp
  807120:	d9400204 	addi	r5,sp,8
  807124:	d8c00115 	stw	r3,4(sp)
  807128:	d8800015 	stw	r2,0(sp)
  80712c:	dfc00715 	stw	ra,28(sp)
  807130:	0801d800 	call	801d80 <__unpack_d>
  807134:	d8c00217 	ldw	r3,8(sp)
  807138:	00800084 	movi	r2,2
  80713c:	1880051e 	bne	r3,r2,807154 <__fixdfsi+0x44>
  807140:	0007883a 	mov	r3,zero
  807144:	1805883a 	mov	r2,r3
  807148:	dfc00717 	ldw	ra,28(sp)
  80714c:	dec00804 	addi	sp,sp,32
  807150:	f800283a 	ret
  807154:	00800044 	movi	r2,1
  807158:	10fff92e 	bgeu	r2,r3,807140 <__fixdfsi+0x30>
  80715c:	00800104 	movi	r2,4
  807160:	18800426 	beq	r3,r2,807174 <__fixdfsi+0x64>
  807164:	d8c00417 	ldw	r3,16(sp)
  807168:	183ff516 	blt	r3,zero,807140 <__fixdfsi+0x30>
  80716c:	00800784 	movi	r2,30
  807170:	10c0080e 	bge	r2,r3,807194 <__fixdfsi+0x84>
  807174:	d8800317 	ldw	r2,12(sp)
  807178:	1000121e 	bne	r2,zero,8071c4 <__fixdfsi+0xb4>
  80717c:	00e00034 	movhi	r3,32768
  807180:	18ffffc4 	addi	r3,r3,-1
  807184:	1805883a 	mov	r2,r3
  807188:	dfc00717 	ldw	ra,28(sp)
  80718c:	dec00804 	addi	sp,sp,32
  807190:	f800283a 	ret
  807194:	00800f04 	movi	r2,60
  807198:	10d1c83a 	sub	r8,r2,r3
  80719c:	40bff804 	addi	r2,r8,-32
  8071a0:	d9800517 	ldw	r6,20(sp)
  8071a4:	d9c00617 	ldw	r7,24(sp)
  8071a8:	10000816 	blt	r2,zero,8071cc <__fixdfsi+0xbc>
  8071ac:	3888d83a 	srl	r4,r7,r2
  8071b0:	d8800317 	ldw	r2,12(sp)
  8071b4:	2007883a 	mov	r3,r4
  8071b8:	103fe226 	beq	r2,zero,807144 <__fixdfsi+0x34>
  8071bc:	0107c83a 	sub	r3,zero,r4
  8071c0:	003fe006 	br	807144 <__fixdfsi+0x34>
  8071c4:	00e00034 	movhi	r3,32768
  8071c8:	003fde06 	br	807144 <__fixdfsi+0x34>
  8071cc:	39c7883a 	add	r3,r7,r7
  8071d0:	008007c4 	movi	r2,31
  8071d4:	1205c83a 	sub	r2,r2,r8
  8071d8:	1886983a 	sll	r3,r3,r2
  8071dc:	3208d83a 	srl	r4,r6,r8
  8071e0:	1908b03a 	or	r4,r3,r4
  8071e4:	003ff206 	br	8071b0 <__fixdfsi+0xa0>

008071e8 <udivmodsi4>:
  8071e8:	29001b2e 	bgeu	r5,r4,807258 <udivmodsi4+0x70>
  8071ec:	28001a16 	blt	r5,zero,807258 <udivmodsi4+0x70>
  8071f0:	00800044 	movi	r2,1
  8071f4:	0007883a 	mov	r3,zero
  8071f8:	01c007c4 	movi	r7,31
  8071fc:	00000306 	br	80720c <udivmodsi4+0x24>
  807200:	19c01326 	beq	r3,r7,807250 <udivmodsi4+0x68>
  807204:	18c00044 	addi	r3,r3,1
  807208:	28000416 	blt	r5,zero,80721c <udivmodsi4+0x34>
  80720c:	294b883a 	add	r5,r5,r5
  807210:	1085883a 	add	r2,r2,r2
  807214:	293ffa36 	bltu	r5,r4,807200 <udivmodsi4+0x18>
  807218:	10000d26 	beq	r2,zero,807250 <udivmodsi4+0x68>
  80721c:	0007883a 	mov	r3,zero
  807220:	21400236 	bltu	r4,r5,80722c <udivmodsi4+0x44>
  807224:	2149c83a 	sub	r4,r4,r5
  807228:	1886b03a 	or	r3,r3,r2
  80722c:	1004d07a 	srli	r2,r2,1
  807230:	280ad07a 	srli	r5,r5,1
  807234:	103ffa1e 	bne	r2,zero,807220 <udivmodsi4+0x38>
  807238:	30000226 	beq	r6,zero,807244 <udivmodsi4+0x5c>
  80723c:	2005883a 	mov	r2,r4
  807240:	f800283a 	ret
  807244:	1809883a 	mov	r4,r3
  807248:	2005883a 	mov	r2,r4
  80724c:	f800283a 	ret
  807250:	0007883a 	mov	r3,zero
  807254:	003ff806 	br	807238 <udivmodsi4+0x50>
  807258:	00800044 	movi	r2,1
  80725c:	0007883a 	mov	r3,zero
  807260:	003fef06 	br	807220 <udivmodsi4+0x38>

00807264 <__divsi3>:
  807264:	defffe04 	addi	sp,sp,-8
  807268:	dc000015 	stw	r16,0(sp)
  80726c:	dfc00115 	stw	ra,4(sp)
  807270:	0021883a 	mov	r16,zero
  807274:	20000c16 	blt	r4,zero,8072a8 <__divsi3+0x44>
  807278:	000d883a 	mov	r6,zero
  80727c:	28000e16 	blt	r5,zero,8072b8 <__divsi3+0x54>
  807280:	08071e80 	call	8071e8 <udivmodsi4>
  807284:	1007883a 	mov	r3,r2
  807288:	8005003a 	cmpeq	r2,r16,zero
  80728c:	1000011e 	bne	r2,zero,807294 <__divsi3+0x30>
  807290:	00c7c83a 	sub	r3,zero,r3
  807294:	1805883a 	mov	r2,r3
  807298:	dfc00117 	ldw	ra,4(sp)
  80729c:	dc000017 	ldw	r16,0(sp)
  8072a0:	dec00204 	addi	sp,sp,8
  8072a4:	f800283a 	ret
  8072a8:	0109c83a 	sub	r4,zero,r4
  8072ac:	04000044 	movi	r16,1
  8072b0:	000d883a 	mov	r6,zero
  8072b4:	283ff20e 	bge	r5,zero,807280 <__divsi3+0x1c>
  8072b8:	014bc83a 	sub	r5,zero,r5
  8072bc:	8021003a 	cmpeq	r16,r16,zero
  8072c0:	003fef06 	br	807280 <__divsi3+0x1c>

008072c4 <__modsi3>:
  8072c4:	deffff04 	addi	sp,sp,-4
  8072c8:	dfc00015 	stw	ra,0(sp)
  8072cc:	01800044 	movi	r6,1
  8072d0:	2807883a 	mov	r3,r5
  8072d4:	20000416 	blt	r4,zero,8072e8 <__modsi3+0x24>
  8072d8:	28000c16 	blt	r5,zero,80730c <__modsi3+0x48>
  8072dc:	dfc00017 	ldw	ra,0(sp)
  8072e0:	dec00104 	addi	sp,sp,4
  8072e4:	08071e81 	jmpi	8071e8 <udivmodsi4>
  8072e8:	0109c83a 	sub	r4,zero,r4
  8072ec:	28000b16 	blt	r5,zero,80731c <__modsi3+0x58>
  8072f0:	180b883a 	mov	r5,r3
  8072f4:	01800044 	movi	r6,1
  8072f8:	08071e80 	call	8071e8 <udivmodsi4>
  8072fc:	0085c83a 	sub	r2,zero,r2
  807300:	dfc00017 	ldw	ra,0(sp)
  807304:	dec00104 	addi	sp,sp,4
  807308:	f800283a 	ret
  80730c:	014bc83a 	sub	r5,zero,r5
  807310:	dfc00017 	ldw	ra,0(sp)
  807314:	dec00104 	addi	sp,sp,4
  807318:	08071e81 	jmpi	8071e8 <udivmodsi4>
  80731c:	0147c83a 	sub	r3,zero,r5
  807320:	003ff306 	br	8072f0 <__modsi3+0x2c>

00807324 <__udivsi3>:
  807324:	000d883a 	mov	r6,zero
  807328:	08071e81 	jmpi	8071e8 <udivmodsi4>

0080732c <__umodsi3>:
  80732c:	01800044 	movi	r6,1
  807330:	08071e81 	jmpi	8071e8 <udivmodsi4>

00807334 <__fpcmp_parts_d>:
  807334:	21800017 	ldw	r6,0(r4)
  807338:	00c00044 	movi	r3,1
  80733c:	19800a2e 	bgeu	r3,r6,807368 <__fpcmp_parts_d+0x34>
  807340:	28800017 	ldw	r2,0(r5)
  807344:	1880082e 	bgeu	r3,r2,807368 <__fpcmp_parts_d+0x34>
  807348:	00c00104 	movi	r3,4
  80734c:	30c02626 	beq	r6,r3,8073e8 <__fpcmp_parts_d+0xb4>
  807350:	10c02226 	beq	r2,r3,8073dc <__fpcmp_parts_d+0xa8>
  807354:	00c00084 	movi	r3,2
  807358:	30c00526 	beq	r6,r3,807370 <__fpcmp_parts_d+0x3c>
  80735c:	10c0071e 	bne	r2,r3,80737c <__fpcmp_parts_d+0x48>
  807360:	20800117 	ldw	r2,4(r4)
  807364:	1000091e 	bne	r2,zero,80738c <__fpcmp_parts_d+0x58>
  807368:	00800044 	movi	r2,1
  80736c:	f800283a 	ret
  807370:	10c01a1e 	bne	r2,r3,8073dc <__fpcmp_parts_d+0xa8>
  807374:	0005883a 	mov	r2,zero
  807378:	f800283a 	ret
  80737c:	22000117 	ldw	r8,4(r4)
  807380:	28800117 	ldw	r2,4(r5)
  807384:	40800326 	beq	r8,r2,807394 <__fpcmp_parts_d+0x60>
  807388:	403ff726 	beq	r8,zero,807368 <__fpcmp_parts_d+0x34>
  80738c:	00bfffc4 	movi	r2,-1
  807390:	f800283a 	ret
  807394:	20c00217 	ldw	r3,8(r4)
  807398:	28800217 	ldw	r2,8(r5)
  80739c:	10fffa16 	blt	r2,r3,807388 <__fpcmp_parts_d+0x54>
  8073a0:	18800916 	blt	r3,r2,8073c8 <__fpcmp_parts_d+0x94>
  8073a4:	21c00417 	ldw	r7,16(r4)
  8073a8:	28c00417 	ldw	r3,16(r5)
  8073ac:	21800317 	ldw	r6,12(r4)
  8073b0:	28800317 	ldw	r2,12(r5)
  8073b4:	19fff436 	bltu	r3,r7,807388 <__fpcmp_parts_d+0x54>
  8073b8:	38c00526 	beq	r7,r3,8073d0 <__fpcmp_parts_d+0x9c>
  8073bc:	38c00236 	bltu	r7,r3,8073c8 <__fpcmp_parts_d+0x94>
  8073c0:	19ffec1e 	bne	r3,r7,807374 <__fpcmp_parts_d+0x40>
  8073c4:	30bfeb2e 	bgeu	r6,r2,807374 <__fpcmp_parts_d+0x40>
  8073c8:	403fe71e 	bne	r8,zero,807368 <__fpcmp_parts_d+0x34>
  8073cc:	003fef06 	br	80738c <__fpcmp_parts_d+0x58>
  8073d0:	11bffa2e 	bgeu	r2,r6,8073bc <__fpcmp_parts_d+0x88>
  8073d4:	403fe426 	beq	r8,zero,807368 <__fpcmp_parts_d+0x34>
  8073d8:	003fec06 	br	80738c <__fpcmp_parts_d+0x58>
  8073dc:	28800117 	ldw	r2,4(r5)
  8073e0:	103fe11e 	bne	r2,zero,807368 <__fpcmp_parts_d+0x34>
  8073e4:	003fe906 	br	80738c <__fpcmp_parts_d+0x58>
  8073e8:	11bfdd1e 	bne	r2,r6,807360 <__fpcmp_parts_d+0x2c>
  8073ec:	28c00117 	ldw	r3,4(r5)
  8073f0:	20800117 	ldw	r2,4(r4)
  8073f4:	1885c83a 	sub	r2,r3,r2
  8073f8:	f800283a 	ret

008073fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8073fc:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807400:	01002074 	movhi	r4,129
  807404:	212f8204 	addi	r4,r4,-16888
  807408:	00c02074 	movhi	r3,129
  80740c:	18e8f004 	addi	r3,r3,-23616
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  807410:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  807414:	20c00826 	beq	r4,r3,807438 <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807418:	01402074 	movhi	r5,129
  80741c:	296f8204 	addi	r5,r5,-16888
  {
    while( to != end )
  807420:	19400526 	beq	r3,r5,807438 <alt_load+0x3c>
    {
      *to++ = *from++;
  807424:	20800017 	ldw	r2,0(r4)
  807428:	21000104 	addi	r4,r4,4
  80742c:	18800015 	stw	r2,0(r3)
  807430:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807434:	28fffb1e 	bne	r5,r3,807424 <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807438:	01002034 	movhi	r4,128
  80743c:	21000804 	addi	r4,r4,32
  807440:	00c02034 	movhi	r3,128
  807444:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  807448:	20c00826 	beq	r4,r3,80746c <alt_load+0x70>
  80744c:	01402034 	movhi	r5,128
  807450:	29406104 	addi	r5,r5,388
  {
    while( to != end )
  807454:	19400526 	beq	r3,r5,80746c <alt_load+0x70>
    {
      *to++ = *from++;
  807458:	20800017 	ldw	r2,0(r4)
  80745c:	21000104 	addi	r4,r4,4
  807460:	18800015 	stw	r2,0(r3)
  807464:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807468:	28fffb1e 	bne	r5,r3,807458 <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80746c:	01002074 	movhi	r4,129
  807470:	21284004 	addi	r4,r4,-24320
  807474:	00c02074 	movhi	r3,129
  807478:	18e84004 	addi	r3,r3,-24320

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80747c:	20c00826 	beq	r4,r3,8074a0 <alt_load+0xa4>
  807480:	01402074 	movhi	r5,129
  807484:	2968f004 	addi	r5,r5,-23616
  {
    while( to != end )
  807488:	19400526 	beq	r3,r5,8074a0 <alt_load+0xa4>
    {
      *to++ = *from++;
  80748c:	20800017 	ldw	r2,0(r4)
  807490:	21000104 	addi	r4,r4,4
  807494:	18800015 	stw	r2,0(r3)
  807498:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80749c:	28fffb1e 	bne	r5,r3,80748c <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8074a0:	0807f700 	call	807f70 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  8074a4:	dfc00017 	ldw	ra,0(sp)
  8074a8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8074ac:	0807ff81 	jmpi	807ff8 <alt_icache_flush_all>

008074b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8074b0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8074b4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8074b8:	dfc00115 	stw	ra,4(sp)
  8074bc:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8074c0:	08077640 	call	807764 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8074c4:	080770c0 	call	80770c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8074c8:	01002074 	movhi	r4,129
  8074cc:	2128e904 	addi	r4,r4,-23644
  8074d0:	200b883a 	mov	r5,r4
  8074d4:	200d883a 	mov	r6,r4
  8074d8:	08081280 	call	808128 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8074dc:	d126a417 	ldw	r4,-25968(gp)
  8074e0:	d166a517 	ldw	r5,-25964(gp)
  8074e4:	d1a6a617 	ldw	r6,-25960(gp)
  8074e8:	08005dc0 	call	8005dc <main>
  8074ec:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  8074f0:	01000044 	movi	r4,1
  8074f4:	0807e800 	call	807e80 <close>
  exit (result);
  8074f8:	8809883a 	mov	r4,r17
  8074fc:	08085b40 	call	8085b4 <exit>

00807500 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
  807500:	f800283a 	ret

00807504 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
  807504:	f800283a 	ret

00807508 <alt_putstr>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  807508:	00802074 	movhi	r2,129
  80750c:	10af7404 	addi	r2,r2,-16944
  807510:	10c00017 	ldw	r3,0(r2)
  807514:	19400217 	ldw	r5,8(r3)
  807518:	08086601 	jmpi	808660 <fputs>

0080751c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80751c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807520:	00bfff84 	movi	r2,-2
  807524:	2884703a 	and	r2,r5,r2
  807528:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80752c:	d0e00417 	ldw	r3,-32752(gp)
  807530:	00bfff04 	movi	r2,-4
  807534:	18c000c4 	addi	r3,r3,3
  807538:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80753c:	1909883a 	add	r4,r3,r4
  807540:	00804034 	movhi	r2,256
  807544:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807548:	d0e00415 	stw	r3,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80754c:	1100042e 	bgeu	r2,r4,807560 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807550:	2801703a 	wrctl	status,r5
  807554:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  807558:	1805883a 	mov	r2,r3
  80755c:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  807560:	d1200415 	stw	r4,-32752(gp)
  807564:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  807568:	1805883a 	mov	r2,r3
  80756c:	f800283a 	ret

00807570 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807570:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807574:	00bfff84 	movi	r2,-2
  807578:	3084703a 	and	r2,r6,r2
  80757c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  807580:	21400017 	ldw	r5,0(r4)
  807584:	20800117 	ldw	r2,4(r4)
  807588:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  80758c:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  807590:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  807594:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  807598:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80759c:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  8075a0:	f800283a 	ret

008075a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8075a4:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8075a8:	d0a6a817 	ldw	r2,-25952(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8075ac:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8075b0:	d4200517 	ldw	r16,-32748(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8075b4:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8075b8:	10800044 	addi	r2,r2,1
  8075bc:	d4a00504 	addi	r18,gp,-32748
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8075c0:	dfc00315 	stw	ra,12(sp)
  8075c4:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8075c8:	d0a6a815 	stw	r2,-25952(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8075cc:	84800d26 	beq	r16,r18,807604 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8075d0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  8075d4:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8075d8:	10000326 	beq	r2,zero,8075e8 <alt_tick+0x44>
  8075dc:	d0a6a817 	ldw	r2,-25952(gp)
  8075e0:	1000011e 	bne	r2,zero,8075e8 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  8075e4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8075e8:	d0e6a817 	ldw	r3,-25952(gp)
  8075ec:	80800217 	ldw	r2,8(r16)
  8075f0:	18800236 	bltu	r3,r2,8075fc <alt_tick+0x58>
  8075f4:	80800403 	ldbu	r2,16(r16)
  8075f8:	10000826 	beq	r2,zero,80761c <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  8075fc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  807600:	84bff31e 	bne	r16,r18,8075d0 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  807604:	dfc00317 	ldw	ra,12(sp)
  807608:	dc800217 	ldw	r18,8(sp)
  80760c:	dc400117 	ldw	r17,4(sp)
  807610:	dc000017 	ldw	r16,0(sp)
  807614:	dec00404 	addi	sp,sp,16
  807618:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  80761c:	81000517 	ldw	r4,20(r16)
  807620:	80c00317 	ldw	r3,12(r16)
  807624:	183ee83a 	callr	r3
  807628:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80762c:	10000926 	beq	r2,zero,807654 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  807630:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807634:	d0e6a817 	ldw	r3,-25952(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  807638:	2085883a 	add	r2,r4,r2
  80763c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807640:	10ffee2e 	bgeu	r2,r3,8075fc <alt_tick+0x58>
        {
          alarm->rollover = 1;
  807644:	00800044 	movi	r2,1
  807648:	80800405 	stb	r2,16(r16)
  80764c:	8821883a 	mov	r16,r17
  807650:	003feb06 	br	807600 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807654:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807658:	00bfff84 	movi	r2,-2
  80765c:	2884703a 	and	r2,r5,r2
  807660:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  807664:	81000017 	ldw	r4,0(r16)
  807668:	80800117 	ldw	r2,4(r16)
  80766c:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  807670:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  807674:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  807678:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  80767c:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807680:	2801703a 	wrctl	status,r5
  807684:	8821883a 	mov	r16,r17
  807688:	003fdd06 	br	807600 <alt_tick+0x5c>

0080768c <times>:
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  80768c:	00802074 	movhi	r2,129
  807690:	10b61b04 	addi	r2,r2,-10132
  807694:	11400017 	ldw	r5,0(r2)
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  807698:	deffff04 	addi	sp,sp,-4
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80769c:	00c02074 	movhi	r3,129
  8076a0:	18f61c04 	addi	r3,r3,-10128
  8076a4:	dfc00015 	stw	ra,0(sp)
  8076a8:	18c00017 	ldw	r3,0(r3)
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8076ac:	28000f1e 	bne	r5,zero,8076ec <times+0x60>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8076b0:	00802074 	movhi	r2,129
  8076b4:	10af8004 	addi	r2,r2,-16896
  8076b8:	10800017 	ldw	r2,0(r2)
  8076bc:	01002074 	movhi	r4,129
  8076c0:	21361704 	addi	r4,r4,-10148
  8076c4:	10000226 	beq	r2,zero,8076d0 <times+0x44>
  8076c8:	103ee83a 	callr	r2
  8076cc:	1009883a 	mov	r4,r2
  {
    ALT_ERRNO = ENOSYS;
  8076d0:	0007883a 	mov	r3,zero
  8076d4:	00801604 	movi	r2,88
  8076d8:	20800015 	stw	r2,0(r4)
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
  8076dc:	1805883a 	mov	r2,r3
  8076e0:	dfc00017 	ldw	ra,0(sp)
  8076e4:	dec00104 	addi	sp,sp,4
  8076e8:	f800283a 	ret
  8076ec:	1805883a 	mov	r2,r3
  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;
  8076f0:	20000315 	stw	zero,12(r4)
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  8076f4:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
  8076f8:	20c00115 	stw	r3,4(r4)
  buf->tms_cutime = 0;
  8076fc:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;

  return ticks;
}
  807700:	dfc00017 	ldw	ra,0(sp)
  807704:	dec00104 	addi	sp,sp,4
  807708:	f800283a 	ret

0080770c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80770c:	defffe04 	addi	sp,sp,-8
  807710:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807714:	01c0fa04 	movi	r7,1000
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807718:	04002074 	movhi	r16,129
  80771c:	842afc04 	addi	r16,r16,-21520
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807720:	01004034 	movhi	r4,256
  807724:	21040004 	addi	r4,r4,4096
  807728:	000b883a 	mov	r5,zero
  80772c:	01800044 	movi	r6,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807730:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807734:	0807d600 	call	807d60 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807738:	8009883a 	mov	r4,r16
  80773c:	000b883a 	mov	r5,zero
  807740:	01800404 	movi	r6,16
  807744:	08078600 	call	807860 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807748:	813ff604 	addi	r4,r16,-40
  80774c:	01402074 	movhi	r5,129
  807750:	296f7d04 	addi	r5,r5,-16908
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  807754:	dfc00117 	ldw	ra,4(sp)
  807758:	dc000017 	ldw	r16,0(sp)
  80775c:	dec00204 	addi	sp,sp,8
  807760:	0807f7c1 	jmpi	807f7c <alt_dev_llist_insert>

00807764 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  807764:	deffff04 	addi	sp,sp,-4
  807768:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80776c:	08083d00 	call	8083d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807770:	00800044 	movi	r2,1
  807774:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  807778:	dfc00017 	ldw	ra,0(sp)
  80777c:	dec00104 	addi	sp,sp,4
  807780:	f800283a 	ret

00807784 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  807784:	21000017 	ldw	r4,0(r4)
  807788:	21000a04 	addi	r4,r4,40
  80778c:	08079e81 	jmpi	8079e8 <altera_avalon_jtag_uart_ioctl>

00807790 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  807790:	20800017 	ldw	r2,0(r4)
  807794:	21400217 	ldw	r5,8(r4)
  807798:	11000a04 	addi	r4,r2,40
  80779c:	08077c01 	jmpi	8077c0 <altera_avalon_jtag_uart_close>

008077a0 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8077a0:	20800017 	ldw	r2,0(r4)
  8077a4:	21c00217 	ldw	r7,8(r4)
  8077a8:	11000a04 	addi	r4,r2,40
  8077ac:	0807bdc1 	jmpi	807bdc <altera_avalon_jtag_uart_write>

008077b0 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8077b0:	20800017 	ldw	r2,0(r4)
  8077b4:	21c00217 	ldw	r7,8(r4)
  8077b8:	11000a04 	addi	r4,r2,40
  8077bc:	0807a701 	jmpi	807a70 <altera_avalon_jtag_uart_read>

008077c0 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8077c0:	2950000c 	andi	r5,r5,16384
  8077c4:	21800c17 	ldw	r6,48(r4)
  8077c8:	28000426 	beq	r5,zero,8077dc <altera_avalon_jtag_uart_close+0x1c>
  8077cc:	00000706 	br	8077ec <altera_avalon_jtag_uart_close+0x2c>
  8077d0:	20c00917 	ldw	r3,36(r4)
  8077d4:	20800117 	ldw	r2,4(r4)
  8077d8:	1880022e 	bgeu	r3,r2,8077e4 <altera_avalon_jtag_uart_close+0x24>
  8077dc:	20800d17 	ldw	r2,52(r4)
  8077e0:	11bffb1e 	bne	r2,r6,8077d0 <altera_avalon_jtag_uart_close+0x10>
  8077e4:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  8077e8:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8077ec:	20800d17 	ldw	r2,52(r4)
  8077f0:	11bffc26 	beq	r2,r6,8077e4 <altera_avalon_jtag_uart_close+0x24>
  8077f4:	20c00117 	ldw	r3,4(r4)
  8077f8:	20800917 	ldw	r2,36(r4)
  8077fc:	10fff92e 	bgeu	r2,r3,8077e4 <altera_avalon_jtag_uart_close+0x24>
  807800:	00bffd44 	movi	r2,-11
  807804:	f800283a 	ret

00807808 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  807808:	20c00017 	ldw	r3,0(r4)
  80780c:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  807810:	1081000c 	andi	r2,r2,1024
  807814:	10000a1e 	bne	r2,zero,807840 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807818:	20c00917 	ldw	r3,36(r4)
  80781c:	00a00034 	movhi	r2,32768
  807820:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  807824:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807828:	10c00136 	bltu	r2,r3,807830 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  80782c:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  807830:	00c02074 	movhi	r3,129
  807834:	18f61b04 	addi	r3,r3,-10132
  807838:	18800017 	ldw	r2,0(r3)
  80783c:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  807840:	20800817 	ldw	r2,32(r4)
  807844:	10810014 	ori	r2,r2,1024
  807848:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80784c:	00c02074 	movhi	r3,129
  807850:	18f61b04 	addi	r3,r3,-10132
  807854:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  807858:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80785c:	f800283a 	ret

00807860 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  807860:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  807864:	defffd04 	addi	sp,sp,-12
  807868:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80786c:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  807870:	2021883a 	mov	r16,r4
  807874:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807878:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80787c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  807880:	2809883a 	mov	r4,r5
  807884:	800f883a 	mov	r7,r16
  807888:	300b883a 	mov	r5,r6
  80788c:	01802034 	movhi	r6,128
  807890:	319e3804 	addi	r6,r6,30944
  807894:	d8000015 	stw	zero,0(sp)
  807898:	080809c0 	call	80809c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80789c:	00c02074 	movhi	r3,129
  8078a0:	18f61b04 	addi	r3,r3,-10132
  8078a4:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8078a8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8078ac:	81000204 	addi	r4,r16,8
  8078b0:	01802034 	movhi	r6,128
  8078b4:	319e0204 	addi	r6,r6,30728
  8078b8:	800f883a 	mov	r7,r16
  8078bc:	0807dec0 	call	807dec <alt_alarm_start>
  8078c0:	1000030e 	bge	r2,zero,8078d0 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8078c4:	00a00034 	movhi	r2,32768
  8078c8:	10bfffc4 	addi	r2,r2,-1
  8078cc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8078d0:	dfc00217 	ldw	ra,8(sp)
  8078d4:	dc000117 	ldw	r16,4(sp)
  8078d8:	dec00304 	addi	sp,sp,12
  8078dc:	f800283a 	ret

008078e0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  8078e0:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8078e4:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  8078e8:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8078ec:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8078f0:	4880c00c 	andi	r2,r9,768
  8078f4:	10003426 	beq	r2,zero,8079c8 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8078f8:	4880400c 	andi	r2,r9,256
  8078fc:	10001626 	beq	r2,zero,807958 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807900:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  807904:	2a000b17 	ldw	r8,44(r5)
  807908:	10800044 	addi	r2,r2,1
  80790c:	1081ffcc 	andi	r2,r2,2047
  807910:	12000c1e 	bne	r2,r8,807944 <altera_avalon_jtag_uart_irq+0x64>
  807914:	00002d06 	br	8079cc <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807918:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80791c:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807920:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807924:	18c00044 	addi	r3,r3,1
  807928:	18c1ffcc 	andi	r3,r3,2047
  80792c:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807930:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807934:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  807938:	21000044 	addi	r4,r4,1
  80793c:	2101ffcc 	andi	r4,r4,2047
  807940:	22000326 	beq	r4,r8,807950 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  807944:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  807948:	30a0000c 	andi	r2,r6,32768
  80794c:	103ff21e 	bne	r2,zero,807918 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  807950:	30bfffec 	andhi	r2,r6,65535
  807954:	10001d1e 	bne	r2,zero,8079cc <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  807958:	4880800c 	andi	r2,r9,512
  80795c:	103fe326 	beq	r2,zero,8078ec <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  807960:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  807964:	20000b1e 	bne	r4,zero,807994 <altera_avalon_jtag_uart_irq+0xb4>
  807968:	003fe006 	br	8078ec <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80796c:	28800d17 	ldw	r2,52(r5)
  807970:	1145883a 	add	r2,r2,r5
  807974:	10c20e07 	ldb	r3,2104(r2)
  807978:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80797c:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  807980:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807984:	10800044 	addi	r2,r2,1
  807988:	1081ffcc 	andi	r2,r2,2047
  80798c:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  807990:	203fd626 	beq	r4,zero,8078ec <altera_avalon_jtag_uart_irq+0xc>
  807994:	28c00d17 	ldw	r3,52(r5)
  807998:	28800c17 	ldw	r2,48(r5)
  80799c:	18bff31e 	bne	r3,r2,80796c <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8079a0:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8079a4:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8079a8:	00ffff44 	movi	r3,-3
  8079ac:	10c4703a 	and	r2,r2,r3
  8079b0:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8079b4:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8079b8:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8079bc:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8079c0:	4880c00c 	andi	r2,r9,768
  8079c4:	103fcc1e 	bne	r2,zero,8078f8 <altera_avalon_jtag_uart_irq+0x18>
  8079c8:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8079cc:	28800817 	ldw	r2,32(r5)
  8079d0:	00ffff84 	movi	r3,-2
  8079d4:	10c4703a 	and	r2,r2,r3
  8079d8:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8079dc:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8079e0:	50c00037 	ldwio	r3,0(r10)
  8079e4:	003fdc06 	br	807958 <altera_avalon_jtag_uart_irq+0x78>

008079e8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  8079e8:	009a8044 	movi	r2,27137
  8079ec:	28800f26 	beq	r5,r2,807a2c <altera_avalon_jtag_uart_ioctl+0x44>
  8079f0:	009a8084 	movi	r2,27138
  8079f4:	28800326 	beq	r5,r2,807a04 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8079f8:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  8079fc:	1805883a 	mov	r2,r3
  807a00:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  807a04:	21400117 	ldw	r5,4(r4)
  807a08:	00a00034 	movhi	r2,32768
  807a0c:	10bfffc4 	addi	r2,r2,-1
  807a10:	28bff926 	beq	r5,r2,8079f8 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  807a14:	20800917 	ldw	r2,36(r4)
  807a18:	0007883a 	mov	r3,zero
  807a1c:	1145803a 	cmpltu	r2,r2,r5
  807a20:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  807a24:	1805883a 	mov	r2,r3
  807a28:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  807a2c:	20c00117 	ldw	r3,4(r4)
  807a30:	00a00034 	movhi	r2,32768
  807a34:	10bfffc4 	addi	r2,r2,-1
  807a38:	18bfef26 	beq	r3,r2,8079f8 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  807a3c:	31800017 	ldw	r6,0(r6)
  807a40:	10bfff44 	addi	r2,r2,-3
  807a44:	30ffff84 	addi	r3,r6,-2
  807a48:	10c00436 	bltu	r2,r3,807a5c <altera_avalon_jtag_uart_ioctl+0x74>
  807a4c:	0007883a 	mov	r3,zero
  807a50:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  807a54:	1805883a 	mov	r2,r3
  807a58:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  807a5c:	01a00034 	movhi	r6,32768
  807a60:	31bfff84 	addi	r6,r6,-2
  807a64:	0007883a 	mov	r3,zero
  807a68:	21800115 	stw	r6,4(r4)
  807a6c:	003ff906 	br	807a54 <altera_avalon_jtag_uart_ioctl+0x6c>

00807a70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  807a70:	defff404 	addi	sp,sp,-48
  807a74:	dd400715 	stw	r21,28(sp)
  807a78:	dcc00515 	stw	r19,20(sp)
  807a7c:	dfc00b15 	stw	ra,44(sp)
  807a80:	df000a15 	stw	fp,40(sp)
  807a84:	ddc00915 	stw	r23,36(sp)
  807a88:	dd800815 	stw	r22,32(sp)
  807a8c:	dd000615 	stw	r20,24(sp)
  807a90:	dc800415 	stw	r18,16(sp)
  807a94:	dc400315 	stw	r17,12(sp)
  807a98:	dc000215 	stw	r16,8(sp)
  807a9c:	302b883a 	mov	r21,r6
  807aa0:	2027883a 	mov	r19,r4
  807aa4:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807aa8:	0180480e 	bge	zero,r6,807bcc <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  807aac:	39d0000c 	andi	r7,r7,16384
  807ab0:	d9c00015 	stw	r7,0(sp)
  807ab4:	dd000117 	ldw	r20,4(sp)
  807ab8:	07020004 	movi	fp,2048
  807abc:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  807ac0:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  807ac4:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  807ac8:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  807acc:	b4400136 	bltu	r22,r17,807ad4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  807ad0:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  807ad4:	a009883a 	mov	r4,r20
  807ad8:	bc4b883a 	add	r5,r23,r17
  807adc:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  807ae0:	80000826 	beq	r16,zero,807b04 <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  807ae4:	ac002036 	bltu	r21,r16,807b68 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  807ae8:	080281c0 	call	80281c <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807aec:	8445883a 	add	r2,r16,r17
  807af0:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  807af4:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807af8:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  807afc:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  807b00:	057fef16 	blt	zero,r21,807ac0 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  807b04:	d8800117 	ldw	r2,4(sp)
  807b08:	a080231e 	bne	r20,r2,807b98 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  807b0c:	d8c00017 	ldw	r3,0(sp)
  807b10:	1800301e 	bne	r3,zero,807bd4 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  807b14:	98800a17 	ldw	r2,40(r19)
  807b18:	b080031e 	bne	r22,r2,807b28 <altera_avalon_jtag_uart_read+0xb8>
  807b1c:	98c00917 	ldw	r3,36(r19)
  807b20:	98800117 	ldw	r2,4(r19)
  807b24:	18bffb36 	bltu	r3,r2,807b14 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  807b28:	98800a17 	ldw	r2,40(r19)
  807b2c:	b0800126 	beq	r22,r2,807b34 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807b30:	057fe016 	blt	zero,r21,807ab4 <altera_avalon_jtag_uart_read+0x44>
  807b34:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  807b38:	dfc00b17 	ldw	ra,44(sp)
  807b3c:	df000a17 	ldw	fp,40(sp)
  807b40:	ddc00917 	ldw	r23,36(sp)
  807b44:	dd800817 	ldw	r22,32(sp)
  807b48:	dd400717 	ldw	r21,28(sp)
  807b4c:	dd000617 	ldw	r20,24(sp)
  807b50:	dcc00517 	ldw	r19,20(sp)
  807b54:	dc800417 	ldw	r18,16(sp)
  807b58:	dc400317 	ldw	r17,12(sp)
  807b5c:	dc000217 	ldw	r16,8(sp)
  807b60:	dec00c04 	addi	sp,sp,48
  807b64:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  807b68:	99400e04 	addi	r5,r19,56
  807b6c:	a009883a 	mov	r4,r20
  807b70:	a80d883a 	mov	r6,r21
  807b74:	894b883a 	add	r5,r17,r5
  807b78:	080281c0 	call	80281c <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  807b7c:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807b80:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  807b84:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807b88:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  807b8c:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807b90:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  807b94:	a0bfdd26 	beq	r20,r2,807b0c <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807b98:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807b9c:	00bfff84 	movi	r2,-2
  807ba0:	2084703a 	and	r2,r4,r2
  807ba4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807ba8:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807bac:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807bb0:	18c00054 	ori	r3,r3,1
  807bb4:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807bb8:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807bbc:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  807bc0:	d8c00117 	ldw	r3,4(sp)
  807bc4:	a0c5c83a 	sub	r2,r20,r3
  807bc8:	003fdb06 	br	807b38 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  807bcc:	3890000c 	andi	r2,r7,16384
  807bd0:	103fd826 	beq	r2,zero,807b34 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807bd4:	00bffd44 	movi	r2,-11
  807bd8:	003fd706 	br	807b38 <altera_avalon_jtag_uart_read+0xc8>

00807bdc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  807bdc:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807be0:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  807be4:	ddc00715 	stw	r23,28(sp)
  807be8:	dd800615 	stw	r22,24(sp)
  807bec:	dcc00315 	stw	r19,12(sp)
  807bf0:	dc000015 	stw	r16,0(sp)
  807bf4:	dfc00815 	stw	ra,32(sp)
  807bf8:	dd400515 	stw	r21,20(sp)
  807bfc:	dd000415 	stw	r20,16(sp)
  807c00:	dc800215 	stw	r18,8(sp)
  807c04:	dc400115 	stw	r17,4(sp)
  807c08:	3027883a 	mov	r19,r6
  807c0c:	2021883a 	mov	r16,r4
  807c10:	282d883a 	mov	r22,r5
  807c14:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807c18:	40004926 	beq	r8,zero,807d40 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  807c1c:	3d50000c 	andi	r21,r7,16384
  807c20:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  807c24:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  807c28:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  807c2c:	91403d2e 	bgeu	r18,r5,807d24 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  807c30:	2c85c83a 	sub	r2,r5,r18
  807c34:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  807c38:	30002626 	beq	r6,zero,807cd4 <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  807c3c:	3023883a 	mov	r17,r6
  807c40:	9980012e 	bgeu	r19,r6,807c48 <altera_avalon_jtag_uart_write+0x6c>
  807c44:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  807c48:	81020e04 	addi	r4,r16,2104
  807c4c:	a00b883a 	mov	r5,r20
  807c50:	2489883a 	add	r4,r4,r18
  807c54:	880d883a 	mov	r6,r17
  807c58:	080281c0 	call	80281c <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807c5c:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  807c60:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807c64:	18c1ffcc 	andi	r3,r3,2047
  807c68:	9a000048 	cmpgei	r8,r19,1
  807c6c:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  807c70:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807c74:	403feb1e 	bne	r8,zero,807c24 <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c78:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c7c:	00bfff84 	movi	r2,-2
  807c80:	2084703a 	and	r2,r4,r2
  807c84:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807c88:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807c8c:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807c90:	18c00094 	ori	r3,r3,2
  807c94:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807c98:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c9c:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  807ca0:	b5002926 	beq	r22,r20,807d48 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  807ca4:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  807ca8:	dfc00817 	ldw	ra,32(sp)
  807cac:	ddc00717 	ldw	r23,28(sp)
  807cb0:	dd800617 	ldw	r22,24(sp)
  807cb4:	dd400517 	ldw	r21,20(sp)
  807cb8:	dd000417 	ldw	r20,16(sp)
  807cbc:	dcc00317 	ldw	r19,12(sp)
  807cc0:	dc800217 	ldw	r18,8(sp)
  807cc4:	dc400117 	ldw	r17,4(sp)
  807cc8:	dc000017 	ldw	r16,0(sp)
  807ccc:	dec00904 	addi	sp,sp,36
  807cd0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807cd4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807cd8:	00bfff84 	movi	r2,-2
  807cdc:	2084703a 	and	r2,r4,r2
  807ce0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807ce4:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807ce8:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807cec:	18c00094 	ori	r3,r3,2
  807cf0:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807cf4:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807cf8:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  807cfc:	a83fe81e 	bne	r21,zero,807ca0 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  807d00:	80800d17 	ldw	r2,52(r16)
  807d04:	1140031e 	bne	r2,r5,807d14 <altera_avalon_jtag_uart_write+0x138>
  807d08:	80c00917 	ldw	r3,36(r16)
  807d0c:	80800117 	ldw	r2,4(r16)
  807d10:	18bffb36 	bltu	r3,r2,807d00 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  807d14:	80800d17 	ldw	r2,52(r16)
  807d18:	117fe126 	beq	r2,r5,807ca0 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807d1c:	403fc11e 	bne	r8,zero,807c24 <altera_avalon_jtag_uart_write+0x48>
  807d20:	003fd506 	br	807c78 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  807d24:	28000326 	beq	r5,zero,807d34 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  807d28:	00820004 	movi	r2,2048
  807d2c:	148dc83a 	sub	r6,r2,r18
  807d30:	003fc106 	br	807c38 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  807d34:	0081ffc4 	movi	r2,2047
  807d38:	148dc83a 	sub	r6,r2,r18
  807d3c:	003fbe06 	br	807c38 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807d40:	2829883a 	mov	r20,r5
  807d44:	003fcc06 	br	807c78 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  807d48:	b890000c 	andi	r2,r23,16384
  807d4c:	1000021e 	bne	r2,zero,807d58 <altera_avalon_jtag_uart_write+0x17c>
  807d50:	00bffec4 	movi	r2,-5
  807d54:	003fd406 	br	807ca8 <altera_avalon_jtag_uart_write+0xcc>
  807d58:	00bffd44 	movi	r2,-11
  807d5c:	003fd206 	br	807ca8 <altera_avalon_jtag_uart_write+0xcc>

00807d60 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  807d60:	02002074 	movhi	r8,129
  807d64:	42361b04 	addi	r8,r8,-10132
  807d68:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  807d6c:	defffe04 	addi	sp,sp,-8
  807d70:	3807883a 	mov	r3,r7
  807d74:	dfc00115 	stw	ra,4(sp)
  807d78:	200f883a 	mov	r7,r4
  807d7c:	1000011e 	bne	r2,zero,807d84 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  807d80:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  807d84:	008001c4 	movi	r2,7
  807d88:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  807d8c:	2809883a 	mov	r4,r5
  807d90:	300b883a 	mov	r5,r6
  807d94:	01802034 	movhi	r6,128
  807d98:	319f6c04 	addi	r6,r6,32176
  807d9c:	d8000015 	stw	zero,0(sp)
  807da0:	080809c0 	call	80809c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  807da4:	dfc00117 	ldw	ra,4(sp)
  807da8:	dec00204 	addi	sp,sp,8
  807dac:	f800283a 	ret

00807db0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  807db0:	defffe04 	addi	sp,sp,-8
  807db4:	dfc00115 	stw	ra,4(sp)
  807db8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  807dbc:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  807dc0:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807dc4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807dc8:	00bfff84 	movi	r2,-2
  807dcc:	8084703a 	and	r2,r16,r2
  807dd0:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  807dd4:	08075a40 	call	8075a4 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807dd8:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  807ddc:	dfc00117 	ldw	ra,4(sp)
  807de0:	dc000017 	ldw	r16,0(sp)
  807de4:	dec00204 	addi	sp,sp,8
  807de8:	f800283a 	ret

00807dec <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  807dec:	00802074 	movhi	r2,129
  807df0:	10b61b04 	addi	r2,r2,-10132
  807df4:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  807df8:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  807dfc:	00bfde84 	movi	r2,-134
  807e00:	1800011e 	bne	r3,zero,807e08 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  807e04:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  807e08:	00bffa84 	movi	r2,-22
  807e0c:	203ffd26 	beq	r4,zero,807e04 <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  807e10:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  807e14:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e18:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e1c:	00bfff84 	movi	r2,-2
  807e20:	3084703a 	and	r2,r6,r2
  807e24:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  807e28:	00c02074 	movhi	r3,129
  807e2c:	18f61c04 	addi	r3,r3,-10128
  807e30:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  807e34:	20800044 	addi	r2,r4,1
  807e38:	2885883a 	add	r2,r5,r2
  807e3c:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  807e40:	11000d2e 	bgeu	r2,r4,807e78 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  807e44:	00800044 	movi	r2,1
  807e48:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807e4c:	00802074 	movhi	r2,129
  807e50:	10af7904 	addi	r2,r2,-16924
  entry->next     = list->next;
  807e54:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807e58:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  807e5c:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  807e60:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  807e64:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  807e68:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e6c:	3001703a 	wrctl	status,r6
  807e70:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  807e74:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  807e78:	40000405 	stb	zero,16(r8)
  807e7c:	003ff306 	br	807e4c <alt_alarm_start+0x60>

00807e80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  807e80:	defffd04 	addi	sp,sp,-12
  807e84:	dc000015 	stw	r16,0(sp)
  807e88:	dfc00215 	stw	ra,8(sp)
  807e8c:	dc400115 	stw	r17,4(sp)
  807e90:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  807e94:	20001516 	blt	r4,zero,807eec <close+0x6c>
  807e98:	20c00324 	muli	r3,r4,12
  807e9c:	00802074 	movhi	r2,129
  807ea0:	10af1404 	addi	r2,r2,-17328
  807ea4:	1887883a 	add	r3,r3,r2

  if (fd)
  807ea8:	18001026 	beq	r3,zero,807eec <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  807eac:	18800017 	ldw	r2,0(r3)
  807eb0:	10800417 	ldw	r2,16(r2)
  807eb4:	10001c26 	beq	r2,zero,807f28 <close+0xa8>
  807eb8:	1809883a 	mov	r4,r3
  807ebc:	103ee83a 	callr	r2
  807ec0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807ec4:	8009883a 	mov	r4,r16
  807ec8:	08083ac0 	call	8083ac <alt_release_fd>
    if (rval < 0)
  807ecc:	88001b16 	blt	r17,zero,807f3c <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807ed0:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  807ed4:	1805883a 	mov	r2,r3
  807ed8:	dfc00217 	ldw	ra,8(sp)
  807edc:	dc400117 	ldw	r17,4(sp)
  807ee0:	dc000017 	ldw	r16,0(sp)
  807ee4:	dec00304 	addi	sp,sp,12
  807ee8:	f800283a 	ret
  807eec:	00802074 	movhi	r2,129
  807ef0:	10af8004 	addi	r2,r2,-16896
  807ef4:	10800017 	ldw	r2,0(r2)
  807ef8:	10000d26 	beq	r2,zero,807f30 <close+0xb0>
  807efc:	103ee83a 	callr	r2
  807f00:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807f04:	00ffffc4 	movi	r3,-1
  807f08:	00801444 	movi	r2,81
  807f0c:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  807f10:	1805883a 	mov	r2,r3
  807f14:	dfc00217 	ldw	ra,8(sp)
  807f18:	dc400117 	ldw	r17,4(sp)
  807f1c:	dc000017 	ldw	r16,0(sp)
  807f20:	dec00304 	addi	sp,sp,12
  807f24:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807f28:	08083ac0 	call	8083ac <alt_release_fd>
  807f2c:	003fe806 	br	807ed0 <close+0x50>
  807f30:	01002074 	movhi	r4,129
  807f34:	21361704 	addi	r4,r4,-10148
  807f38:	003ff206 	br	807f04 <close+0x84>
  807f3c:	00802074 	movhi	r2,129
  807f40:	10af8004 	addi	r2,r2,-16896
  807f44:	10800017 	ldw	r2,0(r2)
  807f48:	10000626 	beq	r2,zero,807f64 <close+0xe4>
  807f4c:	103ee83a 	callr	r2
  807f50:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  807f54:	0445c83a 	sub	r2,zero,r17
  807f58:	00ffffc4 	movi	r3,-1
  807f5c:	20800015 	stw	r2,0(r4)
  807f60:	003fdc06 	br	807ed4 <close+0x54>
  807f64:	01002074 	movhi	r4,129
  807f68:	21361704 	addi	r4,r4,-10148
  807f6c:	003ff906 	br	807f54 <close+0xd4>

00807f70 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807f70:	f800283a 	ret

00807f74 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  807f74:	3005883a 	mov	r2,r6
  807f78:	f800283a 	ret

00807f7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807f7c:	deffff04 	addi	sp,sp,-4
  807f80:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  807f84:	20000d26 	beq	r4,zero,807fbc <alt_dev_llist_insert+0x40>
  807f88:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
  807f8c:	000d883a 	mov	r6,zero
  807f90:	10000a26 	beq	r2,zero,807fbc <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  807f94:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807f98:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  807f9c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  807fa0:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  807fa4:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  807fa8:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  807fac:	3005883a 	mov	r2,r6
  807fb0:	dfc00017 	ldw	ra,0(sp)
  807fb4:	dec00104 	addi	sp,sp,4
  807fb8:	f800283a 	ret
  807fbc:	00802074 	movhi	r2,129
  807fc0:	10af8004 	addi	r2,r2,-16896
  807fc4:	10800017 	ldw	r2,0(r2)
  807fc8:	00c02074 	movhi	r3,129
  807fcc:	18f61704 	addi	r3,r3,-10148
  807fd0:	10000226 	beq	r2,zero,807fdc <alt_dev_llist_insert+0x60>
  807fd4:	103ee83a 	callr	r2
  807fd8:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  807fdc:	01bffa84 	movi	r6,-22
  807fe0:	00800584 	movi	r2,22
  807fe4:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  807fe8:	3005883a 	mov	r2,r6
  807fec:	dfc00017 	ldw	ra,0(sp)
  807ff0:	dec00104 	addi	sp,sp,4
  807ff4:	f800283a 	ret

00807ff8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807ff8:	0009883a 	mov	r4,zero
  807ffc:	01420004 	movi	r5,2048
  808000:	080857c1 	jmpi	80857c <alt_icache_flush>

00808004 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  808004:	000530fa 	rdctl	r2,ienable
  808008:	00c00044 	movi	r3,1
  80800c:	1946983a 	sll	r3,r3,r5
  808010:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  808014:	1004c03a 	cmpne	r2,r2,zero
  808018:	f800283a 	ret

0080801c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80801c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808020:	00bfff84 	movi	r2,-2
  808024:	3084703a 	and	r2,r6,r2
  808028:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  80802c:	01002074 	movhi	r4,129
  808030:	21361d04 	addi	r4,r4,-10124
  808034:	00800044 	movi	r2,1
  808038:	20c00017 	ldw	r3,0(r4)
  80803c:	1144983a 	sll	r2,r2,r5
  808040:	10c4b03a 	or	r2,r2,r3
  808044:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  808048:	20c00017 	ldw	r3,0(r4)
  80804c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808050:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  808054:	0005883a 	mov	r2,zero
  808058:	f800283a 	ret

0080805c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80805c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808060:	00bfff84 	movi	r2,-2
  808064:	3084703a 	and	r2,r6,r2
  808068:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  80806c:	01002074 	movhi	r4,129
  808070:	21361d04 	addi	r4,r4,-10124
  808074:	00bfff84 	movi	r2,-2
  808078:	20c00017 	ldw	r3,0(r4)
  80807c:	1144183a 	rol	r2,r2,r5
  808080:	10c4703a 	and	r2,r2,r3
  808084:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  808088:	20c00017 	ldw	r3,0(r4)
  80808c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808090:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  808094:	0005883a 	mov	r2,zero
  808098:	f800283a 	ret

0080809c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80809c:	08080a01 	jmpi	8080a0 <alt_iic_isr_register>

008080a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8080a0:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8080a4:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8080a8:	dfc00115 	stw	ra,4(sp)
  8080ac:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8080b0:	023ffa84 	movi	r8,-22
  8080b4:	1140050e 	bge	r2,r5,8080cc <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  8080b8:	4005883a 	mov	r2,r8
  8080bc:	dfc00117 	ldw	ra,4(sp)
  8080c0:	dc000017 	ldw	r16,0(sp)
  8080c4:	dec00204 	addi	sp,sp,8
  8080c8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8080cc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8080d0:	00bfff84 	movi	r2,-2
  8080d4:	8084703a 	and	r2,r16,r2
  8080d8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  8080dc:	280690fa 	slli	r3,r5,3
  8080e0:	00802074 	movhi	r2,129
  8080e4:	10b62804 	addi	r2,r2,-10080
  8080e8:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  8080ec:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  8080f0:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8080f4:	30000826 	beq	r6,zero,808118 <alt_iic_isr_register+0x78>
  8080f8:	080801c0 	call	80801c <alt_ic_irq_enable>
  8080fc:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808100:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  808104:	4005883a 	mov	r2,r8
  808108:	dfc00117 	ldw	ra,4(sp)
  80810c:	dc000017 	ldw	r16,0(sp)
  808110:	dec00204 	addi	sp,sp,8
  808114:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  808118:	080805c0 	call	80805c <alt_ic_irq_disable>
  80811c:	1011883a 	mov	r8,r2
  808120:	8001703a 	wrctl	status,r16
  808124:	003ff706 	br	808104 <alt_iic_isr_register+0x64>

00808128 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  808128:	defffd04 	addi	sp,sp,-12
  80812c:	dc400115 	stw	r17,4(sp)
  808130:	dc000015 	stw	r16,0(sp)
  808134:	3023883a 	mov	r17,r6
  808138:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  80813c:	01807fc4 	movi	r6,511
  808140:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  808144:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  808148:	080822c0 	call	80822c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80814c:	10c00324 	muli	r3,r2,12
  808150:	01802074 	movhi	r6,129
  808154:	31af1404 	addi	r6,r6,-17328
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  808158:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80815c:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  808160:	10000716 	blt	r2,zero,808180 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  808164:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808168:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  80816c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  808170:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808174:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  808178:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80817c:	08083ac0 	call	8083ac <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  808180:	8009883a 	mov	r4,r16
  808184:	000b883a 	mov	r5,zero
  808188:	01807fc4 	movi	r6,511
  80818c:	080822c0 	call	80822c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  808190:	10c00324 	muli	r3,r2,12
  808194:	01802074 	movhi	r6,129
  808198:	31af1404 	addi	r6,r6,-17328
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80819c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081a0:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8081a4:	10000716 	blt	r2,zero,8081c4 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8081a8:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081ac:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  8081b0:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8081b4:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081b8:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  8081bc:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8081c0:	08083ac0 	call	8083ac <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  8081c4:	8809883a 	mov	r4,r17
  8081c8:	01400044 	movi	r5,1
  8081cc:	01807fc4 	movi	r6,511
  8081d0:	080822c0 	call	80822c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081d4:	10c00324 	muli	r3,r2,12
  8081d8:	01802074 	movhi	r6,129
  8081dc:	31af1404 	addi	r6,r6,-17328
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8081e0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081e4:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8081e8:	10000b16 	blt	r2,zero,808218 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8081ec:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081f0:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  8081f4:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8081f8:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8081fc:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  808200:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  808204:	dfc00217 	ldw	ra,8(sp)
  808208:	dc400117 	ldw	r17,4(sp)
  80820c:	dc000017 	ldw	r16,0(sp)
  808210:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  808214:	08083ac1 	jmpi	8083ac <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  808218:	dfc00217 	ldw	ra,8(sp)
  80821c:	dc400117 	ldw	r17,4(sp)
  808220:	dc000017 	ldw	r16,0(sp)
  808224:	dec00304 	addi	sp,sp,12
  808228:	f800283a 	ret

0080822c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80822c:	defff904 	addi	sp,sp,-28
  808230:	dcc00315 	stw	r19,12(sp)
  808234:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808238:	01402074 	movhi	r5,129
  80823c:	296f7d04 	addi	r5,r5,-16908
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  808240:	dd400515 	stw	r21,20(sp)
  808244:	dd000415 	stw	r20,16(sp)
  808248:	dc400115 	stw	r17,4(sp)
  80824c:	dfc00615 	stw	ra,24(sp)
  808250:	dc800215 	stw	r18,8(sp)
  808254:	dc000015 	stw	r16,0(sp)
  808258:	302b883a 	mov	r21,r6
  80825c:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808260:	08083d80 	call	8083d8 <alt_find_dev>
  808264:	1023883a 	mov	r17,r2
  808268:	10004726 	beq	r2,zero,808388 <open+0x15c>
  80826c:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  808270:	8809883a 	mov	r4,r17
  808274:	080851c0 	call	80851c <alt_get_fd>
  808278:	1021883a 	mov	r16,r2
  80827c:	10002d16 	blt	r2,zero,808334 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  808280:	10800324 	muli	r2,r2,12
  808284:	01402074 	movhi	r5,129
  808288:	296f1404 	addi	r5,r5,-17328
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80828c:	00d00034 	movhi	r3,16384
  808290:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  808294:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  808298:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80829c:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8082a0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8082a4:	1000121e 	bne	r2,zero,8082f0 <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8082a8:	00802074 	movhi	r2,129
  8082ac:	10af7f04 	addi	r2,r2,-16900
  8082b0:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8082b4:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8082b8:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8082bc:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8082c0:	20800215 	stw	r2,8(r4)
  8082c4:	00000206 	br	8082d0 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8082c8:	29400304 	addi	r5,r5,12
  8082cc:	38c00836 	bltu	r7,r3,8082f0 <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8082d0:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8082d4:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8082d8:	11bffb1e 	bne	r2,r6,8082c8 <open+0x9c>
  8082dc:	28800217 	ldw	r2,8(r5)
  8082e0:	103ff90e 	bge	r2,zero,8082c8 <open+0x9c>
  8082e4:	293ff826 	beq	r5,r4,8082c8 <open+0x9c>
  8082e8:	04400344 	movi	r17,13
  8082ec:	00001206 	br	808338 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8082f0:	88800317 	ldw	r2,12(r17)
  8082f4:	10000526 	beq	r2,zero,80830c <open+0xe0>
  8082f8:	a00b883a 	mov	r5,r20
  8082fc:	980d883a 	mov	r6,r19
  808300:	a80f883a 	mov	r7,r21
  808304:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  808308:	10001516 	blt	r2,zero,808360 <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  80830c:	8005883a 	mov	r2,r16
  808310:	dfc00617 	ldw	ra,24(sp)
  808314:	dd400517 	ldw	r21,20(sp)
  808318:	dd000417 	ldw	r20,16(sp)
  80831c:	dcc00317 	ldw	r19,12(sp)
  808320:	dc800217 	ldw	r18,8(sp)
  808324:	dc400117 	ldw	r17,4(sp)
  808328:	dc000017 	ldw	r16,0(sp)
  80832c:	dec00704 	addi	sp,sp,28
  808330:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  808334:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  808338:	8009883a 	mov	r4,r16
  80833c:	08083ac0 	call	8083ac <alt_release_fd>
  808340:	00802074 	movhi	r2,129
  808344:	10af8004 	addi	r2,r2,-16896
  808348:	10800017 	ldw	r2,0(r2)
  80834c:	10000b26 	beq	r2,zero,80837c <open+0x150>
  808350:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  808354:	043fffc4 	movi	r16,-1
  808358:	14400015 	stw	r17,0(r2)
  80835c:	003feb06 	br	80830c <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  808360:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  808364:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  808368:	08083ac0 	call	8083ac <alt_release_fd>
  80836c:	00802074 	movhi	r2,129
  808370:	10af8004 	addi	r2,r2,-16896
  808374:	10800017 	ldw	r2,0(r2)
  808378:	103ff51e 	bne	r2,zero,808350 <open+0x124>
  80837c:	00802074 	movhi	r2,129
  808380:	10b61704 	addi	r2,r2,-10148
  808384:	003ff306 	br	808354 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  808388:	a009883a 	mov	r4,r20
  80838c:	080846c0 	call	80846c <alt_find_file>
  808390:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  808394:	10000226 	beq	r2,zero,8083a0 <open+0x174>
  808398:	04800044 	movi	r18,1
  80839c:	003fb406 	br	808270 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  8083a0:	043fffc4 	movi	r16,-1
  8083a4:	044004c4 	movi	r17,19
  8083a8:	003fe306 	br	808338 <open+0x10c>

008083ac <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  8083ac:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  8083b0:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  8083b4:	1100050e 	bge	r2,r4,8083cc <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  8083b8:	00802074 	movhi	r2,129
  8083bc:	10af1404 	addi	r2,r2,-17328
  8083c0:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  8083c4:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  8083c8:	10000215 	stw	zero,8(r2)
  8083cc:	f800283a 	ret

008083d0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8083d0:	000170fa 	wrctl	ienable,zero
}
  8083d4:	f800283a 	ret

008083d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8083d8:	defffb04 	addi	sp,sp,-20
  8083dc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  8083e0:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8083e4:	dcc00315 	stw	r19,12(sp)
  8083e8:	dc400115 	stw	r17,4(sp)
  8083ec:	dfc00415 	stw	ra,16(sp)
  8083f0:	2823883a 	mov	r17,r5
  8083f4:	dc800215 	stw	r18,8(sp)
  8083f8:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  8083fc:	0808c700 	call	808c70 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808400:	84401126 	beq	r16,r17,808448 <alt_find_dev+0x70>
  808404:	14800044 	addi	r18,r2,1
  808408:	00000206 	br	808414 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  80840c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808410:	84400d26 	beq	r16,r17,808448 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  808414:	81000217 	ldw	r4,8(r16)
  808418:	980b883a 	mov	r5,r19
  80841c:	900d883a 	mov	r6,r18
  808420:	0808bfc0 	call	808bfc <memcmp>
  808424:	103ff91e 	bne	r2,zero,80840c <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  808428:	8005883a 	mov	r2,r16
  80842c:	dfc00417 	ldw	ra,16(sp)
  808430:	dcc00317 	ldw	r19,12(sp)
  808434:	dc800217 	ldw	r18,8(sp)
  808438:	dc400117 	ldw	r17,4(sp)
  80843c:	dc000017 	ldw	r16,0(sp)
  808440:	dec00504 	addi	sp,sp,20
  808444:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808448:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  80844c:	8005883a 	mov	r2,r16
  808450:	dfc00417 	ldw	ra,16(sp)
  808454:	dcc00317 	ldw	r19,12(sp)
  808458:	dc800217 	ldw	r18,8(sp)
  80845c:	dc400117 	ldw	r17,4(sp)
  808460:	dc000017 	ldw	r16,0(sp)
  808464:	dec00504 	addi	sp,sp,20
  808468:	f800283a 	ret

0080846c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80846c:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  808470:	00802074 	movhi	r2,129
  808474:	10af7b04 	addi	r2,r2,-16916
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808478:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80847c:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808480:	dd000415 	stw	r20,16(sp)
  808484:	dc800215 	stw	r18,8(sp)
  808488:	dfc00515 	stw	ra,20(sp)
  80848c:	dcc00315 	stw	r19,12(sp)
  808490:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  808494:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808498:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80849c:	80801526 	beq	r16,r2,8084f4 <alt_find_file+0x88>
  8084a0:	04c00bc4 	movi	r19,47
  8084a4:	00000806 	br	8084c8 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8084a8:	3485883a 	add	r2,r6,r18
  8084ac:	10800007 	ldb	r2,0(r2)
  8084b0:	14c00126 	beq	r2,r19,8084b8 <alt_find_file+0x4c>
  8084b4:	1000021e 	bne	r2,zero,8084c0 <alt_find_file+0x54>
  8084b8:	0808bfc0 	call	808bfc <memcmp>
  8084bc:	10000e26 	beq	r2,zero,8084f8 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8084c0:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8084c4:	85000b26 	beq	r16,r20,8084f4 <alt_find_file+0x88>
  {
    len = strlen(next->name);
  8084c8:	84400217 	ldw	r17,8(r16)
  8084cc:	8809883a 	mov	r4,r17
  8084d0:	0808c700 	call	808c70 <strlen>
  8084d4:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  8084d8:	8885883a 	add	r2,r17,r2
  8084dc:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8084e0:	8809883a 	mov	r4,r17
  8084e4:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  8084e8:	1cffef1e 	bne	r3,r19,8084a8 <alt_find_file+0x3c>
    {
      len -= 1;
  8084ec:	31bfffc4 	addi	r6,r6,-1
  8084f0:	003fed06 	br	8084a8 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8084f4:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  8084f8:	8005883a 	mov	r2,r16
  8084fc:	dfc00517 	ldw	ra,20(sp)
  808500:	dd000417 	ldw	r20,16(sp)
  808504:	dcc00317 	ldw	r19,12(sp)
  808508:	dc800217 	ldw	r18,8(sp)
  80850c:	dc400117 	ldw	r17,4(sp)
  808510:	dc000017 	ldw	r16,0(sp)
  808514:	dec00604 	addi	sp,sp,24
  808518:	f800283a 	ret

0080851c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80851c:	01402074 	movhi	r5,129
  808520:	296f1404 	addi	r5,r5,-17328
  808524:	0007883a 	mov	r3,zero
  808528:	01c00804 	movi	r7,32
  80852c:	280d883a 	mov	r6,r5
  808530:	00000306 	br	808540 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  808534:	18c00044 	addi	r3,r3,1
  808538:	31800304 	addi	r6,r6,12
  80853c:	19c00d26 	beq	r3,r7,808574 <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  808540:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  808544:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  808548:	103ffa1e 	bne	r2,zero,808534 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  80854c:	01402074 	movhi	r5,129
  808550:	296f7f04 	addi	r5,r5,-16900
  808554:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  808558:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  80855c:	10c0030e 	bge	r2,r3,80856c <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  808560:	1805883a 	mov	r2,r3
  808564:	28c00015 	stw	r3,0(r5)
  808568:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  80856c:	1805883a 	mov	r2,r3
  808570:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  808574:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  808578:	f800283a 	ret

0080857c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  80857c:	00820004 	movi	r2,2048
  808580:	2007883a 	mov	r3,r4
  808584:	1140012e 	bgeu	r2,r5,80858c <alt_icache_flush+0x10>
  808588:	100b883a 	mov	r5,r2
  80858c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808590:	1940032e 	bgeu	r3,r5,8085a0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  808594:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808598:	18c00804 	addi	r3,r3,32
  80859c:	197ffd36 	bltu	r3,r5,808594 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8085a0:	208007cc 	andi	r2,r4,31
  8085a4:	10000126 	beq	r2,zero,8085ac <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8085a8:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8085ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8085b0:	f800283a 	ret

008085b4 <exit>:
  8085b4:	defffe04 	addi	sp,sp,-8
  8085b8:	000b883a 	mov	r5,zero
  8085bc:	dc000015 	stw	r16,0(sp)
  8085c0:	dfc00115 	stw	ra,4(sp)
  8085c4:	2021883a 	mov	r16,r4
  8085c8:	0808e240 	call	808e24 <__call_exitprocs>
  8085cc:	00802074 	movhi	r2,129
  8085d0:	10af7504 	addi	r2,r2,-16940
  8085d4:	11000017 	ldw	r4,0(r2)
  8085d8:	20800f17 	ldw	r2,60(r4)
  8085dc:	10000126 	beq	r2,zero,8085e4 <exit+0x30>
  8085e0:	103ee83a 	callr	r2
  8085e4:	8009883a 	mov	r4,r16
  8085e8:	0809d040 	call	809d04 <_exit>

008085ec <_fputs_r>:
  8085ec:	defff804 	addi	sp,sp,-32
  8085f0:	dc000515 	stw	r16,20(sp)
  8085f4:	2021883a 	mov	r16,r4
  8085f8:	2809883a 	mov	r4,r5
  8085fc:	dc400615 	stw	r17,24(sp)
  808600:	dfc00715 	stw	ra,28(sp)
  808604:	3023883a 	mov	r17,r6
  808608:	d9400015 	stw	r5,0(sp)
  80860c:	0808c700 	call	808c70 <strlen>
  808610:	00c00044 	movi	r3,1
  808614:	d8800115 	stw	r2,4(sp)
  808618:	d8c00315 	stw	r3,12(sp)
  80861c:	d8800415 	stw	r2,16(sp)
  808620:	dec00215 	stw	sp,8(sp)
  808624:	80000326 	beq	r16,zero,808634 <_fputs_r+0x48>
  808628:	80800e17 	ldw	r2,56(r16)
  80862c:	8009883a 	mov	r4,r16
  808630:	10000926 	beq	r2,zero,808658 <_fputs_r+0x6c>
  808634:	8009883a 	mov	r4,r16
  808638:	880b883a 	mov	r5,r17
  80863c:	d9800204 	addi	r6,sp,8
  808640:	080867c0 	call	80867c <__sfvwrite_r>
  808644:	dfc00717 	ldw	ra,28(sp)
  808648:	dc400617 	ldw	r17,24(sp)
  80864c:	dc000517 	ldw	r16,20(sp)
  808650:	dec00804 	addi	sp,sp,32
  808654:	f800283a 	ret
  808658:	080926c0 	call	80926c <__sinit>
  80865c:	003ff506 	br	808634 <_fputs_r+0x48>

00808660 <fputs>:
  808660:	01802074 	movhi	r6,129
  808664:	31af7404 	addi	r6,r6,-16944
  808668:	2007883a 	mov	r3,r4
  80866c:	31000017 	ldw	r4,0(r6)
  808670:	280d883a 	mov	r6,r5
  808674:	180b883a 	mov	r5,r3
  808678:	08085ec1 	jmpi	8085ec <_fputs_r>

0080867c <__sfvwrite_r>:
  80867c:	30800217 	ldw	r2,8(r6)
  808680:	defff504 	addi	sp,sp,-44
  808684:	df000915 	stw	fp,36(sp)
  808688:	dd800715 	stw	r22,28(sp)
  80868c:	dc800315 	stw	r18,12(sp)
  808690:	dfc00a15 	stw	ra,40(sp)
  808694:	ddc00815 	stw	r23,32(sp)
  808698:	dd400615 	stw	r21,24(sp)
  80869c:	dd000515 	stw	r20,20(sp)
  8086a0:	dcc00415 	stw	r19,16(sp)
  8086a4:	dc400215 	stw	r17,8(sp)
  8086a8:	dc000115 	stw	r16,4(sp)
  8086ac:	302d883a 	mov	r22,r6
  8086b0:	2039883a 	mov	fp,r4
  8086b4:	2825883a 	mov	r18,r5
  8086b8:	10001c26 	beq	r2,zero,80872c <__sfvwrite_r+0xb0>
  8086bc:	29c0030b 	ldhu	r7,12(r5)
  8086c0:	3880020c 	andi	r2,r7,8
  8086c4:	10002726 	beq	r2,zero,808764 <__sfvwrite_r+0xe8>
  8086c8:	28800417 	ldw	r2,16(r5)
  8086cc:	10002526 	beq	r2,zero,808764 <__sfvwrite_r+0xe8>
  8086d0:	3880008c 	andi	r2,r7,2
  8086d4:	b5400017 	ldw	r21,0(r22)
  8086d8:	10002826 	beq	r2,zero,80877c <__sfvwrite_r+0x100>
  8086dc:	0021883a 	mov	r16,zero
  8086e0:	0023883a 	mov	r17,zero
  8086e4:	880d883a 	mov	r6,r17
  8086e8:	e009883a 	mov	r4,fp
  8086ec:	00810004 	movi	r2,1024
  8086f0:	80006e26 	beq	r16,zero,8088ac <__sfvwrite_r+0x230>
  8086f4:	800f883a 	mov	r7,r16
  8086f8:	91400717 	ldw	r5,28(r18)
  8086fc:	1400012e 	bgeu	r2,r16,808704 <__sfvwrite_r+0x88>
  808700:	100f883a 	mov	r7,r2
  808704:	90c00917 	ldw	r3,36(r18)
  808708:	183ee83a 	callr	r3
  80870c:	1007883a 	mov	r3,r2
  808710:	80a1c83a 	sub	r16,r16,r2
  808714:	88a3883a 	add	r17,r17,r2
  808718:	00806d0e 	bge	zero,r2,8088d0 <__sfvwrite_r+0x254>
  80871c:	b0800217 	ldw	r2,8(r22)
  808720:	10c5c83a 	sub	r2,r2,r3
  808724:	b0800215 	stw	r2,8(r22)
  808728:	103fee1e 	bne	r2,zero,8086e4 <__sfvwrite_r+0x68>
  80872c:	0009883a 	mov	r4,zero
  808730:	2005883a 	mov	r2,r4
  808734:	dfc00a17 	ldw	ra,40(sp)
  808738:	df000917 	ldw	fp,36(sp)
  80873c:	ddc00817 	ldw	r23,32(sp)
  808740:	dd800717 	ldw	r22,28(sp)
  808744:	dd400617 	ldw	r21,24(sp)
  808748:	dd000517 	ldw	r20,20(sp)
  80874c:	dcc00417 	ldw	r19,16(sp)
  808750:	dc800317 	ldw	r18,12(sp)
  808754:	dc400217 	ldw	r17,8(sp)
  808758:	dc000117 	ldw	r16,4(sp)
  80875c:	dec00b04 	addi	sp,sp,44
  808760:	f800283a 	ret
  808764:	0808ce40 	call	808ce4 <__swsetup_r>
  808768:	1000e41e 	bne	r2,zero,808afc <__sfvwrite_r+0x480>
  80876c:	91c0030b 	ldhu	r7,12(r18)
  808770:	b5400017 	ldw	r21,0(r22)
  808774:	3880008c 	andi	r2,r7,2
  808778:	103fd81e 	bne	r2,zero,8086dc <__sfvwrite_r+0x60>
  80877c:	3880004c 	andi	r2,r7,1
  808780:	1005003a 	cmpeq	r2,r2,zero
  808784:	10005726 	beq	r2,zero,8088e4 <__sfvwrite_r+0x268>
  808788:	0029883a 	mov	r20,zero
  80878c:	002f883a 	mov	r23,zero
  808790:	a0004226 	beq	r20,zero,80889c <__sfvwrite_r+0x220>
  808794:	3880800c 	andi	r2,r7,512
  808798:	94000217 	ldw	r16,8(r18)
  80879c:	10008b26 	beq	r2,zero,8089cc <__sfvwrite_r+0x350>
  8087a0:	800d883a 	mov	r6,r16
  8087a4:	a400a536 	bltu	r20,r16,808a3c <__sfvwrite_r+0x3c0>
  8087a8:	3881200c 	andi	r2,r7,1152
  8087ac:	10002726 	beq	r2,zero,80884c <__sfvwrite_r+0x1d0>
  8087b0:	90800517 	ldw	r2,20(r18)
  8087b4:	92000417 	ldw	r8,16(r18)
  8087b8:	91400017 	ldw	r5,0(r18)
  8087bc:	1087883a 	add	r3,r2,r2
  8087c0:	1887883a 	add	r3,r3,r2
  8087c4:	1808d7fa 	srli	r4,r3,31
  8087c8:	2a21c83a 	sub	r16,r5,r8
  8087cc:	80800044 	addi	r2,r16,1
  8087d0:	20c9883a 	add	r4,r4,r3
  8087d4:	2027d07a 	srai	r19,r4,1
  8087d8:	a085883a 	add	r2,r20,r2
  8087dc:	980d883a 	mov	r6,r19
  8087e0:	9880022e 	bgeu	r19,r2,8087ec <__sfvwrite_r+0x170>
  8087e4:	1027883a 	mov	r19,r2
  8087e8:	100d883a 	mov	r6,r2
  8087ec:	3881000c 	andi	r2,r7,1024
  8087f0:	1000b826 	beq	r2,zero,808ad4 <__sfvwrite_r+0x458>
  8087f4:	300b883a 	mov	r5,r6
  8087f8:	e009883a 	mov	r4,fp
  8087fc:	08020dc0 	call	8020dc <_malloc_r>
  808800:	10003126 	beq	r2,zero,8088c8 <__sfvwrite_r+0x24c>
  808804:	91400417 	ldw	r5,16(r18)
  808808:	1009883a 	mov	r4,r2
  80880c:	800d883a 	mov	r6,r16
  808810:	1023883a 	mov	r17,r2
  808814:	080281c0 	call	80281c <memcpy>
  808818:	90c0030b 	ldhu	r3,12(r18)
  80881c:	00beffc4 	movi	r2,-1025
  808820:	1886703a 	and	r3,r3,r2
  808824:	18c02014 	ori	r3,r3,128
  808828:	90c0030d 	sth	r3,12(r18)
  80882c:	9c07c83a 	sub	r3,r19,r16
  808830:	8c05883a 	add	r2,r17,r16
  808834:	a00d883a 	mov	r6,r20
  808838:	a021883a 	mov	r16,r20
  80883c:	90800015 	stw	r2,0(r18)
  808840:	90c00215 	stw	r3,8(r18)
  808844:	94400415 	stw	r17,16(r18)
  808848:	94c00515 	stw	r19,20(r18)
  80884c:	91000017 	ldw	r4,0(r18)
  808850:	b80b883a 	mov	r5,r23
  808854:	a023883a 	mov	r17,r20
  808858:	08067ac0 	call	8067ac <memmove>
  80885c:	90c00217 	ldw	r3,8(r18)
  808860:	90800017 	ldw	r2,0(r18)
  808864:	a027883a 	mov	r19,r20
  808868:	1c07c83a 	sub	r3,r3,r16
  80886c:	1405883a 	add	r2,r2,r16
  808870:	90c00215 	stw	r3,8(r18)
  808874:	a021883a 	mov	r16,r20
  808878:	90800015 	stw	r2,0(r18)
  80887c:	b0800217 	ldw	r2,8(r22)
  808880:	1405c83a 	sub	r2,r2,r16
  808884:	b0800215 	stw	r2,8(r22)
  808888:	103fa826 	beq	r2,zero,80872c <__sfvwrite_r+0xb0>
  80888c:	a469c83a 	sub	r20,r20,r17
  808890:	91c0030b 	ldhu	r7,12(r18)
  808894:	bcef883a 	add	r23,r23,r19
  808898:	a03fbe1e 	bne	r20,zero,808794 <__sfvwrite_r+0x118>
  80889c:	adc00017 	ldw	r23,0(r21)
  8088a0:	ad000117 	ldw	r20,4(r21)
  8088a4:	ad400204 	addi	r21,r21,8
  8088a8:	003fb906 	br	808790 <__sfvwrite_r+0x114>
  8088ac:	ac400017 	ldw	r17,0(r21)
  8088b0:	ac000117 	ldw	r16,4(r21)
  8088b4:	ad400204 	addi	r21,r21,8
  8088b8:	003f8a06 	br	8086e4 <__sfvwrite_r+0x68>
  8088bc:	91400417 	ldw	r5,16(r18)
  8088c0:	e009883a 	mov	r4,fp
  8088c4:	08035a40 	call	8035a4 <_free_r>
  8088c8:	00800304 	movi	r2,12
  8088cc:	e0800015 	stw	r2,0(fp)
  8088d0:	9080030b 	ldhu	r2,12(r18)
  8088d4:	013fffc4 	movi	r4,-1
  8088d8:	10801014 	ori	r2,r2,64
  8088dc:	9080030d 	sth	r2,12(r18)
  8088e0:	003f9306 	br	808730 <__sfvwrite_r+0xb4>
  8088e4:	0027883a 	mov	r19,zero
  8088e8:	002f883a 	mov	r23,zero
  8088ec:	d8000015 	stw	zero,0(sp)
  8088f0:	0029883a 	mov	r20,zero
  8088f4:	98001e26 	beq	r19,zero,808970 <__sfvwrite_r+0x2f4>
  8088f8:	d8c00017 	ldw	r3,0(sp)
  8088fc:	1804c03a 	cmpne	r2,r3,zero
  808900:	10005e26 	beq	r2,zero,808a7c <__sfvwrite_r+0x400>
  808904:	9821883a 	mov	r16,r19
  808908:	a4c0012e 	bgeu	r20,r19,808910 <__sfvwrite_r+0x294>
  80890c:	a021883a 	mov	r16,r20
  808910:	91000017 	ldw	r4,0(r18)
  808914:	90800417 	ldw	r2,16(r18)
  808918:	91800217 	ldw	r6,8(r18)
  80891c:	91c00517 	ldw	r7,20(r18)
  808920:	1100022e 	bgeu	r2,r4,80892c <__sfvwrite_r+0x2b0>
  808924:	31e3883a 	add	r17,r6,r7
  808928:	8c001616 	blt	r17,r16,808984 <__sfvwrite_r+0x308>
  80892c:	81c03816 	blt	r16,r7,808a10 <__sfvwrite_r+0x394>
  808930:	90c00917 	ldw	r3,36(r18)
  808934:	91400717 	ldw	r5,28(r18)
  808938:	e009883a 	mov	r4,fp
  80893c:	b80d883a 	mov	r6,r23
  808940:	183ee83a 	callr	r3
  808944:	1023883a 	mov	r17,r2
  808948:	00bfe10e 	bge	zero,r2,8088d0 <__sfvwrite_r+0x254>
  80894c:	a469c83a 	sub	r20,r20,r17
  808950:	a0001826 	beq	r20,zero,8089b4 <__sfvwrite_r+0x338>
  808954:	b0800217 	ldw	r2,8(r22)
  808958:	1445c83a 	sub	r2,r2,r17
  80895c:	b0800215 	stw	r2,8(r22)
  808960:	103f7226 	beq	r2,zero,80872c <__sfvwrite_r+0xb0>
  808964:	9c67c83a 	sub	r19,r19,r17
  808968:	bc6f883a 	add	r23,r23,r17
  80896c:	983fe21e 	bne	r19,zero,8088f8 <__sfvwrite_r+0x27c>
  808970:	adc00017 	ldw	r23,0(r21)
  808974:	acc00117 	ldw	r19,4(r21)
  808978:	ad400204 	addi	r21,r21,8
  80897c:	d8000015 	stw	zero,0(sp)
  808980:	003fdc06 	br	8088f4 <__sfvwrite_r+0x278>
  808984:	b80b883a 	mov	r5,r23
  808988:	880d883a 	mov	r6,r17
  80898c:	08067ac0 	call	8067ac <memmove>
  808990:	90c00017 	ldw	r3,0(r18)
  808994:	e009883a 	mov	r4,fp
  808998:	900b883a 	mov	r5,r18
  80899c:	1c47883a 	add	r3,r3,r17
  8089a0:	90c00015 	stw	r3,0(r18)
  8089a4:	0808fd40 	call	808fd4 <_fflush_r>
  8089a8:	103fc91e 	bne	r2,zero,8088d0 <__sfvwrite_r+0x254>
  8089ac:	a469c83a 	sub	r20,r20,r17
  8089b0:	a03fe81e 	bne	r20,zero,808954 <__sfvwrite_r+0x2d8>
  8089b4:	e009883a 	mov	r4,fp
  8089b8:	900b883a 	mov	r5,r18
  8089bc:	0808fd40 	call	808fd4 <_fflush_r>
  8089c0:	103fc31e 	bne	r2,zero,8088d0 <__sfvwrite_r+0x254>
  8089c4:	d8000015 	stw	zero,0(sp)
  8089c8:	003fe206 	br	808954 <__sfvwrite_r+0x2d8>
  8089cc:	91000017 	ldw	r4,0(r18)
  8089d0:	90800417 	ldw	r2,16(r18)
  8089d4:	1100022e 	bgeu	r2,r4,8089e0 <__sfvwrite_r+0x364>
  8089d8:	8023883a 	mov	r17,r16
  8089dc:	85003136 	bltu	r16,r20,808aa4 <__sfvwrite_r+0x428>
  8089e0:	91c00517 	ldw	r7,20(r18)
  8089e4:	a1c01836 	bltu	r20,r7,808a48 <__sfvwrite_r+0x3cc>
  8089e8:	90c00917 	ldw	r3,36(r18)
  8089ec:	91400717 	ldw	r5,28(r18)
  8089f0:	e009883a 	mov	r4,fp
  8089f4:	b80d883a 	mov	r6,r23
  8089f8:	183ee83a 	callr	r3
  8089fc:	1021883a 	mov	r16,r2
  808a00:	00bfb30e 	bge	zero,r2,8088d0 <__sfvwrite_r+0x254>
  808a04:	1023883a 	mov	r17,r2
  808a08:	1027883a 	mov	r19,r2
  808a0c:	003f9b06 	br	80887c <__sfvwrite_r+0x200>
  808a10:	b80b883a 	mov	r5,r23
  808a14:	800d883a 	mov	r6,r16
  808a18:	08067ac0 	call	8067ac <memmove>
  808a1c:	90c00217 	ldw	r3,8(r18)
  808a20:	90800017 	ldw	r2,0(r18)
  808a24:	8023883a 	mov	r17,r16
  808a28:	1c07c83a 	sub	r3,r3,r16
  808a2c:	1405883a 	add	r2,r2,r16
  808a30:	90c00215 	stw	r3,8(r18)
  808a34:	90800015 	stw	r2,0(r18)
  808a38:	003fc406 	br	80894c <__sfvwrite_r+0x2d0>
  808a3c:	a00d883a 	mov	r6,r20
  808a40:	a021883a 	mov	r16,r20
  808a44:	003f8106 	br	80884c <__sfvwrite_r+0x1d0>
  808a48:	b80b883a 	mov	r5,r23
  808a4c:	a00d883a 	mov	r6,r20
  808a50:	08067ac0 	call	8067ac <memmove>
  808a54:	90c00217 	ldw	r3,8(r18)
  808a58:	90800017 	ldw	r2,0(r18)
  808a5c:	a021883a 	mov	r16,r20
  808a60:	1d07c83a 	sub	r3,r3,r20
  808a64:	1505883a 	add	r2,r2,r20
  808a68:	a023883a 	mov	r17,r20
  808a6c:	a027883a 	mov	r19,r20
  808a70:	90c00215 	stw	r3,8(r18)
  808a74:	90800015 	stw	r2,0(r18)
  808a78:	003f8006 	br	80887c <__sfvwrite_r+0x200>
  808a7c:	b809883a 	mov	r4,r23
  808a80:	01400284 	movi	r5,10
  808a84:	980d883a 	mov	r6,r19
  808a88:	0808b180 	call	808b18 <memchr>
  808a8c:	10001726 	beq	r2,zero,808aec <__sfvwrite_r+0x470>
  808a90:	15c5c83a 	sub	r2,r2,r23
  808a94:	15000044 	addi	r20,r2,1
  808a98:	00800044 	movi	r2,1
  808a9c:	d8800015 	stw	r2,0(sp)
  808aa0:	003f9806 	br	808904 <__sfvwrite_r+0x288>
  808aa4:	b80b883a 	mov	r5,r23
  808aa8:	800d883a 	mov	r6,r16
  808aac:	08067ac0 	call	8067ac <memmove>
  808ab0:	90c00017 	ldw	r3,0(r18)
  808ab4:	e009883a 	mov	r4,fp
  808ab8:	900b883a 	mov	r5,r18
  808abc:	1c07883a 	add	r3,r3,r16
  808ac0:	90c00015 	stw	r3,0(r18)
  808ac4:	8027883a 	mov	r19,r16
  808ac8:	0808fd40 	call	808fd4 <_fflush_r>
  808acc:	103f6b26 	beq	r2,zero,80887c <__sfvwrite_r+0x200>
  808ad0:	003f7f06 	br	8088d0 <__sfvwrite_r+0x254>
  808ad4:	400b883a 	mov	r5,r8
  808ad8:	e009883a 	mov	r4,fp
  808adc:	08048ac0 	call	8048ac <_realloc_r>
  808ae0:	103f7626 	beq	r2,zero,8088bc <__sfvwrite_r+0x240>
  808ae4:	1023883a 	mov	r17,r2
  808ae8:	003f5006 	br	80882c <__sfvwrite_r+0x1b0>
  808aec:	00c00044 	movi	r3,1
  808af0:	9d000044 	addi	r20,r19,1
  808af4:	d8c00015 	stw	r3,0(sp)
  808af8:	003f8206 	br	808904 <__sfvwrite_r+0x288>
  808afc:	9080030b 	ldhu	r2,12(r18)
  808b00:	00c00244 	movi	r3,9
  808b04:	013fffc4 	movi	r4,-1
  808b08:	10801014 	ori	r2,r2,64
  808b0c:	9080030d 	sth	r2,12(r18)
  808b10:	e0c00015 	stw	r3,0(fp)
  808b14:	003f0606 	br	808730 <__sfvwrite_r+0xb4>

00808b18 <memchr>:
  808b18:	008000c4 	movi	r2,3
  808b1c:	29403fcc 	andi	r5,r5,255
  808b20:	2007883a 	mov	r3,r4
  808b24:	1180022e 	bgeu	r2,r6,808b30 <memchr+0x18>
  808b28:	2084703a 	and	r2,r4,r2
  808b2c:	10000b26 	beq	r2,zero,808b5c <memchr+0x44>
  808b30:	313fffc4 	addi	r4,r6,-1
  808b34:	3000051e 	bne	r6,zero,808b4c <memchr+0x34>
  808b38:	00002c06 	br	808bec <memchr+0xd4>
  808b3c:	213fffc4 	addi	r4,r4,-1
  808b40:	00bfffc4 	movi	r2,-1
  808b44:	18c00044 	addi	r3,r3,1
  808b48:	20802826 	beq	r4,r2,808bec <memchr+0xd4>
  808b4c:	18800003 	ldbu	r2,0(r3)
  808b50:	28bffa1e 	bne	r5,r2,808b3c <memchr+0x24>
  808b54:	1805883a 	mov	r2,r3
  808b58:	f800283a 	ret
  808b5c:	0011883a 	mov	r8,zero
  808b60:	0007883a 	mov	r3,zero
  808b64:	01c00104 	movi	r7,4
  808b68:	4004923a 	slli	r2,r8,8
  808b6c:	18c00044 	addi	r3,r3,1
  808b70:	1151883a 	add	r8,r2,r5
  808b74:	19fffc1e 	bne	r3,r7,808b68 <memchr+0x50>
  808b78:	02bfbff4 	movhi	r10,65279
  808b7c:	52bfbfc4 	addi	r10,r10,-257
  808b80:	02602074 	movhi	r9,32897
  808b84:	4a602004 	addi	r9,r9,-32640
  808b88:	02c000c4 	movi	r11,3
  808b8c:	20800017 	ldw	r2,0(r4)
  808b90:	31bfff04 	addi	r6,r6,-4
  808b94:	200f883a 	mov	r7,r4
  808b98:	1204f03a 	xor	r2,r2,r8
  808b9c:	1287883a 	add	r3,r2,r10
  808ba0:	1a46703a 	and	r3,r3,r9
  808ba4:	0084303a 	nor	r2,zero,r2
  808ba8:	10c4703a 	and	r2,r2,r3
  808bac:	10000b26 	beq	r2,zero,808bdc <memchr+0xc4>
  808bb0:	20800003 	ldbu	r2,0(r4)
  808bb4:	28800f26 	beq	r5,r2,808bf4 <memchr+0xdc>
  808bb8:	20800043 	ldbu	r2,1(r4)
  808bbc:	21c00044 	addi	r7,r4,1
  808bc0:	28800c26 	beq	r5,r2,808bf4 <memchr+0xdc>
  808bc4:	20800083 	ldbu	r2,2(r4)
  808bc8:	21c00084 	addi	r7,r4,2
  808bcc:	28800926 	beq	r5,r2,808bf4 <memchr+0xdc>
  808bd0:	208000c3 	ldbu	r2,3(r4)
  808bd4:	21c000c4 	addi	r7,r4,3
  808bd8:	28800626 	beq	r5,r2,808bf4 <memchr+0xdc>
  808bdc:	21000104 	addi	r4,r4,4
  808be0:	59bfea36 	bltu	r11,r6,808b8c <memchr+0x74>
  808be4:	2007883a 	mov	r3,r4
  808be8:	003fd106 	br	808b30 <memchr+0x18>
  808bec:	0005883a 	mov	r2,zero
  808bf0:	f800283a 	ret
  808bf4:	3805883a 	mov	r2,r7
  808bf8:	f800283a 	ret

00808bfc <memcmp>:
  808bfc:	00c000c4 	movi	r3,3
  808c00:	1980032e 	bgeu	r3,r6,808c10 <memcmp+0x14>
  808c04:	2144b03a 	or	r2,r4,r5
  808c08:	10c4703a 	and	r2,r2,r3
  808c0c:	10000f26 	beq	r2,zero,808c4c <memcmp+0x50>
  808c10:	31ffffc4 	addi	r7,r6,-1
  808c14:	3000061e 	bne	r6,zero,808c30 <memcmp+0x34>
  808c18:	00000a06 	br	808c44 <memcmp+0x48>
  808c1c:	39ffffc4 	addi	r7,r7,-1
  808c20:	00bfffc4 	movi	r2,-1
  808c24:	21000044 	addi	r4,r4,1
  808c28:	29400044 	addi	r5,r5,1
  808c2c:	38800526 	beq	r7,r2,808c44 <memcmp+0x48>
  808c30:	20c00003 	ldbu	r3,0(r4)
  808c34:	28800003 	ldbu	r2,0(r5)
  808c38:	18bff826 	beq	r3,r2,808c1c <memcmp+0x20>
  808c3c:	1885c83a 	sub	r2,r3,r2
  808c40:	f800283a 	ret
  808c44:	0005883a 	mov	r2,zero
  808c48:	f800283a 	ret
  808c4c:	180f883a 	mov	r7,r3
  808c50:	20c00017 	ldw	r3,0(r4)
  808c54:	28800017 	ldw	r2,0(r5)
  808c58:	18bfed1e 	bne	r3,r2,808c10 <memcmp+0x14>
  808c5c:	31bfff04 	addi	r6,r6,-4
  808c60:	21000104 	addi	r4,r4,4
  808c64:	29400104 	addi	r5,r5,4
  808c68:	39bff936 	bltu	r7,r6,808c50 <memcmp+0x54>
  808c6c:	003fe806 	br	808c10 <memcmp+0x14>

00808c70 <strlen>:
  808c70:	208000cc 	andi	r2,r4,3
  808c74:	2011883a 	mov	r8,r4
  808c78:	1000161e 	bne	r2,zero,808cd4 <strlen+0x64>
  808c7c:	20c00017 	ldw	r3,0(r4)
  808c80:	017fbff4 	movhi	r5,65279
  808c84:	297fbfc4 	addi	r5,r5,-257
  808c88:	01e02074 	movhi	r7,32897
  808c8c:	39e02004 	addi	r7,r7,-32640
  808c90:	1945883a 	add	r2,r3,r5
  808c94:	11c4703a 	and	r2,r2,r7
  808c98:	00c6303a 	nor	r3,zero,r3
  808c9c:	1886703a 	and	r3,r3,r2
  808ca0:	18000c1e 	bne	r3,zero,808cd4 <strlen+0x64>
  808ca4:	280d883a 	mov	r6,r5
  808ca8:	380b883a 	mov	r5,r7
  808cac:	21000104 	addi	r4,r4,4
  808cb0:	20800017 	ldw	r2,0(r4)
  808cb4:	1187883a 	add	r3,r2,r6
  808cb8:	1946703a 	and	r3,r3,r5
  808cbc:	0084303a 	nor	r2,zero,r2
  808cc0:	10c4703a 	and	r2,r2,r3
  808cc4:	103ff926 	beq	r2,zero,808cac <strlen+0x3c>
  808cc8:	20800007 	ldb	r2,0(r4)
  808ccc:	10000326 	beq	r2,zero,808cdc <strlen+0x6c>
  808cd0:	21000044 	addi	r4,r4,1
  808cd4:	20800007 	ldb	r2,0(r4)
  808cd8:	103ffd1e 	bne	r2,zero,808cd0 <strlen+0x60>
  808cdc:	2205c83a 	sub	r2,r4,r8
  808ce0:	f800283a 	ret

00808ce4 <__swsetup_r>:
  808ce4:	00802074 	movhi	r2,129
  808ce8:	10af7404 	addi	r2,r2,-16944
  808cec:	10c00017 	ldw	r3,0(r2)
  808cf0:	defffd04 	addi	sp,sp,-12
  808cf4:	dc400115 	stw	r17,4(sp)
  808cf8:	dc000015 	stw	r16,0(sp)
  808cfc:	dfc00215 	stw	ra,8(sp)
  808d00:	2023883a 	mov	r17,r4
  808d04:	2821883a 	mov	r16,r5
  808d08:	18000226 	beq	r3,zero,808d14 <__swsetup_r+0x30>
  808d0c:	18800e17 	ldw	r2,56(r3)
  808d10:	10001f26 	beq	r2,zero,808d90 <__swsetup_r+0xac>
  808d14:	8100030b 	ldhu	r4,12(r16)
  808d18:	2080020c 	andi	r2,r4,8
  808d1c:	10002826 	beq	r2,zero,808dc0 <__swsetup_r+0xdc>
  808d20:	81400417 	ldw	r5,16(r16)
  808d24:	28001d26 	beq	r5,zero,808d9c <__swsetup_r+0xb8>
  808d28:	2080004c 	andi	r2,r4,1
  808d2c:	1005003a 	cmpeq	r2,r2,zero
  808d30:	10000b26 	beq	r2,zero,808d60 <__swsetup_r+0x7c>
  808d34:	2080008c 	andi	r2,r4,2
  808d38:	10001226 	beq	r2,zero,808d84 <__swsetup_r+0xa0>
  808d3c:	0005883a 	mov	r2,zero
  808d40:	80800215 	stw	r2,8(r16)
  808d44:	28000b26 	beq	r5,zero,808d74 <__swsetup_r+0x90>
  808d48:	0005883a 	mov	r2,zero
  808d4c:	dfc00217 	ldw	ra,8(sp)
  808d50:	dc400117 	ldw	r17,4(sp)
  808d54:	dc000017 	ldw	r16,0(sp)
  808d58:	dec00304 	addi	sp,sp,12
  808d5c:	f800283a 	ret
  808d60:	80800517 	ldw	r2,20(r16)
  808d64:	80000215 	stw	zero,8(r16)
  808d68:	0085c83a 	sub	r2,zero,r2
  808d6c:	80800615 	stw	r2,24(r16)
  808d70:	283ff51e 	bne	r5,zero,808d48 <__swsetup_r+0x64>
  808d74:	2080200c 	andi	r2,r4,128
  808d78:	103ff326 	beq	r2,zero,808d48 <__swsetup_r+0x64>
  808d7c:	00bfffc4 	movi	r2,-1
  808d80:	003ff206 	br	808d4c <__swsetup_r+0x68>
  808d84:	80800517 	ldw	r2,20(r16)
  808d88:	80800215 	stw	r2,8(r16)
  808d8c:	003fed06 	br	808d44 <__swsetup_r+0x60>
  808d90:	1809883a 	mov	r4,r3
  808d94:	080926c0 	call	80926c <__sinit>
  808d98:	003fde06 	br	808d14 <__swsetup_r+0x30>
  808d9c:	20c0a00c 	andi	r3,r4,640
  808da0:	00808004 	movi	r2,512
  808da4:	18bfe026 	beq	r3,r2,808d28 <__swsetup_r+0x44>
  808da8:	8809883a 	mov	r4,r17
  808dac:	800b883a 	mov	r5,r16
  808db0:	08096440 	call	809644 <__smakebuf_r>
  808db4:	8100030b 	ldhu	r4,12(r16)
  808db8:	81400417 	ldw	r5,16(r16)
  808dbc:	003fda06 	br	808d28 <__swsetup_r+0x44>
  808dc0:	2080040c 	andi	r2,r4,16
  808dc4:	103fed26 	beq	r2,zero,808d7c <__swsetup_r+0x98>
  808dc8:	2080010c 	andi	r2,r4,4
  808dcc:	10001226 	beq	r2,zero,808e18 <__swsetup_r+0x134>
  808dd0:	81400c17 	ldw	r5,48(r16)
  808dd4:	28000526 	beq	r5,zero,808dec <__swsetup_r+0x108>
  808dd8:	80801004 	addi	r2,r16,64
  808ddc:	28800226 	beq	r5,r2,808de8 <__swsetup_r+0x104>
  808de0:	8809883a 	mov	r4,r17
  808de4:	08035a40 	call	8035a4 <_free_r>
  808de8:	80000c15 	stw	zero,48(r16)
  808dec:	8080030b 	ldhu	r2,12(r16)
  808df0:	81400417 	ldw	r5,16(r16)
  808df4:	80000115 	stw	zero,4(r16)
  808df8:	10bff6cc 	andi	r2,r2,65499
  808dfc:	8080030d 	sth	r2,12(r16)
  808e00:	81400015 	stw	r5,0(r16)
  808e04:	8080030b 	ldhu	r2,12(r16)
  808e08:	10800214 	ori	r2,r2,8
  808e0c:	113fffcc 	andi	r4,r2,65535
  808e10:	8080030d 	sth	r2,12(r16)
  808e14:	003fc306 	br	808d24 <__swsetup_r+0x40>
  808e18:	81400417 	ldw	r5,16(r16)
  808e1c:	003ff906 	br	808e04 <__swsetup_r+0x120>

00808e20 <register_fini>:
  808e20:	f800283a 	ret

00808e24 <__call_exitprocs>:
  808e24:	00802074 	movhi	r2,129
  808e28:	10af7504 	addi	r2,r2,-16940
  808e2c:	10800017 	ldw	r2,0(r2)
  808e30:	defff304 	addi	sp,sp,-52
  808e34:	df000b15 	stw	fp,44(sp)
  808e38:	d8800115 	stw	r2,4(sp)
  808e3c:	00802034 	movhi	r2,128
  808e40:	10882d04 	addi	r2,r2,8372
  808e44:	1005003a 	cmpeq	r2,r2,zero
  808e48:	d8800215 	stw	r2,8(sp)
  808e4c:	d8800117 	ldw	r2,4(sp)
  808e50:	dd400815 	stw	r21,32(sp)
  808e54:	dd000715 	stw	r20,28(sp)
  808e58:	10805204 	addi	r2,r2,328
  808e5c:	dfc00c15 	stw	ra,48(sp)
  808e60:	ddc00a15 	stw	r23,40(sp)
  808e64:	dd800915 	stw	r22,36(sp)
  808e68:	dcc00615 	stw	r19,24(sp)
  808e6c:	dc800515 	stw	r18,20(sp)
  808e70:	dc400415 	stw	r17,16(sp)
  808e74:	dc000315 	stw	r16,12(sp)
  808e78:	282b883a 	mov	r21,r5
  808e7c:	2039883a 	mov	fp,r4
  808e80:	d8800015 	stw	r2,0(sp)
  808e84:	2829003a 	cmpeq	r20,r5,zero
  808e88:	d8800117 	ldw	r2,4(sp)
  808e8c:	14405217 	ldw	r17,328(r2)
  808e90:	88001026 	beq	r17,zero,808ed4 <__call_exitprocs+0xb0>
  808e94:	ddc00017 	ldw	r23,0(sp)
  808e98:	88800117 	ldw	r2,4(r17)
  808e9c:	8c802204 	addi	r18,r17,136
  808ea0:	143fffc4 	addi	r16,r2,-1
  808ea4:	80000916 	blt	r16,zero,808ecc <__call_exitprocs+0xa8>
  808ea8:	05bfffc4 	movi	r22,-1
  808eac:	a000151e 	bne	r20,zero,808f04 <__call_exitprocs+0xe0>
  808eb0:	8409883a 	add	r4,r16,r16
  808eb4:	2105883a 	add	r2,r4,r4
  808eb8:	1485883a 	add	r2,r2,r18
  808ebc:	10c02017 	ldw	r3,128(r2)
  808ec0:	a8c01126 	beq	r21,r3,808f08 <__call_exitprocs+0xe4>
  808ec4:	843fffc4 	addi	r16,r16,-1
  808ec8:	85bff81e 	bne	r16,r22,808eac <__call_exitprocs+0x88>
  808ecc:	d8800217 	ldw	r2,8(sp)
  808ed0:	10003126 	beq	r2,zero,808f98 <__call_exitprocs+0x174>
  808ed4:	dfc00c17 	ldw	ra,48(sp)
  808ed8:	df000b17 	ldw	fp,44(sp)
  808edc:	ddc00a17 	ldw	r23,40(sp)
  808ee0:	dd800917 	ldw	r22,36(sp)
  808ee4:	dd400817 	ldw	r21,32(sp)
  808ee8:	dd000717 	ldw	r20,28(sp)
  808eec:	dcc00617 	ldw	r19,24(sp)
  808ef0:	dc800517 	ldw	r18,20(sp)
  808ef4:	dc400417 	ldw	r17,16(sp)
  808ef8:	dc000317 	ldw	r16,12(sp)
  808efc:	dec00d04 	addi	sp,sp,52
  808f00:	f800283a 	ret
  808f04:	8409883a 	add	r4,r16,r16
  808f08:	88c00117 	ldw	r3,4(r17)
  808f0c:	2105883a 	add	r2,r4,r4
  808f10:	1445883a 	add	r2,r2,r17
  808f14:	18ffffc4 	addi	r3,r3,-1
  808f18:	11800217 	ldw	r6,8(r2)
  808f1c:	1c001526 	beq	r3,r16,808f74 <__call_exitprocs+0x150>
  808f20:	10000215 	stw	zero,8(r2)
  808f24:	303fe726 	beq	r6,zero,808ec4 <__call_exitprocs+0xa0>
  808f28:	00c00044 	movi	r3,1
  808f2c:	1c06983a 	sll	r3,r3,r16
  808f30:	90804017 	ldw	r2,256(r18)
  808f34:	8cc00117 	ldw	r19,4(r17)
  808f38:	1884703a 	and	r2,r3,r2
  808f3c:	10001426 	beq	r2,zero,808f90 <__call_exitprocs+0x16c>
  808f40:	90804117 	ldw	r2,260(r18)
  808f44:	1884703a 	and	r2,r3,r2
  808f48:	10000c1e 	bne	r2,zero,808f7c <__call_exitprocs+0x158>
  808f4c:	2105883a 	add	r2,r4,r4
  808f50:	1485883a 	add	r2,r2,r18
  808f54:	11400017 	ldw	r5,0(r2)
  808f58:	e009883a 	mov	r4,fp
  808f5c:	303ee83a 	callr	r6
  808f60:	88800117 	ldw	r2,4(r17)
  808f64:	98bfc81e 	bne	r19,r2,808e88 <__call_exitprocs+0x64>
  808f68:	b8800017 	ldw	r2,0(r23)
  808f6c:	147fd526 	beq	r2,r17,808ec4 <__call_exitprocs+0xa0>
  808f70:	003fc506 	br	808e88 <__call_exitprocs+0x64>
  808f74:	8c000115 	stw	r16,4(r17)
  808f78:	003fea06 	br	808f24 <__call_exitprocs+0x100>
  808f7c:	2105883a 	add	r2,r4,r4
  808f80:	1485883a 	add	r2,r2,r18
  808f84:	11000017 	ldw	r4,0(r2)
  808f88:	303ee83a 	callr	r6
  808f8c:	003ff406 	br	808f60 <__call_exitprocs+0x13c>
  808f90:	303ee83a 	callr	r6
  808f94:	003ff206 	br	808f60 <__call_exitprocs+0x13c>
  808f98:	88800117 	ldw	r2,4(r17)
  808f9c:	1000081e 	bne	r2,zero,808fc0 <__call_exitprocs+0x19c>
  808fa0:	89000017 	ldw	r4,0(r17)
  808fa4:	20000726 	beq	r4,zero,808fc4 <__call_exitprocs+0x1a0>
  808fa8:	b9000015 	stw	r4,0(r23)
  808fac:	8809883a 	mov	r4,r17
  808fb0:	08020b40 	call	8020b4 <free>
  808fb4:	bc400017 	ldw	r17,0(r23)
  808fb8:	883fb71e 	bne	r17,zero,808e98 <__call_exitprocs+0x74>
  808fbc:	003fc506 	br	808ed4 <__call_exitprocs+0xb0>
  808fc0:	89000017 	ldw	r4,0(r17)
  808fc4:	882f883a 	mov	r23,r17
  808fc8:	2023883a 	mov	r17,r4
  808fcc:	883fb21e 	bne	r17,zero,808e98 <__call_exitprocs+0x74>
  808fd0:	003fc006 	br	808ed4 <__call_exitprocs+0xb0>

00808fd4 <_fflush_r>:
  808fd4:	defffb04 	addi	sp,sp,-20
  808fd8:	dcc00315 	stw	r19,12(sp)
  808fdc:	dc800215 	stw	r18,8(sp)
  808fe0:	dfc00415 	stw	ra,16(sp)
  808fe4:	dc400115 	stw	r17,4(sp)
  808fe8:	dc000015 	stw	r16,0(sp)
  808fec:	2027883a 	mov	r19,r4
  808ff0:	2825883a 	mov	r18,r5
  808ff4:	20000226 	beq	r4,zero,809000 <_fflush_r+0x2c>
  808ff8:	20800e17 	ldw	r2,56(r4)
  808ffc:	10005626 	beq	r2,zero,809158 <_fflush_r+0x184>
  809000:	9100030b 	ldhu	r4,12(r18)
  809004:	20ffffcc 	andi	r3,r4,65535
  809008:	18e0001c 	xori	r3,r3,32768
  80900c:	18e00004 	addi	r3,r3,-32768
  809010:	1880020c 	andi	r2,r3,8
  809014:	1000261e 	bne	r2,zero,8090b0 <_fflush_r+0xdc>
  809018:	90c00117 	ldw	r3,4(r18)
  80901c:	20820014 	ori	r2,r4,2048
  809020:	9080030d 	sth	r2,12(r18)
  809024:	1009883a 	mov	r4,r2
  809028:	00c0400e 	bge	zero,r3,80912c <_fflush_r+0x158>
  80902c:	92000a17 	ldw	r8,40(r18)
  809030:	40004026 	beq	r8,zero,809134 <_fflush_r+0x160>
  809034:	2084000c 	andi	r2,r4,4096
  809038:	10005326 	beq	r2,zero,809188 <_fflush_r+0x1b4>
  80903c:	94001417 	ldw	r16,80(r18)
  809040:	9080030b 	ldhu	r2,12(r18)
  809044:	1080010c 	andi	r2,r2,4
  809048:	1000481e 	bne	r2,zero,80916c <_fflush_r+0x198>
  80904c:	91400717 	ldw	r5,28(r18)
  809050:	9809883a 	mov	r4,r19
  809054:	800d883a 	mov	r6,r16
  809058:	000f883a 	mov	r7,zero
  80905c:	403ee83a 	callr	r8
  809060:	8080261e 	bne	r16,r2,8090fc <_fflush_r+0x128>
  809064:	9080030b 	ldhu	r2,12(r18)
  809068:	91000417 	ldw	r4,16(r18)
  80906c:	90000115 	stw	zero,4(r18)
  809070:	10bdffcc 	andi	r2,r2,63487
  809074:	10ffffcc 	andi	r3,r2,65535
  809078:	18c4000c 	andi	r3,r3,4096
  80907c:	9080030d 	sth	r2,12(r18)
  809080:	91000015 	stw	r4,0(r18)
  809084:	18002b26 	beq	r3,zero,809134 <_fflush_r+0x160>
  809088:	0007883a 	mov	r3,zero
  80908c:	1805883a 	mov	r2,r3
  809090:	94001415 	stw	r16,80(r18)
  809094:	dfc00417 	ldw	ra,16(sp)
  809098:	dcc00317 	ldw	r19,12(sp)
  80909c:	dc800217 	ldw	r18,8(sp)
  8090a0:	dc400117 	ldw	r17,4(sp)
  8090a4:	dc000017 	ldw	r16,0(sp)
  8090a8:	dec00504 	addi	sp,sp,20
  8090ac:	f800283a 	ret
  8090b0:	94400417 	ldw	r17,16(r18)
  8090b4:	88001f26 	beq	r17,zero,809134 <_fflush_r+0x160>
  8090b8:	90800017 	ldw	r2,0(r18)
  8090bc:	18c000cc 	andi	r3,r3,3
  8090c0:	94400015 	stw	r17,0(r18)
  8090c4:	1461c83a 	sub	r16,r2,r17
  8090c8:	18002526 	beq	r3,zero,809160 <_fflush_r+0x18c>
  8090cc:	0005883a 	mov	r2,zero
  8090d0:	90800215 	stw	r2,8(r18)
  8090d4:	0400170e 	bge	zero,r16,809134 <_fflush_r+0x160>
  8090d8:	90c00917 	ldw	r3,36(r18)
  8090dc:	91400717 	ldw	r5,28(r18)
  8090e0:	880d883a 	mov	r6,r17
  8090e4:	800f883a 	mov	r7,r16
  8090e8:	9809883a 	mov	r4,r19
  8090ec:	183ee83a 	callr	r3
  8090f0:	88a3883a 	add	r17,r17,r2
  8090f4:	80a1c83a 	sub	r16,r16,r2
  8090f8:	00bff616 	blt	zero,r2,8090d4 <_fflush_r+0x100>
  8090fc:	9080030b 	ldhu	r2,12(r18)
  809100:	00ffffc4 	movi	r3,-1
  809104:	10801014 	ori	r2,r2,64
  809108:	9080030d 	sth	r2,12(r18)
  80910c:	1805883a 	mov	r2,r3
  809110:	dfc00417 	ldw	ra,16(sp)
  809114:	dcc00317 	ldw	r19,12(sp)
  809118:	dc800217 	ldw	r18,8(sp)
  80911c:	dc400117 	ldw	r17,4(sp)
  809120:	dc000017 	ldw	r16,0(sp)
  809124:	dec00504 	addi	sp,sp,20
  809128:	f800283a 	ret
  80912c:	90800f17 	ldw	r2,60(r18)
  809130:	00bfbe16 	blt	zero,r2,80902c <_fflush_r+0x58>
  809134:	0007883a 	mov	r3,zero
  809138:	1805883a 	mov	r2,r3
  80913c:	dfc00417 	ldw	ra,16(sp)
  809140:	dcc00317 	ldw	r19,12(sp)
  809144:	dc800217 	ldw	r18,8(sp)
  809148:	dc400117 	ldw	r17,4(sp)
  80914c:	dc000017 	ldw	r16,0(sp)
  809150:	dec00504 	addi	sp,sp,20
  809154:	f800283a 	ret
  809158:	080926c0 	call	80926c <__sinit>
  80915c:	003fa806 	br	809000 <_fflush_r+0x2c>
  809160:	90800517 	ldw	r2,20(r18)
  809164:	90800215 	stw	r2,8(r18)
  809168:	003fda06 	br	8090d4 <_fflush_r+0x100>
  80916c:	90800117 	ldw	r2,4(r18)
  809170:	90c00c17 	ldw	r3,48(r18)
  809174:	80a1c83a 	sub	r16,r16,r2
  809178:	183fb426 	beq	r3,zero,80904c <_fflush_r+0x78>
  80917c:	90800f17 	ldw	r2,60(r18)
  809180:	80a1c83a 	sub	r16,r16,r2
  809184:	003fb106 	br	80904c <_fflush_r+0x78>
  809188:	91400717 	ldw	r5,28(r18)
  80918c:	9809883a 	mov	r4,r19
  809190:	000d883a 	mov	r6,zero
  809194:	01c00044 	movi	r7,1
  809198:	403ee83a 	callr	r8
  80919c:	1021883a 	mov	r16,r2
  8091a0:	00bfffc4 	movi	r2,-1
  8091a4:	80800226 	beq	r16,r2,8091b0 <_fflush_r+0x1dc>
  8091a8:	92000a17 	ldw	r8,40(r18)
  8091ac:	003fa406 	br	809040 <_fflush_r+0x6c>
  8091b0:	98c00017 	ldw	r3,0(r19)
  8091b4:	00800744 	movi	r2,29
  8091b8:	18bfde26 	beq	r3,r2,809134 <_fflush_r+0x160>
  8091bc:	9080030b 	ldhu	r2,12(r18)
  8091c0:	8007883a 	mov	r3,r16
  8091c4:	10801014 	ori	r2,r2,64
  8091c8:	9080030d 	sth	r2,12(r18)
  8091cc:	003fcf06 	br	80910c <_fflush_r+0x138>

008091d0 <fflush>:
  8091d0:	01402074 	movhi	r5,129
  8091d4:	2963f504 	addi	r5,r5,-28716
  8091d8:	2007883a 	mov	r3,r4
  8091dc:	20000526 	beq	r4,zero,8091f4 <fflush+0x24>
  8091e0:	00802074 	movhi	r2,129
  8091e4:	10af7404 	addi	r2,r2,-16944
  8091e8:	11000017 	ldw	r4,0(r2)
  8091ec:	180b883a 	mov	r5,r3
  8091f0:	0808fd41 	jmpi	808fd4 <_fflush_r>
  8091f4:	00802074 	movhi	r2,129
  8091f8:	10af7504 	addi	r2,r2,-16940
  8091fc:	11000017 	ldw	r4,0(r2)
  809200:	08094c41 	jmpi	8094c4 <_fwalk_reent>

00809204 <std>:
  809204:	00802074 	movhi	r2,129
  809208:	10a5f604 	addi	r2,r2,-26664
  80920c:	20800b15 	stw	r2,44(r4)
  809210:	00802074 	movhi	r2,129
  809214:	10a63104 	addi	r2,r2,-26428
  809218:	20800815 	stw	r2,32(r4)
  80921c:	00c02074 	movhi	r3,129
  809220:	18e61204 	addi	r3,r3,-26552
  809224:	00802074 	movhi	r2,129
  809228:	10a5f804 	addi	r2,r2,-26656
  80922c:	2140030d 	sth	r5,12(r4)
  809230:	2180038d 	sth	r6,14(r4)
  809234:	20c00915 	stw	r3,36(r4)
  809238:	20800a15 	stw	r2,40(r4)
  80923c:	20000015 	stw	zero,0(r4)
  809240:	20000115 	stw	zero,4(r4)
  809244:	20000215 	stw	zero,8(r4)
  809248:	20000415 	stw	zero,16(r4)
  80924c:	20000515 	stw	zero,20(r4)
  809250:	20000615 	stw	zero,24(r4)
  809254:	21000715 	stw	r4,28(r4)
  809258:	f800283a 	ret

0080925c <__sfp_lock_acquire>:
  80925c:	f800283a 	ret

00809260 <__sfp_lock_release>:
  809260:	f800283a 	ret

00809264 <__sinit_lock_acquire>:
  809264:	f800283a 	ret

00809268 <__sinit_lock_release>:
  809268:	f800283a 	ret

0080926c <__sinit>:
  80926c:	20800e17 	ldw	r2,56(r4)
  809270:	defffd04 	addi	sp,sp,-12
  809274:	dc400115 	stw	r17,4(sp)
  809278:	dc000015 	stw	r16,0(sp)
  80927c:	dfc00215 	stw	ra,8(sp)
  809280:	04400044 	movi	r17,1
  809284:	01400104 	movi	r5,4
  809288:	000d883a 	mov	r6,zero
  80928c:	2021883a 	mov	r16,r4
  809290:	2200bb04 	addi	r8,r4,748
  809294:	200f883a 	mov	r7,r4
  809298:	10000526 	beq	r2,zero,8092b0 <__sinit+0x44>
  80929c:	dfc00217 	ldw	ra,8(sp)
  8092a0:	dc400117 	ldw	r17,4(sp)
  8092a4:	dc000017 	ldw	r16,0(sp)
  8092a8:	dec00304 	addi	sp,sp,12
  8092ac:	f800283a 	ret
  8092b0:	21000117 	ldw	r4,4(r4)
  8092b4:	00802074 	movhi	r2,129
  8092b8:	10a4d404 	addi	r2,r2,-27824
  8092bc:	00c000c4 	movi	r3,3
  8092c0:	80800f15 	stw	r2,60(r16)
  8092c4:	80c0b915 	stw	r3,740(r16)
  8092c8:	8200ba15 	stw	r8,744(r16)
  8092cc:	84400e15 	stw	r17,56(r16)
  8092d0:	8000b815 	stw	zero,736(r16)
  8092d4:	08092040 	call	809204 <std>
  8092d8:	81000217 	ldw	r4,8(r16)
  8092dc:	880d883a 	mov	r6,r17
  8092e0:	800f883a 	mov	r7,r16
  8092e4:	01400284 	movi	r5,10
  8092e8:	08092040 	call	809204 <std>
  8092ec:	81000317 	ldw	r4,12(r16)
  8092f0:	800f883a 	mov	r7,r16
  8092f4:	01400484 	movi	r5,18
  8092f8:	01800084 	movi	r6,2
  8092fc:	dfc00217 	ldw	ra,8(sp)
  809300:	dc400117 	ldw	r17,4(sp)
  809304:	dc000017 	ldw	r16,0(sp)
  809308:	dec00304 	addi	sp,sp,12
  80930c:	08092041 	jmpi	809204 <std>

00809310 <__fp_lock>:
  809310:	0005883a 	mov	r2,zero
  809314:	f800283a 	ret

00809318 <__fp_unlock>:
  809318:	0005883a 	mov	r2,zero
  80931c:	f800283a 	ret

00809320 <__fp_unlock_all>:
  809320:	00802074 	movhi	r2,129
  809324:	10af7404 	addi	r2,r2,-16944
  809328:	11000017 	ldw	r4,0(r2)
  80932c:	01402074 	movhi	r5,129
  809330:	2964c604 	addi	r5,r5,-27880
  809334:	080958c1 	jmpi	80958c <_fwalk>

00809338 <__fp_lock_all>:
  809338:	00802074 	movhi	r2,129
  80933c:	10af7404 	addi	r2,r2,-16944
  809340:	11000017 	ldw	r4,0(r2)
  809344:	01402074 	movhi	r5,129
  809348:	2964c404 	addi	r5,r5,-27888
  80934c:	080958c1 	jmpi	80958c <_fwalk>

00809350 <_cleanup_r>:
  809350:	01402074 	movhi	r5,129
  809354:	2966c704 	addi	r5,r5,-25828
  809358:	080958c1 	jmpi	80958c <_fwalk>

0080935c <_cleanup>:
  80935c:	00802074 	movhi	r2,129
  809360:	10af7504 	addi	r2,r2,-16940
  809364:	11000017 	ldw	r4,0(r2)
  809368:	08093501 	jmpi	809350 <_cleanup_r>

0080936c <__sfmoreglue>:
  80936c:	defffc04 	addi	sp,sp,-16
  809370:	dc400115 	stw	r17,4(sp)
  809374:	2c401724 	muli	r17,r5,92
  809378:	dc800215 	stw	r18,8(sp)
  80937c:	2825883a 	mov	r18,r5
  809380:	89400304 	addi	r5,r17,12
  809384:	dc000015 	stw	r16,0(sp)
  809388:	dfc00315 	stw	ra,12(sp)
  80938c:	08020dc0 	call	8020dc <_malloc_r>
  809390:	0021883a 	mov	r16,zero
  809394:	880d883a 	mov	r6,r17
  809398:	000b883a 	mov	r5,zero
  80939c:	10000626 	beq	r2,zero,8093b8 <__sfmoreglue+0x4c>
  8093a0:	11000304 	addi	r4,r2,12
  8093a4:	14800115 	stw	r18,4(r2)
  8093a8:	10000015 	stw	zero,0(r2)
  8093ac:	11000215 	stw	r4,8(r2)
  8093b0:	1021883a 	mov	r16,r2
  8093b4:	080688c0 	call	80688c <memset>
  8093b8:	8005883a 	mov	r2,r16
  8093bc:	dfc00317 	ldw	ra,12(sp)
  8093c0:	dc800217 	ldw	r18,8(sp)
  8093c4:	dc400117 	ldw	r17,4(sp)
  8093c8:	dc000017 	ldw	r16,0(sp)
  8093cc:	dec00404 	addi	sp,sp,16
  8093d0:	f800283a 	ret

008093d4 <__sfp>:
  8093d4:	defffd04 	addi	sp,sp,-12
  8093d8:	00802074 	movhi	r2,129
  8093dc:	10af7504 	addi	r2,r2,-16940
  8093e0:	dc000015 	stw	r16,0(sp)
  8093e4:	14000017 	ldw	r16,0(r2)
  8093e8:	dc400115 	stw	r17,4(sp)
  8093ec:	dfc00215 	stw	ra,8(sp)
  8093f0:	80800e17 	ldw	r2,56(r16)
  8093f4:	2023883a 	mov	r17,r4
  8093f8:	10002626 	beq	r2,zero,809494 <__sfp+0xc0>
  8093fc:	8400b804 	addi	r16,r16,736
  809400:	80800117 	ldw	r2,4(r16)
  809404:	81000217 	ldw	r4,8(r16)
  809408:	10ffffc4 	addi	r3,r2,-1
  80940c:	18000916 	blt	r3,zero,809434 <__sfp+0x60>
  809410:	2080030f 	ldh	r2,12(r4)
  809414:	10000b26 	beq	r2,zero,809444 <__sfp+0x70>
  809418:	017fffc4 	movi	r5,-1
  80941c:	00000206 	br	809428 <__sfp+0x54>
  809420:	2080030f 	ldh	r2,12(r4)
  809424:	10000726 	beq	r2,zero,809444 <__sfp+0x70>
  809428:	18ffffc4 	addi	r3,r3,-1
  80942c:	21001704 	addi	r4,r4,92
  809430:	197ffb1e 	bne	r3,r5,809420 <__sfp+0x4c>
  809434:	80800017 	ldw	r2,0(r16)
  809438:	10001926 	beq	r2,zero,8094a0 <__sfp+0xcc>
  80943c:	1021883a 	mov	r16,r2
  809440:	003fef06 	br	809400 <__sfp+0x2c>
  809444:	00bfffc4 	movi	r2,-1
  809448:	00c00044 	movi	r3,1
  80944c:	2080038d 	sth	r2,14(r4)
  809450:	20c0030d 	sth	r3,12(r4)
  809454:	20000015 	stw	zero,0(r4)
  809458:	20000215 	stw	zero,8(r4)
  80945c:	20000115 	stw	zero,4(r4)
  809460:	20000415 	stw	zero,16(r4)
  809464:	20000515 	stw	zero,20(r4)
  809468:	20000615 	stw	zero,24(r4)
  80946c:	20000c15 	stw	zero,48(r4)
  809470:	20000d15 	stw	zero,52(r4)
  809474:	20001115 	stw	zero,68(r4)
  809478:	20001215 	stw	zero,72(r4)
  80947c:	2005883a 	mov	r2,r4
  809480:	dfc00217 	ldw	ra,8(sp)
  809484:	dc400117 	ldw	r17,4(sp)
  809488:	dc000017 	ldw	r16,0(sp)
  80948c:	dec00304 	addi	sp,sp,12
  809490:	f800283a 	ret
  809494:	8009883a 	mov	r4,r16
  809498:	080926c0 	call	80926c <__sinit>
  80949c:	003fd706 	br	8093fc <__sfp+0x28>
  8094a0:	8809883a 	mov	r4,r17
  8094a4:	01400104 	movi	r5,4
  8094a8:	080936c0 	call	80936c <__sfmoreglue>
  8094ac:	80800015 	stw	r2,0(r16)
  8094b0:	103fe21e 	bne	r2,zero,80943c <__sfp+0x68>
  8094b4:	00800304 	movi	r2,12
  8094b8:	0009883a 	mov	r4,zero
  8094bc:	88800015 	stw	r2,0(r17)
  8094c0:	003fee06 	br	80947c <__sfp+0xa8>

008094c4 <_fwalk_reent>:
  8094c4:	defff704 	addi	sp,sp,-36
  8094c8:	dcc00315 	stw	r19,12(sp)
  8094cc:	24c0b804 	addi	r19,r4,736
  8094d0:	dd800615 	stw	r22,24(sp)
  8094d4:	dd400515 	stw	r21,20(sp)
  8094d8:	dfc00815 	stw	ra,32(sp)
  8094dc:	ddc00715 	stw	r23,28(sp)
  8094e0:	dd000415 	stw	r20,16(sp)
  8094e4:	dc800215 	stw	r18,8(sp)
  8094e8:	dc400115 	stw	r17,4(sp)
  8094ec:	dc000015 	stw	r16,0(sp)
  8094f0:	202b883a 	mov	r21,r4
  8094f4:	282d883a 	mov	r22,r5
  8094f8:	080925c0 	call	80925c <__sfp_lock_acquire>
  8094fc:	98002126 	beq	r19,zero,809584 <_fwalk_reent+0xc0>
  809500:	002f883a 	mov	r23,zero
  809504:	9c800117 	ldw	r18,4(r19)
  809508:	9c000217 	ldw	r16,8(r19)
  80950c:	90bfffc4 	addi	r2,r18,-1
  809510:	10000d16 	blt	r2,zero,809548 <_fwalk_reent+0x84>
  809514:	0023883a 	mov	r17,zero
  809518:	053fffc4 	movi	r20,-1
  80951c:	8080030f 	ldh	r2,12(r16)
  809520:	8c400044 	addi	r17,r17,1
  809524:	10000626 	beq	r2,zero,809540 <_fwalk_reent+0x7c>
  809528:	8080038f 	ldh	r2,14(r16)
  80952c:	800b883a 	mov	r5,r16
  809530:	a809883a 	mov	r4,r21
  809534:	15000226 	beq	r2,r20,809540 <_fwalk_reent+0x7c>
  809538:	b03ee83a 	callr	r22
  80953c:	b8aeb03a 	or	r23,r23,r2
  809540:	84001704 	addi	r16,r16,92
  809544:	947ff51e 	bne	r18,r17,80951c <_fwalk_reent+0x58>
  809548:	9cc00017 	ldw	r19,0(r19)
  80954c:	983fed1e 	bne	r19,zero,809504 <_fwalk_reent+0x40>
  809550:	08092600 	call	809260 <__sfp_lock_release>
  809554:	b805883a 	mov	r2,r23
  809558:	dfc00817 	ldw	ra,32(sp)
  80955c:	ddc00717 	ldw	r23,28(sp)
  809560:	dd800617 	ldw	r22,24(sp)
  809564:	dd400517 	ldw	r21,20(sp)
  809568:	dd000417 	ldw	r20,16(sp)
  80956c:	dcc00317 	ldw	r19,12(sp)
  809570:	dc800217 	ldw	r18,8(sp)
  809574:	dc400117 	ldw	r17,4(sp)
  809578:	dc000017 	ldw	r16,0(sp)
  80957c:	dec00904 	addi	sp,sp,36
  809580:	f800283a 	ret
  809584:	002f883a 	mov	r23,zero
  809588:	003ff106 	br	809550 <_fwalk_reent+0x8c>

0080958c <_fwalk>:
  80958c:	defff804 	addi	sp,sp,-32
  809590:	dcc00315 	stw	r19,12(sp)
  809594:	24c0b804 	addi	r19,r4,736
  809598:	dd400515 	stw	r21,20(sp)
  80959c:	dfc00715 	stw	ra,28(sp)
  8095a0:	dd800615 	stw	r22,24(sp)
  8095a4:	dd000415 	stw	r20,16(sp)
  8095a8:	dc800215 	stw	r18,8(sp)
  8095ac:	dc400115 	stw	r17,4(sp)
  8095b0:	dc000015 	stw	r16,0(sp)
  8095b4:	282b883a 	mov	r21,r5
  8095b8:	080925c0 	call	80925c <__sfp_lock_acquire>
  8095bc:	98001f26 	beq	r19,zero,80963c <_fwalk+0xb0>
  8095c0:	002d883a 	mov	r22,zero
  8095c4:	9c800117 	ldw	r18,4(r19)
  8095c8:	9c000217 	ldw	r16,8(r19)
  8095cc:	90bfffc4 	addi	r2,r18,-1
  8095d0:	10000c16 	blt	r2,zero,809604 <_fwalk+0x78>
  8095d4:	0023883a 	mov	r17,zero
  8095d8:	053fffc4 	movi	r20,-1
  8095dc:	8080030f 	ldh	r2,12(r16)
  8095e0:	8c400044 	addi	r17,r17,1
  8095e4:	10000526 	beq	r2,zero,8095fc <_fwalk+0x70>
  8095e8:	8080038f 	ldh	r2,14(r16)
  8095ec:	8009883a 	mov	r4,r16
  8095f0:	15000226 	beq	r2,r20,8095fc <_fwalk+0x70>
  8095f4:	a83ee83a 	callr	r21
  8095f8:	b0acb03a 	or	r22,r22,r2
  8095fc:	84001704 	addi	r16,r16,92
  809600:	947ff61e 	bne	r18,r17,8095dc <_fwalk+0x50>
  809604:	9cc00017 	ldw	r19,0(r19)
  809608:	983fee1e 	bne	r19,zero,8095c4 <_fwalk+0x38>
  80960c:	08092600 	call	809260 <__sfp_lock_release>
  809610:	b005883a 	mov	r2,r22
  809614:	dfc00717 	ldw	ra,28(sp)
  809618:	dd800617 	ldw	r22,24(sp)
  80961c:	dd400517 	ldw	r21,20(sp)
  809620:	dd000417 	ldw	r20,16(sp)
  809624:	dcc00317 	ldw	r19,12(sp)
  809628:	dc800217 	ldw	r18,8(sp)
  80962c:	dc400117 	ldw	r17,4(sp)
  809630:	dc000017 	ldw	r16,0(sp)
  809634:	dec00804 	addi	sp,sp,32
  809638:	f800283a 	ret
  80963c:	002d883a 	mov	r22,zero
  809640:	003ff206 	br	80960c <_fwalk+0x80>

00809644 <__smakebuf_r>:
  809644:	2880030b 	ldhu	r2,12(r5)
  809648:	deffed04 	addi	sp,sp,-76
  80964c:	dc401015 	stw	r17,64(sp)
  809650:	1080008c 	andi	r2,r2,2
  809654:	dc000f15 	stw	r16,60(sp)
  809658:	dfc01215 	stw	ra,72(sp)
  80965c:	dc801115 	stw	r18,68(sp)
  809660:	2821883a 	mov	r16,r5
  809664:	2023883a 	mov	r17,r4
  809668:	10000b26 	beq	r2,zero,809698 <__smakebuf_r+0x54>
  80966c:	28c010c4 	addi	r3,r5,67
  809670:	00800044 	movi	r2,1
  809674:	28800515 	stw	r2,20(r5)
  809678:	28c00415 	stw	r3,16(r5)
  80967c:	28c00015 	stw	r3,0(r5)
  809680:	dfc01217 	ldw	ra,72(sp)
  809684:	dc801117 	ldw	r18,68(sp)
  809688:	dc401017 	ldw	r17,64(sp)
  80968c:	dc000f17 	ldw	r16,60(sp)
  809690:	dec01304 	addi	sp,sp,76
  809694:	f800283a 	ret
  809698:	2940038f 	ldh	r5,14(r5)
  80969c:	28002116 	blt	r5,zero,809724 <__smakebuf_r+0xe0>
  8096a0:	d80d883a 	mov	r6,sp
  8096a4:	0809b300 	call	809b30 <_fstat_r>
  8096a8:	10001e16 	blt	r2,zero,809724 <__smakebuf_r+0xe0>
  8096ac:	d8800117 	ldw	r2,4(sp)
  8096b0:	00e00014 	movui	r3,32768
  8096b4:	113c000c 	andi	r4,r2,61440
  8096b8:	20c03126 	beq	r4,r3,809780 <__smakebuf_r+0x13c>
  8096bc:	8080030b 	ldhu	r2,12(r16)
  8096c0:	00c80004 	movi	r3,8192
  8096c4:	10820014 	ori	r2,r2,2048
  8096c8:	8080030d 	sth	r2,12(r16)
  8096cc:	20c01e26 	beq	r4,r3,809748 <__smakebuf_r+0x104>
  8096d0:	04810004 	movi	r18,1024
  8096d4:	8809883a 	mov	r4,r17
  8096d8:	900b883a 	mov	r5,r18
  8096dc:	08020dc0 	call	8020dc <_malloc_r>
  8096e0:	1009883a 	mov	r4,r2
  8096e4:	10003126 	beq	r2,zero,8097ac <__smakebuf_r+0x168>
  8096e8:	80c0030b 	ldhu	r3,12(r16)
  8096ec:	00802074 	movhi	r2,129
  8096f0:	10a4d404 	addi	r2,r2,-27824
  8096f4:	88800f15 	stw	r2,60(r17)
  8096f8:	18c02014 	ori	r3,r3,128
  8096fc:	84800515 	stw	r18,20(r16)
  809700:	80c0030d 	sth	r3,12(r16)
  809704:	81000415 	stw	r4,16(r16)
  809708:	81000015 	stw	r4,0(r16)
  80970c:	dfc01217 	ldw	ra,72(sp)
  809710:	dc801117 	ldw	r18,68(sp)
  809714:	dc401017 	ldw	r17,64(sp)
  809718:	dc000f17 	ldw	r16,60(sp)
  80971c:	dec01304 	addi	sp,sp,76
  809720:	f800283a 	ret
  809724:	80c0030b 	ldhu	r3,12(r16)
  809728:	1880200c 	andi	r2,r3,128
  80972c:	10000426 	beq	r2,zero,809740 <__smakebuf_r+0xfc>
  809730:	04801004 	movi	r18,64
  809734:	18820014 	ori	r2,r3,2048
  809738:	8080030d 	sth	r2,12(r16)
  80973c:	003fe506 	br	8096d4 <__smakebuf_r+0x90>
  809740:	04810004 	movi	r18,1024
  809744:	003ffb06 	br	809734 <__smakebuf_r+0xf0>
  809748:	8140038f 	ldh	r5,14(r16)
  80974c:	8809883a 	mov	r4,r17
  809750:	0809ba40 	call	809ba4 <_isatty_r>
  809754:	103fde26 	beq	r2,zero,8096d0 <__smakebuf_r+0x8c>
  809758:	8080030b 	ldhu	r2,12(r16)
  80975c:	80c010c4 	addi	r3,r16,67
  809760:	04810004 	movi	r18,1024
  809764:	10800054 	ori	r2,r2,1
  809768:	8080030d 	sth	r2,12(r16)
  80976c:	00800044 	movi	r2,1
  809770:	80c00415 	stw	r3,16(r16)
  809774:	80800515 	stw	r2,20(r16)
  809778:	80c00015 	stw	r3,0(r16)
  80977c:	003fd506 	br	8096d4 <__smakebuf_r+0x90>
  809780:	80c00a17 	ldw	r3,40(r16)
  809784:	00802074 	movhi	r2,129
  809788:	10a5f804 	addi	r2,r2,-26656
  80978c:	18bfcb1e 	bne	r3,r2,8096bc <__smakebuf_r+0x78>
  809790:	8080030b 	ldhu	r2,12(r16)
  809794:	00c10004 	movi	r3,1024
  809798:	1825883a 	mov	r18,r3
  80979c:	10c4b03a 	or	r2,r2,r3
  8097a0:	8080030d 	sth	r2,12(r16)
  8097a4:	80c01315 	stw	r3,76(r16)
  8097a8:	003fca06 	br	8096d4 <__smakebuf_r+0x90>
  8097ac:	8100030b 	ldhu	r4,12(r16)
  8097b0:	2080800c 	andi	r2,r4,512
  8097b4:	103fb21e 	bne	r2,zero,809680 <__smakebuf_r+0x3c>
  8097b8:	80c010c4 	addi	r3,r16,67
  8097bc:	21000094 	ori	r4,r4,2
  8097c0:	00800044 	movi	r2,1
  8097c4:	80800515 	stw	r2,20(r16)
  8097c8:	8100030d 	sth	r4,12(r16)
  8097cc:	80c00415 	stw	r3,16(r16)
  8097d0:	80c00015 	stw	r3,0(r16)
  8097d4:	003faa06 	br	809680 <__smakebuf_r+0x3c>

008097d8 <__sclose>:
  8097d8:	2940038f 	ldh	r5,14(r5)
  8097dc:	080999c1 	jmpi	80999c <_close_r>

008097e0 <__sseek>:
  8097e0:	defffe04 	addi	sp,sp,-8
  8097e4:	dc000015 	stw	r16,0(sp)
  8097e8:	2821883a 	mov	r16,r5
  8097ec:	2940038f 	ldh	r5,14(r5)
  8097f0:	dfc00115 	stw	ra,4(sp)
  8097f4:	0809c140 	call	809c14 <_lseek_r>
  8097f8:	1007883a 	mov	r3,r2
  8097fc:	00bfffc4 	movi	r2,-1
  809800:	18800926 	beq	r3,r2,809828 <__sseek+0x48>
  809804:	8080030b 	ldhu	r2,12(r16)
  809808:	80c01415 	stw	r3,80(r16)
  80980c:	10840014 	ori	r2,r2,4096
  809810:	8080030d 	sth	r2,12(r16)
  809814:	1805883a 	mov	r2,r3
  809818:	dfc00117 	ldw	ra,4(sp)
  80981c:	dc000017 	ldw	r16,0(sp)
  809820:	dec00204 	addi	sp,sp,8
  809824:	f800283a 	ret
  809828:	8080030b 	ldhu	r2,12(r16)
  80982c:	10bbffcc 	andi	r2,r2,61439
  809830:	8080030d 	sth	r2,12(r16)
  809834:	1805883a 	mov	r2,r3
  809838:	dfc00117 	ldw	ra,4(sp)
  80983c:	dc000017 	ldw	r16,0(sp)
  809840:	dec00204 	addi	sp,sp,8
  809844:	f800283a 	ret

00809848 <__swrite>:
  809848:	2880030b 	ldhu	r2,12(r5)
  80984c:	defffb04 	addi	sp,sp,-20
  809850:	dcc00315 	stw	r19,12(sp)
  809854:	1080400c 	andi	r2,r2,256
  809858:	dc800215 	stw	r18,8(sp)
  80985c:	dc400115 	stw	r17,4(sp)
  809860:	dc000015 	stw	r16,0(sp)
  809864:	3027883a 	mov	r19,r6
  809868:	3825883a 	mov	r18,r7
  80986c:	dfc00415 	stw	ra,16(sp)
  809870:	2821883a 	mov	r16,r5
  809874:	000d883a 	mov	r6,zero
  809878:	01c00084 	movi	r7,2
  80987c:	2023883a 	mov	r17,r4
  809880:	10000226 	beq	r2,zero,80988c <__swrite+0x44>
  809884:	2940038f 	ldh	r5,14(r5)
  809888:	0809c140 	call	809c14 <_lseek_r>
  80988c:	8080030b 	ldhu	r2,12(r16)
  809890:	8140038f 	ldh	r5,14(r16)
  809894:	8809883a 	mov	r4,r17
  809898:	10bbffcc 	andi	r2,r2,61439
  80989c:	980d883a 	mov	r6,r19
  8098a0:	900f883a 	mov	r7,r18
  8098a4:	8080030d 	sth	r2,12(r16)
  8098a8:	dfc00417 	ldw	ra,16(sp)
  8098ac:	dcc00317 	ldw	r19,12(sp)
  8098b0:	dc800217 	ldw	r18,8(sp)
  8098b4:	dc400117 	ldw	r17,4(sp)
  8098b8:	dc000017 	ldw	r16,0(sp)
  8098bc:	dec00504 	addi	sp,sp,20
  8098c0:	08099241 	jmpi	809924 <_write_r>

008098c4 <__sread>:
  8098c4:	defffe04 	addi	sp,sp,-8
  8098c8:	dc000015 	stw	r16,0(sp)
  8098cc:	2821883a 	mov	r16,r5
  8098d0:	2940038f 	ldh	r5,14(r5)
  8098d4:	dfc00115 	stw	ra,4(sp)
  8098d8:	0809c8c0 	call	809c8c <_read_r>
  8098dc:	1007883a 	mov	r3,r2
  8098e0:	10000816 	blt	r2,zero,809904 <__sread+0x40>
  8098e4:	80801417 	ldw	r2,80(r16)
  8098e8:	10c5883a 	add	r2,r2,r3
  8098ec:	80801415 	stw	r2,80(r16)
  8098f0:	1805883a 	mov	r2,r3
  8098f4:	dfc00117 	ldw	ra,4(sp)
  8098f8:	dc000017 	ldw	r16,0(sp)
  8098fc:	dec00204 	addi	sp,sp,8
  809900:	f800283a 	ret
  809904:	8080030b 	ldhu	r2,12(r16)
  809908:	10bbffcc 	andi	r2,r2,61439
  80990c:	8080030d 	sth	r2,12(r16)
  809910:	1805883a 	mov	r2,r3
  809914:	dfc00117 	ldw	ra,4(sp)
  809918:	dc000017 	ldw	r16,0(sp)
  80991c:	dec00204 	addi	sp,sp,8
  809920:	f800283a 	ret

00809924 <_write_r>:
  809924:	defffd04 	addi	sp,sp,-12
  809928:	dc000015 	stw	r16,0(sp)
  80992c:	04002074 	movhi	r16,129
  809930:	84361704 	addi	r16,r16,-10148
  809934:	dc400115 	stw	r17,4(sp)
  809938:	80000015 	stw	zero,0(r16)
  80993c:	2023883a 	mov	r17,r4
  809940:	2809883a 	mov	r4,r5
  809944:	300b883a 	mov	r5,r6
  809948:	380d883a 	mov	r6,r7
  80994c:	dfc00215 	stw	ra,8(sp)
  809950:	0809fe40 	call	809fe4 <write>
  809954:	1007883a 	mov	r3,r2
  809958:	00bfffc4 	movi	r2,-1
  80995c:	18800626 	beq	r3,r2,809978 <_write_r+0x54>
  809960:	1805883a 	mov	r2,r3
  809964:	dfc00217 	ldw	ra,8(sp)
  809968:	dc400117 	ldw	r17,4(sp)
  80996c:	dc000017 	ldw	r16,0(sp)
  809970:	dec00304 	addi	sp,sp,12
  809974:	f800283a 	ret
  809978:	80800017 	ldw	r2,0(r16)
  80997c:	103ff826 	beq	r2,zero,809960 <_write_r+0x3c>
  809980:	88800015 	stw	r2,0(r17)
  809984:	1805883a 	mov	r2,r3
  809988:	dfc00217 	ldw	ra,8(sp)
  80998c:	dc400117 	ldw	r17,4(sp)
  809990:	dc000017 	ldw	r16,0(sp)
  809994:	dec00304 	addi	sp,sp,12
  809998:	f800283a 	ret

0080999c <_close_r>:
  80999c:	defffd04 	addi	sp,sp,-12
  8099a0:	dc000015 	stw	r16,0(sp)
  8099a4:	04002074 	movhi	r16,129
  8099a8:	84361704 	addi	r16,r16,-10148
  8099ac:	dc400115 	stw	r17,4(sp)
  8099b0:	80000015 	stw	zero,0(r16)
  8099b4:	2023883a 	mov	r17,r4
  8099b8:	2809883a 	mov	r4,r5
  8099bc:	dfc00215 	stw	ra,8(sp)
  8099c0:	0807e800 	call	807e80 <close>
  8099c4:	1007883a 	mov	r3,r2
  8099c8:	00bfffc4 	movi	r2,-1
  8099cc:	18800626 	beq	r3,r2,8099e8 <_close_r+0x4c>
  8099d0:	1805883a 	mov	r2,r3
  8099d4:	dfc00217 	ldw	ra,8(sp)
  8099d8:	dc400117 	ldw	r17,4(sp)
  8099dc:	dc000017 	ldw	r16,0(sp)
  8099e0:	dec00304 	addi	sp,sp,12
  8099e4:	f800283a 	ret
  8099e8:	80800017 	ldw	r2,0(r16)
  8099ec:	103ff826 	beq	r2,zero,8099d0 <_close_r+0x34>
  8099f0:	88800015 	stw	r2,0(r17)
  8099f4:	1805883a 	mov	r2,r3
  8099f8:	dfc00217 	ldw	ra,8(sp)
  8099fc:	dc400117 	ldw	r17,4(sp)
  809a00:	dc000017 	ldw	r16,0(sp)
  809a04:	dec00304 	addi	sp,sp,12
  809a08:	f800283a 	ret

00809a0c <_fclose_r>:
  809a0c:	defffc04 	addi	sp,sp,-16
  809a10:	dc400115 	stw	r17,4(sp)
  809a14:	dc000015 	stw	r16,0(sp)
  809a18:	dfc00315 	stw	ra,12(sp)
  809a1c:	dc800215 	stw	r18,8(sp)
  809a20:	2821883a 	mov	r16,r5
  809a24:	2023883a 	mov	r17,r4
  809a28:	28002926 	beq	r5,zero,809ad0 <_fclose_r+0xc4>
  809a2c:	080925c0 	call	80925c <__sfp_lock_acquire>
  809a30:	88000226 	beq	r17,zero,809a3c <_fclose_r+0x30>
  809a34:	88800e17 	ldw	r2,56(r17)
  809a38:	10002d26 	beq	r2,zero,809af0 <_fclose_r+0xe4>
  809a3c:	8080030f 	ldh	r2,12(r16)
  809a40:	10002226 	beq	r2,zero,809acc <_fclose_r+0xc0>
  809a44:	8809883a 	mov	r4,r17
  809a48:	800b883a 	mov	r5,r16
  809a4c:	0808fd40 	call	808fd4 <_fflush_r>
  809a50:	1025883a 	mov	r18,r2
  809a54:	80800b17 	ldw	r2,44(r16)
  809a58:	10000426 	beq	r2,zero,809a6c <_fclose_r+0x60>
  809a5c:	81400717 	ldw	r5,28(r16)
  809a60:	8809883a 	mov	r4,r17
  809a64:	103ee83a 	callr	r2
  809a68:	10002a16 	blt	r2,zero,809b14 <_fclose_r+0x108>
  809a6c:	8080030b 	ldhu	r2,12(r16)
  809a70:	1080200c 	andi	r2,r2,128
  809a74:	1000231e 	bne	r2,zero,809b04 <_fclose_r+0xf8>
  809a78:	81400c17 	ldw	r5,48(r16)
  809a7c:	28000526 	beq	r5,zero,809a94 <_fclose_r+0x88>
  809a80:	80801004 	addi	r2,r16,64
  809a84:	28800226 	beq	r5,r2,809a90 <_fclose_r+0x84>
  809a88:	8809883a 	mov	r4,r17
  809a8c:	08035a40 	call	8035a4 <_free_r>
  809a90:	80000c15 	stw	zero,48(r16)
  809a94:	81401117 	ldw	r5,68(r16)
  809a98:	28000326 	beq	r5,zero,809aa8 <_fclose_r+0x9c>
  809a9c:	8809883a 	mov	r4,r17
  809aa0:	08035a40 	call	8035a4 <_free_r>
  809aa4:	80001115 	stw	zero,68(r16)
  809aa8:	8000030d 	sth	zero,12(r16)
  809aac:	08092600 	call	809260 <__sfp_lock_release>
  809ab0:	9005883a 	mov	r2,r18
  809ab4:	dfc00317 	ldw	ra,12(sp)
  809ab8:	dc800217 	ldw	r18,8(sp)
  809abc:	dc400117 	ldw	r17,4(sp)
  809ac0:	dc000017 	ldw	r16,0(sp)
  809ac4:	dec00404 	addi	sp,sp,16
  809ac8:	f800283a 	ret
  809acc:	08092600 	call	809260 <__sfp_lock_release>
  809ad0:	0025883a 	mov	r18,zero
  809ad4:	9005883a 	mov	r2,r18
  809ad8:	dfc00317 	ldw	ra,12(sp)
  809adc:	dc800217 	ldw	r18,8(sp)
  809ae0:	dc400117 	ldw	r17,4(sp)
  809ae4:	dc000017 	ldw	r16,0(sp)
  809ae8:	dec00404 	addi	sp,sp,16
  809aec:	f800283a 	ret
  809af0:	8809883a 	mov	r4,r17
  809af4:	080926c0 	call	80926c <__sinit>
  809af8:	8080030f 	ldh	r2,12(r16)
  809afc:	103fd11e 	bne	r2,zero,809a44 <_fclose_r+0x38>
  809b00:	003ff206 	br	809acc <_fclose_r+0xc0>
  809b04:	81400417 	ldw	r5,16(r16)
  809b08:	8809883a 	mov	r4,r17
  809b0c:	08035a40 	call	8035a4 <_free_r>
  809b10:	003fd906 	br	809a78 <_fclose_r+0x6c>
  809b14:	04bfffc4 	movi	r18,-1
  809b18:	003fd406 	br	809a6c <_fclose_r+0x60>

00809b1c <fclose>:
  809b1c:	00802074 	movhi	r2,129
  809b20:	10af7404 	addi	r2,r2,-16944
  809b24:	200b883a 	mov	r5,r4
  809b28:	11000017 	ldw	r4,0(r2)
  809b2c:	0809a0c1 	jmpi	809a0c <_fclose_r>

00809b30 <_fstat_r>:
  809b30:	defffd04 	addi	sp,sp,-12
  809b34:	dc000015 	stw	r16,0(sp)
  809b38:	04002074 	movhi	r16,129
  809b3c:	84361704 	addi	r16,r16,-10148
  809b40:	dc400115 	stw	r17,4(sp)
  809b44:	80000015 	stw	zero,0(r16)
  809b48:	2023883a 	mov	r17,r4
  809b4c:	2809883a 	mov	r4,r5
  809b50:	300b883a 	mov	r5,r6
  809b54:	dfc00215 	stw	ra,8(sp)
  809b58:	0809d180 	call	809d18 <fstat>
  809b5c:	1007883a 	mov	r3,r2
  809b60:	00bfffc4 	movi	r2,-1
  809b64:	18800626 	beq	r3,r2,809b80 <_fstat_r+0x50>
  809b68:	1805883a 	mov	r2,r3
  809b6c:	dfc00217 	ldw	ra,8(sp)
  809b70:	dc400117 	ldw	r17,4(sp)
  809b74:	dc000017 	ldw	r16,0(sp)
  809b78:	dec00304 	addi	sp,sp,12
  809b7c:	f800283a 	ret
  809b80:	80800017 	ldw	r2,0(r16)
  809b84:	103ff826 	beq	r2,zero,809b68 <_fstat_r+0x38>
  809b88:	88800015 	stw	r2,0(r17)
  809b8c:	1805883a 	mov	r2,r3
  809b90:	dfc00217 	ldw	ra,8(sp)
  809b94:	dc400117 	ldw	r17,4(sp)
  809b98:	dc000017 	ldw	r16,0(sp)
  809b9c:	dec00304 	addi	sp,sp,12
  809ba0:	f800283a 	ret

00809ba4 <_isatty_r>:
  809ba4:	defffd04 	addi	sp,sp,-12
  809ba8:	dc000015 	stw	r16,0(sp)
  809bac:	04002074 	movhi	r16,129
  809bb0:	84361704 	addi	r16,r16,-10148
  809bb4:	dc400115 	stw	r17,4(sp)
  809bb8:	80000015 	stw	zero,0(r16)
  809bbc:	2023883a 	mov	r17,r4
  809bc0:	2809883a 	mov	r4,r5
  809bc4:	dfc00215 	stw	ra,8(sp)
  809bc8:	0809da80 	call	809da8 <isatty>
  809bcc:	1007883a 	mov	r3,r2
  809bd0:	00bfffc4 	movi	r2,-1
  809bd4:	18800626 	beq	r3,r2,809bf0 <_isatty_r+0x4c>
  809bd8:	1805883a 	mov	r2,r3
  809bdc:	dfc00217 	ldw	ra,8(sp)
  809be0:	dc400117 	ldw	r17,4(sp)
  809be4:	dc000017 	ldw	r16,0(sp)
  809be8:	dec00304 	addi	sp,sp,12
  809bec:	f800283a 	ret
  809bf0:	80800017 	ldw	r2,0(r16)
  809bf4:	103ff826 	beq	r2,zero,809bd8 <_isatty_r+0x34>
  809bf8:	88800015 	stw	r2,0(r17)
  809bfc:	1805883a 	mov	r2,r3
  809c00:	dfc00217 	ldw	ra,8(sp)
  809c04:	dc400117 	ldw	r17,4(sp)
  809c08:	dc000017 	ldw	r16,0(sp)
  809c0c:	dec00304 	addi	sp,sp,12
  809c10:	f800283a 	ret

00809c14 <_lseek_r>:
  809c14:	defffd04 	addi	sp,sp,-12
  809c18:	dc000015 	stw	r16,0(sp)
  809c1c:	04002074 	movhi	r16,129
  809c20:	84361704 	addi	r16,r16,-10148
  809c24:	dc400115 	stw	r17,4(sp)
  809c28:	80000015 	stw	zero,0(r16)
  809c2c:	2023883a 	mov	r17,r4
  809c30:	2809883a 	mov	r4,r5
  809c34:	300b883a 	mov	r5,r6
  809c38:	380d883a 	mov	r6,r7
  809c3c:	dfc00215 	stw	ra,8(sp)
  809c40:	0809e2c0 	call	809e2c <lseek>
  809c44:	1007883a 	mov	r3,r2
  809c48:	00bfffc4 	movi	r2,-1
  809c4c:	18800626 	beq	r3,r2,809c68 <_lseek_r+0x54>
  809c50:	1805883a 	mov	r2,r3
  809c54:	dfc00217 	ldw	ra,8(sp)
  809c58:	dc400117 	ldw	r17,4(sp)
  809c5c:	dc000017 	ldw	r16,0(sp)
  809c60:	dec00304 	addi	sp,sp,12
  809c64:	f800283a 	ret
  809c68:	80800017 	ldw	r2,0(r16)
  809c6c:	103ff826 	beq	r2,zero,809c50 <_lseek_r+0x3c>
  809c70:	88800015 	stw	r2,0(r17)
  809c74:	1805883a 	mov	r2,r3
  809c78:	dfc00217 	ldw	ra,8(sp)
  809c7c:	dc400117 	ldw	r17,4(sp)
  809c80:	dc000017 	ldw	r16,0(sp)
  809c84:	dec00304 	addi	sp,sp,12
  809c88:	f800283a 	ret

00809c8c <_read_r>:
  809c8c:	defffd04 	addi	sp,sp,-12
  809c90:	dc000015 	stw	r16,0(sp)
  809c94:	04002074 	movhi	r16,129
  809c98:	84361704 	addi	r16,r16,-10148
  809c9c:	dc400115 	stw	r17,4(sp)
  809ca0:	80000015 	stw	zero,0(r16)
  809ca4:	2023883a 	mov	r17,r4
  809ca8:	2809883a 	mov	r4,r5
  809cac:	300b883a 	mov	r5,r6
  809cb0:	380d883a 	mov	r6,r7
  809cb4:	dfc00215 	stw	ra,8(sp)
  809cb8:	0809ec80 	call	809ec8 <read>
  809cbc:	1007883a 	mov	r3,r2
  809cc0:	00bfffc4 	movi	r2,-1
  809cc4:	18800626 	beq	r3,r2,809ce0 <_read_r+0x54>
  809cc8:	1805883a 	mov	r2,r3
  809ccc:	dfc00217 	ldw	ra,8(sp)
  809cd0:	dc400117 	ldw	r17,4(sp)
  809cd4:	dc000017 	ldw	r16,0(sp)
  809cd8:	dec00304 	addi	sp,sp,12
  809cdc:	f800283a 	ret
  809ce0:	80800017 	ldw	r2,0(r16)
  809ce4:	103ff826 	beq	r2,zero,809cc8 <_read_r+0x3c>
  809ce8:	88800015 	stw	r2,0(r17)
  809cec:	1805883a 	mov	r2,r3
  809cf0:	dfc00217 	ldw	ra,8(sp)
  809cf4:	dc400117 	ldw	r17,4(sp)
  809cf8:	dc000017 	ldw	r16,0(sp)
  809cfc:	dec00304 	addi	sp,sp,12
  809d00:	f800283a 	ret

00809d04 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  809d04:	20000226 	beq	r4,zero,809d10 <_exit+0xc>
    ALT_SIM_FAIL();
  809d08:	002af070 	cmpltui	zero,zero,43969
  809d0c:	003fff06 	br	809d0c <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  809d10:	002af0b0 	cmpltui	zero,zero,43970
  809d14:	003ffd06 	br	809d0c <_exit+0x8>

00809d18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809d18:	deffff04 	addi	sp,sp,-4
  809d1c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809d20:	20c00324 	muli	r3,r4,12
  809d24:	20001116 	blt	r4,zero,809d6c <fstat+0x54>
  809d28:	00802074 	movhi	r2,129
  809d2c:	10af1404 	addi	r2,r2,-17328
  809d30:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809d34:	20000d26 	beq	r4,zero,809d6c <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809d38:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809d3c:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809d40:	10800817 	ldw	r2,32(r2)
  809d44:	10000326 	beq	r2,zero,809d54 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  809d48:	dfc00017 	ldw	ra,0(sp)
  809d4c:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  809d50:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809d54:	00880004 	movi	r2,8192
  809d58:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  809d5c:	1805883a 	mov	r2,r3
  809d60:	dfc00017 	ldw	ra,0(sp)
  809d64:	dec00104 	addi	sp,sp,4
  809d68:	f800283a 	ret
  809d6c:	00802074 	movhi	r2,129
  809d70:	10af8004 	addi	r2,r2,-16896
  809d74:	10800017 	ldw	r2,0(r2)
  809d78:	00c02074 	movhi	r3,129
  809d7c:	18f61704 	addi	r3,r3,-10148
  809d80:	10000226 	beq	r2,zero,809d8c <fstat+0x74>
  809d84:	103ee83a 	callr	r2
  809d88:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809d8c:	00801444 	movi	r2,81
  809d90:	18800015 	stw	r2,0(r3)
  809d94:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  809d98:	1805883a 	mov	r2,r3
  809d9c:	dfc00017 	ldw	ra,0(sp)
  809da0:	dec00104 	addi	sp,sp,4
  809da4:	f800283a 	ret

00809da8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809da8:	defff004 	addi	sp,sp,-64
  809dac:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809db0:	20c00324 	muli	r3,r4,12
  809db4:	20000f16 	blt	r4,zero,809df4 <isatty+0x4c>
  809db8:	00802074 	movhi	r2,129
  809dbc:	10af1404 	addi	r2,r2,-17328
  809dc0:	1885883a 	add	r2,r3,r2
  
  if (fd)
  809dc4:	10000b26 	beq	r2,zero,809df4 <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809dc8:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809dcc:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809dd0:	10c00817 	ldw	r3,32(r2)
  809dd4:	00800044 	movi	r2,1
  809dd8:	18000326 	beq	r3,zero,809de8 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809ddc:	0809d180 	call	809d18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  809de0:	d8c00117 	ldw	r3,4(sp)
  809de4:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  809de8:	dfc00f17 	ldw	ra,60(sp)
  809dec:	dec01004 	addi	sp,sp,64
  809df0:	f800283a 	ret
  809df4:	00802074 	movhi	r2,129
  809df8:	10af8004 	addi	r2,r2,-16896
  809dfc:	10800017 	ldw	r2,0(r2)
  809e00:	00c02074 	movhi	r3,129
  809e04:	18f61704 	addi	r3,r3,-10148
  809e08:	10000226 	beq	r2,zero,809e14 <isatty+0x6c>
  809e0c:	103ee83a 	callr	r2
  809e10:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809e14:	00801444 	movi	r2,81
  809e18:	18800015 	stw	r2,0(r3)
  809e1c:	0005883a 	mov	r2,zero
    return 0;
  }
}
  809e20:	dfc00f17 	ldw	ra,60(sp)
  809e24:	dec01004 	addi	sp,sp,64
  809e28:	f800283a 	ret

00809e2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  809e2c:	defffe04 	addi	sp,sp,-8
  809e30:	dfc00115 	stw	ra,4(sp)
  809e34:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809e38:	20001f16 	blt	r4,zero,809eb8 <lseek+0x8c>
  809e3c:	20c00324 	muli	r3,r4,12
  809e40:	00802074 	movhi	r2,129
  809e44:	10af1404 	addi	r2,r2,-17328
  809e48:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  809e4c:	20001c26 	beq	r4,zero,809ec0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809e50:	20800017 	ldw	r2,0(r4)
  809e54:	10800717 	ldw	r2,28(r2)
  809e58:	10000626 	beq	r2,zero,809e74 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  809e5c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  809e60:	10000516 	blt	r2,zero,809e78 <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  809e64:	dfc00117 	ldw	ra,4(sp)
  809e68:	dc000017 	ldw	r16,0(sp)
  809e6c:	dec00204 	addi	sp,sp,8
  809e70:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809e74:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  809e78:	00a1c83a 	sub	r16,zero,r2
  809e7c:	00802074 	movhi	r2,129
  809e80:	10af8004 	addi	r2,r2,-16896
  809e84:	10800017 	ldw	r2,0(r2)
  809e88:	10000826 	beq	r2,zero,809eac <lseek+0x80>
  809e8c:	103ee83a 	callr	r2
  809e90:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  809e94:	00bfffc4 	movi	r2,-1
  809e98:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  809e9c:	dfc00117 	ldw	ra,4(sp)
  809ea0:	dc000017 	ldw	r16,0(sp)
  809ea4:	dec00204 	addi	sp,sp,8
  809ea8:	f800283a 	ret
  809eac:	00c02074 	movhi	r3,129
  809eb0:	18f61704 	addi	r3,r3,-10148
  809eb4:	003ff706 	br	809e94 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809eb8:	04001444 	movi	r16,81
  809ebc:	003fef06 	br	809e7c <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  809ec0:	00bfebc4 	movi	r2,-81
  809ec4:	003fec06 	br	809e78 <lseek+0x4c>

00809ec8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  809ec8:	defffe04 	addi	sp,sp,-8
  809ecc:	dfc00115 	stw	ra,4(sp)
  809ed0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809ed4:	20002516 	blt	r4,zero,809f6c <read+0xa4>
  809ed8:	20c00324 	muli	r3,r4,12
  809edc:	00802074 	movhi	r2,129
  809ee0:	10af1404 	addi	r2,r2,-17328
  809ee4:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809ee8:	20002026 	beq	r4,zero,809f6c <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  809eec:	20800217 	ldw	r2,8(r4)
  809ef0:	00c00044 	movi	r3,1
  809ef4:	108000cc 	andi	r2,r2,3
  809ef8:	10c00b26 	beq	r2,r3,809f28 <read+0x60>
  809efc:	20800017 	ldw	r2,0(r4)
  809f00:	10800517 	ldw	r2,20(r2)
  809f04:	10000826 	beq	r2,zero,809f28 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  809f08:	103ee83a 	callr	r2
  809f0c:	1021883a 	mov	r16,r2
  809f10:	10002716 	blt	r2,zero,809fb0 <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809f14:	8005883a 	mov	r2,r16
  809f18:	dfc00117 	ldw	ra,4(sp)
  809f1c:	dc000017 	ldw	r16,0(sp)
  809f20:	dec00204 	addi	sp,sp,8
  809f24:	f800283a 	ret
  809f28:	00802074 	movhi	r2,129
  809f2c:	10af8004 	addi	r2,r2,-16896
  809f30:	10800017 	ldw	r2,0(r2)
  809f34:	10000a26 	beq	r2,zero,809f60 <read+0x98>
  809f38:	103ee83a 	callr	r2
  809f3c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  809f40:	043fffc4 	movi	r16,-1
  809f44:	00800344 	movi	r2,13
  809f48:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809f4c:	8005883a 	mov	r2,r16
  809f50:	dfc00117 	ldw	ra,4(sp)
  809f54:	dc000017 	ldw	r16,0(sp)
  809f58:	dec00204 	addi	sp,sp,8
  809f5c:	f800283a 	ret
  809f60:	00c02074 	movhi	r3,129
  809f64:	18f61704 	addi	r3,r3,-10148
  809f68:	003ff506 	br	809f40 <read+0x78>
  809f6c:	00802074 	movhi	r2,129
  809f70:	10af8004 	addi	r2,r2,-16896
  809f74:	10800017 	ldw	r2,0(r2)
  809f78:	10000a26 	beq	r2,zero,809fa4 <read+0xdc>
  809f7c:	103ee83a 	callr	r2
  809f80:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  809f84:	00801444 	movi	r2,81
  809f88:	043fffc4 	movi	r16,-1
  809f8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  809f90:	8005883a 	mov	r2,r16
  809f94:	dfc00117 	ldw	ra,4(sp)
  809f98:	dc000017 	ldw	r16,0(sp)
  809f9c:	dec00204 	addi	sp,sp,8
  809fa0:	f800283a 	ret
  809fa4:	00c02074 	movhi	r3,129
  809fa8:	18f61704 	addi	r3,r3,-10148
  809fac:	003ff506 	br	809f84 <read+0xbc>
  809fb0:	00802074 	movhi	r2,129
  809fb4:	10af8004 	addi	r2,r2,-16896
  809fb8:	10800017 	ldw	r2,0(r2)
  809fbc:	10000626 	beq	r2,zero,809fd8 <read+0x110>
  809fc0:	103ee83a 	callr	r2
  809fc4:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  809fc8:	0405c83a 	sub	r2,zero,r16
  809fcc:	043fffc4 	movi	r16,-1
  809fd0:	18800015 	stw	r2,0(r3)
  809fd4:	003fcf06 	br	809f14 <read+0x4c>
  809fd8:	00c02074 	movhi	r3,129
  809fdc:	18f61704 	addi	r3,r3,-10148
  809fe0:	003ff906 	br	809fc8 <read+0x100>

00809fe4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  809fe4:	defffe04 	addi	sp,sp,-8
  809fe8:	dfc00115 	stw	ra,4(sp)
  809fec:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809ff0:	20002416 	blt	r4,zero,80a084 <write+0xa0>
  809ff4:	20c00324 	muli	r3,r4,12
  809ff8:	00802074 	movhi	r2,129
  809ffc:	10af1404 	addi	r2,r2,-17328
  80a000:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80a004:	20001f26 	beq	r4,zero,80a084 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a008:	20800217 	ldw	r2,8(r4)
  80a00c:	108000cc 	andi	r2,r2,3
  80a010:	10000b26 	beq	r2,zero,80a040 <write+0x5c>
  80a014:	20800017 	ldw	r2,0(r4)
  80a018:	10800617 	ldw	r2,24(r2)
  80a01c:	10000826 	beq	r2,zero,80a040 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80a020:	103ee83a 	callr	r2
  80a024:	1021883a 	mov	r16,r2
  80a028:	10002716 	blt	r2,zero,80a0c8 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80a02c:	8005883a 	mov	r2,r16
  80a030:	dfc00117 	ldw	ra,4(sp)
  80a034:	dc000017 	ldw	r16,0(sp)
  80a038:	dec00204 	addi	sp,sp,8
  80a03c:	f800283a 	ret
  80a040:	00802074 	movhi	r2,129
  80a044:	10af8004 	addi	r2,r2,-16896
  80a048:	10800017 	ldw	r2,0(r2)
  80a04c:	10000a26 	beq	r2,zero,80a078 <write+0x94>
  80a050:	103ee83a 	callr	r2
  80a054:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  80a058:	043fffc4 	movi	r16,-1
  80a05c:	00800344 	movi	r2,13
  80a060:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80a064:	8005883a 	mov	r2,r16
  80a068:	dfc00117 	ldw	ra,4(sp)
  80a06c:	dc000017 	ldw	r16,0(sp)
  80a070:	dec00204 	addi	sp,sp,8
  80a074:	f800283a 	ret
  80a078:	00c02074 	movhi	r3,129
  80a07c:	18f61704 	addi	r3,r3,-10148
  80a080:	003ff506 	br	80a058 <write+0x74>
  80a084:	00802074 	movhi	r2,129
  80a088:	10af8004 	addi	r2,r2,-16896
  80a08c:	10800017 	ldw	r2,0(r2)
  80a090:	10000a26 	beq	r2,zero,80a0bc <write+0xd8>
  80a094:	103ee83a 	callr	r2
  80a098:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80a09c:	00801444 	movi	r2,81
  80a0a0:	043fffc4 	movi	r16,-1
  80a0a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80a0a8:	8005883a 	mov	r2,r16
  80a0ac:	dfc00117 	ldw	ra,4(sp)
  80a0b0:	dc000017 	ldw	r16,0(sp)
  80a0b4:	dec00204 	addi	sp,sp,8
  80a0b8:	f800283a 	ret
  80a0bc:	00c02074 	movhi	r3,129
  80a0c0:	18f61704 	addi	r3,r3,-10148
  80a0c4:	003ff506 	br	80a09c <write+0xb8>
  80a0c8:	00802074 	movhi	r2,129
  80a0cc:	10af8004 	addi	r2,r2,-16896
  80a0d0:	10800017 	ldw	r2,0(r2)
  80a0d4:	10000626 	beq	r2,zero,80a0f0 <write+0x10c>
  80a0d8:	103ee83a 	callr	r2
  80a0dc:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  80a0e0:	0405c83a 	sub	r2,zero,r16
  80a0e4:	043fffc4 	movi	r16,-1
  80a0e8:	18800015 	stw	r2,0(r3)
  80a0ec:	003fcf06 	br	80a02c <write+0x48>
  80a0f0:	00c02074 	movhi	r3,129
  80a0f4:	18f61704 	addi	r3,r3,-10148
  80a0f8:	003ff906 	br	80a0e0 <write+0xfc>
  80a0fc:	00808e20 	cmpeqi	r2,zero,568
