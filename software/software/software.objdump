
software.elf:     file format elf32-littlenios2
software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000a18c memsz 0x0000a18c flags r-x
    LOAD off    0x0000b1ac vaddr 0x0080a1ac paddr 0x0080bbf4 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x0000d63c vaddr 0x0080d63c paddr 0x0080d63c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009d74  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002b4  00809ef8  00809ef8  0000aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  0080a1ac  0080bbf4  0000b1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0080d63c  0080d63c  0000d63c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000cbf4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  0000cc18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001326  00000000  00000000  0000d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000200ef  00000000  00000000  0000ebf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000085af  00000000  00000000  0002ece5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013197  00000000  00000000  00037294  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016ac  00000000  00000000  0004a42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000278b  00000000  00000000  0004bad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a80b  00000000  00000000  0004e263  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00058a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000978  00000000  00000000  00058a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005c098  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005c09b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005c09e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005c09f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005c0a0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005c0a4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005c0a8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005c0ac  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005c0b5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005c0be  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0005c0c7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000014  00000000  00000000  0005c0d9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005134  00000000  00000000  0005c0ed  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003102d  00000000  00000000  00061221  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
00809ef8 l    d  .rodata	00000000 .rodata
0080a1ac l    d  .rwdata	00000000 .rwdata
0080d63c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00800630 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00800c90 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
0080a1ac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
008027b8 l     F .text	000001f0 print_e
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mprec.c
0080a170 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
00804dd8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00806fe0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080bbcc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080a9b4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00807600 l     F .text	00000058 altera_avalon_jtag_uart_timeout
008076d8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00807ba8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00807d6c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808c18 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00808ffc l     F .text	00000058 std
00809108 l     F .text	00000008 __fp_lock
00809110 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_write.c
00803abc g     F .text	00000094 _mprec_log10
00803ba8 g     F .text	00000088 __any_on
0080999c g     F .text	00000070 _isatty_r
0080a148 g     O .rodata	00000028 __mprec_tinytens
008072a8 g     F .text	00000050 alt_main
00804c98 g     F .text	0000008c strcpy
0080d68c g     O .bss	00000100 alt_irq
00809a0c g     F .text	00000078 _lseek_r
0080bbf4 g       *ABS*	00000000 __flash_rwdata_start
00806ae0 g     F .text	00000088 __eqdf2
0080d78c g       *ABS*	00000000 __alt_heap_start
008095d8 g     F .text	00000068 __sseek
00809064 g     F .text	000000a4 __sinit
008030c8 g     F .text	000001a8 fcvtbuf
00809164 g     F .text	00000068 __sfmoreglue
008072fc g     F .text	00000004 __malloc_unlock
00800ac8 g     F .text	00000174 __divsf3
008001fc g     F .text	000002d8 determinant
008065a4 g     F .text	000000e0 memmove
00809154 g     F .text	00000010 _cleanup
00803c30 g     F .text	000000bc _Balloc
00807300 g     F .text	00000014 alt_putstr
00806bf0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00807484 g     F .text	00000080 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
008001c0 g     F .text	0000001c getAt
00809928 g     F .text	00000074 _fstat_r
0080d648 g     O .bss	00000004 errno
008013ec g     F .text	00000038 __make_dp
0080d650 g     O .bss	00000004 alt_argv
00813bbc g       *ABS*	00000000 _gp
00800814 g     F .text	00000070 __subsf3
0080ba3c g     O .rwdata	00000180 alt_fd_list
008081d0 g     F .text	00000094 alt_find_dev
008026a8 g     F .text	000000a0 memcpy
00809148 g     F .text	0000000c _cleanup_r
00806e10 g     F .text	000000f8 __floatsidf
00807f20 g     F .text	00000104 alt_io_redirect
00806d00 g     F .text	00000088 __ltdf2
00803a0c g     F .text	000000b0 __ratio
00807868 g     F .text	0000016c altera_avalon_jtag_uart_read
00801f54 g     F .text	00000014 malloc
0080711c g     F .text	00000008 __udivsi3
00809ba0 g     F .text	00000084 isatty
0080a058 g     O .rodata	000000c8 __mprec_tens
00801e10 g     F .text	00000040 gcvtf
00808374 g     F .text	00000038 alt_icache_flush
0080d63c g     O .bss	00000004 __malloc_top_pad
00808474 g     F .text	0000049c __sfvwrite_r
00804328 g     F .text	0000003c __i2b
00802748 g     F .text	00000070 _sbrk_r
00809a84 g     F .text	00000078 _read_r
0080bbe8 g     O .rwdata	00000004 alt_max_fd
00801c0c g     F .text	00000138 __unpack_d
00809804 g     F .text	00000110 _fclose_r
00808fc8 g     F .text	00000034 fflush
0080d640 g     O .bss	00000004 __malloc_max_sbrked_mem
00800c3c g     F .text	00000054 __extendsfdf2
00801120 g     F .text	00000074 __adddf3
008038ec g     F .text	00000120 __b2d
00809c24 g     F .text	0000009c lseek
0080bbc0 g     O .rwdata	00000004 _global_impure_ptr
008046a4 g     F .text	000005f4 _realloc_r
0080d78c g       *ABS*	00000000 __bss_end
00807e98 g     F .text	00000088 alt_iic_isr_register
0080739c g     F .text	000000e8 alt_tick
0080a120 g     O .rodata	00000028 __mprec_bigtens
00804584 g     F .text	00000120 __s2b
00801424 g     F .text	00000194 __floatunsidf
0080380c g     F .text	00000060 __mcmp
00809130 g     F .text	00000018 __fp_lock_all
00807dfc g     F .text	00000018 alt_ic_irq_enabled
00807368 g     F .text	00000034 alt_alarm_stop
0080d660 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
0080ba14 g     O .rwdata	00000028 alt_dev_null
00801830 g     F .text	000000c8 __unpack_f
008001dc g     F .text	00000020 putAt
00807d68 g     F .text	00000004 alt_dcache_flush_all
008036d8 g     F .text	00000070 __hi0bits
00806f08 g     F .text	000000d8 __fixdfsi
0080bbf4 g       *ABS*	00000000 __ram_rwdata_end
0080bbe0 g     O .rwdata	00000008 alt_dev_list
00809ddc g     F .text	00000118 write
0080a1ac g       *ABS*	00000000 __ram_rodata_end
00809b10 g     F .text	00000090 fstat
00806d88 g     F .text	00000088 __ledf2
00804464 g     F .text	00000120 __pow5mult
00807124 g     F .text	00000008 __umodsi3
0080d78c g       *ABS*	00000000 end
008016d0 g     F .text	00000160 __pack_f
00807658 g     F .text	00000080 altera_avalon_jtag_uart_init
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802c88 g     F .text	000002f8 _dcvt
00807b58 g     F .text	00000050 alt_avalon_timer_sc_init
00801650 g     F .text	00000080 __clzsi2
008079d4 g     F .text	00000184 altera_avalon_jtag_uart_write
00809054 g     F .text	00000004 __sfp_lock_acquire
00808910 g     F .text	000000e4 memchr
0080339c g     F .text	00000314 _free_r
00808c1c g     F .text	000001b0 __call_exitprocs
0080bbc8 g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000003c _start
0080d658 g     O .bss	00000004 _alt_tick_rate
008029a8 g     F .text	000002e0 _gcvt
00803ff4 g     F .text	0000014c __lshift
0080d65c g     O .bss	00000004 _alt_nticks
00809cc0 g     F .text	0000011c read
00807504 g     F .text	00000058 alt_sys_init
00804140 g     F .text	000001e8 __multiply
008075b8 g     F .text	00000048 altera_avalon_jtag_uart_close
0080a1ac g       *ABS*	00000000 __ram_rwdata_start
00809ef8 g       *ABS*	00000000 __ram_rodata_start
0080d664 g     O .bss	00000028 __malloc_current_mallinfo
00803cec g     F .text	0000017c __d2b
008075a8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00808314 g     F .text	00000060 alt_get_fd
0080712c g     F .text	000000c8 __fpcmp_parts_d
00809794 g     F .text	00000070 _close_r
008089f4 g     F .text	00000074 memcmp
00807588 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0080d78c g       *ABS*	00000000 __alt_stack_base
0080757c g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00808adc g     F .text	0000013c __swsetup_r
00801194 g     F .text	00000258 __divdf3
008091cc g     F .text	000000f0 __sfp
00803b50 g     F .text	00000058 __copybits
0080a5ac g     O .rwdata	00000408 __malloc_av_
00809060 g     F .text	00000004 __sinit_lock_release
0080671c g     F .text	000003c4 __muldf3
008096bc g     F .text	00000060 __sread
00809f30 g     O .rodata	00000010 __thenan_sf
00808264 g     F .text	000000b0 alt_find_file
00807d74 g     F .text	0000007c alt_dev_llist_insert
008072f8 g     F .text	00000004 __malloc_lock
00807314 g     F .text	00000054 sbrk
00808dcc g     F .text	000001fc _fflush_r
00804d24 g     F .text	000000b4 _calloc_r
0080d63c g       *ABS*	00000000 __bss_start
00806684 g     F .text	00000098 memset
008004d4 g     F .text	0000015c main
00801ec8 g     F .text	00000024 fcvt
0080d654 g     O .bss	00000004 alt_envp
0080d644 g     O .bss	00000004 __malloc_max_total_mem
00807598 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00802f80 g     F .text	00000148 ecvtbuf
008095d0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809914 g     F .text	00000014 fclose
00804ff0 g     F .text	000015b4 _dtoa_r
00801f68 g     F .text	00000740 _malloc_r
0080bbec g     O .rwdata	00000004 alt_errno
00801e74 g     F .text	00000054 ecvtf
00809384 g     F .text	000000b8 _fwalk
0080705c g     F .text	00000060 __divsi3
00809f40 g     O .rodata	00000014 __thenan_df
00803270 g     F .text	0000012c _malloc_trim_r
008008e8 g     F .text	000001e0 __mulsf3
00809ef8 g       *ABS*	00000000 __flash_rodata_start
00806b68 g     F .text	00000088 __nedf2
0080755c g     F .text	00000020 alt_irq_init
008081a4 g     F .text	00000024 alt_release_fd
00809f54 g     O .rodata	00000100 __clz_tab
0080971c g     F .text	00000078 _write_r
0080bbbc g     O .rwdata	00000004 _impure_ptr
0080d64c g     O .bss	00000004 alt_argc
00800020 g       .exceptions	00000000 alt_irq_entry
0080386c g     F .text	00000080 __ulp
00809118 g     F .text	00000018 __fp_unlock_all
00801e50 g     F .text	00000024 ecvt
0080bbd8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807e94 g     F .text	00000004 alt_ic_isr_register
0080bbf4 g       *ABS*	00000000 _edata
0080d78c g       *ABS*	00000000 _end
00800184 g       *ABS*	00000000 __ram_exceptions_end
008077e0 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
008083e4 g     F .text	00000074 _fputs_r
00807e54 g     F .text	00000040 alt_ic_irq_disable
00809640 g     F .text	0000007c __swrite
0080bbc4 g     O .rwdata	00000004 __malloc_trim_threshold
00801eec g     F .text	00000054 fcvtf
008081c8 g     F .text	00000008 altera_nios2_qsys_irq_init
008083ac g     F .text	00000038 exit
008092bc g     F .text	000000c8 _fwalk_reent
00803e68 g     F .text	0000018c __mdiff
008070bc g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809058 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801d44 g     F .text	000000cc gcvt
00809afc g     F .text	00000014 _exit
00807be4 g     F .text	00000094 alt_alarm_start
008015b8 g     F .text	00000098 __muldi3
0080943c g     F .text	00000194 __smakebuf_r
00808a68 g     F .text	00000074 strlen
00808024 g     F .text	00000180 open
00806c78 g     F .text	00000088 __gedf2
00807df0 g     F .text	0000000c alt_icache_flush_all
00808458 g     F .text	0000001c fputs
0080bbf0 g     O .rwdata	00000004 alt_priority_mask
00807e14 g     F .text	00000040 alt_ic_irq_enable
008010a0 g     F .text	00000080 __subdf3
00803748 g     F .text	000000c4 __lo0bits
0080bbd0 g     O .rwdata	00000008 alt_alarm_list
00807c78 g     F .text	000000f0 close
00800884 g     F .text	00000064 __addsf3
008071f4 g     F .text	000000b4 alt_load
008018f8 g     F .text	00000314 __pack_d
00801f40 g     F .text	00000014 free
0080905c g     F .text	00000004 __sinit_lock_acquire
00804364 g     F .text	00000100 __multadd
008036b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002074 	movhi	r16,129
  800108:	8435a304 	addi	r16,r16,-10612
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800184:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800188:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80018c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800190:	d68eef14 	ori	gp,gp,15292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800194:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800198:	10b58f14 	ori	r2,r2,54844

    movhi r3, %hi(__bss_end)
  80019c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001a0:	18f5e314 	ori	r3,r3,55180

    beq r2, r3, 1f
  8001a4:	10c00326 	beq	r2,r3,8001b4 <_start+0x30>

0:
    stw zero, (r2)
  8001a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001b0:	10fffd36 	bltu	r2,r3,8001a8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b4:	08071f40 	call	8071f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b8:	08072a80 	call	8072a8 <alt_main>

008001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001bc:	003fff06 	br	8001bc <alt_after_alt_main>

008001c0 <getAt>:

	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
  8001c0:	29cb383a 	mul	r5,r5,r7
  8001c4:	298b883a 	add	r5,r5,r6
  8001c8:	294b883a 	add	r5,r5,r5
  8001cc:	294b883a 	add	r5,r5,r5
  8001d0:	290b883a 	add	r5,r5,r4
	return *(m + i*dimension + j);
}
  8001d4:	28800017 	ldw	r2,0(r5)
  8001d8:	f800283a 	ret

008001dc <putAt>:

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8001dc:	29cb383a 	mul	r5,r5,r7
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
  8001e0:	d8800017 	ldw	r2,0(sp)
	*(m + i*dimension + j) = value;
  8001e4:	298b883a 	add	r5,r5,r6
  8001e8:	294b883a 	add	r5,r5,r5
  8001ec:	294b883a 	add	r5,r5,r5
  8001f0:	290b883a 	add	r5,r5,r4
  8001f4:	28800015 	stw	r2,0(r5)
}
  8001f8:	f800283a 	ret

008001fc <determinant>:
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  8001fc:	2945883a 	add	r2,r5,r5

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800200:	deffea04 	addi	sp,sp,-88
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800204:	1087883a 	add	r3,r2,r2

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800208:	dc400d15 	stw	r17,52(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  80020c:	28e3383a 	mul	r17,r5,r3

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800210:	dcc00f15 	stw	r19,60(sp)
  800214:	2027883a 	mov	r19,r4
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800218:	8809883a 	mov	r4,r17

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  80021c:	dfc01515 	stw	ra,84(sp)
  800220:	d9400815 	stw	r5,32(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800224:	d8c00915 	stw	r3,36(sp)

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800228:	df001415 	stw	fp,80(sp)
  80022c:	ddc01315 	stw	r23,76(sp)
  800230:	dd801215 	stw	r22,72(sp)
  800234:	dd401115 	stw	r21,68(sp)
  800238:	dd001015 	stw	r20,64(sp)
  80023c:	dc800e15 	stw	r18,56(sp)
  800240:	dc000c15 	stw	r16,48(sp)
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800244:	d8800b15 	stw	r2,44(sp)
  800248:	0801f540 	call	801f54 <malloc>
	memcpy(m, matrix, sizeof(float)*dimension*dimension );
  80024c:	1009883a 	mov	r4,r2
  800250:	980b883a 	mov	r5,r19
  800254:	880d883a 	mov	r6,r17
	int i, j, p;
	float a, result;
	float *m;

	// Let us copy the matrix first
	m = (float *) malloc( sizeof(float)*dimension*dimension );
  800258:	d8800715 	stw	r2,28(sp)
  80025c:	d8800215 	stw	r2,8(sp)
	memcpy(m, matrix, sizeof(float)*dimension*dimension );
  800260:	08026a80 	call	8026a8 <memcpy>
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  800264:	d9000817 	ldw	r4,32(sp)
  800268:	0100980e 	bge	zero,r4,8004cc <determinant+0x2d0>

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  80026c:	d8800717 	ldw	r2,28(sp)
  800270:	0039883a 	mov	fp,zero
  800274:	d8000315 	stw	zero,12(sp)
  800278:	d8800015 	stw	r2,0(sp)
  80027c:	d8800115 	stw	r2,4(sp)
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  800280:	07003f0e 	bge	zero,fp,800380 <determinant+0x184>
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  800284:	d8800017 	ldw	r2,0(sp)
  800288:	0029883a 	mov	r20,zero
  80028c:	002d883a 	mov	r22,zero
  800290:	14800017 	ldw	r18,0(r2)
  800294:	d8800615 	stw	r2,24(sp)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800298:	d9000817 	ldw	r4,32(sp)
  80029c:	d8c00317 	ldw	r3,12(sp)
  8002a0:	2509383a 	mul	r4,r4,r20
  8002a4:	a0c5883a 	add	r2,r20,r3
  8002a8:	a507883a 	add	r3,r20,r20
  8002ac:	d9000415 	stw	r4,16(sp)
  8002b0:	d9000717 	ldw	r4,28(sp)
  8002b4:	1085883a 	add	r2,r2,r2
  8002b8:	18c7883a 	add	r3,r3,r3
  8002bc:	20c7883a 	add	r3,r4,r3
  8002c0:	1085883a 	add	r2,r2,r2
  8002c4:	2085883a 	add	r2,r4,r2
  8002c8:	1dc00104 	addi	r23,r3,4
  8002cc:	d8c00417 	ldw	r3,16(sp)
  8002d0:	10800104 	addi	r2,r2,4
  8002d4:	d8800515 	stw	r2,20(sp)
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8002d8:	b0c5883a 	add	r2,r22,r3
  8002dc:	1085883a 	add	r2,r2,r2
  8002e0:	1085883a 	add	r2,r2,r2
  8002e4:	1105883a 	add	r2,r2,r4
  8002e8:	11400017 	ldw	r5,0(r2)
  8002ec:	9009883a 	mov	r4,r18
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  8002f0:	a5000044 	addi	r20,r20,1
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  8002f4:	0800ac80 	call	800ac8 <__divsf3>
  8002f8:	d8c00617 	ldw	r3,24(sp)
  8002fc:	18800015 	stw	r2,0(r3)
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
  800300:	a7001f0e 	bge	r20,fp,800380 <determinant+0x184>

float determinant(float *matrix, int dimension);
float getAt(float *m, int i, int j, int dimension);
void putAt(float *m, int i, int j, int dimension, float value);

float determinant(float *matrix, int dimension){
  800304:	d8c00517 	ldw	r3,20(sp)
  800308:	a02d883a 	mov	r22,r20
  80030c:	d8c00615 	stw	r3,24(sp)
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  800310:	1c800017 	ldw	r18,0(r3)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800314:	053fe00e 	bge	zero,r20,800298 <determinant+0x9c>
  800318:	d9000b17 	ldw	r4,44(sp)
  80031c:	dcc00017 	ldw	r19,0(sp)
  800320:	b823883a 	mov	r17,r23
  800324:	212b883a 	add	r21,r4,r4
  800328:	0021883a 	mov	r16,zero
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  80032c:	99000017 	ldw	r4,0(r19)
  800330:	89400017 	ldw	r5,0(r17)
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800334:	84000044 	addi	r16,r16,1
  800338:	9cc00104 	addi	r19,r19,4
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  80033c:	08008e80 	call	8008e8 <__mulsf3>
  800340:	100b883a 	mov	r5,r2
  800344:	9009883a 	mov	r4,r18
  800348:	08008140 	call	800814 <__subsf3>
  80034c:	1025883a 	mov	r18,r2
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
		for (j = 0; j < i; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < j; p++){
  800350:	8d63883a 	add	r17,r17,r21
  800354:	a43ff51e 	bne	r20,r16,80032c <determinant+0x130>
  800358:	d8c00417 	ldw	r3,16(sp)
  80035c:	d9000817 	ldw	r4,32(sp)
  800360:	d8800517 	ldw	r2,20(sp)
  800364:	bdc00104 	addi	r23,r23,4
  800368:	1907883a 	add	r3,r3,r4
  80036c:	d9000717 	ldw	r4,28(sp)
  800370:	10800104 	addi	r2,r2,4
  800374:	d8800515 	stw	r2,20(sp)
  800378:	d8c00415 	stw	r3,16(sp)
  80037c:	003fd606 	br	8002d8 <determinant+0xdc>
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
		result *= getAt(m, i, i, dimension);

	free(m);
  800380:	d9000317 	ldw	r4,12(sp)
  800384:	d8c00717 	ldw	r3,28(sp)
  800388:	ddc00117 	ldw	r23,4(sp)
  80038c:	2705883a 	add	r2,r4,fp
  800390:	1085883a 	add	r2,r2,r2
  800394:	1085883a 	add	r2,r2,r2
  800398:	e1000050 	cmplti	r4,fp,1
  80039c:	18ab883a 	add	r21,r3,r2
  8003a0:	e02d883a 	mov	r22,fp
  8003a4:	d9000a15 	stw	r4,40(sp)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003a8:	d9000a17 	ldw	r4,40(sp)
	return result;
}

// Based on i and j, and a float pointer, get the value at row i column j
float getAt(float *m, int i, int j, int dimension){
	return *(m + i*dimension + j);
  8003ac:	ac800017 	ldw	r18,0(r21)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003b0:	2000141e 	bne	r4,zero,800404 <determinant+0x208>
  8003b4:	d8c00317 	ldw	r3,12(sp)
  8003b8:	d9000717 	ldw	r4,28(sp)
  8003bc:	b823883a 	mov	r17,r23
  8003c0:	18c5883a 	add	r2,r3,r3
  8003c4:	1085883a 	add	r2,r2,r2
  8003c8:	20a7883a 	add	r19,r4,r2
  8003cc:	d8800b17 	ldw	r2,44(sp)
  8003d0:	0021883a 	mov	r16,zero
  8003d4:	10a9883a 	add	r20,r2,r2
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  8003d8:	99000017 	ldw	r4,0(r19)
  8003dc:	89400017 	ldw	r5,0(r17)
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003e0:	84000044 	addi	r16,r16,1
  8003e4:	9cc00104 	addi	r19,r19,4
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
  8003e8:	08008e80 	call	8008e8 <__mulsf3>
  8003ec:	100b883a 	mov	r5,r2
  8003f0:	9009883a 	mov	r4,r18
  8003f4:	08008140 	call	800814 <__subsf3>
  8003f8:	1025883a 	mov	r18,r2
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
			a = getAt(m, i, j, dimension);
			for (p = 0; p < i; p++){
  8003fc:	8d23883a 	add	r17,r17,r20
  800400:	e43ff51e 	bne	fp,r16,8003d8 <determinant+0x1dc>
			for (p = 0; p < j; p++){
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
  800404:	d8c00817 	ldw	r3,32(sp)
  800408:	b5800044 	addi	r22,r22,1
	return *(m + i*dimension + j);
}

// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
  80040c:	ac800015 	stw	r18,0(r21)
			for (p = 0; p < j; p++){
				a -= getAt(m, i, p, dimension) * getAt(m, p, j, dimension);
			}
			putAt(m, i, j, dimension, a/getAt(m, j, j, dimension));
		}
		for (j = i; j < dimension; j++){
  800410:	bdc00104 	addi	r23,r23,4
  800414:	ad400104 	addi	r21,r21,4
  800418:	b0ffe316 	blt	r22,r3,8003a8 <determinant+0x1ac>
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  80041c:	d9000117 	ldw	r4,4(sp)
  800420:	d8800317 	ldw	r2,12(sp)
  800424:	e7000044 	addi	fp,fp,1
  800428:	21000104 	addi	r4,r4,4
  80042c:	10c5883a 	add	r2,r2,r3
  800430:	d9000115 	stw	r4,4(sp)
  800434:	d8c00017 	ldw	r3,0(sp)
  800438:	d9000917 	ldw	r4,36(sp)
  80043c:	d8800315 	stw	r2,12(sp)
  800440:	d8800817 	ldw	r2,32(sp)
  800444:	1907883a 	add	r3,r3,r4
  800448:	d8c00015 	stw	r3,0(sp)
  80044c:	173f8c1e 	bne	r2,fp,800280 <determinant+0x84>
		for (j = 0; j < i; j++){
  800450:	d8c00b17 	ldw	r3,44(sp)
  800454:	0023883a 	mov	r17,zero
  800458:	040fe034 	movhi	r16,16256
  80045c:	18c5883a 	add	r2,r3,r3
  800460:	14800104 	addi	r18,r2,4
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
		result *= getAt(m, i, i, dimension);
  800464:	d9000217 	ldw	r4,8(sp)
	// Second step is to find the determinant.
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
  800468:	8c400044 	addi	r17,r17,1
		result *= getAt(m, i, i, dimension);
  80046c:	21400017 	ldw	r5,0(r4)
  800470:	8009883a 	mov	r4,r16
  800474:	08008e80 	call	8008e8 <__mulsf3>
  800478:	1021883a 	mov	r16,r2
	// Second step is to find the determinant.
	// Because the lower triangle is a unit triangular matrix
	// the determinant is simply a product of all the upper triangle diagonal
	// which in this case is exactly the diagonal of m
	result = 1;
	for (i = 0; i < dimension; i++)
  80047c:	d8800217 	ldw	r2,8(sp)
  800480:	d8c00817 	ldw	r3,32(sp)
  800484:	1485883a 	add	r2,r2,r18
  800488:	d8800215 	stw	r2,8(sp)
  80048c:	1c7ff51e 	bne	r3,r17,800464 <determinant+0x268>
		result *= getAt(m, i, i, dimension);

	free(m);
  800490:	d9000717 	ldw	r4,28(sp)
  800494:	0801f400 	call	801f40 <free>

	return result;
}
  800498:	8005883a 	mov	r2,r16
  80049c:	dfc01517 	ldw	ra,84(sp)
  8004a0:	df001417 	ldw	fp,80(sp)
  8004a4:	ddc01317 	ldw	r23,76(sp)
  8004a8:	dd801217 	ldw	r22,72(sp)
  8004ac:	dd401117 	ldw	r21,68(sp)
  8004b0:	dd001017 	ldw	r20,64(sp)
  8004b4:	dcc00f17 	ldw	r19,60(sp)
  8004b8:	dc800e17 	ldw	r18,56(sp)
  8004bc:	dc400d17 	ldw	r17,52(sp)
  8004c0:	dc000c17 	ldw	r16,48(sp)
  8004c4:	dec01604 	addi	sp,sp,88
  8004c8:	f800283a 	ret
	// This algorithm will return, in the same matrix, a lower unit triangular matrix
	// (i.e. diagonals one)
	// and an upper trangular matrix
	// https://vismor.com/documents/network_analysis/matrix_algorithms/S4.SS2.php

	for (i = 0; i < dimension; i++){
  8004cc:	040fe034 	movhi	r16,16256
  8004d0:	003fef06 	br	800490 <determinant+0x294>

008004d4 <main>:
// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
}

int main(){
  8004d4:	deffec04 	addi	sp,sp,-80
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  8004d8:	00907234 	movhi	r2,16840
  8004dc:	00d02834 	movhi	r3,16544
  8004e0:	d8800615 	stw	r2,24(sp)
  8004e4:	d8c00715 	stw	r3,28(sp)
  8004e8:	0090a034 	movhi	r2,17024
  8004ec:	00d04034 	movhi	r3,16640
  8004f0:	014fe034 	movhi	r5,16256
	clock_t exec_t1, exec_t2;

	alt_putstr("Hello from Nios II!\n");
  8004f4:	01002074 	movhi	r4,129
  8004f8:	2127be04 	addi	r4,r4,-24840
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  8004fc:	d8800915 	stw	r2,36(sp)
  800500:	d8c00a15 	stw	r3,40(sp)
  800504:	0090c434 	movhi	r2,17168
  800508:	00d05034 	movhi	r3,16704
// Based on i and j, and a float pointer, put the value at row i column j
void putAt(float *m, int i, int j, int dimension, float value){
	*(m + i*dimension + j) = value;
}

int main(){
  80050c:	dfc01315 	stw	ra,76(sp)
  800510:	dcc01215 	stw	r19,72(sp)
  800514:	dc801115 	stw	r18,68(sp)
  800518:	dc401015 	stw	r17,64(sp)
  80051c:	dc000f15 	stw	r16,60(sp)
	char buf[11];
	int i;
	float matrix[DIMENSION][DIMENSION] = {
			{25, 5, 1},
			{64, 8, 1},
			{144, 12, 1}};
  800520:	d8c00d15 	stw	r3,52(sp)
  800524:	d9400e15 	stw	r5,56(sp)
  800528:	d9400815 	stw	r5,32(sp)
  80052c:	d9400b15 	stw	r5,44(sp)
  800530:	d8800c15 	stw	r2,48(sp)
	clock_t exec_t1, exec_t2;

	alt_putstr("Hello from Nios II!\n");
  800534:	08073000 	call	807300 <alt_putstr>
	exec_t1 = times(NULL); // get system time before starting the process
  800538:	0009883a 	mov	r4,zero
  80053c:	08074840 	call	807484 <times>
  800540:	1027883a 	mov	r19,r2
  800544:	dc800604 	addi	r18,sp,24
  800548:	0021883a 	mov	r16,zero
  80054c:	0449c404 	movi	r17,10000



	for (i = 0; i < 10000; i++)
  800550:	84000044 	addi	r16,r16,1
	{
		det = determinant( (float *) matrix, DIMENSION);
  800554:	9009883a 	mov	r4,r18
  800558:	014000c4 	movi	r5,3
  80055c:	08001fc0 	call	8001fc <determinant>
	alt_putstr("Hello from Nios II!\n");
	exec_t1 = times(NULL); // get system time before starting the process



	for (i = 0; i < 10000; i++)
  800560:	847ffb1e 	bne	r16,r17,800550 <main+0x7c>
	{
		det = determinant( (float *) matrix, DIMENSION);

	}
	gcvt(det, 10, buffer);
  800564:	1009883a 	mov	r4,r2
  800568:	0800c3c0 	call	800c3c <__extendsfdf2>
  80056c:	dc4002c4 	addi	r17,sp,11
  800570:	880f883a 	mov	r7,r17
  800574:	180b883a 	mov	r5,r3
  800578:	01800284 	movi	r6,10
  80057c:	1009883a 	mov	r4,r2
  800580:	0801d440 	call	801d44 <gcvt>
	alt_putstr(buffer);
  800584:	8809883a 	mov	r4,r17
  800588:	08073000 	call	807300 <alt_putstr>
	alt_putstr("\n");
  80058c:	01002074 	movhi	r4,129
  800590:	2127c404 	addi	r4,r4,-24816
  800594:	08073000 	call	807300 <alt_putstr>
	exec_t2 = times(NULL); // get system time after finishing the process
  800598:	0009883a 	mov	r4,zero
  80059c:	08074840 	call	807484 <times>
	gcvt(((double)exec_t2-(double)exec_t1) / alt_ticks_per_second(), 10, buf);
  8005a0:	1009883a 	mov	r4,r2
  8005a4:	08014240 	call	801424 <__floatunsidf>
  8005a8:	9809883a 	mov	r4,r19
  8005ac:	1021883a 	mov	r16,r2
  8005b0:	1823883a 	mov	r17,r3
  8005b4:	08014240 	call	801424 <__floatunsidf>
  8005b8:	880b883a 	mov	r5,r17
  8005bc:	180f883a 	mov	r7,r3
  8005c0:	100d883a 	mov	r6,r2
  8005c4:	8009883a 	mov	r4,r16
  8005c8:	08010a00 	call	8010a0 <__subdf3>
  8005cc:	01402074 	movhi	r5,129
  8005d0:	29759604 	addi	r5,r5,-10664
  8005d4:	29000017 	ldw	r4,0(r5)
  8005d8:	1021883a 	mov	r16,r2
  8005dc:	1823883a 	mov	r17,r3
  8005e0:	08014240 	call	801424 <__floatunsidf>
  8005e4:	880b883a 	mov	r5,r17
  8005e8:	180f883a 	mov	r7,r3
  8005ec:	8009883a 	mov	r4,r16
  8005f0:	100d883a 	mov	r6,r2
  8005f4:	08011940 	call	801194 <__divdf3>
  8005f8:	180b883a 	mov	r5,r3
  8005fc:	01800284 	movi	r6,10
  800600:	d80f883a 	mov	r7,sp
  800604:	1009883a 	mov	r4,r2
  800608:	0801d440 	call	801d44 <gcvt>
	alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" seconds \n");
  80060c:	01002074 	movhi	r4,129
  800610:	2127c504 	addi	r4,r4,-24812
  800614:	08073000 	call	807300 <alt_putstr>
  800618:	d809883a 	mov	r4,sp
  80061c:	08073000 	call	807300 <alt_putstr>
  800620:	01002074 	movhi	r4,129
  800624:	2127c904 	addi	r4,r4,-24796
  800628:	08073000 	call	807300 <alt_putstr>
  80062c:	003fff06 	br	80062c <main+0x158>

00800630 <_fpadd_parts>:
  800630:	21c00017 	ldw	r7,0(r4)
  800634:	02000044 	movi	r8,1
  800638:	41c0332e 	bgeu	r8,r7,800708 <_fpadd_parts+0xd8>
  80063c:	28800017 	ldw	r2,0(r5)
  800640:	4080462e 	bgeu	r8,r2,80075c <_fpadd_parts+0x12c>
  800644:	00c00104 	movi	r3,4
  800648:	38c06b26 	beq	r7,r3,8007f8 <_fpadd_parts+0x1c8>
  80064c:	10c04326 	beq	r2,r3,80075c <_fpadd_parts+0x12c>
  800650:	00c00084 	movi	r3,2
  800654:	10c02e26 	beq	r2,r3,800710 <_fpadd_parts+0xe0>
  800658:	38c04026 	beq	r7,r3,80075c <_fpadd_parts+0x12c>
  80065c:	22800217 	ldw	r10,8(r4)
  800660:	28c00217 	ldw	r3,8(r5)
  800664:	23000317 	ldw	r12,12(r4)
  800668:	2a400317 	ldw	r9,12(r5)
  80066c:	50cfc83a 	sub	r7,r10,r3
  800670:	3817883a 	mov	r11,r7
  800674:	38004f16 	blt	r7,zero,8007b4 <_fpadd_parts+0x184>
  800678:	008007c4 	movi	r2,31
  80067c:	11c03316 	blt	r2,r7,80074c <_fpadd_parts+0x11c>
  800680:	02c0540e 	bge	zero,r11,8007d4 <_fpadd_parts+0x1a4>
  800684:	41c4983a 	sll	r2,r8,r7
  800688:	49c6d83a 	srl	r3,r9,r7
  80068c:	10bfffc4 	addi	r2,r2,-1
  800690:	4884703a 	and	r2,r9,r2
  800694:	1004c03a 	cmpne	r2,r2,zero
  800698:	1892b03a 	or	r9,r3,r2
  80069c:	20c00117 	ldw	r3,4(r4)
  8006a0:	28800117 	ldw	r2,4(r5)
  8006a4:	18803c26 	beq	r3,r2,800798 <_fpadd_parts+0x168>
  8006a8:	18002f26 	beq	r3,zero,800768 <_fpadd_parts+0x138>
  8006ac:	4b05c83a 	sub	r2,r9,r12
  8006b0:	10004216 	blt	r2,zero,8007bc <_fpadd_parts+0x18c>
  8006b4:	32800215 	stw	r10,8(r6)
  8006b8:	30800315 	stw	r2,12(r6)
  8006bc:	30000115 	stw	zero,4(r6)
  8006c0:	31000317 	ldw	r4,12(r6)
  8006c4:	01d00034 	movhi	r7,16384
  8006c8:	39ffff84 	addi	r7,r7,-2
  8006cc:	20bfffc4 	addi	r2,r4,-1
  8006d0:	2007883a 	mov	r3,r4
  8006d4:	38800836 	bltu	r7,r2,8006f8 <_fpadd_parts+0xc8>
  8006d8:	31400217 	ldw	r5,8(r6)
  8006dc:	18c9883a 	add	r4,r3,r3
  8006e0:	20bfffc4 	addi	r2,r4,-1
  8006e4:	297fffc4 	addi	r5,r5,-1
  8006e8:	2007883a 	mov	r3,r4
  8006ec:	38bffb2e 	bgeu	r7,r2,8006dc <_fpadd_parts+0xac>
  8006f0:	31400215 	stw	r5,8(r6)
  8006f4:	31000315 	stw	r4,12(r6)
  8006f8:	008000c4 	movi	r2,3
  8006fc:	30800015 	stw	r2,0(r6)
  800700:	20001b16 	blt	r4,zero,800770 <_fpadd_parts+0x140>
  800704:	3009883a 	mov	r4,r6
  800708:	2005883a 	mov	r2,r4
  80070c:	f800283a 	ret
  800710:	38fffd1e 	bne	r7,r3,800708 <_fpadd_parts+0xd8>
  800714:	31c00015 	stw	r7,0(r6)
  800718:	20800117 	ldw	r2,4(r4)
  80071c:	30800115 	stw	r2,4(r6)
  800720:	20c00217 	ldw	r3,8(r4)
  800724:	30c00215 	stw	r3,8(r6)
  800728:	20800317 	ldw	r2,12(r4)
  80072c:	30800315 	stw	r2,12(r6)
  800730:	20c00117 	ldw	r3,4(r4)
  800734:	28800117 	ldw	r2,4(r5)
  800738:	3009883a 	mov	r4,r6
  80073c:	1886703a 	and	r3,r3,r2
  800740:	2005883a 	mov	r2,r4
  800744:	30c00115 	stw	r3,4(r6)
  800748:	f800283a 	ret
  80074c:	1a801716 	blt	r3,r10,8007ac <_fpadd_parts+0x17c>
  800750:	1815883a 	mov	r10,r3
  800754:	0019883a 	mov	r12,zero
  800758:	003fd006 	br	80069c <_fpadd_parts+0x6c>
  80075c:	2809883a 	mov	r4,r5
  800760:	2005883a 	mov	r2,r4
  800764:	f800283a 	ret
  800768:	6245c83a 	sub	r2,r12,r9
  80076c:	003fd006 	br	8006b0 <_fpadd_parts+0x80>
  800770:	30800217 	ldw	r2,8(r6)
  800774:	2006d07a 	srli	r3,r4,1
  800778:	2100004c 	andi	r4,r4,1
  80077c:	10800044 	addi	r2,r2,1
  800780:	1906b03a 	or	r3,r3,r4
  800784:	3009883a 	mov	r4,r6
  800788:	30800215 	stw	r2,8(r6)
  80078c:	2005883a 	mov	r2,r4
  800790:	30c00315 	stw	r3,12(r6)
  800794:	f800283a 	ret
  800798:	4b09883a 	add	r4,r9,r12
  80079c:	30c00115 	stw	r3,4(r6)
  8007a0:	32800215 	stw	r10,8(r6)
  8007a4:	31000315 	stw	r4,12(r6)
  8007a8:	003fd306 	br	8006f8 <_fpadd_parts+0xc8>
  8007ac:	0013883a 	mov	r9,zero
  8007b0:	003fba06 	br	80069c <_fpadd_parts+0x6c>
  8007b4:	01cfc83a 	sub	r7,zero,r7
  8007b8:	003faf06 	br	800678 <_fpadd_parts+0x48>
  8007bc:	0089c83a 	sub	r4,zero,r2
  8007c0:	00800044 	movi	r2,1
  8007c4:	30800115 	stw	r2,4(r6)
  8007c8:	32800215 	stw	r10,8(r6)
  8007cc:	31000315 	stw	r4,12(r6)
  8007d0:	003fbb06 	br	8006c0 <_fpadd_parts+0x90>
  8007d4:	583fb126 	beq	r11,zero,80069c <_fpadd_parts+0x6c>
  8007d8:	41c4983a 	sll	r2,r8,r7
  8007dc:	61c6d83a 	srl	r3,r12,r7
  8007e0:	51d5883a 	add	r10,r10,r7
  8007e4:	10bfffc4 	addi	r2,r2,-1
  8007e8:	6084703a 	and	r2,r12,r2
  8007ec:	1004c03a 	cmpne	r2,r2,zero
  8007f0:	1898b03a 	or	r12,r3,r2
  8007f4:	003fa906 	br	80069c <_fpadd_parts+0x6c>
  8007f8:	11ffc31e 	bne	r2,r7,800708 <_fpadd_parts+0xd8>
  8007fc:	28c00117 	ldw	r3,4(r5)
  800800:	20800117 	ldw	r2,4(r4)
  800804:	10ffc026 	beq	r2,r3,800708 <_fpadd_parts+0xd8>
  800808:	01002074 	movhi	r4,129
  80080c:	2127cc04 	addi	r4,r4,-24784
  800810:	003fbd06 	br	800708 <_fpadd_parts+0xd8>

00800814 <__subsf3>:
  800814:	deffef04 	addi	sp,sp,-68
  800818:	dcc00f15 	stw	r19,60(sp)
  80081c:	dcc00204 	addi	r19,sp,8
  800820:	dc400e15 	stw	r17,56(sp)
  800824:	d9000015 	stw	r4,0(sp)
  800828:	d9400115 	stw	r5,4(sp)
  80082c:	d809883a 	mov	r4,sp
  800830:	980b883a 	mov	r5,r19
  800834:	dc400604 	addi	r17,sp,24
  800838:	dfc01015 	stw	ra,64(sp)
  80083c:	08018300 	call	801830 <__unpack_f>
  800840:	d9000104 	addi	r4,sp,4
  800844:	880b883a 	mov	r5,r17
  800848:	08018300 	call	801830 <__unpack_f>
  80084c:	d8800717 	ldw	r2,28(sp)
  800850:	9809883a 	mov	r4,r19
  800854:	880b883a 	mov	r5,r17
  800858:	d9800a04 	addi	r6,sp,40
  80085c:	1080005c 	xori	r2,r2,1
  800860:	d8800715 	stw	r2,28(sp)
  800864:	08006300 	call	800630 <_fpadd_parts>
  800868:	1009883a 	mov	r4,r2
  80086c:	08016d00 	call	8016d0 <__pack_f>
  800870:	dfc01017 	ldw	ra,64(sp)
  800874:	dcc00f17 	ldw	r19,60(sp)
  800878:	dc400e17 	ldw	r17,56(sp)
  80087c:	dec01104 	addi	sp,sp,68
  800880:	f800283a 	ret

00800884 <__addsf3>:
  800884:	deffef04 	addi	sp,sp,-68
  800888:	dcc00f15 	stw	r19,60(sp)
  80088c:	dcc00204 	addi	r19,sp,8
  800890:	dc400e15 	stw	r17,56(sp)
  800894:	d9000015 	stw	r4,0(sp)
  800898:	d9400115 	stw	r5,4(sp)
  80089c:	d809883a 	mov	r4,sp
  8008a0:	980b883a 	mov	r5,r19
  8008a4:	dc400604 	addi	r17,sp,24
  8008a8:	dfc01015 	stw	ra,64(sp)
  8008ac:	08018300 	call	801830 <__unpack_f>
  8008b0:	d9000104 	addi	r4,sp,4
  8008b4:	880b883a 	mov	r5,r17
  8008b8:	08018300 	call	801830 <__unpack_f>
  8008bc:	d9800a04 	addi	r6,sp,40
  8008c0:	9809883a 	mov	r4,r19
  8008c4:	880b883a 	mov	r5,r17
  8008c8:	08006300 	call	800630 <_fpadd_parts>
  8008cc:	1009883a 	mov	r4,r2
  8008d0:	08016d00 	call	8016d0 <__pack_f>
  8008d4:	dfc01017 	ldw	ra,64(sp)
  8008d8:	dcc00f17 	ldw	r19,60(sp)
  8008dc:	dc400e17 	ldw	r17,56(sp)
  8008e0:	dec01104 	addi	sp,sp,68
  8008e4:	f800283a 	ret

008008e8 <__mulsf3>:
  8008e8:	deffef04 	addi	sp,sp,-68
  8008ec:	dc400f15 	stw	r17,60(sp)
  8008f0:	dc400204 	addi	r17,sp,8
  8008f4:	dc000e15 	stw	r16,56(sp)
  8008f8:	d9000015 	stw	r4,0(sp)
  8008fc:	d9400115 	stw	r5,4(sp)
  800900:	d809883a 	mov	r4,sp
  800904:	880b883a 	mov	r5,r17
  800908:	dc000604 	addi	r16,sp,24
  80090c:	dfc01015 	stw	ra,64(sp)
  800910:	08018300 	call	801830 <__unpack_f>
  800914:	d9000104 	addi	r4,sp,4
  800918:	800b883a 	mov	r5,r16
  80091c:	08018300 	call	801830 <__unpack_f>
  800920:	d9000217 	ldw	r4,8(sp)
  800924:	00800044 	movi	r2,1
  800928:	01400104 	movi	r5,4
  80092c:	1100142e 	bgeu	r2,r4,800980 <__mulsf3+0x98>
  800930:	d8c00617 	ldw	r3,24(sp)
  800934:	10c0052e 	bgeu	r2,r3,80094c <__mulsf3+0x64>
  800938:	21400f26 	beq	r4,r5,800978 <__mulsf3+0x90>
  80093c:	19405d26 	beq	r3,r5,800ab4 <__mulsf3+0x1cc>
  800940:	00800084 	movi	r2,2
  800944:	20800e26 	beq	r4,r2,800980 <__mulsf3+0x98>
  800948:	1880181e 	bne	r3,r2,8009ac <__mulsf3+0xc4>
  80094c:	d8c00717 	ldw	r3,28(sp)
  800950:	d8800317 	ldw	r2,12(sp)
  800954:	8009883a 	mov	r4,r16
  800958:	10c4c03a 	cmpne	r2,r2,r3
  80095c:	d8800715 	stw	r2,28(sp)
  800960:	08016d00 	call	8016d0 <__pack_f>
  800964:	dfc01017 	ldw	ra,64(sp)
  800968:	dc400f17 	ldw	r17,60(sp)
  80096c:	dc000e17 	ldw	r16,56(sp)
  800970:	dec01104 	addi	sp,sp,68
  800974:	f800283a 	ret
  800978:	00800084 	movi	r2,2
  80097c:	18804f26 	beq	r3,r2,800abc <__mulsf3+0x1d4>
  800980:	d8800317 	ldw	r2,12(sp)
  800984:	d8c00717 	ldw	r3,28(sp)
  800988:	8809883a 	mov	r4,r17
  80098c:	10c4c03a 	cmpne	r2,r2,r3
  800990:	d8800315 	stw	r2,12(sp)
  800994:	08016d00 	call	8016d0 <__pack_f>
  800998:	dfc01017 	ldw	ra,64(sp)
  80099c:	dc400f17 	ldw	r17,60(sp)
  8009a0:	dc000e17 	ldw	r16,56(sp)
  8009a4:	dec01104 	addi	sp,sp,68
  8009a8:	f800283a 	ret
  8009ac:	d8800517 	ldw	r2,20(sp)
  8009b0:	da000917 	ldw	r8,36(sp)
  8009b4:	0013883a 	mov	r9,zero
  8009b8:	0007883a 	mov	r3,zero
  8009bc:	480f883a 	mov	r7,r9
  8009c0:	180b883a 	mov	r5,r3
  8009c4:	400d883a 	mov	r6,r8
  8009c8:	1009883a 	mov	r4,r2
  8009cc:	08015b80 	call	8015b8 <__muldi3>
  8009d0:	da800417 	ldw	r10,16(sp)
  8009d4:	d9800817 	ldw	r6,32(sp)
  8009d8:	da400317 	ldw	r9,12(sp)
  8009dc:	52800084 	addi	r10,r10,2
  8009e0:	3295883a 	add	r10,r6,r10
  8009e4:	d9800717 	ldw	r6,28(sp)
  8009e8:	180b883a 	mov	r5,r3
  8009ec:	180f883a 	mov	r7,r3
  8009f0:	4992c03a 	cmpne	r9,r9,r6
  8009f4:	da400b15 	stw	r9,44(sp)
  8009f8:	1007883a 	mov	r3,r2
  8009fc:	da800c15 	stw	r10,48(sp)
  800a00:	2800070e 	bge	r5,zero,800a20 <__mulsf3+0x138>
  800a04:	2880004c 	andi	r2,r5,1
  800a08:	1005003a 	cmpeq	r2,r2,zero
  800a0c:	500d883a 	mov	r6,r10
  800a10:	10001e26 	beq	r2,zero,800a8c <__mulsf3+0x1a4>
  800a14:	380ed07a 	srli	r7,r7,1
  800a18:	31800044 	addi	r6,r6,1
  800a1c:	d9800c15 	stw	r6,48(sp)
  800a20:	01100034 	movhi	r4,16384
  800a24:	213fffc4 	addi	r4,r4,-1
  800a28:	21c00b36 	bltu	r4,r7,800a58 <__mulsf3+0x170>
  800a2c:	d8800c17 	ldw	r2,48(sp)
  800a30:	00000206 	br	800a3c <__mulsf3+0x154>
  800a34:	18c7883a 	add	r3,r3,r3
  800a38:	21c00636 	bltu	r4,r7,800a54 <__mulsf3+0x16c>
  800a3c:	10bfffc4 	addi	r2,r2,-1
  800a40:	39cf883a 	add	r7,r7,r7
  800a44:	183ffb0e 	bge	r3,zero,800a34 <__mulsf3+0x14c>
  800a48:	39c00054 	ori	r7,r7,1
  800a4c:	18c7883a 	add	r3,r3,r3
  800a50:	21fffa2e 	bgeu	r4,r7,800a3c <__mulsf3+0x154>
  800a54:	d8800c15 	stw	r2,48(sp)
  800a58:	39001fcc 	andi	r4,r7,127
  800a5c:	00801004 	movi	r2,64
  800a60:	20800d26 	beq	r4,r2,800a98 <__mulsf3+0x1b0>
  800a64:	008000c4 	movi	r2,3
  800a68:	d9000a04 	addi	r4,sp,40
  800a6c:	d9c00d15 	stw	r7,52(sp)
  800a70:	d8800a15 	stw	r2,40(sp)
  800a74:	08016d00 	call	8016d0 <__pack_f>
  800a78:	dfc01017 	ldw	ra,64(sp)
  800a7c:	dc400f17 	ldw	r17,60(sp)
  800a80:	dc000e17 	ldw	r16,56(sp)
  800a84:	dec01104 	addi	sp,sp,68
  800a88:	f800283a 	ret
  800a8c:	1804d07a 	srli	r2,r3,1
  800a90:	10e00034 	orhi	r3,r2,32768
  800a94:	003fdf06 	br	800a14 <__mulsf3+0x12c>
  800a98:	3880200c 	andi	r2,r7,128
  800a9c:	103ff11e 	bne	r2,zero,800a64 <__mulsf3+0x17c>
  800aa0:	183ff026 	beq	r3,zero,800a64 <__mulsf3+0x17c>
  800aa4:	3907883a 	add	r3,r7,r4
  800aa8:	00bfe004 	movi	r2,-128
  800aac:	188e703a 	and	r7,r3,r2
  800ab0:	003fec06 	br	800a64 <__mulsf3+0x17c>
  800ab4:	00800084 	movi	r2,2
  800ab8:	20bfa41e 	bne	r4,r2,80094c <__mulsf3+0x64>
  800abc:	01002074 	movhi	r4,129
  800ac0:	2127cc04 	addi	r4,r4,-24784
  800ac4:	003fb306 	br	800994 <__mulsf3+0xac>

00800ac8 <__divsf3>:
  800ac8:	defff304 	addi	sp,sp,-52
  800acc:	dc400b15 	stw	r17,44(sp)
  800ad0:	dc400204 	addi	r17,sp,8
  800ad4:	dc000a15 	stw	r16,40(sp)
  800ad8:	d9000015 	stw	r4,0(sp)
  800adc:	d9400115 	stw	r5,4(sp)
  800ae0:	d809883a 	mov	r4,sp
  800ae4:	880b883a 	mov	r5,r17
  800ae8:	dc000604 	addi	r16,sp,24
  800aec:	dfc00c15 	stw	ra,48(sp)
  800af0:	08018300 	call	801830 <__unpack_f>
  800af4:	d9000104 	addi	r4,sp,4
  800af8:	800b883a 	mov	r5,r16
  800afc:	08018300 	call	801830 <__unpack_f>
  800b00:	d9000217 	ldw	r4,8(sp)
  800b04:	00800044 	movi	r2,1
  800b08:	01800104 	movi	r6,4
  800b0c:	11000a2e 	bgeu	r2,r4,800b38 <__divsf3+0x70>
  800b10:	d9400617 	ldw	r5,24(sp)
  800b14:	1140432e 	bgeu	r2,r5,800c24 <__divsf3+0x15c>
  800b18:	d8800317 	ldw	r2,12(sp)
  800b1c:	d8c00717 	ldw	r3,28(sp)
  800b20:	10c4f03a 	xor	r2,r2,r3
  800b24:	d8800315 	stw	r2,12(sp)
  800b28:	21800226 	beq	r4,r6,800b34 <__divsf3+0x6c>
  800b2c:	00800084 	movi	r2,2
  800b30:	2080101e 	bne	r4,r2,800b74 <__divsf3+0xac>
  800b34:	29000726 	beq	r5,r4,800b54 <__divsf3+0x8c>
  800b38:	8809883a 	mov	r4,r17
  800b3c:	08016d00 	call	8016d0 <__pack_f>
  800b40:	dfc00c17 	ldw	ra,48(sp)
  800b44:	dc400b17 	ldw	r17,44(sp)
  800b48:	dc000a17 	ldw	r16,40(sp)
  800b4c:	dec00d04 	addi	sp,sp,52
  800b50:	f800283a 	ret
  800b54:	01002074 	movhi	r4,129
  800b58:	2127cc04 	addi	r4,r4,-24784
  800b5c:	08016d00 	call	8016d0 <__pack_f>
  800b60:	dfc00c17 	ldw	ra,48(sp)
  800b64:	dc400b17 	ldw	r17,44(sp)
  800b68:	dc000a17 	ldw	r16,40(sp)
  800b6c:	dec00d04 	addi	sp,sp,52
  800b70:	f800283a 	ret
  800b74:	29802d26 	beq	r5,r6,800c2c <__divsf3+0x164>
  800b78:	28801a26 	beq	r5,r2,800be4 <__divsf3+0x11c>
  800b7c:	d8c00417 	ldw	r3,16(sp)
  800b80:	d8800817 	ldw	r2,32(sp)
  800b84:	d9000517 	ldw	r4,20(sp)
  800b88:	d9800917 	ldw	r6,36(sp)
  800b8c:	1885c83a 	sub	r2,r3,r2
  800b90:	d8800415 	stw	r2,16(sp)
  800b94:	2180032e 	bgeu	r4,r6,800ba4 <__divsf3+0xdc>
  800b98:	10bfffc4 	addi	r2,r2,-1
  800b9c:	d8800415 	stw	r2,16(sp)
  800ba0:	2109883a 	add	r4,r4,r4
  800ba4:	01500034 	movhi	r5,16384
  800ba8:	0007883a 	mov	r3,zero
  800bac:	0005883a 	mov	r2,zero
  800bb0:	01c007c4 	movi	r7,31
  800bb4:	10800044 	addi	r2,r2,1
  800bb8:	21800236 	bltu	r4,r6,800bc4 <__divsf3+0xfc>
  800bbc:	1946b03a 	or	r3,r3,r5
  800bc0:	2189c83a 	sub	r4,r4,r6
  800bc4:	280ad07a 	srli	r5,r5,1
  800bc8:	2109883a 	add	r4,r4,r4
  800bcc:	11fff91e 	bne	r2,r7,800bb4 <__divsf3+0xec>
  800bd0:	19401fcc 	andi	r5,r3,127
  800bd4:	00801004 	movi	r2,64
  800bd8:	28800a26 	beq	r5,r2,800c04 <__divsf3+0x13c>
  800bdc:	d8c00515 	stw	r3,20(sp)
  800be0:	003fd506 	br	800b38 <__divsf3+0x70>
  800be4:	8809883a 	mov	r4,r17
  800be8:	d9800215 	stw	r6,8(sp)
  800bec:	08016d00 	call	8016d0 <__pack_f>
  800bf0:	dfc00c17 	ldw	ra,48(sp)
  800bf4:	dc400b17 	ldw	r17,44(sp)
  800bf8:	dc000a17 	ldw	r16,40(sp)
  800bfc:	dec00d04 	addi	sp,sp,52
  800c00:	f800283a 	ret
  800c04:	1880200c 	andi	r2,r3,128
  800c08:	103ff41e 	bne	r2,zero,800bdc <__divsf3+0x114>
  800c0c:	203ff326 	beq	r4,zero,800bdc <__divsf3+0x114>
  800c10:	1947883a 	add	r3,r3,r5
  800c14:	00bfe004 	movi	r2,-128
  800c18:	1886703a 	and	r3,r3,r2
  800c1c:	d8c00515 	stw	r3,20(sp)
  800c20:	003fc506 	br	800b38 <__divsf3+0x70>
  800c24:	8009883a 	mov	r4,r16
  800c28:	003fc406 	br	800b3c <__divsf3+0x74>
  800c2c:	8809883a 	mov	r4,r17
  800c30:	d8000515 	stw	zero,20(sp)
  800c34:	d8000415 	stw	zero,16(sp)
  800c38:	003fc006 	br	800b3c <__divsf3+0x74>

00800c3c <__extendsfdf2>:
  800c3c:	defff904 	addi	sp,sp,-28
  800c40:	d9000115 	stw	r4,4(sp)
  800c44:	d9400204 	addi	r5,sp,8
  800c48:	d9000104 	addi	r4,sp,4
  800c4c:	dfc00615 	stw	ra,24(sp)
  800c50:	08018300 	call	801830 <__unpack_f>
  800c54:	d9c00517 	ldw	r7,20(sp)
  800c58:	0011883a 	mov	r8,zero
  800c5c:	400697ba 	slli	r3,r8,30
  800c60:	3812d0ba 	srli	r9,r7,2
  800c64:	380497ba 	slli	r2,r7,30
  800c68:	d9000217 	ldw	r4,8(sp)
  800c6c:	d9400317 	ldw	r5,12(sp)
  800c70:	d9800417 	ldw	r6,16(sp)
  800c74:	48c6b03a 	or	r3,r9,r3
  800c78:	100f883a 	mov	r7,r2
  800c7c:	d8c00015 	stw	r3,0(sp)
  800c80:	08013ec0 	call	8013ec <__make_dp>
  800c84:	dfc00617 	ldw	ra,24(sp)
  800c88:	dec00704 	addi	sp,sp,28
  800c8c:	f800283a 	ret

00800c90 <_fpadd_parts>:
  800c90:	defff804 	addi	sp,sp,-32
  800c94:	dcc00315 	stw	r19,12(sp)
  800c98:	2027883a 	mov	r19,r4
  800c9c:	21000017 	ldw	r4,0(r4)
  800ca0:	00c00044 	movi	r3,1
  800ca4:	dd400515 	stw	r21,20(sp)
  800ca8:	dd000415 	stw	r20,16(sp)
  800cac:	ddc00715 	stw	r23,28(sp)
  800cb0:	dd800615 	stw	r22,24(sp)
  800cb4:	dc800215 	stw	r18,8(sp)
  800cb8:	dc400115 	stw	r17,4(sp)
  800cbc:	dc000015 	stw	r16,0(sp)
  800cc0:	282b883a 	mov	r21,r5
  800cc4:	3029883a 	mov	r20,r6
  800cc8:	1900632e 	bgeu	r3,r4,800e58 <_fpadd_parts+0x1c8>
  800ccc:	28800017 	ldw	r2,0(r5)
  800cd0:	1880812e 	bgeu	r3,r2,800ed8 <_fpadd_parts+0x248>
  800cd4:	00c00104 	movi	r3,4
  800cd8:	20c0dc26 	beq	r4,r3,80104c <_fpadd_parts+0x3bc>
  800cdc:	10c07e26 	beq	r2,r3,800ed8 <_fpadd_parts+0x248>
  800ce0:	00c00084 	movi	r3,2
  800ce4:	10c06726 	beq	r2,r3,800e84 <_fpadd_parts+0x1f4>
  800ce8:	20c07b26 	beq	r4,r3,800ed8 <_fpadd_parts+0x248>
  800cec:	9dc00217 	ldw	r23,8(r19)
  800cf0:	28c00217 	ldw	r3,8(r5)
  800cf4:	9c400317 	ldw	r17,12(r19)
  800cf8:	2bc00317 	ldw	r15,12(r5)
  800cfc:	b8cdc83a 	sub	r6,r23,r3
  800d00:	9c800417 	ldw	r18,16(r19)
  800d04:	2c000417 	ldw	r16,16(r5)
  800d08:	3009883a 	mov	r4,r6
  800d0c:	30009716 	blt	r6,zero,800f6c <_fpadd_parts+0x2dc>
  800d10:	00800fc4 	movi	r2,63
  800d14:	11806b16 	blt	r2,r6,800ec4 <_fpadd_parts+0x234>
  800d18:	0100a40e 	bge	zero,r4,800fac <_fpadd_parts+0x31c>
  800d1c:	35bff804 	addi	r22,r6,-32
  800d20:	b000bc16 	blt	r22,zero,801014 <_fpadd_parts+0x384>
  800d24:	8596d83a 	srl	r11,r16,r22
  800d28:	0019883a 	mov	r12,zero
  800d2c:	0013883a 	mov	r9,zero
  800d30:	01000044 	movi	r4,1
  800d34:	0015883a 	mov	r10,zero
  800d38:	b000be16 	blt	r22,zero,801034 <_fpadd_parts+0x3a4>
  800d3c:	2590983a 	sll	r8,r4,r22
  800d40:	000f883a 	mov	r7,zero
  800d44:	00bfffc4 	movi	r2,-1
  800d48:	3889883a 	add	r4,r7,r2
  800d4c:	408b883a 	add	r5,r8,r2
  800d50:	21cd803a 	cmpltu	r6,r4,r7
  800d54:	314b883a 	add	r5,r6,r5
  800d58:	7904703a 	and	r2,r15,r4
  800d5c:	8146703a 	and	r3,r16,r5
  800d60:	10c4b03a 	or	r2,r2,r3
  800d64:	10000226 	beq	r2,zero,800d70 <_fpadd_parts+0xe0>
  800d68:	02400044 	movi	r9,1
  800d6c:	0015883a 	mov	r10,zero
  800d70:	5a5eb03a 	or	r15,r11,r9
  800d74:	62a0b03a 	or	r16,r12,r10
  800d78:	99400117 	ldw	r5,4(r19)
  800d7c:	a8800117 	ldw	r2,4(r21)
  800d80:	28806e26 	beq	r5,r2,800f3c <_fpadd_parts+0x2ac>
  800d84:	28006626 	beq	r5,zero,800f20 <_fpadd_parts+0x290>
  800d88:	7c45c83a 	sub	r2,r15,r17
  800d8c:	7889803a 	cmpltu	r4,r15,r2
  800d90:	8487c83a 	sub	r3,r16,r18
  800d94:	1909c83a 	sub	r4,r3,r4
  800d98:	100d883a 	mov	r6,r2
  800d9c:	200f883a 	mov	r7,r4
  800da0:	38007716 	blt	r7,zero,800f80 <_fpadd_parts+0x2f0>
  800da4:	a5c00215 	stw	r23,8(r20)
  800da8:	a1c00415 	stw	r7,16(r20)
  800dac:	a0000115 	stw	zero,4(r20)
  800db0:	a1800315 	stw	r6,12(r20)
  800db4:	a2000317 	ldw	r8,12(r20)
  800db8:	a2400417 	ldw	r9,16(r20)
  800dbc:	00bfffc4 	movi	r2,-1
  800dc0:	408b883a 	add	r5,r8,r2
  800dc4:	2a09803a 	cmpltu	r4,r5,r8
  800dc8:	488d883a 	add	r6,r9,r2
  800dcc:	01c40034 	movhi	r7,4096
  800dd0:	39ffffc4 	addi	r7,r7,-1
  800dd4:	218d883a 	add	r6,r4,r6
  800dd8:	39801736 	bltu	r7,r6,800e38 <_fpadd_parts+0x1a8>
  800ddc:	31c06526 	beq	r6,r7,800f74 <_fpadd_parts+0x2e4>
  800de0:	a3000217 	ldw	r12,8(r20)
  800de4:	4209883a 	add	r4,r8,r8
  800de8:	00bfffc4 	movi	r2,-1
  800dec:	220f803a 	cmpltu	r7,r4,r8
  800df0:	4a4b883a 	add	r5,r9,r9
  800df4:	394f883a 	add	r7,r7,r5
  800df8:	2095883a 	add	r10,r4,r2
  800dfc:	3897883a 	add	r11,r7,r2
  800e00:	510d803a 	cmpltu	r6,r10,r4
  800e04:	6099883a 	add	r12,r12,r2
  800e08:	32d7883a 	add	r11,r6,r11
  800e0c:	00840034 	movhi	r2,4096
  800e10:	10bfffc4 	addi	r2,r2,-1
  800e14:	2011883a 	mov	r8,r4
  800e18:	3813883a 	mov	r9,r7
  800e1c:	a1000315 	stw	r4,12(r20)
  800e20:	a1c00415 	stw	r7,16(r20)
  800e24:	a3000215 	stw	r12,8(r20)
  800e28:	12c00336 	bltu	r2,r11,800e38 <_fpadd_parts+0x1a8>
  800e2c:	58bfed1e 	bne	r11,r2,800de4 <_fpadd_parts+0x154>
  800e30:	00bfff84 	movi	r2,-2
  800e34:	12bfeb2e 	bgeu	r2,r10,800de4 <_fpadd_parts+0x154>
  800e38:	a2800417 	ldw	r10,16(r20)
  800e3c:	008000c4 	movi	r2,3
  800e40:	00c80034 	movhi	r3,8192
  800e44:	18ffffc4 	addi	r3,r3,-1
  800e48:	a2400317 	ldw	r9,12(r20)
  800e4c:	a0800015 	stw	r2,0(r20)
  800e50:	1a802336 	bltu	r3,r10,800ee0 <_fpadd_parts+0x250>
  800e54:	a027883a 	mov	r19,r20
  800e58:	9805883a 	mov	r2,r19
  800e5c:	ddc00717 	ldw	r23,28(sp)
  800e60:	dd800617 	ldw	r22,24(sp)
  800e64:	dd400517 	ldw	r21,20(sp)
  800e68:	dd000417 	ldw	r20,16(sp)
  800e6c:	dcc00317 	ldw	r19,12(sp)
  800e70:	dc800217 	ldw	r18,8(sp)
  800e74:	dc400117 	ldw	r17,4(sp)
  800e78:	dc000017 	ldw	r16,0(sp)
  800e7c:	dec00804 	addi	sp,sp,32
  800e80:	f800283a 	ret
  800e84:	20fff41e 	bne	r4,r3,800e58 <_fpadd_parts+0x1c8>
  800e88:	31000015 	stw	r4,0(r6)
  800e8c:	98800117 	ldw	r2,4(r19)
  800e90:	30800115 	stw	r2,4(r6)
  800e94:	98c00217 	ldw	r3,8(r19)
  800e98:	30c00215 	stw	r3,8(r6)
  800e9c:	98800317 	ldw	r2,12(r19)
  800ea0:	30800315 	stw	r2,12(r6)
  800ea4:	98c00417 	ldw	r3,16(r19)
  800ea8:	30c00415 	stw	r3,16(r6)
  800eac:	98800117 	ldw	r2,4(r19)
  800eb0:	28c00117 	ldw	r3,4(r5)
  800eb4:	3027883a 	mov	r19,r6
  800eb8:	10c4703a 	and	r2,r2,r3
  800ebc:	30800115 	stw	r2,4(r6)
  800ec0:	003fe506 	br	800e58 <_fpadd_parts+0x1c8>
  800ec4:	1dc02616 	blt	r3,r23,800f60 <_fpadd_parts+0x2d0>
  800ec8:	0023883a 	mov	r17,zero
  800ecc:	182f883a 	mov	r23,r3
  800ed0:	0025883a 	mov	r18,zero
  800ed4:	003fa806 	br	800d78 <_fpadd_parts+0xe8>
  800ed8:	a827883a 	mov	r19,r21
  800edc:	003fde06 	br	800e58 <_fpadd_parts+0x1c8>
  800ee0:	01800044 	movi	r6,1
  800ee4:	500497fa 	slli	r2,r10,31
  800ee8:	4808d07a 	srli	r4,r9,1
  800eec:	518ad83a 	srl	r5,r10,r6
  800ef0:	a2000217 	ldw	r8,8(r20)
  800ef4:	1108b03a 	or	r4,r2,r4
  800ef8:	0007883a 	mov	r3,zero
  800efc:	4984703a 	and	r2,r9,r6
  800f00:	208cb03a 	or	r6,r4,r2
  800f04:	28ceb03a 	or	r7,r5,r3
  800f08:	42000044 	addi	r8,r8,1
  800f0c:	a027883a 	mov	r19,r20
  800f10:	a1c00415 	stw	r7,16(r20)
  800f14:	a2000215 	stw	r8,8(r20)
  800f18:	a1800315 	stw	r6,12(r20)
  800f1c:	003fce06 	br	800e58 <_fpadd_parts+0x1c8>
  800f20:	8bc5c83a 	sub	r2,r17,r15
  800f24:	8889803a 	cmpltu	r4,r17,r2
  800f28:	9407c83a 	sub	r3,r18,r16
  800f2c:	1909c83a 	sub	r4,r3,r4
  800f30:	100d883a 	mov	r6,r2
  800f34:	200f883a 	mov	r7,r4
  800f38:	003f9906 	br	800da0 <_fpadd_parts+0x110>
  800f3c:	7c45883a 	add	r2,r15,r17
  800f40:	13c9803a 	cmpltu	r4,r2,r15
  800f44:	8487883a 	add	r3,r16,r18
  800f48:	20c9883a 	add	r4,r4,r3
  800f4c:	a1400115 	stw	r5,4(r20)
  800f50:	a5c00215 	stw	r23,8(r20)
  800f54:	a0800315 	stw	r2,12(r20)
  800f58:	a1000415 	stw	r4,16(r20)
  800f5c:	003fb606 	br	800e38 <_fpadd_parts+0x1a8>
  800f60:	001f883a 	mov	r15,zero
  800f64:	0021883a 	mov	r16,zero
  800f68:	003f8306 	br	800d78 <_fpadd_parts+0xe8>
  800f6c:	018dc83a 	sub	r6,zero,r6
  800f70:	003f6706 	br	800d10 <_fpadd_parts+0x80>
  800f74:	00bfff84 	movi	r2,-2
  800f78:	117faf36 	bltu	r2,r5,800e38 <_fpadd_parts+0x1a8>
  800f7c:	003f9806 	br	800de0 <_fpadd_parts+0x150>
  800f80:	0005883a 	mov	r2,zero
  800f84:	1189c83a 	sub	r4,r2,r6
  800f88:	1105803a 	cmpltu	r2,r2,r4
  800f8c:	01cbc83a 	sub	r5,zero,r7
  800f90:	2885c83a 	sub	r2,r5,r2
  800f94:	01800044 	movi	r6,1
  800f98:	a1800115 	stw	r6,4(r20)
  800f9c:	a5c00215 	stw	r23,8(r20)
  800fa0:	a1000315 	stw	r4,12(r20)
  800fa4:	a0800415 	stw	r2,16(r20)
  800fa8:	003f8206 	br	800db4 <_fpadd_parts+0x124>
  800fac:	203f7226 	beq	r4,zero,800d78 <_fpadd_parts+0xe8>
  800fb0:	35bff804 	addi	r22,r6,-32
  800fb4:	b9af883a 	add	r23,r23,r6
  800fb8:	b0003116 	blt	r22,zero,801080 <_fpadd_parts+0x3f0>
  800fbc:	959ad83a 	srl	r13,r18,r22
  800fc0:	001d883a 	mov	r14,zero
  800fc4:	000f883a 	mov	r7,zero
  800fc8:	01000044 	movi	r4,1
  800fcc:	0011883a 	mov	r8,zero
  800fd0:	b0002516 	blt	r22,zero,801068 <_fpadd_parts+0x3d8>
  800fd4:	2594983a 	sll	r10,r4,r22
  800fd8:	0013883a 	mov	r9,zero
  800fdc:	00bfffc4 	movi	r2,-1
  800fe0:	4889883a 	add	r4,r9,r2
  800fe4:	508b883a 	add	r5,r10,r2
  800fe8:	224d803a 	cmpltu	r6,r4,r9
  800fec:	314b883a 	add	r5,r6,r5
  800ff0:	8904703a 	and	r2,r17,r4
  800ff4:	9146703a 	and	r3,r18,r5
  800ff8:	10c4b03a 	or	r2,r2,r3
  800ffc:	10000226 	beq	r2,zero,801008 <_fpadd_parts+0x378>
  801000:	01c00044 	movi	r7,1
  801004:	0011883a 	mov	r8,zero
  801008:	69e2b03a 	or	r17,r13,r7
  80100c:	7224b03a 	or	r18,r14,r8
  801010:	003f5906 	br	800d78 <_fpadd_parts+0xe8>
  801014:	8407883a 	add	r3,r16,r16
  801018:	008007c4 	movi	r2,31
  80101c:	1185c83a 	sub	r2,r2,r6
  801020:	1886983a 	sll	r3,r3,r2
  801024:	7996d83a 	srl	r11,r15,r6
  801028:	8198d83a 	srl	r12,r16,r6
  80102c:	1ad6b03a 	or	r11,r3,r11
  801030:	003f3e06 	br	800d2c <_fpadd_parts+0x9c>
  801034:	2006d07a 	srli	r3,r4,1
  801038:	008007c4 	movi	r2,31
  80103c:	1185c83a 	sub	r2,r2,r6
  801040:	1890d83a 	srl	r8,r3,r2
  801044:	218e983a 	sll	r7,r4,r6
  801048:	003f3e06 	br	800d44 <_fpadd_parts+0xb4>
  80104c:	113f821e 	bne	r2,r4,800e58 <_fpadd_parts+0x1c8>
  801050:	28c00117 	ldw	r3,4(r5)
  801054:	98800117 	ldw	r2,4(r19)
  801058:	10ff7f26 	beq	r2,r3,800e58 <_fpadd_parts+0x1c8>
  80105c:	04c02074 	movhi	r19,129
  801060:	9ce7d004 	addi	r19,r19,-24768
  801064:	003f7c06 	br	800e58 <_fpadd_parts+0x1c8>
  801068:	2006d07a 	srli	r3,r4,1
  80106c:	008007c4 	movi	r2,31
  801070:	1185c83a 	sub	r2,r2,r6
  801074:	1894d83a 	srl	r10,r3,r2
  801078:	2192983a 	sll	r9,r4,r6
  80107c:	003fd706 	br	800fdc <_fpadd_parts+0x34c>
  801080:	9487883a 	add	r3,r18,r18
  801084:	008007c4 	movi	r2,31
  801088:	1185c83a 	sub	r2,r2,r6
  80108c:	1886983a 	sll	r3,r3,r2
  801090:	899ad83a 	srl	r13,r17,r6
  801094:	919cd83a 	srl	r14,r18,r6
  801098:	1b5ab03a 	or	r13,r3,r13
  80109c:	003fc906 	br	800fc4 <_fpadd_parts+0x334>

008010a0 <__subdf3>:
  8010a0:	deffea04 	addi	sp,sp,-88
  8010a4:	dcc01415 	stw	r19,80(sp)
  8010a8:	dcc00404 	addi	r19,sp,16
  8010ac:	2011883a 	mov	r8,r4
  8010b0:	2813883a 	mov	r9,r5
  8010b4:	dc401315 	stw	r17,76(sp)
  8010b8:	d809883a 	mov	r4,sp
  8010bc:	980b883a 	mov	r5,r19
  8010c0:	dc400904 	addi	r17,sp,36
  8010c4:	dfc01515 	stw	ra,84(sp)
  8010c8:	da400115 	stw	r9,4(sp)
  8010cc:	d9c00315 	stw	r7,12(sp)
  8010d0:	da000015 	stw	r8,0(sp)
  8010d4:	d9800215 	stw	r6,8(sp)
  8010d8:	0801c0c0 	call	801c0c <__unpack_d>
  8010dc:	d9000204 	addi	r4,sp,8
  8010e0:	880b883a 	mov	r5,r17
  8010e4:	0801c0c0 	call	801c0c <__unpack_d>
  8010e8:	d8800a17 	ldw	r2,40(sp)
  8010ec:	880b883a 	mov	r5,r17
  8010f0:	9809883a 	mov	r4,r19
  8010f4:	d9800e04 	addi	r6,sp,56
  8010f8:	1080005c 	xori	r2,r2,1
  8010fc:	d8800a15 	stw	r2,40(sp)
  801100:	0800c900 	call	800c90 <_fpadd_parts>
  801104:	1009883a 	mov	r4,r2
  801108:	08018f80 	call	8018f8 <__pack_d>
  80110c:	dfc01517 	ldw	ra,84(sp)
  801110:	dcc01417 	ldw	r19,80(sp)
  801114:	dc401317 	ldw	r17,76(sp)
  801118:	dec01604 	addi	sp,sp,88
  80111c:	f800283a 	ret

00801120 <__adddf3>:
  801120:	deffea04 	addi	sp,sp,-88
  801124:	dcc01415 	stw	r19,80(sp)
  801128:	dcc00404 	addi	r19,sp,16
  80112c:	2011883a 	mov	r8,r4
  801130:	2813883a 	mov	r9,r5
  801134:	dc401315 	stw	r17,76(sp)
  801138:	d809883a 	mov	r4,sp
  80113c:	980b883a 	mov	r5,r19
  801140:	dc400904 	addi	r17,sp,36
  801144:	dfc01515 	stw	ra,84(sp)
  801148:	da400115 	stw	r9,4(sp)
  80114c:	d9c00315 	stw	r7,12(sp)
  801150:	da000015 	stw	r8,0(sp)
  801154:	d9800215 	stw	r6,8(sp)
  801158:	0801c0c0 	call	801c0c <__unpack_d>
  80115c:	d9000204 	addi	r4,sp,8
  801160:	880b883a 	mov	r5,r17
  801164:	0801c0c0 	call	801c0c <__unpack_d>
  801168:	d9800e04 	addi	r6,sp,56
  80116c:	9809883a 	mov	r4,r19
  801170:	880b883a 	mov	r5,r17
  801174:	0800c900 	call	800c90 <_fpadd_parts>
  801178:	1009883a 	mov	r4,r2
  80117c:	08018f80 	call	8018f8 <__pack_d>
  801180:	dfc01517 	ldw	ra,84(sp)
  801184:	dcc01417 	ldw	r19,80(sp)
  801188:	dc401317 	ldw	r17,76(sp)
  80118c:	dec01604 	addi	sp,sp,88
  801190:	f800283a 	ret

00801194 <__divdf3>:
  801194:	deffed04 	addi	sp,sp,-76
  801198:	dcc01115 	stw	r19,68(sp)
  80119c:	dcc00404 	addi	r19,sp,16
  8011a0:	2011883a 	mov	r8,r4
  8011a4:	2813883a 	mov	r9,r5
  8011a8:	dc000e15 	stw	r16,56(sp)
  8011ac:	d809883a 	mov	r4,sp
  8011b0:	980b883a 	mov	r5,r19
  8011b4:	dc000904 	addi	r16,sp,36
  8011b8:	dfc01215 	stw	ra,72(sp)
  8011bc:	da400115 	stw	r9,4(sp)
  8011c0:	d9c00315 	stw	r7,12(sp)
  8011c4:	da000015 	stw	r8,0(sp)
  8011c8:	d9800215 	stw	r6,8(sp)
  8011cc:	dc801015 	stw	r18,64(sp)
  8011d0:	dc400f15 	stw	r17,60(sp)
  8011d4:	0801c0c0 	call	801c0c <__unpack_d>
  8011d8:	d9000204 	addi	r4,sp,8
  8011dc:	800b883a 	mov	r5,r16
  8011e0:	0801c0c0 	call	801c0c <__unpack_d>
  8011e4:	d9000417 	ldw	r4,16(sp)
  8011e8:	00800044 	movi	r2,1
  8011ec:	11000b2e 	bgeu	r2,r4,80121c <__divdf3+0x88>
  8011f0:	d9400917 	ldw	r5,36(sp)
  8011f4:	1140762e 	bgeu	r2,r5,8013d0 <__divdf3+0x23c>
  8011f8:	d8800517 	ldw	r2,20(sp)
  8011fc:	d8c00a17 	ldw	r3,40(sp)
  801200:	01800104 	movi	r6,4
  801204:	10c4f03a 	xor	r2,r2,r3
  801208:	d8800515 	stw	r2,20(sp)
  80120c:	21800226 	beq	r4,r6,801218 <__divdf3+0x84>
  801210:	00800084 	movi	r2,2
  801214:	2080141e 	bne	r4,r2,801268 <__divdf3+0xd4>
  801218:	29000926 	beq	r5,r4,801240 <__divdf3+0xac>
  80121c:	9809883a 	mov	r4,r19
  801220:	08018f80 	call	8018f8 <__pack_d>
  801224:	dfc01217 	ldw	ra,72(sp)
  801228:	dcc01117 	ldw	r19,68(sp)
  80122c:	dc801017 	ldw	r18,64(sp)
  801230:	dc400f17 	ldw	r17,60(sp)
  801234:	dc000e17 	ldw	r16,56(sp)
  801238:	dec01304 	addi	sp,sp,76
  80123c:	f800283a 	ret
  801240:	01002074 	movhi	r4,129
  801244:	2127d004 	addi	r4,r4,-24768
  801248:	08018f80 	call	8018f8 <__pack_d>
  80124c:	dfc01217 	ldw	ra,72(sp)
  801250:	dcc01117 	ldw	r19,68(sp)
  801254:	dc801017 	ldw	r18,64(sp)
  801258:	dc400f17 	ldw	r17,60(sp)
  80125c:	dc000e17 	ldw	r16,56(sp)
  801260:	dec01304 	addi	sp,sp,76
  801264:	f800283a 	ret
  801268:	29805b26 	beq	r5,r6,8013d8 <__divdf3+0x244>
  80126c:	28802d26 	beq	r5,r2,801324 <__divdf3+0x190>
  801270:	d8c00617 	ldw	r3,24(sp)
  801274:	d8800b17 	ldw	r2,44(sp)
  801278:	d9c00817 	ldw	r7,32(sp)
  80127c:	dc400d17 	ldw	r17,52(sp)
  801280:	188bc83a 	sub	r5,r3,r2
  801284:	d9800717 	ldw	r6,28(sp)
  801288:	dc000c17 	ldw	r16,48(sp)
  80128c:	d9400615 	stw	r5,24(sp)
  801290:	3c403836 	bltu	r7,r17,801374 <__divdf3+0x1e0>
  801294:	89c03626 	beq	r17,r7,801370 <__divdf3+0x1dc>
  801298:	0015883a 	mov	r10,zero
  80129c:	001d883a 	mov	r14,zero
  8012a0:	02c40034 	movhi	r11,4096
  8012a4:	001f883a 	mov	r15,zero
  8012a8:	003f883a 	mov	ra,zero
  8012ac:	04800f44 	movi	r18,61
  8012b0:	00000f06 	br	8012f0 <__divdf3+0x15c>
  8012b4:	601d883a 	mov	r14,r12
  8012b8:	681f883a 	mov	r15,r13
  8012bc:	400d883a 	mov	r6,r8
  8012c0:	100f883a 	mov	r7,r2
  8012c4:	3191883a 	add	r8,r6,r6
  8012c8:	5808d07a 	srli	r4,r11,1
  8012cc:	4185803a 	cmpltu	r2,r8,r6
  8012d0:	39d3883a 	add	r9,r7,r7
  8012d4:	28c6b03a 	or	r3,r5,r3
  8012d8:	1245883a 	add	r2,r2,r9
  8012dc:	1815883a 	mov	r10,r3
  8012e0:	2017883a 	mov	r11,r4
  8012e4:	400d883a 	mov	r6,r8
  8012e8:	100f883a 	mov	r7,r2
  8012ec:	fc801726 	beq	ra,r18,80134c <__divdf3+0x1b8>
  8012f0:	580a97fa 	slli	r5,r11,31
  8012f4:	5006d07a 	srli	r3,r10,1
  8012f8:	ffc00044 	addi	ra,ra,1
  8012fc:	3c7ff136 	bltu	r7,r17,8012c4 <__divdf3+0x130>
  801300:	3411c83a 	sub	r8,r6,r16
  801304:	3205803a 	cmpltu	r2,r6,r8
  801308:	3c53c83a 	sub	r9,r7,r17
  80130c:	7298b03a 	or	r12,r14,r10
  801310:	7adab03a 	or	r13,r15,r11
  801314:	4885c83a 	sub	r2,r9,r2
  801318:	89ffe61e 	bne	r17,r7,8012b4 <__divdf3+0x120>
  80131c:	343fe936 	bltu	r6,r16,8012c4 <__divdf3+0x130>
  801320:	003fe406 	br	8012b4 <__divdf3+0x120>
  801324:	9809883a 	mov	r4,r19
  801328:	d9800415 	stw	r6,16(sp)
  80132c:	08018f80 	call	8018f8 <__pack_d>
  801330:	dfc01217 	ldw	ra,72(sp)
  801334:	dcc01117 	ldw	r19,68(sp)
  801338:	dc801017 	ldw	r18,64(sp)
  80133c:	dc400f17 	ldw	r17,60(sp)
  801340:	dc000e17 	ldw	r16,56(sp)
  801344:	dec01304 	addi	sp,sp,76
  801348:	f800283a 	ret
  80134c:	00803fc4 	movi	r2,255
  801350:	7090703a 	and	r8,r14,r2
  801354:	00802004 	movi	r2,128
  801358:	0007883a 	mov	r3,zero
  80135c:	0013883a 	mov	r9,zero
  801360:	40800d26 	beq	r8,r2,801398 <__divdf3+0x204>
  801364:	dbc00815 	stw	r15,32(sp)
  801368:	db800715 	stw	r14,28(sp)
  80136c:	003fab06 	br	80121c <__divdf3+0x88>
  801370:	343fc92e 	bgeu	r6,r16,801298 <__divdf3+0x104>
  801374:	3185883a 	add	r2,r6,r6
  801378:	1189803a 	cmpltu	r4,r2,r6
  80137c:	39c7883a 	add	r3,r7,r7
  801380:	20c9883a 	add	r4,r4,r3
  801384:	297fffc4 	addi	r5,r5,-1
  801388:	100d883a 	mov	r6,r2
  80138c:	200f883a 	mov	r7,r4
  801390:	d9400615 	stw	r5,24(sp)
  801394:	003fc006 	br	801298 <__divdf3+0x104>
  801398:	483ff21e 	bne	r9,zero,801364 <__divdf3+0x1d0>
  80139c:	01004004 	movi	r4,256
  8013a0:	7104703a 	and	r2,r14,r4
  8013a4:	10c4b03a 	or	r2,r2,r3
  8013a8:	103fee1e 	bne	r2,zero,801364 <__divdf3+0x1d0>
  8013ac:	31c4b03a 	or	r2,r6,r7
  8013b0:	103fec26 	beq	r2,zero,801364 <__divdf3+0x1d0>
  8013b4:	7205883a 	add	r2,r14,r8
  8013b8:	1391803a 	cmpltu	r8,r2,r14
  8013bc:	43d1883a 	add	r8,r8,r15
  8013c0:	013fc004 	movi	r4,-256
  8013c4:	111c703a 	and	r14,r2,r4
  8013c8:	401f883a 	mov	r15,r8
  8013cc:	003fe506 	br	801364 <__divdf3+0x1d0>
  8013d0:	8009883a 	mov	r4,r16
  8013d4:	003f9206 	br	801220 <__divdf3+0x8c>
  8013d8:	9809883a 	mov	r4,r19
  8013dc:	d8000715 	stw	zero,28(sp)
  8013e0:	d8000815 	stw	zero,32(sp)
  8013e4:	d8000615 	stw	zero,24(sp)
  8013e8:	003f8d06 	br	801220 <__divdf3+0x8c>

008013ec <__make_dp>:
  8013ec:	defff904 	addi	sp,sp,-28
  8013f0:	d8c00717 	ldw	r3,28(sp)
  8013f4:	d9000015 	stw	r4,0(sp)
  8013f8:	d809883a 	mov	r4,sp
  8013fc:	dfc00515 	stw	ra,20(sp)
  801400:	d9c00615 	stw	r7,24(sp)
  801404:	d9400115 	stw	r5,4(sp)
  801408:	d9800215 	stw	r6,8(sp)
  80140c:	d8c00415 	stw	r3,16(sp)
  801410:	d9c00315 	stw	r7,12(sp)
  801414:	08018f80 	call	8018f8 <__pack_d>
  801418:	dfc00517 	ldw	ra,20(sp)
  80141c:	dec00704 	addi	sp,sp,28
  801420:	f800283a 	ret

00801424 <__floatunsidf>:
  801424:	defff204 	addi	sp,sp,-56
  801428:	dfc00d15 	stw	ra,52(sp)
  80142c:	ddc00c15 	stw	r23,48(sp)
  801430:	dd800b15 	stw	r22,44(sp)
  801434:	dd400a15 	stw	r21,40(sp)
  801438:	dd000915 	stw	r20,36(sp)
  80143c:	dcc00815 	stw	r19,32(sp)
  801440:	dc800715 	stw	r18,28(sp)
  801444:	dc400615 	stw	r17,24(sp)
  801448:	dc000515 	stw	r16,20(sp)
  80144c:	d8000115 	stw	zero,4(sp)
  801450:	20000f1e 	bne	r4,zero,801490 <__floatunsidf+0x6c>
  801454:	00800084 	movi	r2,2
  801458:	d8800015 	stw	r2,0(sp)
  80145c:	d809883a 	mov	r4,sp
  801460:	08018f80 	call	8018f8 <__pack_d>
  801464:	dfc00d17 	ldw	ra,52(sp)
  801468:	ddc00c17 	ldw	r23,48(sp)
  80146c:	dd800b17 	ldw	r22,44(sp)
  801470:	dd400a17 	ldw	r21,40(sp)
  801474:	dd000917 	ldw	r20,36(sp)
  801478:	dcc00817 	ldw	r19,32(sp)
  80147c:	dc800717 	ldw	r18,28(sp)
  801480:	dc400617 	ldw	r17,24(sp)
  801484:	dc000517 	ldw	r16,20(sp)
  801488:	dec00e04 	addi	sp,sp,56
  80148c:	f800283a 	ret
  801490:	008000c4 	movi	r2,3
  801494:	00c00f04 	movi	r3,60
  801498:	002f883a 	mov	r23,zero
  80149c:	202d883a 	mov	r22,r4
  8014a0:	d8800015 	stw	r2,0(sp)
  8014a4:	d8c00215 	stw	r3,8(sp)
  8014a8:	d9000315 	stw	r4,12(sp)
  8014ac:	ddc00415 	stw	r23,16(sp)
  8014b0:	08016500 	call	801650 <__clzsi2>
  8014b4:	12400744 	addi	r9,r2,29
  8014b8:	48000b16 	blt	r9,zero,8014e8 <__floatunsidf+0xc4>
  8014bc:	483fe726 	beq	r9,zero,80145c <__floatunsidf+0x38>
  8014c0:	10bfff44 	addi	r2,r2,-3
  8014c4:	10002e16 	blt	r2,zero,801580 <__floatunsidf+0x15c>
  8014c8:	b0a2983a 	sll	r17,r22,r2
  8014cc:	0021883a 	mov	r16,zero
  8014d0:	d8800217 	ldw	r2,8(sp)
  8014d4:	dc400415 	stw	r17,16(sp)
  8014d8:	dc000315 	stw	r16,12(sp)
  8014dc:	1245c83a 	sub	r2,r2,r9
  8014e0:	d8800215 	stw	r2,8(sp)
  8014e4:	003fdd06 	br	80145c <__floatunsidf+0x38>
  8014e8:	0255c83a 	sub	r10,zero,r9
  8014ec:	51bff804 	addi	r6,r10,-32
  8014f0:	30001b16 	blt	r6,zero,801560 <__floatunsidf+0x13c>
  8014f4:	b9a8d83a 	srl	r20,r23,r6
  8014f8:	002b883a 	mov	r21,zero
  8014fc:	000f883a 	mov	r7,zero
  801500:	01000044 	movi	r4,1
  801504:	0011883a 	mov	r8,zero
  801508:	30002516 	blt	r6,zero,8015a0 <__floatunsidf+0x17c>
  80150c:	21a6983a 	sll	r19,r4,r6
  801510:	0025883a 	mov	r18,zero
  801514:	00bfffc4 	movi	r2,-1
  801518:	9089883a 	add	r4,r18,r2
  80151c:	988b883a 	add	r5,r19,r2
  801520:	248d803a 	cmpltu	r6,r4,r18
  801524:	314b883a 	add	r5,r6,r5
  801528:	b104703a 	and	r2,r22,r4
  80152c:	b946703a 	and	r3,r23,r5
  801530:	10c4b03a 	or	r2,r2,r3
  801534:	10000226 	beq	r2,zero,801540 <__floatunsidf+0x11c>
  801538:	01c00044 	movi	r7,1
  80153c:	0011883a 	mov	r8,zero
  801540:	d9000217 	ldw	r4,8(sp)
  801544:	a1c4b03a 	or	r2,r20,r7
  801548:	aa06b03a 	or	r3,r21,r8
  80154c:	2249c83a 	sub	r4,r4,r9
  801550:	d8c00415 	stw	r3,16(sp)
  801554:	d9000215 	stw	r4,8(sp)
  801558:	d8800315 	stw	r2,12(sp)
  80155c:	003fbf06 	br	80145c <__floatunsidf+0x38>
  801560:	bdc7883a 	add	r3,r23,r23
  801564:	008007c4 	movi	r2,31
  801568:	1285c83a 	sub	r2,r2,r10
  80156c:	1886983a 	sll	r3,r3,r2
  801570:	b2a8d83a 	srl	r20,r22,r10
  801574:	baaad83a 	srl	r21,r23,r10
  801578:	1d28b03a 	or	r20,r3,r20
  80157c:	003fdf06 	br	8014fc <__floatunsidf+0xd8>
  801580:	b006d07a 	srli	r3,r22,1
  801584:	008007c4 	movi	r2,31
  801588:	1245c83a 	sub	r2,r2,r9
  80158c:	1886d83a 	srl	r3,r3,r2
  801590:	ba62983a 	sll	r17,r23,r9
  801594:	b260983a 	sll	r16,r22,r9
  801598:	1c62b03a 	or	r17,r3,r17
  80159c:	003fcc06 	br	8014d0 <__floatunsidf+0xac>
  8015a0:	2006d07a 	srli	r3,r4,1
  8015a4:	008007c4 	movi	r2,31
  8015a8:	1285c83a 	sub	r2,r2,r10
  8015ac:	18a6d83a 	srl	r19,r3,r2
  8015b0:	22a4983a 	sll	r18,r4,r10
  8015b4:	003fd706 	br	801514 <__floatunsidf+0xf0>

008015b8 <__muldi3>:
  8015b8:	2011883a 	mov	r8,r4
  8015bc:	427fffcc 	andi	r9,r8,65535
  8015c0:	4018d43a 	srli	r12,r8,16
  8015c4:	32bfffcc 	andi	r10,r6,65535
  8015c8:	3016d43a 	srli	r11,r6,16
  8015cc:	4a85383a 	mul	r2,r9,r10
  8015d0:	6295383a 	mul	r10,r12,r10
  8015d4:	4ad3383a 	mul	r9,r9,r11
  8015d8:	113fffcc 	andi	r4,r2,65535
  8015dc:	1004d43a 	srli	r2,r2,16
  8015e0:	4a93883a 	add	r9,r9,r10
  8015e4:	3807883a 	mov	r3,r7
  8015e8:	1245883a 	add	r2,r2,r9
  8015ec:	280f883a 	mov	r7,r5
  8015f0:	180b883a 	mov	r5,r3
  8015f4:	1006943a 	slli	r3,r2,16
  8015f8:	defffd04 	addi	sp,sp,-12
  8015fc:	dc800215 	stw	r18,8(sp)
  801600:	1907883a 	add	r3,r3,r4
  801604:	dc400115 	stw	r17,4(sp)
  801608:	dc000015 	stw	r16,0(sp)
  80160c:	4165383a 	mul	r18,r8,r5
  801610:	31e3383a 	mul	r17,r6,r7
  801614:	1012d43a 	srli	r9,r2,16
  801618:	62d9383a 	mul	r12,r12,r11
  80161c:	181f883a 	mov	r15,r3
  801620:	1280022e 	bgeu	r2,r10,80162c <__muldi3+0x74>
  801624:	00800074 	movhi	r2,1
  801628:	6099883a 	add	r12,r12,r2
  80162c:	624d883a 	add	r6,r12,r9
  801630:	9187883a 	add	r3,r18,r6
  801634:	88c7883a 	add	r3,r17,r3
  801638:	7805883a 	mov	r2,r15
  80163c:	dc800217 	ldw	r18,8(sp)
  801640:	dc400117 	ldw	r17,4(sp)
  801644:	dc000017 	ldw	r16,0(sp)
  801648:	dec00304 	addi	sp,sp,12
  80164c:	f800283a 	ret

00801650 <__clzsi2>:
  801650:	00bfffd4 	movui	r2,65535
  801654:	11000e36 	bltu	r2,r4,801690 <__clzsi2+0x40>
  801658:	00803fc4 	movi	r2,255
  80165c:	01400204 	movi	r5,8
  801660:	0007883a 	mov	r3,zero
  801664:	11001036 	bltu	r2,r4,8016a8 <__clzsi2+0x58>
  801668:	000b883a 	mov	r5,zero
  80166c:	20c6d83a 	srl	r3,r4,r3
  801670:	00802074 	movhi	r2,129
  801674:	10a7d504 	addi	r2,r2,-24748
  801678:	1887883a 	add	r3,r3,r2
  80167c:	18800003 	ldbu	r2,0(r3)
  801680:	00c00804 	movi	r3,32
  801684:	2885883a 	add	r2,r5,r2
  801688:	1885c83a 	sub	r2,r3,r2
  80168c:	f800283a 	ret
  801690:	01400404 	movi	r5,16
  801694:	00804034 	movhi	r2,256
  801698:	10bfffc4 	addi	r2,r2,-1
  80169c:	2807883a 	mov	r3,r5
  8016a0:	113ff22e 	bgeu	r2,r4,80166c <__clzsi2+0x1c>
  8016a4:	01400604 	movi	r5,24
  8016a8:	2807883a 	mov	r3,r5
  8016ac:	20c6d83a 	srl	r3,r4,r3
  8016b0:	00802074 	movhi	r2,129
  8016b4:	10a7d504 	addi	r2,r2,-24748
  8016b8:	1887883a 	add	r3,r3,r2
  8016bc:	18800003 	ldbu	r2,0(r3)
  8016c0:	00c00804 	movi	r3,32
  8016c4:	2885883a 	add	r2,r5,r2
  8016c8:	1885c83a 	sub	r2,r3,r2
  8016cc:	f800283a 	ret

008016d0 <__pack_f>:
  8016d0:	20c00017 	ldw	r3,0(r4)
  8016d4:	01c00044 	movi	r7,1
  8016d8:	21800317 	ldw	r6,12(r4)
  8016dc:	21400117 	ldw	r5,4(r4)
  8016e0:	38c02d2e 	bgeu	r7,r3,801798 <__pack_f+0xc8>
  8016e4:	00800104 	movi	r2,4
  8016e8:	18802826 	beq	r3,r2,80178c <__pack_f+0xbc>
  8016ec:	00800084 	movi	r2,2
  8016f0:	18800126 	beq	r3,r2,8016f8 <__pack_f+0x28>
  8016f4:	3000101e 	bne	r6,zero,801738 <__pack_f+0x68>
  8016f8:	000d883a 	mov	r6,zero
  8016fc:	0007883a 	mov	r3,zero
  801700:	19003fcc 	andi	r4,r3,255
  801704:	200895fa 	slli	r4,r4,23
  801708:	00c02034 	movhi	r3,128
  80170c:	18ffffc4 	addi	r3,r3,-1
  801710:	30c6703a 	and	r3,r6,r3
  801714:	10a0002c 	andhi	r2,r2,32768
  801718:	10c4b03a 	or	r2,r2,r3
  80171c:	280a97fa 	slli	r5,r5,31
  801720:	1104b03a 	or	r2,r2,r4
  801724:	00e00034 	movhi	r3,32768
  801728:	18ffffc4 	addi	r3,r3,-1
  80172c:	10c4703a 	and	r2,r2,r3
  801730:	1144b03a 	or	r2,r2,r5
  801734:	f800283a 	ret
  801738:	21000217 	ldw	r4,8(r4)
  80173c:	00bfe084 	movi	r2,-126
  801740:	20801b16 	blt	r4,r2,8017b0 <__pack_f+0xe0>
  801744:	00801fc4 	movi	r2,127
  801748:	11001016 	blt	r2,r4,80178c <__pack_f+0xbc>
  80174c:	308e703a 	and	r7,r6,r2
  801750:	2087883a 	add	r3,r4,r2
  801754:	00801004 	movi	r2,64
  801758:	38800526 	beq	r7,r2,801770 <__pack_f+0xa0>
  80175c:	31800fc4 	addi	r6,r6,63
  801760:	30000716 	blt	r6,zero,801780 <__pack_f+0xb0>
  801764:	300490ba 	slli	r2,r6,2
  801768:	100cd27a 	srli	r6,r2,9
  80176c:	003fe406 	br	801700 <__pack_f+0x30>
  801770:	3080200c 	andi	r2,r6,128
  801774:	103ffa26 	beq	r2,zero,801760 <__pack_f+0x90>
  801778:	31cd883a 	add	r6,r6,r7
  80177c:	003ff806 	br	801760 <__pack_f+0x90>
  801780:	300cd07a 	srli	r6,r6,1
  801784:	18c00044 	addi	r3,r3,1
  801788:	003ff606 	br	801764 <__pack_f+0x94>
  80178c:	000d883a 	mov	r6,zero
  801790:	00ffffc4 	movi	r3,-1
  801794:	003fda06 	br	801700 <__pack_f+0x30>
  801798:	31800434 	orhi	r6,r6,16
  80179c:	00802034 	movhi	r2,128
  8017a0:	10bfffc4 	addi	r2,r2,-1
  8017a4:	308c703a 	and	r6,r6,r2
  8017a8:	00ffffc4 	movi	r3,-1
  8017ac:	003fd406 	br	801700 <__pack_f+0x30>
  8017b0:	1109c83a 	sub	r4,r2,r4
  8017b4:	00800644 	movi	r2,25
  8017b8:	11001216 	blt	r2,r4,801804 <__pack_f+0x134>
  8017bc:	3904983a 	sll	r2,r7,r4
  8017c0:	3106d83a 	srl	r3,r6,r4
  8017c4:	10bfffc4 	addi	r2,r2,-1
  8017c8:	3084703a 	and	r2,r6,r2
  8017cc:	1004c03a 	cmpne	r2,r2,zero
  8017d0:	1886b03a 	or	r3,r3,r2
  8017d4:	19001fcc 	andi	r4,r3,127
  8017d8:	00801004 	movi	r2,64
  8017dc:	20800c26 	beq	r4,r2,801810 <__pack_f+0x140>
  8017e0:	18c00fc4 	addi	r3,r3,63
  8017e4:	00900034 	movhi	r2,16384
  8017e8:	10bfffc4 	addi	r2,r2,-1
  8017ec:	180cd1fa 	srli	r6,r3,7
  8017f0:	10c7803a 	cmpltu	r3,r2,r3
  8017f4:	00802034 	movhi	r2,128
  8017f8:	10bfffc4 	addi	r2,r2,-1
  8017fc:	308c703a 	and	r6,r6,r2
  801800:	003fbf06 	br	801700 <__pack_f+0x30>
  801804:	0007883a 	mov	r3,zero
  801808:	000d883a 	mov	r6,zero
  80180c:	003ff906 	br	8017f4 <__pack_f+0x124>
  801810:	1880200c 	andi	r2,r3,128
  801814:	10000126 	beq	r2,zero,80181c <__pack_f+0x14c>
  801818:	1907883a 	add	r3,r3,r4
  80181c:	180cd1fa 	srli	r6,r3,7
  801820:	00900034 	movhi	r2,16384
  801824:	10bfffc4 	addi	r2,r2,-1
  801828:	10c7803a 	cmpltu	r3,r2,r3
  80182c:	003ff106 	br	8017f4 <__pack_f+0x124>

00801830 <__unpack_f>:
  801830:	21800017 	ldw	r6,0(r4)
  801834:	00c02034 	movhi	r3,128
  801838:	18ffffc4 	addi	r3,r3,-1
  80183c:	3004d5fa 	srli	r2,r6,23
  801840:	3008d7fa 	srli	r4,r6,31
  801844:	30ce703a 	and	r7,r6,r3
  801848:	10c03fcc 	andi	r3,r2,255
  80184c:	29000115 	stw	r4,4(r5)
  801850:	1800131e 	bne	r3,zero,8018a0 <__unpack_f+0x70>
  801854:	38000f26 	beq	r7,zero,801894 <__unpack_f+0x64>
  801858:	380691fa 	slli	r3,r7,7
  80185c:	01bfe084 	movi	r6,-126
  801860:	008000c4 	movi	r2,3
  801864:	01100034 	movhi	r4,16384
  801868:	213fffc4 	addi	r4,r4,-1
  80186c:	28800015 	stw	r2,0(r5)
  801870:	29800215 	stw	r6,8(r5)
  801874:	20c00536 	bltu	r4,r3,80188c <__unpack_f+0x5c>
  801878:	3005883a 	mov	r2,r6
  80187c:	18c7883a 	add	r3,r3,r3
  801880:	10bfffc4 	addi	r2,r2,-1
  801884:	20fffd2e 	bgeu	r4,r3,80187c <__unpack_f+0x4c>
  801888:	28800215 	stw	r2,8(r5)
  80188c:	28c00315 	stw	r3,12(r5)
  801890:	f800283a 	ret
  801894:	00800084 	movi	r2,2
  801898:	28800015 	stw	r2,0(r5)
  80189c:	f800283a 	ret
  8018a0:	00803fc4 	movi	r2,255
  8018a4:	18800826 	beq	r3,r2,8018c8 <__unpack_f+0x98>
  8018a8:	380491fa 	slli	r2,r7,7
  8018ac:	18ffe044 	addi	r3,r3,-127
  8018b0:	28c00215 	stw	r3,8(r5)
  8018b4:	10900034 	orhi	r2,r2,16384
  8018b8:	28800315 	stw	r2,12(r5)
  8018bc:	008000c4 	movi	r2,3
  8018c0:	28800015 	stw	r2,0(r5)
  8018c4:	f800283a 	ret
  8018c8:	3800031e 	bne	r7,zero,8018d8 <__unpack_f+0xa8>
  8018cc:	00800104 	movi	r2,4
  8018d0:	28800015 	stw	r2,0(r5)
  8018d4:	f800283a 	ret
  8018d8:	3080042c 	andhi	r2,r6,16
  8018dc:	10000426 	beq	r2,zero,8018f0 <__unpack_f+0xc0>
  8018e0:	00800044 	movi	r2,1
  8018e4:	28800015 	stw	r2,0(r5)
  8018e8:	29c00315 	stw	r7,12(r5)
  8018ec:	f800283a 	ret
  8018f0:	28000015 	stw	zero,0(r5)
  8018f4:	003ffc06 	br	8018e8 <__unpack_f+0xb8>

008018f8 <__pack_d>:
  8018f8:	20c00017 	ldw	r3,0(r4)
  8018fc:	defffd04 	addi	sp,sp,-12
  801900:	dc000015 	stw	r16,0(sp)
  801904:	dc800215 	stw	r18,8(sp)
  801908:	dc400115 	stw	r17,4(sp)
  80190c:	00800044 	movi	r2,1
  801910:	22000317 	ldw	r8,12(r4)
  801914:	001f883a 	mov	r15,zero
  801918:	22400417 	ldw	r9,16(r4)
  80191c:	24000117 	ldw	r16,4(r4)
  801920:	10c0552e 	bgeu	r2,r3,801a78 <__pack_d+0x180>
  801924:	00800104 	movi	r2,4
  801928:	18804f26 	beq	r3,r2,801a68 <__pack_d+0x170>
  80192c:	00800084 	movi	r2,2
  801930:	18800226 	beq	r3,r2,80193c <__pack_d+0x44>
  801934:	4244b03a 	or	r2,r8,r9
  801938:	10001a1e 	bne	r2,zero,8019a4 <__pack_d+0xac>
  80193c:	000d883a 	mov	r6,zero
  801940:	000f883a 	mov	r7,zero
  801944:	0011883a 	mov	r8,zero
  801948:	00800434 	movhi	r2,16
  80194c:	10bfffc4 	addi	r2,r2,-1
  801950:	301d883a 	mov	r14,r6
  801954:	3884703a 	and	r2,r7,r2
  801958:	400a953a 	slli	r5,r8,20
  80195c:	79bffc2c 	andhi	r6,r15,65520
  801960:	308cb03a 	or	r6,r6,r2
  801964:	00e00434 	movhi	r3,32784
  801968:	18ffffc4 	addi	r3,r3,-1
  80196c:	800497fa 	slli	r2,r16,31
  801970:	30c6703a 	and	r3,r6,r3
  801974:	1946b03a 	or	r3,r3,r5
  801978:	01600034 	movhi	r5,32768
  80197c:	297fffc4 	addi	r5,r5,-1
  801980:	194a703a 	and	r5,r3,r5
  801984:	288ab03a 	or	r5,r5,r2
  801988:	2807883a 	mov	r3,r5
  80198c:	7005883a 	mov	r2,r14
  801990:	dc800217 	ldw	r18,8(sp)
  801994:	dc400117 	ldw	r17,4(sp)
  801998:	dc000017 	ldw	r16,0(sp)
  80199c:	dec00304 	addi	sp,sp,12
  8019a0:	f800283a 	ret
  8019a4:	21000217 	ldw	r4,8(r4)
  8019a8:	00bf0084 	movi	r2,-1022
  8019ac:	20803f16 	blt	r4,r2,801aac <__pack_d+0x1b4>
  8019b0:	0080ffc4 	movi	r2,1023
  8019b4:	11002c16 	blt	r2,r4,801a68 <__pack_d+0x170>
  8019b8:	00803fc4 	movi	r2,255
  8019bc:	408c703a 	and	r6,r8,r2
  8019c0:	00802004 	movi	r2,128
  8019c4:	0007883a 	mov	r3,zero
  8019c8:	000f883a 	mov	r7,zero
  8019cc:	2280ffc4 	addi	r10,r4,1023
  8019d0:	30801e26 	beq	r6,r2,801a4c <__pack_d+0x154>
  8019d4:	00801fc4 	movi	r2,127
  8019d8:	4089883a 	add	r4,r8,r2
  8019dc:	220d803a 	cmpltu	r6,r4,r8
  8019e0:	324d883a 	add	r6,r6,r9
  8019e4:	2011883a 	mov	r8,r4
  8019e8:	3013883a 	mov	r9,r6
  8019ec:	00880034 	movhi	r2,8192
  8019f0:	10bfffc4 	addi	r2,r2,-1
  8019f4:	12400d36 	bltu	r2,r9,801a2c <__pack_d+0x134>
  8019f8:	4804963a 	slli	r2,r9,24
  8019fc:	400cd23a 	srli	r6,r8,8
  801a00:	480ed23a 	srli	r7,r9,8
  801a04:	013fffc4 	movi	r4,-1
  801a08:	118cb03a 	or	r6,r2,r6
  801a0c:	01400434 	movhi	r5,16
  801a10:	297fffc4 	addi	r5,r5,-1
  801a14:	3104703a 	and	r2,r6,r4
  801a18:	3946703a 	and	r3,r7,r5
  801a1c:	5201ffcc 	andi	r8,r10,2047
  801a20:	100d883a 	mov	r6,r2
  801a24:	180f883a 	mov	r7,r3
  801a28:	003fc706 	br	801948 <__pack_d+0x50>
  801a2c:	480897fa 	slli	r4,r9,31
  801a30:	4004d07a 	srli	r2,r8,1
  801a34:	4806d07a 	srli	r3,r9,1
  801a38:	52800044 	addi	r10,r10,1
  801a3c:	2084b03a 	or	r2,r4,r2
  801a40:	1011883a 	mov	r8,r2
  801a44:	1813883a 	mov	r9,r3
  801a48:	003feb06 	br	8019f8 <__pack_d+0x100>
  801a4c:	383fe11e 	bne	r7,zero,8019d4 <__pack_d+0xdc>
  801a50:	01004004 	movi	r4,256
  801a54:	4104703a 	and	r2,r8,r4
  801a58:	10c4b03a 	or	r2,r2,r3
  801a5c:	103fe326 	beq	r2,zero,8019ec <__pack_d+0xf4>
  801a60:	3005883a 	mov	r2,r6
  801a64:	003fdc06 	br	8019d8 <__pack_d+0xe0>
  801a68:	000d883a 	mov	r6,zero
  801a6c:	000f883a 	mov	r7,zero
  801a70:	0201ffc4 	movi	r8,2047
  801a74:	003fb406 	br	801948 <__pack_d+0x50>
  801a78:	0005883a 	mov	r2,zero
  801a7c:	00c00234 	movhi	r3,8
  801a80:	408cb03a 	or	r6,r8,r2
  801a84:	48ceb03a 	or	r7,r9,r3
  801a88:	013fffc4 	movi	r4,-1
  801a8c:	01400434 	movhi	r5,16
  801a90:	297fffc4 	addi	r5,r5,-1
  801a94:	3104703a 	and	r2,r6,r4
  801a98:	3946703a 	and	r3,r7,r5
  801a9c:	100d883a 	mov	r6,r2
  801aa0:	180f883a 	mov	r7,r3
  801aa4:	0201ffc4 	movi	r8,2047
  801aa8:	003fa706 	br	801948 <__pack_d+0x50>
  801aac:	1109c83a 	sub	r4,r2,r4
  801ab0:	00800e04 	movi	r2,56
  801ab4:	11004316 	blt	r2,r4,801bc4 <__pack_d+0x2cc>
  801ab8:	21fff804 	addi	r7,r4,-32
  801abc:	38004516 	blt	r7,zero,801bd4 <__pack_d+0x2dc>
  801ac0:	49d8d83a 	srl	r12,r9,r7
  801ac4:	001b883a 	mov	r13,zero
  801ac8:	0023883a 	mov	r17,zero
  801acc:	01400044 	movi	r5,1
  801ad0:	0025883a 	mov	r18,zero
  801ad4:	38004716 	blt	r7,zero,801bf4 <__pack_d+0x2fc>
  801ad8:	29d6983a 	sll	r11,r5,r7
  801adc:	0015883a 	mov	r10,zero
  801ae0:	00bfffc4 	movi	r2,-1
  801ae4:	5089883a 	add	r4,r10,r2
  801ae8:	588b883a 	add	r5,r11,r2
  801aec:	228d803a 	cmpltu	r6,r4,r10
  801af0:	314b883a 	add	r5,r6,r5
  801af4:	4104703a 	and	r2,r8,r4
  801af8:	4946703a 	and	r3,r9,r5
  801afc:	10c4b03a 	or	r2,r2,r3
  801b00:	10000226 	beq	r2,zero,801b0c <__pack_d+0x214>
  801b04:	04400044 	movi	r17,1
  801b08:	0025883a 	mov	r18,zero
  801b0c:	00803fc4 	movi	r2,255
  801b10:	644eb03a 	or	r7,r12,r17
  801b14:	3892703a 	and	r9,r7,r2
  801b18:	00802004 	movi	r2,128
  801b1c:	6c90b03a 	or	r8,r13,r18
  801b20:	0015883a 	mov	r10,zero
  801b24:	48801626 	beq	r9,r2,801b80 <__pack_d+0x288>
  801b28:	01001fc4 	movi	r4,127
  801b2c:	3905883a 	add	r2,r7,r4
  801b30:	11cd803a 	cmpltu	r6,r2,r7
  801b34:	320d883a 	add	r6,r6,r8
  801b38:	100f883a 	mov	r7,r2
  801b3c:	00840034 	movhi	r2,4096
  801b40:	10bfffc4 	addi	r2,r2,-1
  801b44:	3011883a 	mov	r8,r6
  801b48:	0007883a 	mov	r3,zero
  801b4c:	11801b36 	bltu	r2,r6,801bbc <__pack_d+0x2c4>
  801b50:	4004963a 	slli	r2,r8,24
  801b54:	3808d23a 	srli	r4,r7,8
  801b58:	400ad23a 	srli	r5,r8,8
  801b5c:	1813883a 	mov	r9,r3
  801b60:	1108b03a 	or	r4,r2,r4
  801b64:	00bfffc4 	movi	r2,-1
  801b68:	00c00434 	movhi	r3,16
  801b6c:	18ffffc4 	addi	r3,r3,-1
  801b70:	208c703a 	and	r6,r4,r2
  801b74:	28ce703a 	and	r7,r5,r3
  801b78:	4a01ffcc 	andi	r8,r9,2047
  801b7c:	003f7206 	br	801948 <__pack_d+0x50>
  801b80:	503fe91e 	bne	r10,zero,801b28 <__pack_d+0x230>
  801b84:	01004004 	movi	r4,256
  801b88:	3904703a 	and	r2,r7,r4
  801b8c:	0007883a 	mov	r3,zero
  801b90:	10c4b03a 	or	r2,r2,r3
  801b94:	10000626 	beq	r2,zero,801bb0 <__pack_d+0x2b8>
  801b98:	3a45883a 	add	r2,r7,r9
  801b9c:	11cd803a 	cmpltu	r6,r2,r7
  801ba0:	320d883a 	add	r6,r6,r8
  801ba4:	100f883a 	mov	r7,r2
  801ba8:	3011883a 	mov	r8,r6
  801bac:	0007883a 	mov	r3,zero
  801bb0:	00840034 	movhi	r2,4096
  801bb4:	10bfffc4 	addi	r2,r2,-1
  801bb8:	123fe52e 	bgeu	r2,r8,801b50 <__pack_d+0x258>
  801bbc:	00c00044 	movi	r3,1
  801bc0:	003fe306 	br	801b50 <__pack_d+0x258>
  801bc4:	0009883a 	mov	r4,zero
  801bc8:	0013883a 	mov	r9,zero
  801bcc:	000b883a 	mov	r5,zero
  801bd0:	003fe406 	br	801b64 <__pack_d+0x26c>
  801bd4:	4a47883a 	add	r3,r9,r9
  801bd8:	008007c4 	movi	r2,31
  801bdc:	1105c83a 	sub	r2,r2,r4
  801be0:	1886983a 	sll	r3,r3,r2
  801be4:	4118d83a 	srl	r12,r8,r4
  801be8:	491ad83a 	srl	r13,r9,r4
  801bec:	1b18b03a 	or	r12,r3,r12
  801bf0:	003fb506 	br	801ac8 <__pack_d+0x1d0>
  801bf4:	2806d07a 	srli	r3,r5,1
  801bf8:	008007c4 	movi	r2,31
  801bfc:	1105c83a 	sub	r2,r2,r4
  801c00:	1896d83a 	srl	r11,r3,r2
  801c04:	2914983a 	sll	r10,r5,r4
  801c08:	003fb506 	br	801ae0 <__pack_d+0x1e8>

00801c0c <__unpack_d>:
  801c0c:	20c00117 	ldw	r3,4(r4)
  801c10:	22400017 	ldw	r9,0(r4)
  801c14:	00800434 	movhi	r2,16
  801c18:	10bfffc4 	addi	r2,r2,-1
  801c1c:	1808d53a 	srli	r4,r3,20
  801c20:	180cd7fa 	srli	r6,r3,31
  801c24:	1894703a 	and	r10,r3,r2
  801c28:	2201ffcc 	andi	r8,r4,2047
  801c2c:	281b883a 	mov	r13,r5
  801c30:	4817883a 	mov	r11,r9
  801c34:	29800115 	stw	r6,4(r5)
  801c38:	5019883a 	mov	r12,r10
  801c3c:	40001e1e 	bne	r8,zero,801cb8 <__unpack_d+0xac>
  801c40:	4a84b03a 	or	r2,r9,r10
  801c44:	10001926 	beq	r2,zero,801cac <__unpack_d+0xa0>
  801c48:	4804d63a 	srli	r2,r9,24
  801c4c:	500c923a 	slli	r6,r10,8
  801c50:	013f0084 	movi	r4,-1022
  801c54:	00c40034 	movhi	r3,4096
  801c58:	18ffffc4 	addi	r3,r3,-1
  801c5c:	118cb03a 	or	r6,r2,r6
  801c60:	008000c4 	movi	r2,3
  801c64:	480a923a 	slli	r5,r9,8
  801c68:	68800015 	stw	r2,0(r13)
  801c6c:	69000215 	stw	r4,8(r13)
  801c70:	19800b36 	bltu	r3,r6,801ca0 <__unpack_d+0x94>
  801c74:	200f883a 	mov	r7,r4
  801c78:	1811883a 	mov	r8,r3
  801c7c:	2945883a 	add	r2,r5,r5
  801c80:	1149803a 	cmpltu	r4,r2,r5
  801c84:	3187883a 	add	r3,r6,r6
  801c88:	20c9883a 	add	r4,r4,r3
  801c8c:	100b883a 	mov	r5,r2
  801c90:	200d883a 	mov	r6,r4
  801c94:	39ffffc4 	addi	r7,r7,-1
  801c98:	413ff82e 	bgeu	r8,r4,801c7c <__unpack_d+0x70>
  801c9c:	69c00215 	stw	r7,8(r13)
  801ca0:	69800415 	stw	r6,16(r13)
  801ca4:	69400315 	stw	r5,12(r13)
  801ca8:	f800283a 	ret
  801cac:	00800084 	movi	r2,2
  801cb0:	28800015 	stw	r2,0(r5)
  801cb4:	f800283a 	ret
  801cb8:	0081ffc4 	movi	r2,2047
  801cbc:	40800f26 	beq	r8,r2,801cfc <__unpack_d+0xf0>
  801cc0:	480cd63a 	srli	r6,r9,24
  801cc4:	5006923a 	slli	r3,r10,8
  801cc8:	4804923a 	slli	r2,r9,8
  801ccc:	0009883a 	mov	r4,zero
  801cd0:	30c6b03a 	or	r3,r6,r3
  801cd4:	01440034 	movhi	r5,4096
  801cd8:	110cb03a 	or	r6,r2,r4
  801cdc:	423f0044 	addi	r8,r8,-1023
  801ce0:	194eb03a 	or	r7,r3,r5
  801ce4:	008000c4 	movi	r2,3
  801ce8:	69c00415 	stw	r7,16(r13)
  801cec:	6a000215 	stw	r8,8(r13)
  801cf0:	68800015 	stw	r2,0(r13)
  801cf4:	69800315 	stw	r6,12(r13)
  801cf8:	f800283a 	ret
  801cfc:	4a84b03a 	or	r2,r9,r10
  801d00:	1000031e 	bne	r2,zero,801d10 <__unpack_d+0x104>
  801d04:	00800104 	movi	r2,4
  801d08:	28800015 	stw	r2,0(r5)
  801d0c:	f800283a 	ret
  801d10:	0009883a 	mov	r4,zero
  801d14:	01400234 	movhi	r5,8
  801d18:	4904703a 	and	r2,r9,r4
  801d1c:	5146703a 	and	r3,r10,r5
  801d20:	10c4b03a 	or	r2,r2,r3
  801d24:	10000526 	beq	r2,zero,801d3c <__unpack_d+0x130>
  801d28:	00800044 	movi	r2,1
  801d2c:	68800015 	stw	r2,0(r13)
  801d30:	6b000415 	stw	r12,16(r13)
  801d34:	6ac00315 	stw	r11,12(r13)
  801d38:	f800283a 	ret
  801d3c:	68000015 	stw	zero,0(r13)
  801d40:	003ffb06 	br	801d30 <__unpack_d+0x124>

00801d44 <gcvt>:
  801d44:	defff804 	addi	sp,sp,-32
  801d48:	0005883a 	mov	r2,zero
  801d4c:	dcc00615 	stw	r19,24(sp)
  801d50:	dc800515 	stw	r18,20(sp)
  801d54:	3027883a 	mov	r19,r6
  801d58:	3825883a 	mov	r18,r7
  801d5c:	100d883a 	mov	r6,r2
  801d60:	000f883a 	mov	r7,zero
  801d64:	dc400415 	stw	r17,16(sp)
  801d68:	dc000315 	stw	r16,12(sp)
  801d6c:	dfc00715 	stw	ra,28(sp)
  801d70:	2021883a 	mov	r16,r4
  801d74:	2823883a 	mov	r17,r5
  801d78:	0806d000 	call	806d00 <__ltdf2>
  801d7c:	9007883a 	mov	r3,r18
  801d80:	10001516 	blt	r2,zero,801dd8 <gcvt+0x94>
  801d84:	00802074 	movhi	r2,129
  801d88:	10aeef04 	addi	r2,r2,-17476
  801d8c:	11000017 	ldw	r4,0(r2)
  801d90:	980f883a 	mov	r7,r19
  801d94:	008019c4 	movi	r2,103
  801d98:	880d883a 	mov	r6,r17
  801d9c:	800b883a 	mov	r5,r16
  801da0:	d8c00015 	stw	r3,0(sp)
  801da4:	d8800115 	stw	r2,4(sp)
  801da8:	d8000215 	stw	zero,8(sp)
  801dac:	08029a80 	call	8029a8 <_gcvt>
  801db0:	900f883a 	mov	r7,r18
  801db4:	10000d26 	beq	r2,zero,801dec <gcvt+0xa8>
  801db8:	3805883a 	mov	r2,r7
  801dbc:	dfc00717 	ldw	ra,28(sp)
  801dc0:	dcc00617 	ldw	r19,24(sp)
  801dc4:	dc800517 	ldw	r18,20(sp)
  801dc8:	dc400417 	ldw	r17,16(sp)
  801dcc:	dc000317 	ldw	r16,12(sp)
  801dd0:	dec00804 	addi	sp,sp,32
  801dd4:	f800283a 	ret
  801dd8:	00800b44 	movi	r2,45
  801ddc:	9cffffc4 	addi	r19,r19,-1
  801de0:	90c00044 	addi	r3,r18,1
  801de4:	90800005 	stb	r2,0(r18)
  801de8:	003fe606 	br	801d84 <gcvt+0x40>
  801dec:	000f883a 	mov	r7,zero
  801df0:	3805883a 	mov	r2,r7
  801df4:	dfc00717 	ldw	ra,28(sp)
  801df8:	dcc00617 	ldw	r19,24(sp)
  801dfc:	dc800517 	ldw	r18,20(sp)
  801e00:	dc400417 	ldw	r17,16(sp)
  801e04:	dc000317 	ldw	r16,12(sp)
  801e08:	dec00804 	addi	sp,sp,32
  801e0c:	f800283a 	ret

00801e10 <gcvtf>:
  801e10:	defffd04 	addi	sp,sp,-12
  801e14:	dcc00115 	stw	r19,4(sp)
  801e18:	dc400015 	stw	r17,0(sp)
  801e1c:	3027883a 	mov	r19,r6
  801e20:	2823883a 	mov	r17,r5
  801e24:	dfc00215 	stw	ra,8(sp)
  801e28:	0800c3c0 	call	800c3c <__extendsfdf2>
  801e2c:	180b883a 	mov	r5,r3
  801e30:	880d883a 	mov	r6,r17
  801e34:	980f883a 	mov	r7,r19
  801e38:	1009883a 	mov	r4,r2
  801e3c:	dfc00217 	ldw	ra,8(sp)
  801e40:	dcc00117 	ldw	r19,4(sp)
  801e44:	dc400017 	ldw	r17,0(sp)
  801e48:	dec00304 	addi	sp,sp,12
  801e4c:	0801d441 	jmpi	801d44 <gcvt>

00801e50 <ecvt>:
  801e50:	defffd04 	addi	sp,sp,-12
  801e54:	da000317 	ldw	r8,12(sp)
  801e58:	dfc00215 	stw	ra,8(sp)
  801e5c:	d8000115 	stw	zero,4(sp)
  801e60:	da000015 	stw	r8,0(sp)
  801e64:	0802f800 	call	802f80 <ecvtbuf>
  801e68:	dfc00217 	ldw	ra,8(sp)
  801e6c:	dec00304 	addi	sp,sp,12
  801e70:	f800283a 	ret

00801e74 <ecvtf>:
  801e74:	defffb04 	addi	sp,sp,-20
  801e78:	dfc00415 	stw	ra,16(sp)
  801e7c:	dd400315 	stw	r21,12(sp)
  801e80:	dcc00215 	stw	r19,8(sp)
  801e84:	382b883a 	mov	r21,r7
  801e88:	3027883a 	mov	r19,r6
  801e8c:	dc400115 	stw	r17,4(sp)
  801e90:	2823883a 	mov	r17,r5
  801e94:	0800c3c0 	call	800c3c <__extendsfdf2>
  801e98:	180b883a 	mov	r5,r3
  801e9c:	880d883a 	mov	r6,r17
  801ea0:	980f883a 	mov	r7,r19
  801ea4:	1009883a 	mov	r4,r2
  801ea8:	dd400015 	stw	r21,0(sp)
  801eac:	0801e500 	call	801e50 <ecvt>
  801eb0:	dfc00417 	ldw	ra,16(sp)
  801eb4:	dd400317 	ldw	r21,12(sp)
  801eb8:	dcc00217 	ldw	r19,8(sp)
  801ebc:	dc400117 	ldw	r17,4(sp)
  801ec0:	dec00504 	addi	sp,sp,20
  801ec4:	f800283a 	ret

00801ec8 <fcvt>:
  801ec8:	defffd04 	addi	sp,sp,-12
  801ecc:	da000317 	ldw	r8,12(sp)
  801ed0:	dfc00215 	stw	ra,8(sp)
  801ed4:	d8000115 	stw	zero,4(sp)
  801ed8:	da000015 	stw	r8,0(sp)
  801edc:	08030c80 	call	8030c8 <fcvtbuf>
  801ee0:	dfc00217 	ldw	ra,8(sp)
  801ee4:	dec00304 	addi	sp,sp,12
  801ee8:	f800283a 	ret

00801eec <fcvtf>:
  801eec:	defffb04 	addi	sp,sp,-20
  801ef0:	dfc00415 	stw	ra,16(sp)
  801ef4:	dd400315 	stw	r21,12(sp)
  801ef8:	dcc00215 	stw	r19,8(sp)
  801efc:	382b883a 	mov	r21,r7
  801f00:	3027883a 	mov	r19,r6
  801f04:	dc400115 	stw	r17,4(sp)
  801f08:	2823883a 	mov	r17,r5
  801f0c:	0800c3c0 	call	800c3c <__extendsfdf2>
  801f10:	180b883a 	mov	r5,r3
  801f14:	880d883a 	mov	r6,r17
  801f18:	980f883a 	mov	r7,r19
  801f1c:	1009883a 	mov	r4,r2
  801f20:	dd400015 	stw	r21,0(sp)
  801f24:	0801ec80 	call	801ec8 <fcvt>
  801f28:	dfc00417 	ldw	ra,16(sp)
  801f2c:	dd400317 	ldw	r21,12(sp)
  801f30:	dcc00217 	ldw	r19,8(sp)
  801f34:	dc400117 	ldw	r17,4(sp)
  801f38:	dec00504 	addi	sp,sp,20
  801f3c:	f800283a 	ret

00801f40 <free>:
  801f40:	00802074 	movhi	r2,129
  801f44:	10aeef04 	addi	r2,r2,-17476
  801f48:	200b883a 	mov	r5,r4
  801f4c:	11000017 	ldw	r4,0(r2)
  801f50:	080339c1 	jmpi	80339c <_free_r>

00801f54 <malloc>:
  801f54:	00802074 	movhi	r2,129
  801f58:	10aeef04 	addi	r2,r2,-17476
  801f5c:	200b883a 	mov	r5,r4
  801f60:	11000017 	ldw	r4,0(r2)
  801f64:	0801f681 	jmpi	801f68 <_malloc_r>

00801f68 <_malloc_r>:
  801f68:	defff604 	addi	sp,sp,-40
  801f6c:	28c002c4 	addi	r3,r5,11
  801f70:	00800584 	movi	r2,22
  801f74:	dc800215 	stw	r18,8(sp)
  801f78:	dfc00915 	stw	ra,36(sp)
  801f7c:	df000815 	stw	fp,32(sp)
  801f80:	ddc00715 	stw	r23,28(sp)
  801f84:	dd800615 	stw	r22,24(sp)
  801f88:	dd400515 	stw	r21,20(sp)
  801f8c:	dd000415 	stw	r20,16(sp)
  801f90:	dcc00315 	stw	r19,12(sp)
  801f94:	dc400115 	stw	r17,4(sp)
  801f98:	dc000015 	stw	r16,0(sp)
  801f9c:	2025883a 	mov	r18,r4
  801fa0:	10c01236 	bltu	r2,r3,801fec <_malloc_r+0x84>
  801fa4:	04400404 	movi	r17,16
  801fa8:	8940142e 	bgeu	r17,r5,801ffc <_malloc_r+0x94>
  801fac:	00800304 	movi	r2,12
  801fb0:	0007883a 	mov	r3,zero
  801fb4:	90800015 	stw	r2,0(r18)
  801fb8:	1805883a 	mov	r2,r3
  801fbc:	dfc00917 	ldw	ra,36(sp)
  801fc0:	df000817 	ldw	fp,32(sp)
  801fc4:	ddc00717 	ldw	r23,28(sp)
  801fc8:	dd800617 	ldw	r22,24(sp)
  801fcc:	dd400517 	ldw	r21,20(sp)
  801fd0:	dd000417 	ldw	r20,16(sp)
  801fd4:	dcc00317 	ldw	r19,12(sp)
  801fd8:	dc800217 	ldw	r18,8(sp)
  801fdc:	dc400117 	ldw	r17,4(sp)
  801fe0:	dc000017 	ldw	r16,0(sp)
  801fe4:	dec00a04 	addi	sp,sp,40
  801fe8:	f800283a 	ret
  801fec:	00bffe04 	movi	r2,-8
  801ff0:	18a2703a 	and	r17,r3,r2
  801ff4:	883fed16 	blt	r17,zero,801fac <_malloc_r+0x44>
  801ff8:	897fec36 	bltu	r17,r5,801fac <_malloc_r+0x44>
  801ffc:	9009883a 	mov	r4,r18
  802000:	08072f80 	call	8072f8 <__malloc_lock>
  802004:	00807dc4 	movi	r2,503
  802008:	14402b2e 	bgeu	r2,r17,8020b8 <_malloc_r+0x150>
  80200c:	8806d27a 	srli	r3,r17,9
  802010:	18003f1e 	bne	r3,zero,802110 <_malloc_r+0x1a8>
  802014:	880cd0fa 	srli	r6,r17,3
  802018:	300490fa 	slli	r2,r6,3
  80201c:	02c02074 	movhi	r11,129
  802020:	5ae96b04 	addi	r11,r11,-23124
  802024:	12cb883a 	add	r5,r2,r11
  802028:	2c000317 	ldw	r16,12(r5)
  80202c:	580f883a 	mov	r7,r11
  802030:	2c00041e 	bne	r5,r16,802044 <_malloc_r+0xdc>
  802034:	00000a06 	br	802060 <_malloc_r+0xf8>
  802038:	1800860e 	bge	r3,zero,802254 <_malloc_r+0x2ec>
  80203c:	84000317 	ldw	r16,12(r16)
  802040:	2c000726 	beq	r5,r16,802060 <_malloc_r+0xf8>
  802044:	80800117 	ldw	r2,4(r16)
  802048:	00ffff04 	movi	r3,-4
  80204c:	10c8703a 	and	r4,r2,r3
  802050:	2447c83a 	sub	r3,r4,r17
  802054:	008003c4 	movi	r2,15
  802058:	10fff70e 	bge	r2,r3,802038 <_malloc_r+0xd0>
  80205c:	31bfffc4 	addi	r6,r6,-1
  802060:	32400044 	addi	r9,r6,1
  802064:	02802074 	movhi	r10,129
  802068:	52a96d04 	addi	r10,r10,-23116
  80206c:	54000217 	ldw	r16,8(r10)
  802070:	8280a026 	beq	r16,r10,8022f4 <_malloc_r+0x38c>
  802074:	80800117 	ldw	r2,4(r16)
  802078:	00ffff04 	movi	r3,-4
  80207c:	10ca703a 	and	r5,r2,r3
  802080:	2c4dc83a 	sub	r6,r5,r17
  802084:	008003c4 	movi	r2,15
  802088:	11808316 	blt	r2,r6,802298 <_malloc_r+0x330>
  80208c:	52800315 	stw	r10,12(r10)
  802090:	52800215 	stw	r10,8(r10)
  802094:	30002916 	blt	r6,zero,80213c <_malloc_r+0x1d4>
  802098:	8147883a 	add	r3,r16,r5
  80209c:	18800117 	ldw	r2,4(r3)
  8020a0:	9009883a 	mov	r4,r18
  8020a4:	10800054 	ori	r2,r2,1
  8020a8:	18800115 	stw	r2,4(r3)
  8020ac:	08072fc0 	call	8072fc <__malloc_unlock>
  8020b0:	80c00204 	addi	r3,r16,8
  8020b4:	003fc006 	br	801fb8 <_malloc_r+0x50>
  8020b8:	02c02074 	movhi	r11,129
  8020bc:	5ae96b04 	addi	r11,r11,-23124
  8020c0:	8ac5883a 	add	r2,r17,r11
  8020c4:	14000317 	ldw	r16,12(r2)
  8020c8:	580f883a 	mov	r7,r11
  8020cc:	8806d0fa 	srli	r3,r17,3
  8020d0:	14006c26 	beq	r2,r16,802284 <_malloc_r+0x31c>
  8020d4:	80c00117 	ldw	r3,4(r16)
  8020d8:	00bfff04 	movi	r2,-4
  8020dc:	81800317 	ldw	r6,12(r16)
  8020e0:	1886703a 	and	r3,r3,r2
  8020e4:	80c7883a 	add	r3,r16,r3
  8020e8:	18800117 	ldw	r2,4(r3)
  8020ec:	81400217 	ldw	r5,8(r16)
  8020f0:	9009883a 	mov	r4,r18
  8020f4:	10800054 	ori	r2,r2,1
  8020f8:	18800115 	stw	r2,4(r3)
  8020fc:	31400215 	stw	r5,8(r6)
  802100:	29800315 	stw	r6,12(r5)
  802104:	08072fc0 	call	8072fc <__malloc_unlock>
  802108:	80c00204 	addi	r3,r16,8
  80210c:	003faa06 	br	801fb8 <_malloc_r+0x50>
  802110:	00800104 	movi	r2,4
  802114:	10c0052e 	bgeu	r2,r3,80212c <_malloc_r+0x1c4>
  802118:	00800504 	movi	r2,20
  80211c:	10c07836 	bltu	r2,r3,802300 <_malloc_r+0x398>
  802120:	198016c4 	addi	r6,r3,91
  802124:	300490fa 	slli	r2,r6,3
  802128:	003fbc06 	br	80201c <_malloc_r+0xb4>
  80212c:	8804d1ba 	srli	r2,r17,6
  802130:	11800e04 	addi	r6,r2,56
  802134:	300490fa 	slli	r2,r6,3
  802138:	003fb806 	br	80201c <_malloc_r+0xb4>
  80213c:	00807fc4 	movi	r2,511
  802140:	1140bb36 	bltu	r2,r5,802430 <_malloc_r+0x4c8>
  802144:	2806d0fa 	srli	r3,r5,3
  802148:	573ffe04 	addi	fp,r10,-8
  80214c:	00800044 	movi	r2,1
  802150:	180890fa 	slli	r4,r3,3
  802154:	1807d0ba 	srai	r3,r3,2
  802158:	e1c00117 	ldw	r7,4(fp)
  80215c:	5909883a 	add	r4,r11,r4
  802160:	21400217 	ldw	r5,8(r4)
  802164:	10c4983a 	sll	r2,r2,r3
  802168:	81000315 	stw	r4,12(r16)
  80216c:	81400215 	stw	r5,8(r16)
  802170:	388eb03a 	or	r7,r7,r2
  802174:	2c000315 	stw	r16,12(r5)
  802178:	24000215 	stw	r16,8(r4)
  80217c:	e1c00115 	stw	r7,4(fp)
  802180:	4807883a 	mov	r3,r9
  802184:	4800cd16 	blt	r9,zero,8024bc <_malloc_r+0x554>
  802188:	1807d0ba 	srai	r3,r3,2
  80218c:	00800044 	movi	r2,1
  802190:	10c8983a 	sll	r4,r2,r3
  802194:	39004436 	bltu	r7,r4,8022a8 <_malloc_r+0x340>
  802198:	21c4703a 	and	r2,r4,r7
  80219c:	10000a1e 	bne	r2,zero,8021c8 <_malloc_r+0x260>
  8021a0:	2109883a 	add	r4,r4,r4
  8021a4:	00bfff04 	movi	r2,-4
  8021a8:	4884703a 	and	r2,r9,r2
  8021ac:	3906703a 	and	r3,r7,r4
  8021b0:	12400104 	addi	r9,r2,4
  8021b4:	1800041e 	bne	r3,zero,8021c8 <_malloc_r+0x260>
  8021b8:	2109883a 	add	r4,r4,r4
  8021bc:	3904703a 	and	r2,r7,r4
  8021c0:	4a400104 	addi	r9,r9,4
  8021c4:	103ffc26 	beq	r2,zero,8021b8 <_malloc_r+0x250>
  8021c8:	480490fa 	slli	r2,r9,3
  8021cc:	4819883a 	mov	r12,r9
  8021d0:	023fff04 	movi	r8,-4
  8021d4:	589b883a 	add	r13,r11,r2
  8021d8:	6807883a 	mov	r3,r13
  8021dc:	014003c4 	movi	r5,15
  8021e0:	1c000317 	ldw	r16,12(r3)
  8021e4:	1c00041e 	bne	r3,r16,8021f8 <_malloc_r+0x290>
  8021e8:	0000a706 	br	802488 <_malloc_r+0x520>
  8021ec:	3000ab0e 	bge	r6,zero,80249c <_malloc_r+0x534>
  8021f0:	84000317 	ldw	r16,12(r16)
  8021f4:	1c00a426 	beq	r3,r16,802488 <_malloc_r+0x520>
  8021f8:	80800117 	ldw	r2,4(r16)
  8021fc:	1204703a 	and	r2,r2,r8
  802200:	144dc83a 	sub	r6,r2,r17
  802204:	29bff90e 	bge	r5,r6,8021ec <_malloc_r+0x284>
  802208:	81000317 	ldw	r4,12(r16)
  80220c:	80c00217 	ldw	r3,8(r16)
  802210:	89400054 	ori	r5,r17,1
  802214:	8445883a 	add	r2,r16,r17
  802218:	20c00215 	stw	r3,8(r4)
  80221c:	19000315 	stw	r4,12(r3)
  802220:	81400115 	stw	r5,4(r16)
  802224:	1187883a 	add	r3,r2,r6
  802228:	31000054 	ori	r4,r6,1
  80222c:	50800315 	stw	r2,12(r10)
  802230:	50800215 	stw	r2,8(r10)
  802234:	19800015 	stw	r6,0(r3)
  802238:	11000115 	stw	r4,4(r2)
  80223c:	12800215 	stw	r10,8(r2)
  802240:	12800315 	stw	r10,12(r2)
  802244:	9009883a 	mov	r4,r18
  802248:	08072fc0 	call	8072fc <__malloc_unlock>
  80224c:	80c00204 	addi	r3,r16,8
  802250:	003f5906 	br	801fb8 <_malloc_r+0x50>
  802254:	8109883a 	add	r4,r16,r4
  802258:	20800117 	ldw	r2,4(r4)
  80225c:	80c00217 	ldw	r3,8(r16)
  802260:	81400317 	ldw	r5,12(r16)
  802264:	10800054 	ori	r2,r2,1
  802268:	20800115 	stw	r2,4(r4)
  80226c:	28c00215 	stw	r3,8(r5)
  802270:	19400315 	stw	r5,12(r3)
  802274:	9009883a 	mov	r4,r18
  802278:	08072fc0 	call	8072fc <__malloc_unlock>
  80227c:	80c00204 	addi	r3,r16,8
  802280:	003f4d06 	br	801fb8 <_malloc_r+0x50>
  802284:	80800204 	addi	r2,r16,8
  802288:	14000317 	ldw	r16,12(r2)
  80228c:	143f911e 	bne	r2,r16,8020d4 <_malloc_r+0x16c>
  802290:	1a400084 	addi	r9,r3,2
  802294:	003f7306 	br	802064 <_malloc_r+0xfc>
  802298:	88c00054 	ori	r3,r17,1
  80229c:	8445883a 	add	r2,r16,r17
  8022a0:	80c00115 	stw	r3,4(r16)
  8022a4:	003fdf06 	br	802224 <_malloc_r+0x2bc>
  8022a8:	e4000217 	ldw	r16,8(fp)
  8022ac:	00bfff04 	movi	r2,-4
  8022b0:	80c00117 	ldw	r3,4(r16)
  8022b4:	802d883a 	mov	r22,r16
  8022b8:	18aa703a 	and	r21,r3,r2
  8022bc:	ac401636 	bltu	r21,r17,802318 <_malloc_r+0x3b0>
  8022c0:	ac49c83a 	sub	r4,r21,r17
  8022c4:	008003c4 	movi	r2,15
  8022c8:	1100130e 	bge	r2,r4,802318 <_malloc_r+0x3b0>
  8022cc:	88800054 	ori	r2,r17,1
  8022d0:	8447883a 	add	r3,r16,r17
  8022d4:	80800115 	stw	r2,4(r16)
  8022d8:	20800054 	ori	r2,r4,1
  8022dc:	18800115 	stw	r2,4(r3)
  8022e0:	e0c00215 	stw	r3,8(fp)
  8022e4:	9009883a 	mov	r4,r18
  8022e8:	08072fc0 	call	8072fc <__malloc_unlock>
  8022ec:	80c00204 	addi	r3,r16,8
  8022f0:	003f3106 	br	801fb8 <_malloc_r+0x50>
  8022f4:	39c00117 	ldw	r7,4(r7)
  8022f8:	573ffe04 	addi	fp,r10,-8
  8022fc:	003fa006 	br	802180 <_malloc_r+0x218>
  802300:	00801504 	movi	r2,84
  802304:	10c06736 	bltu	r2,r3,8024a4 <_malloc_r+0x53c>
  802308:	8804d33a 	srli	r2,r17,12
  80230c:	11801b84 	addi	r6,r2,110
  802310:	300490fa 	slli	r2,r6,3
  802314:	003f4106 	br	80201c <_malloc_r+0xb4>
  802318:	d0a6a017 	ldw	r2,-25984(gp)
  80231c:	d0e00317 	ldw	r3,-32756(gp)
  802320:	053fffc4 	movi	r20,-1
  802324:	10800404 	addi	r2,r2,16
  802328:	88a7883a 	add	r19,r17,r2
  80232c:	1d000326 	beq	r3,r20,80233c <_malloc_r+0x3d4>
  802330:	98c3ffc4 	addi	r3,r19,4095
  802334:	00bc0004 	movi	r2,-4096
  802338:	18a6703a 	and	r19,r3,r2
  80233c:	9009883a 	mov	r4,r18
  802340:	980b883a 	mov	r5,r19
  802344:	08027480 	call	802748 <_sbrk_r>
  802348:	1009883a 	mov	r4,r2
  80234c:	15000426 	beq	r2,r20,802360 <_malloc_r+0x3f8>
  802350:	854b883a 	add	r5,r16,r21
  802354:	1029883a 	mov	r20,r2
  802358:	11405a2e 	bgeu	r2,r5,8024c4 <_malloc_r+0x55c>
  80235c:	87000c26 	beq	r16,fp,802390 <_malloc_r+0x428>
  802360:	e4000217 	ldw	r16,8(fp)
  802364:	80c00117 	ldw	r3,4(r16)
  802368:	00bfff04 	movi	r2,-4
  80236c:	1884703a 	and	r2,r3,r2
  802370:	14400336 	bltu	r2,r17,802380 <_malloc_r+0x418>
  802374:	1449c83a 	sub	r4,r2,r17
  802378:	008003c4 	movi	r2,15
  80237c:	113fd316 	blt	r2,r4,8022cc <_malloc_r+0x364>
  802380:	9009883a 	mov	r4,r18
  802384:	08072fc0 	call	8072fc <__malloc_unlock>
  802388:	0007883a 	mov	r3,zero
  80238c:	003f0a06 	br	801fb8 <_malloc_r+0x50>
  802390:	05c02074 	movhi	r23,129
  802394:	bdf59904 	addi	r23,r23,-10652
  802398:	b8800017 	ldw	r2,0(r23)
  80239c:	988d883a 	add	r6,r19,r2
  8023a0:	b9800015 	stw	r6,0(r23)
  8023a4:	d0e00317 	ldw	r3,-32756(gp)
  8023a8:	00bfffc4 	movi	r2,-1
  8023ac:	18808e26 	beq	r3,r2,8025e8 <_malloc_r+0x680>
  8023b0:	2145c83a 	sub	r2,r4,r5
  8023b4:	3085883a 	add	r2,r6,r2
  8023b8:	b8800015 	stw	r2,0(r23)
  8023bc:	20c001cc 	andi	r3,r4,7
  8023c0:	18005f1e 	bne	r3,zero,802540 <_malloc_r+0x5d8>
  8023c4:	000b883a 	mov	r5,zero
  8023c8:	a4c5883a 	add	r2,r20,r19
  8023cc:	1083ffcc 	andi	r2,r2,4095
  8023d0:	00c40004 	movi	r3,4096
  8023d4:	1887c83a 	sub	r3,r3,r2
  8023d8:	28e7883a 	add	r19,r5,r3
  8023dc:	9009883a 	mov	r4,r18
  8023e0:	980b883a 	mov	r5,r19
  8023e4:	08027480 	call	802748 <_sbrk_r>
  8023e8:	1007883a 	mov	r3,r2
  8023ec:	00bfffc4 	movi	r2,-1
  8023f0:	18807a26 	beq	r3,r2,8025dc <_malloc_r+0x674>
  8023f4:	1d05c83a 	sub	r2,r3,r20
  8023f8:	9885883a 	add	r2,r19,r2
  8023fc:	10c00054 	ori	r3,r2,1
  802400:	b8800017 	ldw	r2,0(r23)
  802404:	a021883a 	mov	r16,r20
  802408:	a0c00115 	stw	r3,4(r20)
  80240c:	9885883a 	add	r2,r19,r2
  802410:	b8800015 	stw	r2,0(r23)
  802414:	e5000215 	stw	r20,8(fp)
  802418:	b7003626 	beq	r22,fp,8024f4 <_malloc_r+0x58c>
  80241c:	018003c4 	movi	r6,15
  802420:	35404b36 	bltu	r6,r21,802550 <_malloc_r+0x5e8>
  802424:	00800044 	movi	r2,1
  802428:	a0800115 	stw	r2,4(r20)
  80242c:	003fcd06 	br	802364 <_malloc_r+0x3fc>
  802430:	2808d27a 	srli	r4,r5,9
  802434:	2000371e 	bne	r4,zero,802514 <_malloc_r+0x5ac>
  802438:	2808d0fa 	srli	r4,r5,3
  80243c:	200690fa 	slli	r3,r4,3
  802440:	1ad1883a 	add	r8,r3,r11
  802444:	41800217 	ldw	r6,8(r8)
  802448:	41805b26 	beq	r8,r6,8025b8 <_malloc_r+0x650>
  80244c:	30800117 	ldw	r2,4(r6)
  802450:	00ffff04 	movi	r3,-4
  802454:	10c4703a 	and	r2,r2,r3
  802458:	2880022e 	bgeu	r5,r2,802464 <_malloc_r+0x4fc>
  80245c:	31800217 	ldw	r6,8(r6)
  802460:	41bffa1e 	bne	r8,r6,80244c <_malloc_r+0x4e4>
  802464:	32000317 	ldw	r8,12(r6)
  802468:	39c00117 	ldw	r7,4(r7)
  80246c:	82000315 	stw	r8,12(r16)
  802470:	81800215 	stw	r6,8(r16)
  802474:	07002074 	movhi	fp,129
  802478:	e7296b04 	addi	fp,fp,-23124
  80247c:	34000315 	stw	r16,12(r6)
  802480:	44000215 	stw	r16,8(r8)
  802484:	003f3e06 	br	802180 <_malloc_r+0x218>
  802488:	63000044 	addi	r12,r12,1
  80248c:	608000cc 	andi	r2,r12,3
  802490:	10005d26 	beq	r2,zero,802608 <_malloc_r+0x6a0>
  802494:	18c00204 	addi	r3,r3,8
  802498:	003f5106 	br	8021e0 <_malloc_r+0x278>
  80249c:	8089883a 	add	r4,r16,r2
  8024a0:	003f6d06 	br	802258 <_malloc_r+0x2f0>
  8024a4:	00805504 	movi	r2,340
  8024a8:	10c02036 	bltu	r2,r3,80252c <_malloc_r+0x5c4>
  8024ac:	8804d3fa 	srli	r2,r17,15
  8024b0:	11801dc4 	addi	r6,r2,119
  8024b4:	300490fa 	slli	r2,r6,3
  8024b8:	003ed806 	br	80201c <_malloc_r+0xb4>
  8024bc:	48c000c4 	addi	r3,r9,3
  8024c0:	003f3106 	br	802188 <_malloc_r+0x220>
  8024c4:	05c02074 	movhi	r23,129
  8024c8:	bdf59904 	addi	r23,r23,-10652
  8024cc:	b8800017 	ldw	r2,0(r23)
  8024d0:	988d883a 	add	r6,r19,r2
  8024d4:	b9800015 	stw	r6,0(r23)
  8024d8:	293fb21e 	bne	r5,r4,8023a4 <_malloc_r+0x43c>
  8024dc:	2083ffcc 	andi	r2,r4,4095
  8024e0:	103fb01e 	bne	r2,zero,8023a4 <_malloc_r+0x43c>
  8024e4:	e4000217 	ldw	r16,8(fp)
  8024e8:	9d45883a 	add	r2,r19,r21
  8024ec:	10800054 	ori	r2,r2,1
  8024f0:	80800115 	stw	r2,4(r16)
  8024f4:	b8c00017 	ldw	r3,0(r23)
  8024f8:	d0a6a117 	ldw	r2,-25980(gp)
  8024fc:	10c0012e 	bgeu	r2,r3,802504 <_malloc_r+0x59c>
  802500:	d0e6a115 	stw	r3,-25980(gp)
  802504:	d0a6a217 	ldw	r2,-25976(gp)
  802508:	10ff962e 	bgeu	r2,r3,802364 <_malloc_r+0x3fc>
  80250c:	d0e6a215 	stw	r3,-25976(gp)
  802510:	003f9406 	br	802364 <_malloc_r+0x3fc>
  802514:	00800104 	movi	r2,4
  802518:	11001e36 	bltu	r2,r4,802594 <_malloc_r+0x62c>
  80251c:	2804d1ba 	srli	r2,r5,6
  802520:	11000e04 	addi	r4,r2,56
  802524:	200690fa 	slli	r3,r4,3
  802528:	003fc506 	br	802440 <_malloc_r+0x4d8>
  80252c:	00815504 	movi	r2,1364
  802530:	10c01d2e 	bgeu	r2,r3,8025a8 <_malloc_r+0x640>
  802534:	01801f84 	movi	r6,126
  802538:	0080fc04 	movi	r2,1008
  80253c:	003eb706 	br	80201c <_malloc_r+0xb4>
  802540:	00800204 	movi	r2,8
  802544:	10cbc83a 	sub	r5,r2,r3
  802548:	2169883a 	add	r20,r4,r5
  80254c:	003f9e06 	br	8023c8 <_malloc_r+0x460>
  802550:	00bffe04 	movi	r2,-8
  802554:	a93ffd04 	addi	r4,r21,-12
  802558:	2088703a 	and	r4,r4,r2
  80255c:	b10b883a 	add	r5,r22,r4
  802560:	00c00144 	movi	r3,5
  802564:	28c00215 	stw	r3,8(r5)
  802568:	28c00115 	stw	r3,4(r5)
  80256c:	b0800117 	ldw	r2,4(r22)
  802570:	1080004c 	andi	r2,r2,1
  802574:	2084b03a 	or	r2,r4,r2
  802578:	b0800115 	stw	r2,4(r22)
  80257c:	313fdd2e 	bgeu	r6,r4,8024f4 <_malloc_r+0x58c>
  802580:	b1400204 	addi	r5,r22,8
  802584:	9009883a 	mov	r4,r18
  802588:	080339c0 	call	80339c <_free_r>
  80258c:	e4000217 	ldw	r16,8(fp)
  802590:	003fd806 	br	8024f4 <_malloc_r+0x58c>
  802594:	00800504 	movi	r2,20
  802598:	11001536 	bltu	r2,r4,8025f0 <_malloc_r+0x688>
  80259c:	210016c4 	addi	r4,r4,91
  8025a0:	200690fa 	slli	r3,r4,3
  8025a4:	003fa606 	br	802440 <_malloc_r+0x4d8>
  8025a8:	8804d4ba 	srli	r2,r17,18
  8025ac:	11801f04 	addi	r6,r2,124
  8025b0:	300490fa 	slli	r2,r6,3
  8025b4:	003e9906 	br	80201c <_malloc_r+0xb4>
  8025b8:	2009d0ba 	srai	r4,r4,2
  8025bc:	01402074 	movhi	r5,129
  8025c0:	29696b04 	addi	r5,r5,-23124
  8025c4:	00c00044 	movi	r3,1
  8025c8:	28800117 	ldw	r2,4(r5)
  8025cc:	1906983a 	sll	r3,r3,r4
  8025d0:	10c4b03a 	or	r2,r2,r3
  8025d4:	28800115 	stw	r2,4(r5)
  8025d8:	003fa306 	br	802468 <_malloc_r+0x500>
  8025dc:	0027883a 	mov	r19,zero
  8025e0:	00c00044 	movi	r3,1
  8025e4:	003f8606 	br	802400 <_malloc_r+0x498>
  8025e8:	d1200315 	stw	r4,-32756(gp)
  8025ec:	003f7306 	br	8023bc <_malloc_r+0x454>
  8025f0:	00801504 	movi	r2,84
  8025f4:	11001936 	bltu	r2,r4,80265c <_malloc_r+0x6f4>
  8025f8:	2804d33a 	srli	r2,r5,12
  8025fc:	11001b84 	addi	r4,r2,110
  802600:	200690fa 	slli	r3,r4,3
  802604:	003f8e06 	br	802440 <_malloc_r+0x4d8>
  802608:	480b883a 	mov	r5,r9
  80260c:	6807883a 	mov	r3,r13
  802610:	288000cc 	andi	r2,r5,3
  802614:	18fffe04 	addi	r3,r3,-8
  802618:	297fffc4 	addi	r5,r5,-1
  80261c:	10001526 	beq	r2,zero,802674 <_malloc_r+0x70c>
  802620:	18800217 	ldw	r2,8(r3)
  802624:	10fffa26 	beq	r2,r3,802610 <_malloc_r+0x6a8>
  802628:	2109883a 	add	r4,r4,r4
  80262c:	393f1e36 	bltu	r7,r4,8022a8 <_malloc_r+0x340>
  802630:	203f1d26 	beq	r4,zero,8022a8 <_malloc_r+0x340>
  802634:	21c4703a 	and	r2,r4,r7
  802638:	10000226 	beq	r2,zero,802644 <_malloc_r+0x6dc>
  80263c:	6013883a 	mov	r9,r12
  802640:	003ee106 	br	8021c8 <_malloc_r+0x260>
  802644:	2109883a 	add	r4,r4,r4
  802648:	3904703a 	and	r2,r7,r4
  80264c:	63000104 	addi	r12,r12,4
  802650:	103ffc26 	beq	r2,zero,802644 <_malloc_r+0x6dc>
  802654:	6013883a 	mov	r9,r12
  802658:	003edb06 	br	8021c8 <_malloc_r+0x260>
  80265c:	00805504 	movi	r2,340
  802660:	11000836 	bltu	r2,r4,802684 <_malloc_r+0x71c>
  802664:	2804d3fa 	srli	r2,r5,15
  802668:	11001dc4 	addi	r4,r2,119
  80266c:	200690fa 	slli	r3,r4,3
  802670:	003f7306 	br	802440 <_malloc_r+0x4d8>
  802674:	0104303a 	nor	r2,zero,r4
  802678:	388e703a 	and	r7,r7,r2
  80267c:	e1c00115 	stw	r7,4(fp)
  802680:	003fe906 	br	802628 <_malloc_r+0x6c0>
  802684:	00815504 	movi	r2,1364
  802688:	1100032e 	bgeu	r2,r4,802698 <_malloc_r+0x730>
  80268c:	01001f84 	movi	r4,126
  802690:	00c0fc04 	movi	r3,1008
  802694:	003f6a06 	br	802440 <_malloc_r+0x4d8>
  802698:	2804d4ba 	srli	r2,r5,18
  80269c:	11001f04 	addi	r4,r2,124
  8026a0:	200690fa 	slli	r3,r4,3
  8026a4:	003f6606 	br	802440 <_malloc_r+0x4d8>

008026a8 <memcpy>:
  8026a8:	01c003c4 	movi	r7,15
  8026ac:	2007883a 	mov	r3,r4
  8026b0:	3980032e 	bgeu	r7,r6,8026c0 <memcpy+0x18>
  8026b4:	2904b03a 	or	r2,r5,r4
  8026b8:	108000cc 	andi	r2,r2,3
  8026bc:	10000926 	beq	r2,zero,8026e4 <memcpy+0x3c>
  8026c0:	30000626 	beq	r6,zero,8026dc <memcpy+0x34>
  8026c4:	30cd883a 	add	r6,r6,r3
  8026c8:	28800003 	ldbu	r2,0(r5)
  8026cc:	29400044 	addi	r5,r5,1
  8026d0:	18800005 	stb	r2,0(r3)
  8026d4:	18c00044 	addi	r3,r3,1
  8026d8:	30fffb1e 	bne	r6,r3,8026c8 <memcpy+0x20>
  8026dc:	2005883a 	mov	r2,r4
  8026e0:	f800283a 	ret
  8026e4:	3811883a 	mov	r8,r7
  8026e8:	200f883a 	mov	r7,r4
  8026ec:	28c00017 	ldw	r3,0(r5)
  8026f0:	31bffc04 	addi	r6,r6,-16
  8026f4:	38c00015 	stw	r3,0(r7)
  8026f8:	28800117 	ldw	r2,4(r5)
  8026fc:	38800115 	stw	r2,4(r7)
  802700:	28c00217 	ldw	r3,8(r5)
  802704:	38c00215 	stw	r3,8(r7)
  802708:	28800317 	ldw	r2,12(r5)
  80270c:	29400404 	addi	r5,r5,16
  802710:	38800315 	stw	r2,12(r7)
  802714:	39c00404 	addi	r7,r7,16
  802718:	41bff436 	bltu	r8,r6,8026ec <memcpy+0x44>
  80271c:	008000c4 	movi	r2,3
  802720:	1180072e 	bgeu	r2,r6,802740 <memcpy+0x98>
  802724:	1007883a 	mov	r3,r2
  802728:	28800017 	ldw	r2,0(r5)
  80272c:	31bfff04 	addi	r6,r6,-4
  802730:	29400104 	addi	r5,r5,4
  802734:	38800015 	stw	r2,0(r7)
  802738:	39c00104 	addi	r7,r7,4
  80273c:	19bffa36 	bltu	r3,r6,802728 <memcpy+0x80>
  802740:	3807883a 	mov	r3,r7
  802744:	003fde06 	br	8026c0 <memcpy+0x18>

00802748 <_sbrk_r>:
  802748:	defffd04 	addi	sp,sp,-12
  80274c:	dc000015 	stw	r16,0(sp)
  802750:	04002074 	movhi	r16,129
  802754:	84359204 	addi	r16,r16,-10680
  802758:	dc400115 	stw	r17,4(sp)
  80275c:	80000015 	stw	zero,0(r16)
  802760:	2023883a 	mov	r17,r4
  802764:	2809883a 	mov	r4,r5
  802768:	dfc00215 	stw	ra,8(sp)
  80276c:	08073140 	call	807314 <sbrk>
  802770:	1007883a 	mov	r3,r2
  802774:	00bfffc4 	movi	r2,-1
  802778:	18800626 	beq	r3,r2,802794 <_sbrk_r+0x4c>
  80277c:	1805883a 	mov	r2,r3
  802780:	dfc00217 	ldw	ra,8(sp)
  802784:	dc400117 	ldw	r17,4(sp)
  802788:	dc000017 	ldw	r16,0(sp)
  80278c:	dec00304 	addi	sp,sp,12
  802790:	f800283a 	ret
  802794:	80800017 	ldw	r2,0(r16)
  802798:	103ff826 	beq	r2,zero,80277c <_sbrk_r+0x34>
  80279c:	88800015 	stw	r2,0(r17)
  8027a0:	1805883a 	mov	r2,r3
  8027a4:	dfc00217 	ldw	ra,8(sp)
  8027a8:	dc400117 	ldw	r17,4(sp)
  8027ac:	dc000017 	ldw	r16,0(sp)
  8027b0:	dec00304 	addi	sp,sp,12
  8027b4:	f800283a 	ret

008027b8 <print_e>:
  8027b8:	defff404 	addi	sp,sp,-48
  8027bc:	dcc00a15 	stw	r19,40(sp)
  8027c0:	dcc00c17 	ldw	r19,48(sp)
  8027c4:	3005883a 	mov	r2,r6
  8027c8:	dc400815 	stw	r17,32(sp)
  8027cc:	2823883a 	mov	r17,r5
  8027d0:	100b883a 	mov	r5,r2
  8027d4:	d8800604 	addi	r2,sp,24
  8027d8:	380d883a 	mov	r6,r7
  8027dc:	9a000044 	addi	r8,r19,1
  8027e0:	d8800115 	stw	r2,4(sp)
  8027e4:	d8c00504 	addi	r3,sp,20
  8027e8:	d8800404 	addi	r2,sp,16
  8027ec:	01c00084 	movi	r7,2
  8027f0:	dc800915 	stw	r18,36(sp)
  8027f4:	dc000715 	stw	r16,28(sp)
  8027f8:	dfc00b15 	stw	ra,44(sp)
  8027fc:	da000015 	stw	r8,0(sp)
  802800:	d8c00315 	stw	r3,12(sp)
  802804:	d8800215 	stw	r2,8(sp)
  802808:	dc800d03 	ldbu	r18,52(sp)
  80280c:	0804ff00 	call	804ff0 <_dtoa_r>
  802810:	dc000617 	ldw	r16,24(sp)
  802814:	100b883a 	mov	r5,r2
  802818:	0089c3c4 	movi	r2,9999
  80281c:	80805926 	beq	r16,r2,802984 <print_e+0x1cc>
  802820:	28c00003 	ldbu	r3,0(r5)
  802824:	89000044 	addi	r4,r17,1
  802828:	29400044 	addi	r5,r5,1
  80282c:	88c00005 	stb	r3,0(r17)
  802830:	d8800e17 	ldw	r2,56(sp)
  802834:	10004326 	beq	r2,zero,802944 <print_e+0x18c>
  802838:	00800b84 	movi	r2,46
  80283c:	20800005 	stb	r2,0(r4)
  802840:	9811883a 	mov	r8,r19
  802844:	21000044 	addi	r4,r4,1
  802848:	28800003 	ldbu	r2,0(r5)
  80284c:	10000926 	beq	r2,zero,802874 <print_e+0xbc>
  802850:	02000216 	blt	zero,r8,80285c <print_e+0xa4>
  802854:	00000706 	br	802874 <print_e+0xbc>
  802858:	40000626 	beq	r8,zero,802874 <print_e+0xbc>
  80285c:	20800005 	stb	r2,0(r4)
  802860:	29400044 	addi	r5,r5,1
  802864:	28800003 	ldbu	r2,0(r5)
  802868:	423fffc4 	addi	r8,r8,-1
  80286c:	21000044 	addi	r4,r4,1
  802870:	103ff91e 	bne	r2,zero,802858 <print_e+0xa0>
  802874:	90c03fcc 	andi	r3,r18,255
  802878:	18c0201c 	xori	r3,r3,128
  80287c:	18ffe004 	addi	r3,r3,-128
  802880:	008019c4 	movi	r2,103
  802884:	18803226 	beq	r3,r2,802950 <print_e+0x198>
  802888:	008011c4 	movi	r2,71
  80288c:	18803b26 	beq	r3,r2,80297c <print_e+0x1c4>
  802890:	0200080e 	bge	zero,r8,8028b4 <print_e+0xfc>
  802894:	2007883a 	mov	r3,r4
  802898:	4005883a 	mov	r2,r8
  80289c:	01400c04 	movi	r5,48
  8028a0:	10bfffc4 	addi	r2,r2,-1
  8028a4:	19400005 	stb	r5,0(r3)
  8028a8:	18c00044 	addi	r3,r3,1
  8028ac:	103ffc1e 	bne	r2,zero,8028a0 <print_e+0xe8>
  8028b0:	2209883a 	add	r4,r4,r8
  8028b4:	843fffc4 	addi	r16,r16,-1
  8028b8:	24800005 	stb	r18,0(r4)
  8028bc:	dc000615 	stw	r16,24(sp)
  8028c0:	80002816 	blt	r16,zero,802964 <print_e+0x1ac>
  8028c4:	00800ac4 	movi	r2,43
  8028c8:	20800045 	stb	r2,1(r4)
  8028cc:	24400084 	addi	r17,r4,2
  8028d0:	008018c4 	movi	r2,99
  8028d4:	1400090e 	bge	r2,r16,8028fc <print_e+0x144>
  8028d8:	8009883a 	mov	r4,r16
  8028dc:	01401904 	movi	r5,100
  8028e0:	080705c0 	call	80705c <__divsi3>
  8028e4:	10c01924 	muli	r3,r2,100
  8028e8:	10800c04 	addi	r2,r2,48
  8028ec:	88800005 	stb	r2,0(r17)
  8028f0:	80e1c83a 	sub	r16,r16,r3
  8028f4:	8c400044 	addi	r17,r17,1
  8028f8:	dc000615 	stw	r16,24(sp)
  8028fc:	8009883a 	mov	r4,r16
  802900:	01400284 	movi	r5,10
  802904:	080705c0 	call	80705c <__divsi3>
  802908:	10c002a4 	muli	r3,r2,10
  80290c:	10800c04 	addi	r2,r2,48
  802910:	88800005 	stb	r2,0(r17)
  802914:	80c7c83a 	sub	r3,r16,r3
  802918:	18800c04 	addi	r2,r3,48
  80291c:	88800045 	stb	r2,1(r17)
  802920:	88000085 	stb	zero,2(r17)
  802924:	d8c00615 	stw	r3,24(sp)
  802928:	dfc00b17 	ldw	ra,44(sp)
  80292c:	dcc00a17 	ldw	r19,40(sp)
  802930:	dc800917 	ldw	r18,36(sp)
  802934:	dc400817 	ldw	r17,32(sp)
  802938:	dc000717 	ldw	r16,28(sp)
  80293c:	dec00c04 	addi	sp,sp,48
  802940:	f800283a 	ret
  802944:	983fbc1e 	bne	r19,zero,802838 <print_e+0x80>
  802948:	0011883a 	mov	r8,zero
  80294c:	003fbe06 	br	802848 <print_e+0x90>
  802950:	04801944 	movi	r18,101
  802954:	843fffc4 	addi	r16,r16,-1
  802958:	24800005 	stb	r18,0(r4)
  80295c:	dc000615 	stw	r16,24(sp)
  802960:	803fd80e 	bge	r16,zero,8028c4 <print_e+0x10c>
  802964:	00800b44 	movi	r2,45
  802968:	0421c83a 	sub	r16,zero,r16
  80296c:	20800045 	stb	r2,1(r4)
  802970:	24400084 	addi	r17,r4,2
  802974:	dc000615 	stw	r16,24(sp)
  802978:	003fd506 	br	8028d0 <print_e+0x118>
  80297c:	04801144 	movi	r18,69
  802980:	003fcc06 	br	8028b4 <print_e+0xfc>
  802984:	8809883a 	mov	r4,r17
  802988:	0804c980 	call	804c98 <strcpy>
  80298c:	dfc00b17 	ldw	ra,44(sp)
  802990:	dcc00a17 	ldw	r19,40(sp)
  802994:	dc800917 	ldw	r18,36(sp)
  802998:	dc400817 	ldw	r17,32(sp)
  80299c:	dc000717 	ldw	r16,28(sp)
  8029a0:	dec00c04 	addi	sp,sp,48
  8029a4:	f800283a 	ret

008029a8 <_gcvt>:
  8029a8:	defff104 	addi	sp,sp,-60
  8029ac:	dc400815 	stw	r17,32(sp)
  8029b0:	0005883a 	mov	r2,zero
  8029b4:	3023883a 	mov	r17,r6
  8029b8:	dcc00a15 	stw	r19,40(sp)
  8029bc:	dc800915 	stw	r18,36(sp)
  8029c0:	dc000715 	stw	r16,28(sp)
  8029c4:	2027883a 	mov	r19,r4
  8029c8:	2821883a 	mov	r16,r5
  8029cc:	3825883a 	mov	r18,r7
  8029d0:	2809883a 	mov	r4,r5
  8029d4:	100d883a 	mov	r6,r2
  8029d8:	880b883a 	mov	r5,r17
  8029dc:	000f883a 	mov	r7,zero
  8029e0:	dd800d15 	stw	r22,52(sp)
  8029e4:	dd400c15 	stw	r21,48(sp)
  8029e8:	dd000b15 	stw	r20,44(sp)
  8029ec:	dfc00e15 	stw	ra,56(sp)
  8029f0:	dd400f17 	ldw	r21,60(sp)
  8029f4:	dd801117 	ldw	r22,68(sp)
  8029f8:	dd001003 	ldbu	r20,64(sp)
  8029fc:	0806d000 	call	806d00 <__ltdf2>
  802a00:	10008e16 	blt	r2,zero,802c3c <_gcvt+0x294>
  802a04:	000d883a 	mov	r6,zero
  802a08:	000f883a 	mov	r7,zero
  802a0c:	8009883a 	mov	r4,r16
  802a10:	880b883a 	mov	r5,r17
  802a14:	0806ae00 	call	806ae0 <__eqdf2>
  802a18:	10000e1e 	bne	r2,zero,802a54 <_gcvt+0xac>
  802a1c:	00800c04 	movi	r2,48
  802a20:	a8800005 	stb	r2,0(r21)
  802a24:	a8000045 	stb	zero,1(r21)
  802a28:	a805883a 	mov	r2,r21
  802a2c:	dfc00e17 	ldw	ra,56(sp)
  802a30:	dd800d17 	ldw	r22,52(sp)
  802a34:	dd400c17 	ldw	r21,48(sp)
  802a38:	dd000b17 	ldw	r20,44(sp)
  802a3c:	dcc00a17 	ldw	r19,40(sp)
  802a40:	dc800917 	ldw	r18,36(sp)
  802a44:	dc400817 	ldw	r17,32(sp)
  802a48:	dc000717 	ldw	r16,28(sp)
  802a4c:	dec00f04 	addi	sp,sp,60
  802a50:	f800283a 	ret
  802a54:	00bac734 	movhi	r2,60188
  802a58:	1090cb44 	addi	r2,r2,17197
  802a5c:	00cfc6b4 	movhi	r3,16154
  802a60:	18cdb884 	addi	r3,r3,14050
  802a64:	180f883a 	mov	r7,r3
  802a68:	8009883a 	mov	r4,r16
  802a6c:	880b883a 	mov	r5,r17
  802a70:	100d883a 	mov	r6,r2
  802a74:	0806d880 	call	806d88 <__ledf2>
  802a78:	00800d16 	blt	zero,r2,802ab0 <_gcvt+0x108>
  802a7c:	a0c03fcc 	andi	r3,r20,255
  802a80:	18c0201c 	xori	r3,r3,128
  802a84:	90bfffc4 	addi	r2,r18,-1
  802a88:	18ffe004 	addi	r3,r3,-128
  802a8c:	9809883a 	mov	r4,r19
  802a90:	880f883a 	mov	r7,r17
  802a94:	a80b883a 	mov	r5,r21
  802a98:	800d883a 	mov	r6,r16
  802a9c:	d8800015 	stw	r2,0(sp)
  802aa0:	d8c00115 	stw	r3,4(sp)
  802aa4:	dd800215 	stw	r22,8(sp)
  802aa8:	08027b80 	call	8027b8 <print_e>
  802aac:	003fde06 	br	802a28 <_gcvt+0x80>
  802ab0:	9009883a 	mov	r4,r18
  802ab4:	0803abc0 	call	803abc <_mprec_log10>
  802ab8:	180f883a 	mov	r7,r3
  802abc:	8009883a 	mov	r4,r16
  802ac0:	880b883a 	mov	r5,r17
  802ac4:	100d883a 	mov	r6,r2
  802ac8:	0806c780 	call	806c78 <__gedf2>
  802acc:	103feb0e 	bge	r2,zero,802a7c <_gcvt+0xd4>
  802ad0:	0005883a 	mov	r2,zero
  802ad4:	00cffc34 	movhi	r3,16368
  802ad8:	180f883a 	mov	r7,r3
  802adc:	8009883a 	mov	r4,r16
  802ae0:	880b883a 	mov	r5,r17
  802ae4:	100d883a 	mov	r6,r2
  802ae8:	0806d000 	call	806d00 <__ltdf2>
  802aec:	10005616 	blt	r2,zero,802c48 <_gcvt+0x2a0>
  802af0:	9809883a 	mov	r4,r19
  802af4:	880d883a 	mov	r6,r17
  802af8:	800b883a 	mov	r5,r16
  802afc:	01c00084 	movi	r7,2
  802b00:	d8800504 	addi	r2,sp,20
  802b04:	d8800215 	stw	r2,8(sp)
  802b08:	d8c00604 	addi	r3,sp,24
  802b0c:	d8800404 	addi	r2,sp,16
  802b10:	d8c00315 	stw	r3,12(sp)
  802b14:	dc800015 	stw	r18,0(sp)
  802b18:	d8800115 	stw	r2,4(sp)
  802b1c:	0804ff00 	call	804ff0 <_dtoa_r>
  802b20:	d9000417 	ldw	r4,16(sp)
  802b24:	100b883a 	mov	r5,r2
  802b28:	0089c3c4 	movi	r2,9999
  802b2c:	20804b26 	beq	r4,r2,802c5c <_gcvt+0x2b4>
  802b30:	28800003 	ldbu	r2,0(r5)
  802b34:	10005026 	beq	r2,zero,802c78 <_gcvt+0x2d0>
  802b38:	0100510e 	bge	zero,r4,802c80 <_gcvt+0x2d8>
  802b3c:	a807883a 	mov	r3,r21
  802b40:	00000106 	br	802b48 <_gcvt+0x1a0>
  802b44:	0100130e 	bge	zero,r4,802b94 <_gcvt+0x1ec>
  802b48:	18800005 	stb	r2,0(r3)
  802b4c:	213fffc4 	addi	r4,r4,-1
  802b50:	d9000415 	stw	r4,16(sp)
  802b54:	29400044 	addi	r5,r5,1
  802b58:	28800003 	ldbu	r2,0(r5)
  802b5c:	18c00044 	addi	r3,r3,1
  802b60:	94bfffc4 	addi	r18,r18,-1
  802b64:	103ff71e 	bne	r2,zero,802b44 <_gcvt+0x19c>
  802b68:	01000a0e 	bge	zero,r4,802b94 <_gcvt+0x1ec>
  802b6c:	0480090e 	bge	zero,r18,802b94 <_gcvt+0x1ec>
  802b70:	00800c04 	movi	r2,48
  802b74:	00000106 	br	802b7c <_gcvt+0x1d4>
  802b78:	90000526 	beq	r18,zero,802b90 <_gcvt+0x1e8>
  802b7c:	213fffc4 	addi	r4,r4,-1
  802b80:	18800005 	stb	r2,0(r3)
  802b84:	94bfffc4 	addi	r18,r18,-1
  802b88:	18c00044 	addi	r3,r3,1
  802b8c:	013ffa16 	blt	zero,r4,802b78 <_gcvt+0x1d0>
  802b90:	d9000415 	stw	r4,16(sp)
  802b94:	b000021e 	bne	r22,zero,802ba0 <_gcvt+0x1f8>
  802b98:	28800007 	ldb	r2,0(r5)
  802b9c:	10002526 	beq	r2,zero,802c34 <_gcvt+0x28c>
  802ba0:	a8c03126 	beq	r21,r3,802c68 <_gcvt+0x2c0>
  802ba4:	00800b84 	movi	r2,46
  802ba8:	18800005 	stb	r2,0(r3)
  802bac:	18c00044 	addi	r3,r3,1
  802bb0:	20000b0e 	bge	r4,zero,802be0 <_gcvt+0x238>
  802bb4:	04800a0e 	bge	zero,r18,802be0 <_gcvt+0x238>
  802bb8:	01800c04 	movi	r6,48
  802bbc:	00000106 	br	802bc4 <_gcvt+0x21c>
  802bc0:	90000626 	beq	r18,zero,802bdc <_gcvt+0x234>
  802bc4:	20800044 	addi	r2,r4,1
  802bc8:	19800005 	stb	r6,0(r3)
  802bcc:	94bfffc4 	addi	r18,r18,-1
  802bd0:	18c00044 	addi	r3,r3,1
  802bd4:	1009883a 	mov	r4,r2
  802bd8:	103ff916 	blt	r2,zero,802bc0 <_gcvt+0x218>
  802bdc:	d8800415 	stw	r2,16(sp)
  802be0:	28800003 	ldbu	r2,0(r5)
  802be4:	10000926 	beq	r2,zero,802c0c <_gcvt+0x264>
  802be8:	04800216 	blt	zero,r18,802bf4 <_gcvt+0x24c>
  802bec:	00000706 	br	802c0c <_gcvt+0x264>
  802bf0:	90000626 	beq	r18,zero,802c0c <_gcvt+0x264>
  802bf4:	18800005 	stb	r2,0(r3)
  802bf8:	29400044 	addi	r5,r5,1
  802bfc:	28800003 	ldbu	r2,0(r5)
  802c00:	94bfffc4 	addi	r18,r18,-1
  802c04:	18c00044 	addi	r3,r3,1
  802c08:	103ff91e 	bne	r2,zero,802bf0 <_gcvt+0x248>
  802c0c:	b0000926 	beq	r22,zero,802c34 <_gcvt+0x28c>
  802c10:	0480080e 	bge	zero,r18,802c34 <_gcvt+0x28c>
  802c14:	9009883a 	mov	r4,r18
  802c18:	1805883a 	mov	r2,r3
  802c1c:	01400c04 	movi	r5,48
  802c20:	213fffc4 	addi	r4,r4,-1
  802c24:	11400005 	stb	r5,0(r2)
  802c28:	10800044 	addi	r2,r2,1
  802c2c:	203ffc1e 	bne	r4,zero,802c20 <_gcvt+0x278>
  802c30:	1c87883a 	add	r3,r3,r18
  802c34:	18000005 	stb	zero,0(r3)
  802c38:	003f7b06 	br	802a28 <_gcvt+0x80>
  802c3c:	88e0003c 	xorhi	r3,r17,32768
  802c40:	1823883a 	mov	r17,r3
  802c44:	003f6f06 	br	802a04 <_gcvt+0x5c>
  802c48:	9809883a 	mov	r4,r19
  802c4c:	880d883a 	mov	r6,r17
  802c50:	800b883a 	mov	r5,r16
  802c54:	01c000c4 	movi	r7,3
  802c58:	003fa906 	br	802b00 <_gcvt+0x158>
  802c5c:	a809883a 	mov	r4,r21
  802c60:	0804c980 	call	804c98 <strcpy>
  802c64:	003f7006 	br	802a28 <_gcvt+0x80>
  802c68:	00800c04 	movi	r2,48
  802c6c:	a8c00044 	addi	r3,r21,1
  802c70:	a8800005 	stb	r2,0(r21)
  802c74:	003fcb06 	br	802ba4 <_gcvt+0x1fc>
  802c78:	a807883a 	mov	r3,r21
  802c7c:	003fba06 	br	802b68 <_gcvt+0x1c0>
  802c80:	a807883a 	mov	r3,r21
  802c84:	003fc306 	br	802b94 <_gcvt+0x1ec>

00802c88 <_dcvt>:
  802c88:	defff504 	addi	sp,sp,-44
  802c8c:	d8800d17 	ldw	r2,52(sp)
  802c90:	3011883a 	mov	r8,r6
  802c94:	dc800915 	stw	r18,36(sp)
  802c98:	10ffeec4 	addi	r3,r2,-69
  802c9c:	12c03fcc 	andi	r11,r2,255
  802ca0:	19803fcc 	andi	r6,r3,255
  802ca4:	5ac0201c 	xori	r11,r11,128
  802ca8:	00c00884 	movi	r3,34
  802cac:	dc400815 	stw	r17,32(sp)
  802cb0:	dc000715 	stw	r16,28(sp)
  802cb4:	dfc00a15 	stw	ra,40(sp)
  802cb8:	2015883a 	mov	r10,r4
  802cbc:	2823883a 	mov	r17,r5
  802cc0:	3813883a 	mov	r9,r7
  802cc4:	dc000b17 	ldw	r16,44(sp)
  802cc8:	dc800e17 	ldw	r18,56(sp)
  802ccc:	5affe004 	addi	r11,r11,-128
  802cd0:	19803436 	bltu	r3,r6,802da4 <_dcvt+0x11c>
  802cd4:	3185883a 	add	r2,r6,r6
  802cd8:	1085883a 	add	r2,r2,r2
  802cdc:	00c02034 	movhi	r3,128
  802ce0:	18cb3c04 	addi	r3,r3,11504
  802ce4:	10c5883a 	add	r2,r2,r3
  802ce8:	11000017 	ldw	r4,0(r2)
  802cec:	2000683a 	jmp	r4
  802cf0:	00802dc0 	call	802dc <__reset-0x77fd24>
  802cf4:	00802df4 	movhi	r2,183
  802cf8:	00802d7c 	xorhi	r2,zero,181
  802cfc:	00802da4 	muli	r2,zero,182
  802d00:	00802da4 	muli	r2,zero,182
  802d04:	00802da4 	muli	r2,zero,182
  802d08:	00802da4 	muli	r2,zero,182
  802d0c:	00802da4 	muli	r2,zero,182
  802d10:	00802da4 	muli	r2,zero,182
  802d14:	00802da4 	muli	r2,zero,182
  802d18:	00802da4 	muli	r2,zero,182
  802d1c:	00802da4 	muli	r2,zero,182
  802d20:	00802da4 	muli	r2,zero,182
  802d24:	00802da4 	muli	r2,zero,182
  802d28:	00802da4 	muli	r2,zero,182
  802d2c:	00802da4 	muli	r2,zero,182
  802d30:	00802da4 	muli	r2,zero,182
  802d34:	00802da4 	muli	r2,zero,182
  802d38:	00802da4 	muli	r2,zero,182
  802d3c:	00802da4 	muli	r2,zero,182
  802d40:	00802da4 	muli	r2,zero,182
  802d44:	00802da4 	muli	r2,zero,182
  802d48:	00802da4 	muli	r2,zero,182
  802d4c:	00802da4 	muli	r2,zero,182
  802d50:	00802da4 	muli	r2,zero,182
  802d54:	00802da4 	muli	r2,zero,182
  802d58:	00802da4 	muli	r2,zero,182
  802d5c:	00802da4 	muli	r2,zero,182
  802d60:	00802da4 	muli	r2,zero,182
  802d64:	00802da4 	muli	r2,zero,182
  802d68:	00802da4 	muli	r2,zero,182
  802d6c:	00802da4 	muli	r2,zero,182
  802d70:	00802dc0 	call	802dc <__reset-0x77fd24>
  802d74:	00802df4 	movhi	r2,183
  802d78:	00802d7c 	xorhi	r2,zero,181
  802d7c:	8000011e 	bne	r16,zero,802d84 <_dcvt+0xfc>
  802d80:	04000044 	movi	r16,1
  802d84:	5009883a 	mov	r4,r10
  802d88:	480d883a 	mov	r6,r9
  802d8c:	800f883a 	mov	r7,r16
  802d90:	400b883a 	mov	r5,r8
  802d94:	dac00115 	stw	r11,4(sp)
  802d98:	dc800215 	stw	r18,8(sp)
  802d9c:	dc400015 	stw	r17,0(sp)
  802da0:	08029a80 	call	8029a8 <_gcvt>
  802da4:	8805883a 	mov	r2,r17
  802da8:	dfc00a17 	ldw	ra,40(sp)
  802dac:	dc800917 	ldw	r18,36(sp)
  802db0:	dc400817 	ldw	r17,32(sp)
  802db4:	dc000717 	ldw	r16,28(sp)
  802db8:	dec00b04 	addi	sp,sp,44
  802dbc:	f800283a 	ret
  802dc0:	5009883a 	mov	r4,r10
  802dc4:	400d883a 	mov	r6,r8
  802dc8:	dc000015 	stw	r16,0(sp)
  802dcc:	dac00115 	stw	r11,4(sp)
  802dd0:	dc800215 	stw	r18,8(sp)
  802dd4:	08027b80 	call	8027b8 <print_e>
  802dd8:	8805883a 	mov	r2,r17
  802ddc:	dfc00a17 	ldw	ra,40(sp)
  802de0:	dc800917 	ldw	r18,36(sp)
  802de4:	dc400817 	ldw	r17,32(sp)
  802de8:	dc000717 	ldw	r16,28(sp)
  802dec:	dec00b04 	addi	sp,sp,44
  802df0:	f800283a 	ret
  802df4:	80000126 	beq	r16,zero,802dfc <_dcvt+0x174>
  802df8:	04800044 	movi	r18,1
  802dfc:	d8800504 	addi	r2,sp,20
  802e00:	d8c00604 	addi	r3,sp,24
  802e04:	400b883a 	mov	r5,r8
  802e08:	d8800215 	stw	r2,8(sp)
  802e0c:	5009883a 	mov	r4,r10
  802e10:	d8800404 	addi	r2,sp,16
  802e14:	480d883a 	mov	r6,r9
  802e18:	01c000c4 	movi	r7,3
  802e1c:	d8c00315 	stw	r3,12(sp)
  802e20:	dc000015 	stw	r16,0(sp)
  802e24:	d8800115 	stw	r2,4(sp)
  802e28:	0804ff00 	call	804ff0 <_dtoa_r>
  802e2c:	d9400417 	ldw	r5,16(sp)
  802e30:	1007883a 	mov	r3,r2
  802e34:	0089c3c4 	movi	r2,9999
  802e38:	28804626 	beq	r5,r2,802f54 <_dcvt+0x2cc>
  802e3c:	18800003 	ldbu	r2,0(r3)
  802e40:	10004c26 	beq	r2,zero,802f74 <_dcvt+0x2ec>
  802e44:	0140120e 	bge	zero,r5,802e90 <_dcvt+0x208>
  802e48:	8809883a 	mov	r4,r17
  802e4c:	180d883a 	mov	r6,r3
  802e50:	00000106 	br	802e58 <_dcvt+0x1d0>
  802e54:	0140100e 	bge	zero,r5,802e98 <_dcvt+0x210>
  802e58:	20800005 	stb	r2,0(r4)
  802e5c:	297fffc4 	addi	r5,r5,-1
  802e60:	31800044 	addi	r6,r6,1
  802e64:	d9400415 	stw	r5,16(sp)
  802e68:	30800003 	ldbu	r2,0(r6)
  802e6c:	21000044 	addi	r4,r4,1
  802e70:	103ff81e 	bne	r2,zero,802e54 <_dcvt+0x1cc>
  802e74:	0140080e 	bge	zero,r5,802e98 <_dcvt+0x210>
  802e78:	00800c04 	movi	r2,48
  802e7c:	20800005 	stb	r2,0(r4)
  802e80:	297fffc4 	addi	r5,r5,-1
  802e84:	21000044 	addi	r4,r4,1
  802e88:	d9400415 	stw	r5,16(sp)
  802e8c:	003ff906 	br	802e74 <_dcvt+0x1ec>
  802e90:	8809883a 	mov	r4,r17
  802e94:	180d883a 	mov	r6,r3
  802e98:	9000021e 	bne	r18,zero,802ea4 <_dcvt+0x21c>
  802e9c:	30800007 	ldb	r2,0(r6)
  802ea0:	10002426 	beq	r2,zero,802f34 <_dcvt+0x2ac>
  802ea4:	19802f26 	beq	r3,r6,802f64 <_dcvt+0x2dc>
  802ea8:	00800b84 	movi	r2,46
  802eac:	20800005 	stb	r2,0(r4)
  802eb0:	21000044 	addi	r4,r4,1
  802eb4:	28000b0e 	bge	r5,zero,802ee4 <_dcvt+0x25c>
  802eb8:	04000216 	blt	zero,r16,802ec4 <_dcvt+0x23c>
  802ebc:	00000906 	br	802ee4 <_dcvt+0x25c>
  802ec0:	80000826 	beq	r16,zero,802ee4 <_dcvt+0x25c>
  802ec4:	00800c04 	movi	r2,48
  802ec8:	28c00044 	addi	r3,r5,1
  802ecc:	20800005 	stb	r2,0(r4)
  802ed0:	d8c00415 	stw	r3,16(sp)
  802ed4:	21000044 	addi	r4,r4,1
  802ed8:	843fffc4 	addi	r16,r16,-1
  802edc:	180b883a 	mov	r5,r3
  802ee0:	183ff716 	blt	r3,zero,802ec0 <_dcvt+0x238>
  802ee4:	30800003 	ldbu	r2,0(r6)
  802ee8:	10000926 	beq	r2,zero,802f10 <_dcvt+0x288>
  802eec:	04000216 	blt	zero,r16,802ef8 <_dcvt+0x270>
  802ef0:	00001006 	br	802f34 <_dcvt+0x2ac>
  802ef4:	80000f26 	beq	r16,zero,802f34 <_dcvt+0x2ac>
  802ef8:	20800005 	stb	r2,0(r4)
  802efc:	31800044 	addi	r6,r6,1
  802f00:	30800003 	ldbu	r2,0(r6)
  802f04:	21000044 	addi	r4,r4,1
  802f08:	843fffc4 	addi	r16,r16,-1
  802f0c:	103ff91e 	bne	r2,zero,802ef4 <_dcvt+0x26c>
  802f10:	0400080e 	bge	zero,r16,802f34 <_dcvt+0x2ac>
  802f14:	2007883a 	mov	r3,r4
  802f18:	8005883a 	mov	r2,r16
  802f1c:	01400c04 	movi	r5,48
  802f20:	10bfffc4 	addi	r2,r2,-1
  802f24:	19400005 	stb	r5,0(r3)
  802f28:	18c00044 	addi	r3,r3,1
  802f2c:	103ffc1e 	bne	r2,zero,802f20 <_dcvt+0x298>
  802f30:	2409883a 	add	r4,r4,r16
  802f34:	8805883a 	mov	r2,r17
  802f38:	20000005 	stb	zero,0(r4)
  802f3c:	dfc00a17 	ldw	ra,40(sp)
  802f40:	dc800917 	ldw	r18,36(sp)
  802f44:	dc400817 	ldw	r17,32(sp)
  802f48:	dc000717 	ldw	r16,28(sp)
  802f4c:	dec00b04 	addi	sp,sp,44
  802f50:	f800283a 	ret
  802f54:	180b883a 	mov	r5,r3
  802f58:	8809883a 	mov	r4,r17
  802f5c:	0804c980 	call	804c98 <strcpy>
  802f60:	003f9006 	br	802da4 <_dcvt+0x11c>
  802f64:	00800c04 	movi	r2,48
  802f68:	20800005 	stb	r2,0(r4)
  802f6c:	21000044 	addi	r4,r4,1
  802f70:	003fcd06 	br	802ea8 <_dcvt+0x220>
  802f74:	8809883a 	mov	r4,r17
  802f78:	180d883a 	mov	r6,r3
  802f7c:	003fbd06 	br	802e74 <_dcvt+0x1ec>

00802f80 <ecvtbuf>:
  802f80:	defff404 	addi	sp,sp,-48
  802f84:	dc800715 	stw	r18,28(sp)
  802f88:	dc800d17 	ldw	r18,52(sp)
  802f8c:	dd000915 	stw	r20,36(sp)
  802f90:	dcc00815 	stw	r19,32(sp)
  802f94:	dc400615 	stw	r17,24(sp)
  802f98:	dc000515 	stw	r16,20(sp)
  802f9c:	dfc00b15 	stw	ra,44(sp)
  802fa0:	dd400a15 	stw	r21,40(sp)
  802fa4:	2021883a 	mov	r16,r4
  802fa8:	2823883a 	mov	r17,r5
  802fac:	3027883a 	mov	r19,r6
  802fb0:	3829883a 	mov	r20,r7
  802fb4:	90002d26 	beq	r18,zero,80306c <ecvtbuf+0xec>
  802fb8:	05402074 	movhi	r21,129
  802fbc:	ad6eef04 	addi	r21,r21,-17476
  802fc0:	d8800c17 	ldw	r2,48(sp)
  802fc4:	a9000017 	ldw	r4,0(r21)
  802fc8:	880d883a 	mov	r6,r17
  802fcc:	d8800215 	stw	r2,8(sp)
  802fd0:	800b883a 	mov	r5,r16
  802fd4:	d8800404 	addi	r2,sp,16
  802fd8:	01c00084 	movi	r7,2
  802fdc:	dd000115 	stw	r20,4(sp)
  802fe0:	dcc00015 	stw	r19,0(sp)
  802fe4:	d8800315 	stw	r2,12(sp)
  802fe8:	0804ff00 	call	804ff0 <_dtoa_r>
  802fec:	1007883a 	mov	r3,r2
  802ff0:	d8800417 	ldw	r2,16(sp)
  802ff4:	1880252e 	bgeu	r3,r2,80308c <ecvtbuf+0x10c>
  802ff8:	900d883a 	mov	r6,r18
  802ffc:	0009883a 	mov	r4,zero
  803000:	18800003 	ldbu	r2,0(r3)
  803004:	18c00044 	addi	r3,r3,1
  803008:	21000044 	addi	r4,r4,1
  80300c:	30800005 	stb	r2,0(r6)
  803010:	d8800417 	ldw	r2,16(sp)
  803014:	31800044 	addi	r6,r6,1
  803018:	18bff936 	bltu	r3,r2,803000 <ecvtbuf+0x80>
  80301c:	24c0080e 	bge	r4,r19,803040 <ecvtbuf+0xc0>
  803020:	9905c83a 	sub	r2,r19,r4
  803024:	3007883a 	mov	r3,r6
  803028:	1185883a 	add	r2,r2,r6
  80302c:	01000c04 	movi	r4,48
  803030:	19000005 	stb	r4,0(r3)
  803034:	18c00044 	addi	r3,r3,1
  803038:	10fffd1e 	bne	r2,r3,803030 <ecvtbuf+0xb0>
  80303c:	100d883a 	mov	r6,r2
  803040:	30000005 	stb	zero,0(r6)
  803044:	9005883a 	mov	r2,r18
  803048:	dfc00b17 	ldw	ra,44(sp)
  80304c:	dd400a17 	ldw	r21,40(sp)
  803050:	dd000917 	ldw	r20,36(sp)
  803054:	dcc00817 	ldw	r19,32(sp)
  803058:	dc800717 	ldw	r18,28(sp)
  80305c:	dc400617 	ldw	r17,24(sp)
  803060:	dc000517 	ldw	r16,20(sp)
  803064:	dec00c04 	addi	sp,sp,48
  803068:	f800283a 	ret
  80306c:	05402074 	movhi	r21,129
  803070:	ad6eef04 	addi	r21,r21,-17476
  803074:	a9000017 	ldw	r4,0(r21)
  803078:	20801417 	ldw	r2,80(r4)
  80307c:	3080060e 	bge	r6,r2,803098 <ecvtbuf+0x118>
  803080:	a8800017 	ldw	r2,0(r21)
  803084:	14801517 	ldw	r18,84(r2)
  803088:	003fcd06 	br	802fc0 <ecvtbuf+0x40>
  80308c:	900d883a 	mov	r6,r18
  803090:	0009883a 	mov	r4,zero
  803094:	003fe106 	br	80301c <ecvtbuf+0x9c>
  803098:	21401517 	ldw	r5,84(r4)
  80309c:	34800044 	addi	r18,r6,1
  8030a0:	900d883a 	mov	r6,r18
  8030a4:	08046a40 	call	8046a4 <_realloc_r>
  8030a8:	1007883a 	mov	r3,r2
  8030ac:	10000426 	beq	r2,zero,8030c0 <ecvtbuf+0x140>
  8030b0:	a8800017 	ldw	r2,0(r21)
  8030b4:	10c01515 	stw	r3,84(r2)
  8030b8:	14801415 	stw	r18,80(r2)
  8030bc:	003ff006 	br	803080 <ecvtbuf+0x100>
  8030c0:	0005883a 	mov	r2,zero
  8030c4:	003fe006 	br	803048 <ecvtbuf+0xc8>

008030c8 <fcvtbuf>:
  8030c8:	defff304 	addi	sp,sp,-52
  8030cc:	dc800715 	stw	r18,28(sp)
  8030d0:	dc800e17 	ldw	r18,56(sp)
  8030d4:	dd800b15 	stw	r22,44(sp)
  8030d8:	dd000915 	stw	r20,36(sp)
  8030dc:	dcc00815 	stw	r19,32(sp)
  8030e0:	dc400615 	stw	r17,24(sp)
  8030e4:	dc000515 	stw	r16,20(sp)
  8030e8:	dfc00c15 	stw	ra,48(sp)
  8030ec:	dd400a15 	stw	r21,40(sp)
  8030f0:	2021883a 	mov	r16,r4
  8030f4:	2823883a 	mov	r17,r5
  8030f8:	3027883a 	mov	r19,r6
  8030fc:	3829883a 	mov	r20,r7
  803100:	dd800d17 	ldw	r22,52(sp)
  803104:	90004326 	beq	r18,zero,803214 <fcvtbuf+0x14c>
  803108:	05402074 	movhi	r21,129
  80310c:	ad6eef04 	addi	r21,r21,-17476
  803110:	0005883a 	mov	r2,zero
  803114:	00cffc34 	movhi	r3,16368
  803118:	180f883a 	mov	r7,r3
  80311c:	8009883a 	mov	r4,r16
  803120:	880b883a 	mov	r5,r17
  803124:	100d883a 	mov	r6,r2
  803128:	0806d000 	call	806d00 <__ltdf2>
  80312c:	1000080e 	bge	r2,zero,803150 <fcvtbuf+0x88>
  803130:	0005883a 	mov	r2,zero
  803134:	00effc34 	movhi	r3,49136
  803138:	180f883a 	mov	r7,r3
  80313c:	8009883a 	mov	r4,r16
  803140:	880b883a 	mov	r5,r17
  803144:	100d883a 	mov	r6,r2
  803148:	0806bf00 	call	806bf0 <__gtdf2>
  80314c:	00802c16 	blt	zero,r2,803200 <fcvtbuf+0x138>
  803150:	a9000017 	ldw	r4,0(r21)
  803154:	880d883a 	mov	r6,r17
  803158:	800b883a 	mov	r5,r16
  80315c:	01c000c4 	movi	r7,3
  803160:	d8800404 	addi	r2,sp,16
  803164:	dd800215 	stw	r22,8(sp)
  803168:	dcc00015 	stw	r19,0(sp)
  80316c:	dd000115 	stw	r20,4(sp)
  803170:	d8800315 	stw	r2,12(sp)
  803174:	0804ff00 	call	804ff0 <_dtoa_r>
  803178:	1009883a 	mov	r4,r2
  80317c:	d8c00417 	ldw	r3,16(sp)
  803180:	a0800017 	ldw	r2,0(r20)
  803184:	008dc83a 	sub	r6,zero,r2
  803188:	20c02b2e 	bgeu	r4,r3,803238 <fcvtbuf+0x170>
  80318c:	9007883a 	mov	r3,r18
  803190:	20800003 	ldbu	r2,0(r4)
  803194:	21000044 	addi	r4,r4,1
  803198:	31800044 	addi	r6,r6,1
  80319c:	18800005 	stb	r2,0(r3)
  8031a0:	d8800417 	ldw	r2,16(sp)
  8031a4:	18c00044 	addi	r3,r3,1
  8031a8:	20bff936 	bltu	r4,r2,803190 <fcvtbuf+0xc8>
  8031ac:	34c0080e 	bge	r6,r19,8031d0 <fcvtbuf+0x108>
  8031b0:	9985c83a 	sub	r2,r19,r6
  8031b4:	1809883a 	mov	r4,r3
  8031b8:	10c5883a 	add	r2,r2,r3
  8031bc:	00c00c04 	movi	r3,48
  8031c0:	20c00005 	stb	r3,0(r4)
  8031c4:	21000044 	addi	r4,r4,1
  8031c8:	113ffd1e 	bne	r2,r4,8031c0 <fcvtbuf+0xf8>
  8031cc:	1007883a 	mov	r3,r2
  8031d0:	18000005 	stb	zero,0(r3)
  8031d4:	9005883a 	mov	r2,r18
  8031d8:	dfc00c17 	ldw	ra,48(sp)
  8031dc:	dd800b17 	ldw	r22,44(sp)
  8031e0:	dd400a17 	ldw	r21,40(sp)
  8031e4:	dd000917 	ldw	r20,36(sp)
  8031e8:	dcc00817 	ldw	r19,32(sp)
  8031ec:	dc800717 	ldw	r18,28(sp)
  8031f0:	dc400617 	ldw	r17,24(sp)
  8031f4:	dc000517 	ldw	r16,20(sp)
  8031f8:	dec00d04 	addi	sp,sp,52
  8031fc:	f800283a 	ret
  803200:	a9000017 	ldw	r4,0(r21)
  803204:	880d883a 	mov	r6,r17
  803208:	800b883a 	mov	r5,r16
  80320c:	01c00084 	movi	r7,2
  803210:	003fd306 	br	803160 <fcvtbuf+0x98>
  803214:	05402074 	movhi	r21,129
  803218:	ad6eef04 	addi	r21,r21,-17476
  80321c:	a9000017 	ldw	r4,0(r21)
  803220:	30c008c4 	addi	r3,r6,35
  803224:	20801417 	ldw	r2,80(r4)
  803228:	1880050e 	bge	r3,r2,803240 <fcvtbuf+0x178>
  80322c:	a8800017 	ldw	r2,0(r21)
  803230:	14801517 	ldw	r18,84(r2)
  803234:	003fb606 	br	803110 <fcvtbuf+0x48>
  803238:	9007883a 	mov	r3,r18
  80323c:	003fdb06 	br	8031ac <fcvtbuf+0xe4>
  803240:	21401517 	ldw	r5,84(r4)
  803244:	34800904 	addi	r18,r6,36
  803248:	900d883a 	mov	r6,r18
  80324c:	08046a40 	call	8046a4 <_realloc_r>
  803250:	1007883a 	mov	r3,r2
  803254:	10000426 	beq	r2,zero,803268 <fcvtbuf+0x1a0>
  803258:	a8800017 	ldw	r2,0(r21)
  80325c:	10c01515 	stw	r3,84(r2)
  803260:	14801415 	stw	r18,80(r2)
  803264:	003ff106 	br	80322c <fcvtbuf+0x164>
  803268:	0005883a 	mov	r2,zero
  80326c:	003fda06 	br	8031d8 <fcvtbuf+0x110>

00803270 <_malloc_trim_r>:
  803270:	defffb04 	addi	sp,sp,-20
  803274:	dcc00315 	stw	r19,12(sp)
  803278:	04c02074 	movhi	r19,129
  80327c:	9ce96b04 	addi	r19,r19,-23124
  803280:	dc800215 	stw	r18,8(sp)
  803284:	dc400115 	stw	r17,4(sp)
  803288:	dc000015 	stw	r16,0(sp)
  80328c:	2823883a 	mov	r17,r5
  803290:	2025883a 	mov	r18,r4
  803294:	dfc00415 	stw	ra,16(sp)
  803298:	08072f80 	call	8072f8 <__malloc_lock>
  80329c:	98800217 	ldw	r2,8(r19)
  8032a0:	9009883a 	mov	r4,r18
  8032a4:	000b883a 	mov	r5,zero
  8032a8:	10c00117 	ldw	r3,4(r2)
  8032ac:	00bfff04 	movi	r2,-4
  8032b0:	18a0703a 	and	r16,r3,r2
  8032b4:	8463c83a 	sub	r17,r16,r17
  8032b8:	8c43fbc4 	addi	r17,r17,4079
  8032bc:	8822d33a 	srli	r17,r17,12
  8032c0:	0083ffc4 	movi	r2,4095
  8032c4:	8c7fffc4 	addi	r17,r17,-1
  8032c8:	8822933a 	slli	r17,r17,12
  8032cc:	1440060e 	bge	r2,r17,8032e8 <_malloc_trim_r+0x78>
  8032d0:	08027480 	call	802748 <_sbrk_r>
  8032d4:	98c00217 	ldw	r3,8(r19)
  8032d8:	9009883a 	mov	r4,r18
  8032dc:	044bc83a 	sub	r5,zero,r17
  8032e0:	80c7883a 	add	r3,r16,r3
  8032e4:	10c00926 	beq	r2,r3,80330c <_malloc_trim_r+0x9c>
  8032e8:	08072fc0 	call	8072fc <__malloc_unlock>
  8032ec:	0005883a 	mov	r2,zero
  8032f0:	dfc00417 	ldw	ra,16(sp)
  8032f4:	dcc00317 	ldw	r19,12(sp)
  8032f8:	dc800217 	ldw	r18,8(sp)
  8032fc:	dc400117 	ldw	r17,4(sp)
  803300:	dc000017 	ldw	r16,0(sp)
  803304:	dec00504 	addi	sp,sp,20
  803308:	f800283a 	ret
  80330c:	9009883a 	mov	r4,r18
  803310:	08027480 	call	802748 <_sbrk_r>
  803314:	844dc83a 	sub	r6,r16,r17
  803318:	00ffffc4 	movi	r3,-1
  80331c:	9009883a 	mov	r4,r18
  803320:	000b883a 	mov	r5,zero
  803324:	01c02074 	movhi	r7,129
  803328:	39f59904 	addi	r7,r7,-10652
  80332c:	31800054 	ori	r6,r6,1
  803330:	10c00926 	beq	r2,r3,803358 <_malloc_trim_r+0xe8>
  803334:	38800017 	ldw	r2,0(r7)
  803338:	98c00217 	ldw	r3,8(r19)
  80333c:	9009883a 	mov	r4,r18
  803340:	1445c83a 	sub	r2,r2,r17
  803344:	38800015 	stw	r2,0(r7)
  803348:	19800115 	stw	r6,4(r3)
  80334c:	08072fc0 	call	8072fc <__malloc_unlock>
  803350:	00800044 	movi	r2,1
  803354:	003fe606 	br	8032f0 <_malloc_trim_r+0x80>
  803358:	08027480 	call	802748 <_sbrk_r>
  80335c:	99800217 	ldw	r6,8(r19)
  803360:	100f883a 	mov	r7,r2
  803364:	9009883a 	mov	r4,r18
  803368:	1187c83a 	sub	r3,r2,r6
  80336c:	008003c4 	movi	r2,15
  803370:	19400054 	ori	r5,r3,1
  803374:	10ffdc0e 	bge	r2,r3,8032e8 <_malloc_trim_r+0x78>
  803378:	00802074 	movhi	r2,129
  80337c:	10aef204 	addi	r2,r2,-17464
  803380:	10c00017 	ldw	r3,0(r2)
  803384:	00802074 	movhi	r2,129
  803388:	10b59904 	addi	r2,r2,-10652
  80338c:	31400115 	stw	r5,4(r6)
  803390:	38c7c83a 	sub	r3,r7,r3
  803394:	10c00015 	stw	r3,0(r2)
  803398:	003fd306 	br	8032e8 <_malloc_trim_r+0x78>

0080339c <_free_r>:
  80339c:	defffd04 	addi	sp,sp,-12
  8033a0:	dc400115 	stw	r17,4(sp)
  8033a4:	dc000015 	stw	r16,0(sp)
  8033a8:	dfc00215 	stw	ra,8(sp)
  8033ac:	2821883a 	mov	r16,r5
  8033b0:	2023883a 	mov	r17,r4
  8033b4:	28005a26 	beq	r5,zero,803520 <_free_r+0x184>
  8033b8:	08072f80 	call	8072f8 <__malloc_lock>
  8033bc:	823ffe04 	addi	r8,r16,-8
  8033c0:	41400117 	ldw	r5,4(r8)
  8033c4:	00bfff84 	movi	r2,-2
  8033c8:	02802074 	movhi	r10,129
  8033cc:	52a96b04 	addi	r10,r10,-23124
  8033d0:	288e703a 	and	r7,r5,r2
  8033d4:	41cd883a 	add	r6,r8,r7
  8033d8:	30c00117 	ldw	r3,4(r6)
  8033dc:	51000217 	ldw	r4,8(r10)
  8033e0:	00bfff04 	movi	r2,-4
  8033e4:	1892703a 	and	r9,r3,r2
  8033e8:	5017883a 	mov	r11,r10
  8033ec:	31006726 	beq	r6,r4,80358c <_free_r+0x1f0>
  8033f0:	2880004c 	andi	r2,r5,1
  8033f4:	1005003a 	cmpeq	r2,r2,zero
  8033f8:	32400115 	stw	r9,4(r6)
  8033fc:	10001a1e 	bne	r2,zero,803468 <_free_r+0xcc>
  803400:	000b883a 	mov	r5,zero
  803404:	3247883a 	add	r3,r6,r9
  803408:	18800117 	ldw	r2,4(r3)
  80340c:	1080004c 	andi	r2,r2,1
  803410:	1000231e 	bne	r2,zero,8034a0 <_free_r+0x104>
  803414:	280ac03a 	cmpne	r5,r5,zero
  803418:	3a4f883a 	add	r7,r7,r9
  80341c:	2800451e 	bne	r5,zero,803534 <_free_r+0x198>
  803420:	31000217 	ldw	r4,8(r6)
  803424:	00802074 	movhi	r2,129
  803428:	10a96d04 	addi	r2,r2,-23116
  80342c:	20807b26 	beq	r4,r2,80361c <_free_r+0x280>
  803430:	30800317 	ldw	r2,12(r6)
  803434:	3a07883a 	add	r3,r7,r8
  803438:	19c00015 	stw	r7,0(r3)
  80343c:	11000215 	stw	r4,8(r2)
  803440:	20800315 	stw	r2,12(r4)
  803444:	38800054 	ori	r2,r7,1
  803448:	40800115 	stw	r2,4(r8)
  80344c:	28001a26 	beq	r5,zero,8034b8 <_free_r+0x11c>
  803450:	8809883a 	mov	r4,r17
  803454:	dfc00217 	ldw	ra,8(sp)
  803458:	dc400117 	ldw	r17,4(sp)
  80345c:	dc000017 	ldw	r16,0(sp)
  803460:	dec00304 	addi	sp,sp,12
  803464:	08072fc1 	jmpi	8072fc <__malloc_unlock>
  803468:	80bffe17 	ldw	r2,-8(r16)
  80346c:	50c00204 	addi	r3,r10,8
  803470:	4091c83a 	sub	r8,r8,r2
  803474:	41000217 	ldw	r4,8(r8)
  803478:	388f883a 	add	r7,r7,r2
  80347c:	20c06126 	beq	r4,r3,803604 <_free_r+0x268>
  803480:	40800317 	ldw	r2,12(r8)
  803484:	3247883a 	add	r3,r6,r9
  803488:	000b883a 	mov	r5,zero
  80348c:	11000215 	stw	r4,8(r2)
  803490:	20800315 	stw	r2,12(r4)
  803494:	18800117 	ldw	r2,4(r3)
  803498:	1080004c 	andi	r2,r2,1
  80349c:	103fdd26 	beq	r2,zero,803414 <_free_r+0x78>
  8034a0:	38800054 	ori	r2,r7,1
  8034a4:	3a07883a 	add	r3,r7,r8
  8034a8:	280ac03a 	cmpne	r5,r5,zero
  8034ac:	40800115 	stw	r2,4(r8)
  8034b0:	19c00015 	stw	r7,0(r3)
  8034b4:	283fe61e 	bne	r5,zero,803450 <_free_r+0xb4>
  8034b8:	00807fc4 	movi	r2,511
  8034bc:	11c01f2e 	bgeu	r2,r7,80353c <_free_r+0x1a0>
  8034c0:	3806d27a 	srli	r3,r7,9
  8034c4:	1800481e 	bne	r3,zero,8035e8 <_free_r+0x24c>
  8034c8:	3804d0fa 	srli	r2,r7,3
  8034cc:	100690fa 	slli	r3,r2,3
  8034d0:	1acd883a 	add	r6,r3,r11
  8034d4:	31400217 	ldw	r5,8(r6)
  8034d8:	31405926 	beq	r6,r5,803640 <_free_r+0x2a4>
  8034dc:	28800117 	ldw	r2,4(r5)
  8034e0:	00ffff04 	movi	r3,-4
  8034e4:	10c4703a 	and	r2,r2,r3
  8034e8:	3880022e 	bgeu	r7,r2,8034f4 <_free_r+0x158>
  8034ec:	29400217 	ldw	r5,8(r5)
  8034f0:	317ffa1e 	bne	r6,r5,8034dc <_free_r+0x140>
  8034f4:	29800317 	ldw	r6,12(r5)
  8034f8:	41800315 	stw	r6,12(r8)
  8034fc:	41400215 	stw	r5,8(r8)
  803500:	8809883a 	mov	r4,r17
  803504:	2a000315 	stw	r8,12(r5)
  803508:	32000215 	stw	r8,8(r6)
  80350c:	dfc00217 	ldw	ra,8(sp)
  803510:	dc400117 	ldw	r17,4(sp)
  803514:	dc000017 	ldw	r16,0(sp)
  803518:	dec00304 	addi	sp,sp,12
  80351c:	08072fc1 	jmpi	8072fc <__malloc_unlock>
  803520:	dfc00217 	ldw	ra,8(sp)
  803524:	dc400117 	ldw	r17,4(sp)
  803528:	dc000017 	ldw	r16,0(sp)
  80352c:	dec00304 	addi	sp,sp,12
  803530:	f800283a 	ret
  803534:	31000217 	ldw	r4,8(r6)
  803538:	003fbd06 	br	803430 <_free_r+0x94>
  80353c:	3806d0fa 	srli	r3,r7,3
  803540:	00800044 	movi	r2,1
  803544:	51400117 	ldw	r5,4(r10)
  803548:	180890fa 	slli	r4,r3,3
  80354c:	1807d0ba 	srai	r3,r3,2
  803550:	22c9883a 	add	r4,r4,r11
  803554:	21800217 	ldw	r6,8(r4)
  803558:	10c4983a 	sll	r2,r2,r3
  80355c:	41000315 	stw	r4,12(r8)
  803560:	41800215 	stw	r6,8(r8)
  803564:	288ab03a 	or	r5,r5,r2
  803568:	22000215 	stw	r8,8(r4)
  80356c:	8809883a 	mov	r4,r17
  803570:	51400115 	stw	r5,4(r10)
  803574:	32000315 	stw	r8,12(r6)
  803578:	dfc00217 	ldw	ra,8(sp)
  80357c:	dc400117 	ldw	r17,4(sp)
  803580:	dc000017 	ldw	r16,0(sp)
  803584:	dec00304 	addi	sp,sp,12
  803588:	08072fc1 	jmpi	8072fc <__malloc_unlock>
  80358c:	2880004c 	andi	r2,r5,1
  803590:	3a4d883a 	add	r6,r7,r9
  803594:	1000071e 	bne	r2,zero,8035b4 <_free_r+0x218>
  803598:	80bffe17 	ldw	r2,-8(r16)
  80359c:	4091c83a 	sub	r8,r8,r2
  8035a0:	41000317 	ldw	r4,12(r8)
  8035a4:	40c00217 	ldw	r3,8(r8)
  8035a8:	308d883a 	add	r6,r6,r2
  8035ac:	20c00215 	stw	r3,8(r4)
  8035b0:	19000315 	stw	r4,12(r3)
  8035b4:	00802074 	movhi	r2,129
  8035b8:	10aef104 	addi	r2,r2,-17468
  8035bc:	11000017 	ldw	r4,0(r2)
  8035c0:	30c00054 	ori	r3,r6,1
  8035c4:	52000215 	stw	r8,8(r10)
  8035c8:	40c00115 	stw	r3,4(r8)
  8035cc:	313fa036 	bltu	r6,r4,803450 <_free_r+0xb4>
  8035d0:	00802074 	movhi	r2,129
  8035d4:	10b58f04 	addi	r2,r2,-10692
  8035d8:	11400017 	ldw	r5,0(r2)
  8035dc:	8809883a 	mov	r4,r17
  8035e0:	08032700 	call	803270 <_malloc_trim_r>
  8035e4:	003f9a06 	br	803450 <_free_r+0xb4>
  8035e8:	00800104 	movi	r2,4
  8035ec:	10c0072e 	bgeu	r2,r3,80360c <_free_r+0x270>
  8035f0:	00800504 	movi	r2,20
  8035f4:	10c01936 	bltu	r2,r3,80365c <_free_r+0x2c0>
  8035f8:	188016c4 	addi	r2,r3,91
  8035fc:	100690fa 	slli	r3,r2,3
  803600:	003fb306 	br	8034d0 <_free_r+0x134>
  803604:	01400044 	movi	r5,1
  803608:	003f7e06 	br	803404 <_free_r+0x68>
  80360c:	3804d1ba 	srli	r2,r7,6
  803610:	10800e04 	addi	r2,r2,56
  803614:	100690fa 	slli	r3,r2,3
  803618:	003fad06 	br	8034d0 <_free_r+0x134>
  80361c:	22000315 	stw	r8,12(r4)
  803620:	22000215 	stw	r8,8(r4)
  803624:	3a05883a 	add	r2,r7,r8
  803628:	38c00054 	ori	r3,r7,1
  80362c:	11c00015 	stw	r7,0(r2)
  803630:	41000215 	stw	r4,8(r8)
  803634:	40c00115 	stw	r3,4(r8)
  803638:	41000315 	stw	r4,12(r8)
  80363c:	003f8406 	br	803450 <_free_r+0xb4>
  803640:	1005d0ba 	srai	r2,r2,2
  803644:	00c00044 	movi	r3,1
  803648:	51000117 	ldw	r4,4(r10)
  80364c:	1886983a 	sll	r3,r3,r2
  803650:	20c8b03a 	or	r4,r4,r3
  803654:	51000115 	stw	r4,4(r10)
  803658:	003fa706 	br	8034f8 <_free_r+0x15c>
  80365c:	00801504 	movi	r2,84
  803660:	10c00436 	bltu	r2,r3,803674 <_free_r+0x2d8>
  803664:	3804d33a 	srli	r2,r7,12
  803668:	10801b84 	addi	r2,r2,110
  80366c:	100690fa 	slli	r3,r2,3
  803670:	003f9706 	br	8034d0 <_free_r+0x134>
  803674:	00805504 	movi	r2,340
  803678:	10c00436 	bltu	r2,r3,80368c <_free_r+0x2f0>
  80367c:	3804d3fa 	srli	r2,r7,15
  803680:	10801dc4 	addi	r2,r2,119
  803684:	100690fa 	slli	r3,r2,3
  803688:	003f9106 	br	8034d0 <_free_r+0x134>
  80368c:	00815504 	movi	r2,1364
  803690:	10c0032e 	bgeu	r2,r3,8036a0 <_free_r+0x304>
  803694:	00801f84 	movi	r2,126
  803698:	00c0fc04 	movi	r3,1008
  80369c:	003f8c06 	br	8034d0 <_free_r+0x134>
  8036a0:	3804d4ba 	srli	r2,r7,18
  8036a4:	10801f04 	addi	r2,r2,124
  8036a8:	100690fa 	slli	r3,r2,3
  8036ac:	003f8806 	br	8034d0 <_free_r+0x134>

008036b0 <_Bfree>:
  8036b0:	28000826 	beq	r5,zero,8036d4 <_Bfree+0x24>
  8036b4:	28800117 	ldw	r2,4(r5)
  8036b8:	21001317 	ldw	r4,76(r4)
  8036bc:	1085883a 	add	r2,r2,r2
  8036c0:	1085883a 	add	r2,r2,r2
  8036c4:	1105883a 	add	r2,r2,r4
  8036c8:	10c00017 	ldw	r3,0(r2)
  8036cc:	28c00015 	stw	r3,0(r5)
  8036d0:	11400015 	stw	r5,0(r2)
  8036d4:	f800283a 	ret

008036d8 <__hi0bits>:
  8036d8:	20bfffec 	andhi	r2,r4,65535
  8036dc:	10001426 	beq	r2,zero,803730 <__hi0bits+0x58>
  8036e0:	0007883a 	mov	r3,zero
  8036e4:	20bfc02c 	andhi	r2,r4,65280
  8036e8:	1000021e 	bne	r2,zero,8036f4 <__hi0bits+0x1c>
  8036ec:	2008923a 	slli	r4,r4,8
  8036f0:	18c00204 	addi	r3,r3,8
  8036f4:	20bc002c 	andhi	r2,r4,61440
  8036f8:	1000021e 	bne	r2,zero,803704 <__hi0bits+0x2c>
  8036fc:	2008913a 	slli	r4,r4,4
  803700:	18c00104 	addi	r3,r3,4
  803704:	20b0002c 	andhi	r2,r4,49152
  803708:	1000031e 	bne	r2,zero,803718 <__hi0bits+0x40>
  80370c:	2105883a 	add	r2,r4,r4
  803710:	18c00084 	addi	r3,r3,2
  803714:	1089883a 	add	r4,r2,r2
  803718:	20000316 	blt	r4,zero,803728 <__hi0bits+0x50>
  80371c:	2090002c 	andhi	r2,r4,16384
  803720:	10000626 	beq	r2,zero,80373c <__hi0bits+0x64>
  803724:	18c00044 	addi	r3,r3,1
  803728:	1805883a 	mov	r2,r3
  80372c:	f800283a 	ret
  803730:	2008943a 	slli	r4,r4,16
  803734:	00c00404 	movi	r3,16
  803738:	003fea06 	br	8036e4 <__hi0bits+0xc>
  80373c:	00c00804 	movi	r3,32
  803740:	1805883a 	mov	r2,r3
  803744:	f800283a 	ret

00803748 <__lo0bits>:
  803748:	20c00017 	ldw	r3,0(r4)
  80374c:	188001cc 	andi	r2,r3,7
  803750:	10000a26 	beq	r2,zero,80377c <__lo0bits+0x34>
  803754:	1880004c 	andi	r2,r3,1
  803758:	1005003a 	cmpeq	r2,r2,zero
  80375c:	10002126 	beq	r2,zero,8037e4 <__lo0bits+0x9c>
  803760:	1880008c 	andi	r2,r3,2
  803764:	1000251e 	bne	r2,zero,8037fc <__lo0bits+0xb4>
  803768:	1804d0ba 	srli	r2,r3,2
  80376c:	01400084 	movi	r5,2
  803770:	20800015 	stw	r2,0(r4)
  803774:	2805883a 	mov	r2,r5
  803778:	f800283a 	ret
  80377c:	18bfffcc 	andi	r2,r3,65535
  803780:	10001526 	beq	r2,zero,8037d8 <__lo0bits+0x90>
  803784:	000b883a 	mov	r5,zero
  803788:	18803fcc 	andi	r2,r3,255
  80378c:	1000021e 	bne	r2,zero,803798 <__lo0bits+0x50>
  803790:	1806d23a 	srli	r3,r3,8
  803794:	29400204 	addi	r5,r5,8
  803798:	188003cc 	andi	r2,r3,15
  80379c:	1000021e 	bne	r2,zero,8037a8 <__lo0bits+0x60>
  8037a0:	1806d13a 	srli	r3,r3,4
  8037a4:	29400104 	addi	r5,r5,4
  8037a8:	188000cc 	andi	r2,r3,3
  8037ac:	1000021e 	bne	r2,zero,8037b8 <__lo0bits+0x70>
  8037b0:	1806d0ba 	srli	r3,r3,2
  8037b4:	29400084 	addi	r5,r5,2
  8037b8:	1880004c 	andi	r2,r3,1
  8037bc:	1000031e 	bne	r2,zero,8037cc <__lo0bits+0x84>
  8037c0:	1806d07a 	srli	r3,r3,1
  8037c4:	18000a26 	beq	r3,zero,8037f0 <__lo0bits+0xa8>
  8037c8:	29400044 	addi	r5,r5,1
  8037cc:	2805883a 	mov	r2,r5
  8037d0:	20c00015 	stw	r3,0(r4)
  8037d4:	f800283a 	ret
  8037d8:	1806d43a 	srli	r3,r3,16
  8037dc:	01400404 	movi	r5,16
  8037e0:	003fe906 	br	803788 <__lo0bits+0x40>
  8037e4:	000b883a 	mov	r5,zero
  8037e8:	2805883a 	mov	r2,r5
  8037ec:	f800283a 	ret
  8037f0:	01400804 	movi	r5,32
  8037f4:	2805883a 	mov	r2,r5
  8037f8:	f800283a 	ret
  8037fc:	1804d07a 	srli	r2,r3,1
  803800:	01400044 	movi	r5,1
  803804:	20800015 	stw	r2,0(r4)
  803808:	003fda06 	br	803774 <__lo0bits+0x2c>

0080380c <__mcmp>:
  80380c:	20800417 	ldw	r2,16(r4)
  803810:	28c00417 	ldw	r3,16(r5)
  803814:	10cfc83a 	sub	r7,r2,r3
  803818:	38000c1e 	bne	r7,zero,80384c <__mcmp+0x40>
  80381c:	18c5883a 	add	r2,r3,r3
  803820:	1085883a 	add	r2,r2,r2
  803824:	10c00504 	addi	r3,r2,20
  803828:	21000504 	addi	r4,r4,20
  80382c:	28cb883a 	add	r5,r5,r3
  803830:	2085883a 	add	r2,r4,r2
  803834:	10bfff04 	addi	r2,r2,-4
  803838:	297fff04 	addi	r5,r5,-4
  80383c:	11800017 	ldw	r6,0(r2)
  803840:	28c00017 	ldw	r3,0(r5)
  803844:	30c0031e 	bne	r6,r3,803854 <__mcmp+0x48>
  803848:	20bffa36 	bltu	r4,r2,803834 <__mcmp+0x28>
  80384c:	3805883a 	mov	r2,r7
  803850:	f800283a 	ret
  803854:	30c00336 	bltu	r6,r3,803864 <__mcmp+0x58>
  803858:	01c00044 	movi	r7,1
  80385c:	3805883a 	mov	r2,r7
  803860:	f800283a 	ret
  803864:	01ffffc4 	movi	r7,-1
  803868:	003ff806 	br	80384c <__mcmp+0x40>

0080386c <__ulp>:
  80386c:	295ffc2c 	andhi	r5,r5,32752
  803870:	013f3034 	movhi	r4,64704
  803874:	290b883a 	add	r5,r5,r4
  803878:	0145c83a 	sub	r2,zero,r5
  80387c:	1007d53a 	srai	r3,r2,20
  803880:	000d883a 	mov	r6,zero
  803884:	0140040e 	bge	zero,r5,803898 <__ulp+0x2c>
  803888:	280f883a 	mov	r7,r5
  80388c:	3807883a 	mov	r3,r7
  803890:	3005883a 	mov	r2,r6
  803894:	f800283a 	ret
  803898:	008004c4 	movi	r2,19
  80389c:	193ffb04 	addi	r4,r3,-20
  8038a0:	10c00c0e 	bge	r2,r3,8038d4 <__ulp+0x68>
  8038a4:	008007c4 	movi	r2,31
  8038a8:	1107c83a 	sub	r3,r2,r4
  8038ac:	00800784 	movi	r2,30
  8038b0:	01400044 	movi	r5,1
  8038b4:	11000216 	blt	r2,r4,8038c0 <__ulp+0x54>
  8038b8:	00800044 	movi	r2,1
  8038bc:	10ca983a 	sll	r5,r2,r3
  8038c0:	000f883a 	mov	r7,zero
  8038c4:	280d883a 	mov	r6,r5
  8038c8:	3807883a 	mov	r3,r7
  8038cc:	3005883a 	mov	r2,r6
  8038d0:	f800283a 	ret
  8038d4:	00800234 	movhi	r2,8
  8038d8:	10cfd83a 	sra	r7,r2,r3
  8038dc:	000d883a 	mov	r6,zero
  8038e0:	3005883a 	mov	r2,r6
  8038e4:	3807883a 	mov	r3,r7
  8038e8:	f800283a 	ret

008038ec <__b2d>:
  8038ec:	20800417 	ldw	r2,16(r4)
  8038f0:	defff904 	addi	sp,sp,-28
  8038f4:	dd000415 	stw	r20,16(sp)
  8038f8:	1085883a 	add	r2,r2,r2
  8038fc:	25000504 	addi	r20,r4,20
  803900:	1085883a 	add	r2,r2,r2
  803904:	dc000015 	stw	r16,0(sp)
  803908:	a0a1883a 	add	r16,r20,r2
  80390c:	dd400515 	stw	r21,20(sp)
  803910:	857fff17 	ldw	r21,-4(r16)
  803914:	dc400115 	stw	r17,4(sp)
  803918:	dfc00615 	stw	ra,24(sp)
  80391c:	a809883a 	mov	r4,r21
  803920:	2823883a 	mov	r17,r5
  803924:	dcc00315 	stw	r19,12(sp)
  803928:	dc800215 	stw	r18,8(sp)
  80392c:	08036d80 	call	8036d8 <__hi0bits>
  803930:	100b883a 	mov	r5,r2
  803934:	00800804 	movi	r2,32
  803938:	1145c83a 	sub	r2,r2,r5
  80393c:	88800015 	stw	r2,0(r17)
  803940:	00800284 	movi	r2,10
  803944:	80ffff04 	addi	r3,r16,-4
  803948:	11401416 	blt	r2,r5,80399c <__b2d+0xb0>
  80394c:	008002c4 	movi	r2,11
  803950:	1149c83a 	sub	r4,r2,r5
  803954:	a0c02736 	bltu	r20,r3,8039f4 <__b2d+0x108>
  803958:	000d883a 	mov	r6,zero
  80395c:	28800544 	addi	r2,r5,21
  803960:	a906d83a 	srl	r3,r21,r4
  803964:	a884983a 	sll	r2,r21,r2
  803968:	1ccffc34 	orhi	r19,r3,16368
  80396c:	11a4b03a 	or	r18,r2,r6
  803970:	9005883a 	mov	r2,r18
  803974:	9807883a 	mov	r3,r19
  803978:	dfc00617 	ldw	ra,24(sp)
  80397c:	dd400517 	ldw	r21,20(sp)
  803980:	dd000417 	ldw	r20,16(sp)
  803984:	dcc00317 	ldw	r19,12(sp)
  803988:	dc800217 	ldw	r18,8(sp)
  80398c:	dc400117 	ldw	r17,4(sp)
  803990:	dc000017 	ldw	r16,0(sp)
  803994:	dec00704 	addi	sp,sp,28
  803998:	f800283a 	ret
  80399c:	a0c00e36 	bltu	r20,r3,8039d8 <__b2d+0xec>
  8039a0:	293ffd44 	addi	r4,r5,-11
  8039a4:	000d883a 	mov	r6,zero
  8039a8:	20000f26 	beq	r4,zero,8039e8 <__b2d+0xfc>
  8039ac:	00800804 	movi	r2,32
  8039b0:	110bc83a 	sub	r5,r2,r4
  8039b4:	a0c01236 	bltu	r20,r3,803a00 <__b2d+0x114>
  8039b8:	000f883a 	mov	r7,zero
  8039bc:	a904983a 	sll	r2,r21,r4
  8039c0:	3146d83a 	srl	r3,r6,r5
  8039c4:	3108983a 	sll	r4,r6,r4
  8039c8:	108ffc34 	orhi	r2,r2,16368
  8039cc:	18a6b03a 	or	r19,r3,r2
  8039d0:	3924b03a 	or	r18,r7,r4
  8039d4:	003fe606 	br	803970 <__b2d+0x84>
  8039d8:	293ffd44 	addi	r4,r5,-11
  8039dc:	81bffe17 	ldw	r6,-8(r16)
  8039e0:	80fffe04 	addi	r3,r16,-8
  8039e4:	203ff11e 	bne	r4,zero,8039ac <__b2d+0xc0>
  8039e8:	accffc34 	orhi	r19,r21,16368
  8039ec:	3025883a 	mov	r18,r6
  8039f0:	003fdf06 	br	803970 <__b2d+0x84>
  8039f4:	18bfff17 	ldw	r2,-4(r3)
  8039f8:	110cd83a 	srl	r6,r2,r4
  8039fc:	003fd706 	br	80395c <__b2d+0x70>
  803a00:	18bfff17 	ldw	r2,-4(r3)
  803a04:	114ed83a 	srl	r7,r2,r5
  803a08:	003fec06 	br	8039bc <__b2d+0xd0>

00803a0c <__ratio>:
  803a0c:	defff904 	addi	sp,sp,-28
  803a10:	dc400215 	stw	r17,8(sp)
  803a14:	2823883a 	mov	r17,r5
  803a18:	d80b883a 	mov	r5,sp
  803a1c:	dfc00615 	stw	ra,24(sp)
  803a20:	dd000515 	stw	r20,20(sp)
  803a24:	dcc00415 	stw	r19,16(sp)
  803a28:	dc800315 	stw	r18,12(sp)
  803a2c:	2025883a 	mov	r18,r4
  803a30:	08038ec0 	call	8038ec <__b2d>
  803a34:	8809883a 	mov	r4,r17
  803a38:	d9400104 	addi	r5,sp,4
  803a3c:	1027883a 	mov	r19,r2
  803a40:	1829883a 	mov	r20,r3
  803a44:	08038ec0 	call	8038ec <__b2d>
  803a48:	89000417 	ldw	r4,16(r17)
  803a4c:	91c00417 	ldw	r7,16(r18)
  803a50:	d9800117 	ldw	r6,4(sp)
  803a54:	180b883a 	mov	r5,r3
  803a58:	390fc83a 	sub	r7,r7,r4
  803a5c:	1009883a 	mov	r4,r2
  803a60:	d8800017 	ldw	r2,0(sp)
  803a64:	380e917a 	slli	r7,r7,5
  803a68:	2011883a 	mov	r8,r4
  803a6c:	1185c83a 	sub	r2,r2,r6
  803a70:	11c5883a 	add	r2,r2,r7
  803a74:	1006953a 	slli	r3,r2,20
  803a78:	2813883a 	mov	r9,r5
  803a7c:	00800d0e 	bge	zero,r2,803ab4 <__ratio+0xa8>
  803a80:	1d29883a 	add	r20,r3,r20
  803a84:	a00b883a 	mov	r5,r20
  803a88:	480f883a 	mov	r7,r9
  803a8c:	9809883a 	mov	r4,r19
  803a90:	400d883a 	mov	r6,r8
  803a94:	08011940 	call	801194 <__divdf3>
  803a98:	dfc00617 	ldw	ra,24(sp)
  803a9c:	dd000517 	ldw	r20,20(sp)
  803aa0:	dcc00417 	ldw	r19,16(sp)
  803aa4:	dc800317 	ldw	r18,12(sp)
  803aa8:	dc400217 	ldw	r17,8(sp)
  803aac:	dec00704 	addi	sp,sp,28
  803ab0:	f800283a 	ret
  803ab4:	28d3c83a 	sub	r9,r5,r3
  803ab8:	003ff206 	br	803a84 <__ratio+0x78>

00803abc <_mprec_log10>:
  803abc:	defffe04 	addi	sp,sp,-8
  803ac0:	008005c4 	movi	r2,23
  803ac4:	dc000015 	stw	r16,0(sp)
  803ac8:	dfc00115 	stw	ra,4(sp)
  803acc:	2021883a 	mov	r16,r4
  803ad0:	11000c16 	blt	r2,r4,803b04 <_mprec_log10+0x48>
  803ad4:	200490fa 	slli	r2,r4,3
  803ad8:	00c02074 	movhi	r3,129
  803adc:	18e81604 	addi	r3,r3,-24488
  803ae0:	10c5883a 	add	r2,r2,r3
  803ae4:	12400117 	ldw	r9,4(r2)
  803ae8:	12000017 	ldw	r8,0(r2)
  803aec:	4807883a 	mov	r3,r9
  803af0:	4005883a 	mov	r2,r8
  803af4:	dfc00117 	ldw	ra,4(sp)
  803af8:	dc000017 	ldw	r16,0(sp)
  803afc:	dec00204 	addi	sp,sp,8
  803b00:	f800283a 	ret
  803b04:	0011883a 	mov	r8,zero
  803b08:	024ffc34 	movhi	r9,16368
  803b0c:	0005883a 	mov	r2,zero
  803b10:	00d00934 	movhi	r3,16420
  803b14:	480b883a 	mov	r5,r9
  803b18:	4009883a 	mov	r4,r8
  803b1c:	180f883a 	mov	r7,r3
  803b20:	100d883a 	mov	r6,r2
  803b24:	080671c0 	call	80671c <__muldf3>
  803b28:	843fffc4 	addi	r16,r16,-1
  803b2c:	1011883a 	mov	r8,r2
  803b30:	1813883a 	mov	r9,r3
  803b34:	803ff51e 	bne	r16,zero,803b0c <_mprec_log10+0x50>
  803b38:	4005883a 	mov	r2,r8
  803b3c:	4807883a 	mov	r3,r9
  803b40:	dfc00117 	ldw	ra,4(sp)
  803b44:	dc000017 	ldw	r16,0(sp)
  803b48:	dec00204 	addi	sp,sp,8
  803b4c:	f800283a 	ret

00803b50 <__copybits>:
  803b50:	297fffc4 	addi	r5,r5,-1
  803b54:	30800417 	ldw	r2,16(r6)
  803b58:	280bd17a 	srai	r5,r5,5
  803b5c:	31800504 	addi	r6,r6,20
  803b60:	1085883a 	add	r2,r2,r2
  803b64:	294b883a 	add	r5,r5,r5
  803b68:	294b883a 	add	r5,r5,r5
  803b6c:	1085883a 	add	r2,r2,r2
  803b70:	290b883a 	add	r5,r5,r4
  803b74:	3087883a 	add	r3,r6,r2
  803b78:	29400104 	addi	r5,r5,4
  803b7c:	30c0052e 	bgeu	r6,r3,803b94 <__copybits+0x44>
  803b80:	30800017 	ldw	r2,0(r6)
  803b84:	31800104 	addi	r6,r6,4
  803b88:	20800015 	stw	r2,0(r4)
  803b8c:	21000104 	addi	r4,r4,4
  803b90:	30fffb36 	bltu	r6,r3,803b80 <__copybits+0x30>
  803b94:	2140032e 	bgeu	r4,r5,803ba4 <__copybits+0x54>
  803b98:	20000015 	stw	zero,0(r4)
  803b9c:	21000104 	addi	r4,r4,4
  803ba0:	217ffd36 	bltu	r4,r5,803b98 <__copybits+0x48>
  803ba4:	f800283a 	ret

00803ba8 <__any_on>:
  803ba8:	20800417 	ldw	r2,16(r4)
  803bac:	2807d17a 	srai	r3,r5,5
  803bb0:	21000504 	addi	r4,r4,20
  803bb4:	10c00d0e 	bge	r2,r3,803bec <__any_on+0x44>
  803bb8:	1085883a 	add	r2,r2,r2
  803bbc:	1085883a 	add	r2,r2,r2
  803bc0:	208d883a 	add	r6,r4,r2
  803bc4:	2180182e 	bgeu	r4,r6,803c28 <__any_on+0x80>
  803bc8:	30bfff17 	ldw	r2,-4(r6)
  803bcc:	30ffff04 	addi	r3,r6,-4
  803bd0:	1000041e 	bne	r2,zero,803be4 <__any_on+0x3c>
  803bd4:	20c0142e 	bgeu	r4,r3,803c28 <__any_on+0x80>
  803bd8:	18ffff04 	addi	r3,r3,-4
  803bdc:	18800017 	ldw	r2,0(r3)
  803be0:	103ffc26 	beq	r2,zero,803bd4 <__any_on+0x2c>
  803be4:	00800044 	movi	r2,1
  803be8:	f800283a 	ret
  803bec:	18800a0e 	bge	r3,r2,803c18 <__any_on+0x70>
  803bf0:	294007cc 	andi	r5,r5,31
  803bf4:	28000826 	beq	r5,zero,803c18 <__any_on+0x70>
  803bf8:	18c5883a 	add	r2,r3,r3
  803bfc:	1085883a 	add	r2,r2,r2
  803c00:	208d883a 	add	r6,r4,r2
  803c04:	30c00017 	ldw	r3,0(r6)
  803c08:	1944d83a 	srl	r2,r3,r5
  803c0c:	1144983a 	sll	r2,r2,r5
  803c10:	18bff41e 	bne	r3,r2,803be4 <__any_on+0x3c>
  803c14:	003feb06 	br	803bc4 <__any_on+0x1c>
  803c18:	18c5883a 	add	r2,r3,r3
  803c1c:	1085883a 	add	r2,r2,r2
  803c20:	208d883a 	add	r6,r4,r2
  803c24:	003fe706 	br	803bc4 <__any_on+0x1c>
  803c28:	0005883a 	mov	r2,zero
  803c2c:	f800283a 	ret

00803c30 <_Balloc>:
  803c30:	20c01317 	ldw	r3,76(r4)
  803c34:	defffb04 	addi	sp,sp,-20
  803c38:	dcc00315 	stw	r19,12(sp)
  803c3c:	dc800215 	stw	r18,8(sp)
  803c40:	dfc00415 	stw	ra,16(sp)
  803c44:	2825883a 	mov	r18,r5
  803c48:	dc400115 	stw	r17,4(sp)
  803c4c:	dc000015 	stw	r16,0(sp)
  803c50:	2027883a 	mov	r19,r4
  803c54:	01800404 	movi	r6,16
  803c58:	01400104 	movi	r5,4
  803c5c:	18001726 	beq	r3,zero,803cbc <_Balloc+0x8c>
  803c60:	01400044 	movi	r5,1
  803c64:	9485883a 	add	r2,r18,r18
  803c68:	2ca2983a 	sll	r17,r5,r18
  803c6c:	1085883a 	add	r2,r2,r2
  803c70:	10c7883a 	add	r3,r2,r3
  803c74:	1c000017 	ldw	r16,0(r3)
  803c78:	8c4d883a 	add	r6,r17,r17
  803c7c:	318d883a 	add	r6,r6,r6
  803c80:	9809883a 	mov	r4,r19
  803c84:	31800504 	addi	r6,r6,20
  803c88:	80001226 	beq	r16,zero,803cd4 <_Balloc+0xa4>
  803c8c:	80800017 	ldw	r2,0(r16)
  803c90:	18800015 	stw	r2,0(r3)
  803c94:	80000415 	stw	zero,16(r16)
  803c98:	80000315 	stw	zero,12(r16)
  803c9c:	8005883a 	mov	r2,r16
  803ca0:	dfc00417 	ldw	ra,16(sp)
  803ca4:	dcc00317 	ldw	r19,12(sp)
  803ca8:	dc800217 	ldw	r18,8(sp)
  803cac:	dc400117 	ldw	r17,4(sp)
  803cb0:	dc000017 	ldw	r16,0(sp)
  803cb4:	dec00504 	addi	sp,sp,20
  803cb8:	f800283a 	ret
  803cbc:	0804d240 	call	804d24 <_calloc_r>
  803cc0:	1007883a 	mov	r3,r2
  803cc4:	0021883a 	mov	r16,zero
  803cc8:	98801315 	stw	r2,76(r19)
  803ccc:	103fe41e 	bne	r2,zero,803c60 <_Balloc+0x30>
  803cd0:	003ff206 	br	803c9c <_Balloc+0x6c>
  803cd4:	0804d240 	call	804d24 <_calloc_r>
  803cd8:	103ff026 	beq	r2,zero,803c9c <_Balloc+0x6c>
  803cdc:	1021883a 	mov	r16,r2
  803ce0:	14800115 	stw	r18,4(r2)
  803ce4:	14400215 	stw	r17,8(r2)
  803ce8:	003fea06 	br	803c94 <_Balloc+0x64>

00803cec <__d2b>:
  803cec:	defff504 	addi	sp,sp,-44
  803cf0:	dcc00515 	stw	r19,20(sp)
  803cf4:	04c00044 	movi	r19,1
  803cf8:	dc000215 	stw	r16,8(sp)
  803cfc:	2821883a 	mov	r16,r5
  803d00:	980b883a 	mov	r5,r19
  803d04:	ddc00915 	stw	r23,36(sp)
  803d08:	dd800815 	stw	r22,32(sp)
  803d0c:	dd400715 	stw	r21,28(sp)
  803d10:	dd000615 	stw	r20,24(sp)
  803d14:	dc800415 	stw	r18,16(sp)
  803d18:	dc400315 	stw	r17,12(sp)
  803d1c:	dfc00a15 	stw	ra,40(sp)
  803d20:	3023883a 	mov	r17,r6
  803d24:	382d883a 	mov	r22,r7
  803d28:	ddc00b17 	ldw	r23,44(sp)
  803d2c:	0803c300 	call	803c30 <_Balloc>
  803d30:	1025883a 	mov	r18,r2
  803d34:	00a00034 	movhi	r2,32768
  803d38:	10bfffc4 	addi	r2,r2,-1
  803d3c:	8888703a 	and	r4,r17,r2
  803d40:	202ad53a 	srli	r21,r4,20
  803d44:	00800434 	movhi	r2,16
  803d48:	10bfffc4 	addi	r2,r2,-1
  803d4c:	8886703a 	and	r3,r17,r2
  803d50:	a829003a 	cmpeq	r20,r21,zero
  803d54:	800b883a 	mov	r5,r16
  803d58:	d8c00115 	stw	r3,4(sp)
  803d5c:	94000504 	addi	r16,r18,20
  803d60:	a000021e 	bne	r20,zero,803d6c <__d2b+0x80>
  803d64:	18c00434 	orhi	r3,r3,16
  803d68:	d8c00115 	stw	r3,4(sp)
  803d6c:	28002726 	beq	r5,zero,803e0c <__d2b+0x120>
  803d70:	d809883a 	mov	r4,sp
  803d74:	d9400015 	stw	r5,0(sp)
  803d78:	08037480 	call	803748 <__lo0bits>
  803d7c:	100d883a 	mov	r6,r2
  803d80:	10003526 	beq	r2,zero,803e58 <__d2b+0x16c>
  803d84:	d8c00117 	ldw	r3,4(sp)
  803d88:	00800804 	movi	r2,32
  803d8c:	1185c83a 	sub	r2,r2,r6
  803d90:	d9000017 	ldw	r4,0(sp)
  803d94:	1886983a 	sll	r3,r3,r2
  803d98:	1906b03a 	or	r3,r3,r4
  803d9c:	90c00515 	stw	r3,20(r18)
  803da0:	d8c00117 	ldw	r3,4(sp)
  803da4:	1986d83a 	srl	r3,r3,r6
  803da8:	d8c00115 	stw	r3,4(sp)
  803dac:	180b003a 	cmpeq	r5,r3,zero
  803db0:	00800084 	movi	r2,2
  803db4:	114bc83a 	sub	r5,r2,r5
  803db8:	80c00115 	stw	r3,4(r16)
  803dbc:	91400415 	stw	r5,16(r18)
  803dc0:	a0001a1e 	bne	r20,zero,803e2c <__d2b+0x140>
  803dc4:	3545883a 	add	r2,r6,r21
  803dc8:	10bef344 	addi	r2,r2,-1075
  803dcc:	00c00d44 	movi	r3,53
  803dd0:	b0800015 	stw	r2,0(r22)
  803dd4:	1987c83a 	sub	r3,r3,r6
  803dd8:	b8c00015 	stw	r3,0(r23)
  803ddc:	9005883a 	mov	r2,r18
  803de0:	dfc00a17 	ldw	ra,40(sp)
  803de4:	ddc00917 	ldw	r23,36(sp)
  803de8:	dd800817 	ldw	r22,32(sp)
  803dec:	dd400717 	ldw	r21,28(sp)
  803df0:	dd000617 	ldw	r20,24(sp)
  803df4:	dcc00517 	ldw	r19,20(sp)
  803df8:	dc800417 	ldw	r18,16(sp)
  803dfc:	dc400317 	ldw	r17,12(sp)
  803e00:	dc000217 	ldw	r16,8(sp)
  803e04:	dec00b04 	addi	sp,sp,44
  803e08:	f800283a 	ret
  803e0c:	d9000104 	addi	r4,sp,4
  803e10:	08037480 	call	803748 <__lo0bits>
  803e14:	11800804 	addi	r6,r2,32
  803e18:	d8800117 	ldw	r2,4(sp)
  803e1c:	94c00415 	stw	r19,16(r18)
  803e20:	980b883a 	mov	r5,r19
  803e24:	90800515 	stw	r2,20(r18)
  803e28:	a03fe626 	beq	r20,zero,803dc4 <__d2b+0xd8>
  803e2c:	2945883a 	add	r2,r5,r5
  803e30:	1085883a 	add	r2,r2,r2
  803e34:	1405883a 	add	r2,r2,r16
  803e38:	113fff17 	ldw	r4,-4(r2)
  803e3c:	30fef384 	addi	r3,r6,-1074
  803e40:	2820917a 	slli	r16,r5,5
  803e44:	b0c00015 	stw	r3,0(r22)
  803e48:	08036d80 	call	8036d8 <__hi0bits>
  803e4c:	80a1c83a 	sub	r16,r16,r2
  803e50:	bc000015 	stw	r16,0(r23)
  803e54:	003fe106 	br	803ddc <__d2b+0xf0>
  803e58:	d8800017 	ldw	r2,0(sp)
  803e5c:	90800515 	stw	r2,20(r18)
  803e60:	d8c00117 	ldw	r3,4(sp)
  803e64:	003fd106 	br	803dac <__d2b+0xc0>

00803e68 <__mdiff>:
  803e68:	defffb04 	addi	sp,sp,-20
  803e6c:	dc000015 	stw	r16,0(sp)
  803e70:	2821883a 	mov	r16,r5
  803e74:	dc800215 	stw	r18,8(sp)
  803e78:	300b883a 	mov	r5,r6
  803e7c:	2025883a 	mov	r18,r4
  803e80:	8009883a 	mov	r4,r16
  803e84:	dc400115 	stw	r17,4(sp)
  803e88:	dfc00415 	stw	ra,16(sp)
  803e8c:	dcc00315 	stw	r19,12(sp)
  803e90:	3023883a 	mov	r17,r6
  803e94:	080380c0 	call	80380c <__mcmp>
  803e98:	10004226 	beq	r2,zero,803fa4 <__mdiff+0x13c>
  803e9c:	10005016 	blt	r2,zero,803fe0 <__mdiff+0x178>
  803ea0:	0027883a 	mov	r19,zero
  803ea4:	81400117 	ldw	r5,4(r16)
  803ea8:	9009883a 	mov	r4,r18
  803eac:	0803c300 	call	803c30 <_Balloc>
  803eb0:	1019883a 	mov	r12,r2
  803eb4:	82800417 	ldw	r10,16(r16)
  803eb8:	88800417 	ldw	r2,16(r17)
  803ebc:	81800504 	addi	r6,r16,20
  803ec0:	5287883a 	add	r3,r10,r10
  803ec4:	1085883a 	add	r2,r2,r2
  803ec8:	18c7883a 	add	r3,r3,r3
  803ecc:	1085883a 	add	r2,r2,r2
  803ed0:	8a000504 	addi	r8,r17,20
  803ed4:	64c00315 	stw	r19,12(r12)
  803ed8:	30db883a 	add	r13,r6,r3
  803edc:	4097883a 	add	r11,r8,r2
  803ee0:	61c00504 	addi	r7,r12,20
  803ee4:	0013883a 	mov	r9,zero
  803ee8:	31000017 	ldw	r4,0(r6)
  803eec:	41400017 	ldw	r5,0(r8)
  803ef0:	42000104 	addi	r8,r8,4
  803ef4:	20bfffcc 	andi	r2,r4,65535
  803ef8:	28ffffcc 	andi	r3,r5,65535
  803efc:	10c5c83a 	sub	r2,r2,r3
  803f00:	1245883a 	add	r2,r2,r9
  803f04:	2008d43a 	srli	r4,r4,16
  803f08:	280ad43a 	srli	r5,r5,16
  803f0c:	1007d43a 	srai	r3,r2,16
  803f10:	3880000d 	sth	r2,0(r7)
  803f14:	2149c83a 	sub	r4,r4,r5
  803f18:	20c9883a 	add	r4,r4,r3
  803f1c:	3900008d 	sth	r4,2(r7)
  803f20:	31800104 	addi	r6,r6,4
  803f24:	39c00104 	addi	r7,r7,4
  803f28:	2013d43a 	srai	r9,r4,16
  803f2c:	42ffee36 	bltu	r8,r11,803ee8 <__mdiff+0x80>
  803f30:	33400c2e 	bgeu	r6,r13,803f64 <__mdiff+0xfc>
  803f34:	30800017 	ldw	r2,0(r6)
  803f38:	31800104 	addi	r6,r6,4
  803f3c:	10ffffcc 	andi	r3,r2,65535
  803f40:	1a47883a 	add	r3,r3,r9
  803f44:	1004d43a 	srli	r2,r2,16
  803f48:	1809d43a 	srai	r4,r3,16
  803f4c:	38c0000d 	sth	r3,0(r7)
  803f50:	1105883a 	add	r2,r2,r4
  803f54:	3880008d 	sth	r2,2(r7)
  803f58:	1013d43a 	srai	r9,r2,16
  803f5c:	39c00104 	addi	r7,r7,4
  803f60:	337ff436 	bltu	r6,r13,803f34 <__mdiff+0xcc>
  803f64:	38bfff17 	ldw	r2,-4(r7)
  803f68:	38ffff04 	addi	r3,r7,-4
  803f6c:	1000041e 	bne	r2,zero,803f80 <__mdiff+0x118>
  803f70:	18ffff04 	addi	r3,r3,-4
  803f74:	18800017 	ldw	r2,0(r3)
  803f78:	52bfffc4 	addi	r10,r10,-1
  803f7c:	103ffc26 	beq	r2,zero,803f70 <__mdiff+0x108>
  803f80:	6005883a 	mov	r2,r12
  803f84:	62800415 	stw	r10,16(r12)
  803f88:	dfc00417 	ldw	ra,16(sp)
  803f8c:	dcc00317 	ldw	r19,12(sp)
  803f90:	dc800217 	ldw	r18,8(sp)
  803f94:	dc400117 	ldw	r17,4(sp)
  803f98:	dc000017 	ldw	r16,0(sp)
  803f9c:	dec00504 	addi	sp,sp,20
  803fa0:	f800283a 	ret
  803fa4:	9009883a 	mov	r4,r18
  803fa8:	000b883a 	mov	r5,zero
  803fac:	0803c300 	call	803c30 <_Balloc>
  803fb0:	1019883a 	mov	r12,r2
  803fb4:	00800044 	movi	r2,1
  803fb8:	60800415 	stw	r2,16(r12)
  803fbc:	6005883a 	mov	r2,r12
  803fc0:	60000515 	stw	zero,20(r12)
  803fc4:	dfc00417 	ldw	ra,16(sp)
  803fc8:	dcc00317 	ldw	r19,12(sp)
  803fcc:	dc800217 	ldw	r18,8(sp)
  803fd0:	dc400117 	ldw	r17,4(sp)
  803fd4:	dc000017 	ldw	r16,0(sp)
  803fd8:	dec00504 	addi	sp,sp,20
  803fdc:	f800283a 	ret
  803fe0:	880d883a 	mov	r6,r17
  803fe4:	04c00044 	movi	r19,1
  803fe8:	8023883a 	mov	r17,r16
  803fec:	3021883a 	mov	r16,r6
  803ff0:	003fac06 	br	803ea4 <__mdiff+0x3c>

00803ff4 <__lshift>:
  803ff4:	defff904 	addi	sp,sp,-28
  803ff8:	28800417 	ldw	r2,16(r5)
  803ffc:	dc000015 	stw	r16,0(sp)
  804000:	3021d17a 	srai	r16,r6,5
  804004:	28c00217 	ldw	r3,8(r5)
  804008:	10800044 	addi	r2,r2,1
  80400c:	dc400115 	stw	r17,4(sp)
  804010:	80a3883a 	add	r17,r16,r2
  804014:	dd400515 	stw	r21,20(sp)
  804018:	dd000415 	stw	r20,16(sp)
  80401c:	dc800215 	stw	r18,8(sp)
  804020:	dfc00615 	stw	ra,24(sp)
  804024:	2825883a 	mov	r18,r5
  804028:	dcc00315 	stw	r19,12(sp)
  80402c:	3029883a 	mov	r20,r6
  804030:	202b883a 	mov	r21,r4
  804034:	29400117 	ldw	r5,4(r5)
  804038:	1c40030e 	bge	r3,r17,804048 <__lshift+0x54>
  80403c:	18c7883a 	add	r3,r3,r3
  804040:	29400044 	addi	r5,r5,1
  804044:	1c7ffd16 	blt	r3,r17,80403c <__lshift+0x48>
  804048:	a809883a 	mov	r4,r21
  80404c:	0803c300 	call	803c30 <_Balloc>
  804050:	1027883a 	mov	r19,r2
  804054:	11400504 	addi	r5,r2,20
  804058:	0400090e 	bge	zero,r16,804080 <__lshift+0x8c>
  80405c:	2805883a 	mov	r2,r5
  804060:	0007883a 	mov	r3,zero
  804064:	18c00044 	addi	r3,r3,1
  804068:	10000015 	stw	zero,0(r2)
  80406c:	10800104 	addi	r2,r2,4
  804070:	80fffc1e 	bne	r16,r3,804064 <__lshift+0x70>
  804074:	8405883a 	add	r2,r16,r16
  804078:	1085883a 	add	r2,r2,r2
  80407c:	288b883a 	add	r5,r5,r2
  804080:	90800417 	ldw	r2,16(r18)
  804084:	91000504 	addi	r4,r18,20
  804088:	a18007cc 	andi	r6,r20,31
  80408c:	1085883a 	add	r2,r2,r2
  804090:	1085883a 	add	r2,r2,r2
  804094:	208f883a 	add	r7,r4,r2
  804098:	30001e26 	beq	r6,zero,804114 <__lshift+0x120>
  80409c:	00800804 	movi	r2,32
  8040a0:	1191c83a 	sub	r8,r2,r6
  8040a4:	0007883a 	mov	r3,zero
  8040a8:	20800017 	ldw	r2,0(r4)
  8040ac:	1184983a 	sll	r2,r2,r6
  8040b0:	1884b03a 	or	r2,r3,r2
  8040b4:	28800015 	stw	r2,0(r5)
  8040b8:	20c00017 	ldw	r3,0(r4)
  8040bc:	21000104 	addi	r4,r4,4
  8040c0:	29400104 	addi	r5,r5,4
  8040c4:	1a06d83a 	srl	r3,r3,r8
  8040c8:	21fff736 	bltu	r4,r7,8040a8 <__lshift+0xb4>
  8040cc:	28c00015 	stw	r3,0(r5)
  8040d0:	18000126 	beq	r3,zero,8040d8 <__lshift+0xe4>
  8040d4:	8c400044 	addi	r17,r17,1
  8040d8:	88bfffc4 	addi	r2,r17,-1
  8040dc:	98800415 	stw	r2,16(r19)
  8040e0:	a809883a 	mov	r4,r21
  8040e4:	900b883a 	mov	r5,r18
  8040e8:	08036b00 	call	8036b0 <_Bfree>
  8040ec:	9805883a 	mov	r2,r19
  8040f0:	dfc00617 	ldw	ra,24(sp)
  8040f4:	dd400517 	ldw	r21,20(sp)
  8040f8:	dd000417 	ldw	r20,16(sp)
  8040fc:	dcc00317 	ldw	r19,12(sp)
  804100:	dc800217 	ldw	r18,8(sp)
  804104:	dc400117 	ldw	r17,4(sp)
  804108:	dc000017 	ldw	r16,0(sp)
  80410c:	dec00704 	addi	sp,sp,28
  804110:	f800283a 	ret
  804114:	20800017 	ldw	r2,0(r4)
  804118:	21000104 	addi	r4,r4,4
  80411c:	28800015 	stw	r2,0(r5)
  804120:	29400104 	addi	r5,r5,4
  804124:	21ffec2e 	bgeu	r4,r7,8040d8 <__lshift+0xe4>
  804128:	20800017 	ldw	r2,0(r4)
  80412c:	21000104 	addi	r4,r4,4
  804130:	28800015 	stw	r2,0(r5)
  804134:	29400104 	addi	r5,r5,4
  804138:	21fff636 	bltu	r4,r7,804114 <__lshift+0x120>
  80413c:	003fe606 	br	8040d8 <__lshift+0xe4>

00804140 <__multiply>:
  804140:	defff904 	addi	sp,sp,-28
  804144:	dcc00315 	stw	r19,12(sp)
  804148:	dc800215 	stw	r18,8(sp)
  80414c:	2cc00417 	ldw	r19,16(r5)
  804150:	34800417 	ldw	r18,16(r6)
  804154:	dd000415 	stw	r20,16(sp)
  804158:	dc400115 	stw	r17,4(sp)
  80415c:	dfc00615 	stw	ra,24(sp)
  804160:	dd400515 	stw	r21,20(sp)
  804164:	dc000015 	stw	r16,0(sp)
  804168:	2823883a 	mov	r17,r5
  80416c:	3029883a 	mov	r20,r6
  804170:	9c80040e 	bge	r19,r18,804184 <__multiply+0x44>
  804174:	9027883a 	mov	r19,r18
  804178:	2c800417 	ldw	r18,16(r5)
  80417c:	2829883a 	mov	r20,r5
  804180:	3023883a 	mov	r17,r6
  804184:	88800217 	ldw	r2,8(r17)
  804188:	9ca1883a 	add	r16,r19,r18
  80418c:	89400117 	ldw	r5,4(r17)
  804190:	1400010e 	bge	r2,r16,804198 <__multiply+0x58>
  804194:	29400044 	addi	r5,r5,1
  804198:	0803c300 	call	803c30 <_Balloc>
  80419c:	102b883a 	mov	r21,r2
  8041a0:	8405883a 	add	r2,r16,r16
  8041a4:	1085883a 	add	r2,r2,r2
  8041a8:	a9000504 	addi	r4,r21,20
  8041ac:	209d883a 	add	r14,r4,r2
  8041b0:	2380042e 	bgeu	r4,r14,8041c4 <__multiply+0x84>
  8041b4:	2005883a 	mov	r2,r4
  8041b8:	10000015 	stw	zero,0(r2)
  8041bc:	10800104 	addi	r2,r2,4
  8041c0:	13bffd36 	bltu	r2,r14,8041b8 <__multiply+0x78>
  8041c4:	9485883a 	add	r2,r18,r18
  8041c8:	9cc7883a 	add	r3,r19,r19
  8041cc:	a1800504 	addi	r6,r20,20
  8041d0:	1085883a 	add	r2,r2,r2
  8041d4:	8b400504 	addi	r13,r17,20
  8041d8:	18c7883a 	add	r3,r3,r3
  8041dc:	309f883a 	add	r15,r6,r2
  8041e0:	68d7883a 	add	r11,r13,r3
  8041e4:	33c03b2e 	bgeu	r6,r15,8042d4 <__multiply+0x194>
  8041e8:	2019883a 	mov	r12,r4
  8041ec:	30800017 	ldw	r2,0(r6)
  8041f0:	127fffcc 	andi	r9,r2,65535
  8041f4:	48001826 	beq	r9,zero,804258 <__multiply+0x118>
  8041f8:	6811883a 	mov	r8,r13
  8041fc:	600f883a 	mov	r7,r12
  804200:	0015883a 	mov	r10,zero
  804204:	40c00017 	ldw	r3,0(r8)
  804208:	39400017 	ldw	r5,0(r7)
  80420c:	42000104 	addi	r8,r8,4
  804210:	193fffcc 	andi	r4,r3,65535
  804214:	4909383a 	mul	r4,r9,r4
  804218:	1806d43a 	srli	r3,r3,16
  80421c:	28bfffcc 	andi	r2,r5,65535
  804220:	5085883a 	add	r2,r10,r2
  804224:	2089883a 	add	r4,r4,r2
  804228:	48c7383a 	mul	r3,r9,r3
  80422c:	280ad43a 	srli	r5,r5,16
  804230:	2004d43a 	srli	r2,r4,16
  804234:	3900000d 	sth	r4,0(r7)
  804238:	1947883a 	add	r3,r3,r5
  80423c:	10c5883a 	add	r2,r2,r3
  804240:	3880008d 	sth	r2,2(r7)
  804244:	1014d43a 	srli	r10,r2,16
  804248:	39c00104 	addi	r7,r7,4
  80424c:	42ffed36 	bltu	r8,r11,804204 <__multiply+0xc4>
  804250:	3a800015 	stw	r10,0(r7)
  804254:	30800017 	ldw	r2,0(r6)
  804258:	1012d43a 	srli	r9,r2,16
  80425c:	48001926 	beq	r9,zero,8042c4 <__multiply+0x184>
  804260:	60800017 	ldw	r2,0(r12)
  804264:	6811883a 	mov	r8,r13
  804268:	600f883a 	mov	r7,r12
  80426c:	0015883a 	mov	r10,zero
  804270:	100b883a 	mov	r5,r2
  804274:	41000017 	ldw	r4,0(r8)
  804278:	2806d43a 	srli	r3,r5,16
  80427c:	3880000d 	sth	r2,0(r7)
  804280:	20bfffcc 	andi	r2,r4,65535
  804284:	4885383a 	mul	r2,r9,r2
  804288:	50c7883a 	add	r3,r10,r3
  80428c:	2008d43a 	srli	r4,r4,16
  804290:	10c5883a 	add	r2,r2,r3
  804294:	3880008d 	sth	r2,2(r7)
  804298:	39c00104 	addi	r7,r7,4
  80429c:	39400017 	ldw	r5,0(r7)
  8042a0:	4909383a 	mul	r4,r9,r4
  8042a4:	1004d43a 	srli	r2,r2,16
  8042a8:	28ffffcc 	andi	r3,r5,65535
  8042ac:	20c9883a 	add	r4,r4,r3
  8042b0:	1105883a 	add	r2,r2,r4
  8042b4:	42000104 	addi	r8,r8,4
  8042b8:	1014d43a 	srli	r10,r2,16
  8042bc:	42ffed36 	bltu	r8,r11,804274 <__multiply+0x134>
  8042c0:	38800015 	stw	r2,0(r7)
  8042c4:	31800104 	addi	r6,r6,4
  8042c8:	33c0022e 	bgeu	r6,r15,8042d4 <__multiply+0x194>
  8042cc:	63000104 	addi	r12,r12,4
  8042d0:	003fc606 	br	8041ec <__multiply+0xac>
  8042d4:	0400090e 	bge	zero,r16,8042fc <__multiply+0x1bc>
  8042d8:	70bfff17 	ldw	r2,-4(r14)
  8042dc:	70ffff04 	addi	r3,r14,-4
  8042e0:	10000326 	beq	r2,zero,8042f0 <__multiply+0x1b0>
  8042e4:	00000506 	br	8042fc <__multiply+0x1bc>
  8042e8:	18800017 	ldw	r2,0(r3)
  8042ec:	1000031e 	bne	r2,zero,8042fc <__multiply+0x1bc>
  8042f0:	843fffc4 	addi	r16,r16,-1
  8042f4:	18ffff04 	addi	r3,r3,-4
  8042f8:	803ffb1e 	bne	r16,zero,8042e8 <__multiply+0x1a8>
  8042fc:	a805883a 	mov	r2,r21
  804300:	ac000415 	stw	r16,16(r21)
  804304:	dfc00617 	ldw	ra,24(sp)
  804308:	dd400517 	ldw	r21,20(sp)
  80430c:	dd000417 	ldw	r20,16(sp)
  804310:	dcc00317 	ldw	r19,12(sp)
  804314:	dc800217 	ldw	r18,8(sp)
  804318:	dc400117 	ldw	r17,4(sp)
  80431c:	dc000017 	ldw	r16,0(sp)
  804320:	dec00704 	addi	sp,sp,28
  804324:	f800283a 	ret

00804328 <__i2b>:
  804328:	defffd04 	addi	sp,sp,-12
  80432c:	dc000015 	stw	r16,0(sp)
  804330:	04000044 	movi	r16,1
  804334:	dc800115 	stw	r18,4(sp)
  804338:	2825883a 	mov	r18,r5
  80433c:	800b883a 	mov	r5,r16
  804340:	dfc00215 	stw	ra,8(sp)
  804344:	0803c300 	call	803c30 <_Balloc>
  804348:	14000415 	stw	r16,16(r2)
  80434c:	14800515 	stw	r18,20(r2)
  804350:	dfc00217 	ldw	ra,8(sp)
  804354:	dc800117 	ldw	r18,4(sp)
  804358:	dc000017 	ldw	r16,0(sp)
  80435c:	dec00304 	addi	sp,sp,12
  804360:	f800283a 	ret

00804364 <__multadd>:
  804364:	defffa04 	addi	sp,sp,-24
  804368:	dc800215 	stw	r18,8(sp)
  80436c:	2c800417 	ldw	r18,16(r5)
  804370:	dd000415 	stw	r20,16(sp)
  804374:	dcc00315 	stw	r19,12(sp)
  804378:	dc000015 	stw	r16,0(sp)
  80437c:	dfc00515 	stw	ra,20(sp)
  804380:	3821883a 	mov	r16,r7
  804384:	dc400115 	stw	r17,4(sp)
  804388:	2827883a 	mov	r19,r5
  80438c:	2029883a 	mov	r20,r4
  804390:	2a000504 	addi	r8,r5,20
  804394:	000f883a 	mov	r7,zero
  804398:	40800017 	ldw	r2,0(r8)
  80439c:	39c00044 	addi	r7,r7,1
  8043a0:	10ffffcc 	andi	r3,r2,65535
  8043a4:	1987383a 	mul	r3,r3,r6
  8043a8:	1004d43a 	srli	r2,r2,16
  8043ac:	1c07883a 	add	r3,r3,r16
  8043b0:	180ad43a 	srli	r5,r3,16
  8043b4:	1185383a 	mul	r2,r2,r6
  8043b8:	18ffffcc 	andi	r3,r3,65535
  8043bc:	1145883a 	add	r2,r2,r5
  8043c0:	1008943a 	slli	r4,r2,16
  8043c4:	1020d43a 	srli	r16,r2,16
  8043c8:	20c9883a 	add	r4,r4,r3
  8043cc:	41000015 	stw	r4,0(r8)
  8043d0:	42000104 	addi	r8,r8,4
  8043d4:	3cbff016 	blt	r7,r18,804398 <__multadd+0x34>
  8043d8:	80000826 	beq	r16,zero,8043fc <__multadd+0x98>
  8043dc:	98800217 	ldw	r2,8(r19)
  8043e0:	90800f0e 	bge	r18,r2,804420 <__multadd+0xbc>
  8043e4:	9485883a 	add	r2,r18,r18
  8043e8:	1085883a 	add	r2,r2,r2
  8043ec:	14c5883a 	add	r2,r2,r19
  8043f0:	90c00044 	addi	r3,r18,1
  8043f4:	14000515 	stw	r16,20(r2)
  8043f8:	98c00415 	stw	r3,16(r19)
  8043fc:	9805883a 	mov	r2,r19
  804400:	dfc00517 	ldw	ra,20(sp)
  804404:	dd000417 	ldw	r20,16(sp)
  804408:	dcc00317 	ldw	r19,12(sp)
  80440c:	dc800217 	ldw	r18,8(sp)
  804410:	dc400117 	ldw	r17,4(sp)
  804414:	dc000017 	ldw	r16,0(sp)
  804418:	dec00604 	addi	sp,sp,24
  80441c:	f800283a 	ret
  804420:	99400117 	ldw	r5,4(r19)
  804424:	a009883a 	mov	r4,r20
  804428:	29400044 	addi	r5,r5,1
  80442c:	0803c300 	call	803c30 <_Balloc>
  804430:	99800417 	ldw	r6,16(r19)
  804434:	99400304 	addi	r5,r19,12
  804438:	11000304 	addi	r4,r2,12
  80443c:	318d883a 	add	r6,r6,r6
  804440:	318d883a 	add	r6,r6,r6
  804444:	31800204 	addi	r6,r6,8
  804448:	1023883a 	mov	r17,r2
  80444c:	08026a80 	call	8026a8 <memcpy>
  804450:	980b883a 	mov	r5,r19
  804454:	a009883a 	mov	r4,r20
  804458:	08036b00 	call	8036b0 <_Bfree>
  80445c:	8827883a 	mov	r19,r17
  804460:	003fe006 	br	8043e4 <__multadd+0x80>

00804464 <__pow5mult>:
  804464:	defffa04 	addi	sp,sp,-24
  804468:	308000cc 	andi	r2,r6,3
  80446c:	dd000415 	stw	r20,16(sp)
  804470:	dcc00315 	stw	r19,12(sp)
  804474:	dc000015 	stw	r16,0(sp)
  804478:	dfc00515 	stw	ra,20(sp)
  80447c:	dc800215 	stw	r18,8(sp)
  804480:	dc400115 	stw	r17,4(sp)
  804484:	3021883a 	mov	r16,r6
  804488:	2027883a 	mov	r19,r4
  80448c:	2829883a 	mov	r20,r5
  804490:	10002b1e 	bne	r2,zero,804540 <__pow5mult+0xdc>
  804494:	8025d0ba 	srai	r18,r16,2
  804498:	90001b26 	beq	r18,zero,804508 <__pow5mult+0xa4>
  80449c:	9c001217 	ldw	r16,72(r19)
  8044a0:	8000081e 	bne	r16,zero,8044c4 <__pow5mult+0x60>
  8044a4:	00003006 	br	804568 <__pow5mult+0x104>
  8044a8:	800b883a 	mov	r5,r16
  8044ac:	800d883a 	mov	r6,r16
  8044b0:	9809883a 	mov	r4,r19
  8044b4:	90001426 	beq	r18,zero,804508 <__pow5mult+0xa4>
  8044b8:	80800017 	ldw	r2,0(r16)
  8044bc:	10001b26 	beq	r2,zero,80452c <__pow5mult+0xc8>
  8044c0:	1021883a 	mov	r16,r2
  8044c4:	9080004c 	andi	r2,r18,1
  8044c8:	1005003a 	cmpeq	r2,r2,zero
  8044cc:	9025d07a 	srai	r18,r18,1
  8044d0:	800d883a 	mov	r6,r16
  8044d4:	9809883a 	mov	r4,r19
  8044d8:	a00b883a 	mov	r5,r20
  8044dc:	103ff21e 	bne	r2,zero,8044a8 <__pow5mult+0x44>
  8044e0:	08041400 	call	804140 <__multiply>
  8044e4:	a00b883a 	mov	r5,r20
  8044e8:	9809883a 	mov	r4,r19
  8044ec:	1023883a 	mov	r17,r2
  8044f0:	08036b00 	call	8036b0 <_Bfree>
  8044f4:	8829883a 	mov	r20,r17
  8044f8:	800b883a 	mov	r5,r16
  8044fc:	800d883a 	mov	r6,r16
  804500:	9809883a 	mov	r4,r19
  804504:	903fec1e 	bne	r18,zero,8044b8 <__pow5mult+0x54>
  804508:	a005883a 	mov	r2,r20
  80450c:	dfc00517 	ldw	ra,20(sp)
  804510:	dd000417 	ldw	r20,16(sp)
  804514:	dcc00317 	ldw	r19,12(sp)
  804518:	dc800217 	ldw	r18,8(sp)
  80451c:	dc400117 	ldw	r17,4(sp)
  804520:	dc000017 	ldw	r16,0(sp)
  804524:	dec00604 	addi	sp,sp,24
  804528:	f800283a 	ret
  80452c:	08041400 	call	804140 <__multiply>
  804530:	80800015 	stw	r2,0(r16)
  804534:	1021883a 	mov	r16,r2
  804538:	10000015 	stw	zero,0(r2)
  80453c:	003fe106 	br	8044c4 <__pow5mult+0x60>
  804540:	1085883a 	add	r2,r2,r2
  804544:	00c02074 	movhi	r3,129
  804548:	18e85c04 	addi	r3,r3,-24208
  80454c:	1085883a 	add	r2,r2,r2
  804550:	10c5883a 	add	r2,r2,r3
  804554:	11bfff17 	ldw	r6,-4(r2)
  804558:	000f883a 	mov	r7,zero
  80455c:	08043640 	call	804364 <__multadd>
  804560:	1029883a 	mov	r20,r2
  804564:	003fcb06 	br	804494 <__pow5mult+0x30>
  804568:	9809883a 	mov	r4,r19
  80456c:	01409c44 	movi	r5,625
  804570:	08043280 	call	804328 <__i2b>
  804574:	98801215 	stw	r2,72(r19)
  804578:	1021883a 	mov	r16,r2
  80457c:	10000015 	stw	zero,0(r2)
  804580:	003fd006 	br	8044c4 <__pow5mult+0x60>

00804584 <__s2b>:
  804584:	defff904 	addi	sp,sp,-28
  804588:	dcc00315 	stw	r19,12(sp)
  80458c:	dc800215 	stw	r18,8(sp)
  804590:	2827883a 	mov	r19,r5
  804594:	2025883a 	mov	r18,r4
  804598:	01400244 	movi	r5,9
  80459c:	39000204 	addi	r4,r7,8
  8045a0:	dd000415 	stw	r20,16(sp)
  8045a4:	dc400115 	stw	r17,4(sp)
  8045a8:	dfc00615 	stw	ra,24(sp)
  8045ac:	dd400515 	stw	r21,20(sp)
  8045b0:	dc000015 	stw	r16,0(sp)
  8045b4:	3829883a 	mov	r20,r7
  8045b8:	3023883a 	mov	r17,r6
  8045bc:	080705c0 	call	80705c <__divsi3>
  8045c0:	00c00044 	movi	r3,1
  8045c4:	1880350e 	bge	r3,r2,80469c <__s2b+0x118>
  8045c8:	000b883a 	mov	r5,zero
  8045cc:	18c7883a 	add	r3,r3,r3
  8045d0:	29400044 	addi	r5,r5,1
  8045d4:	18bffd16 	blt	r3,r2,8045cc <__s2b+0x48>
  8045d8:	9009883a 	mov	r4,r18
  8045dc:	0803c300 	call	803c30 <_Balloc>
  8045e0:	1011883a 	mov	r8,r2
  8045e4:	d8800717 	ldw	r2,28(sp)
  8045e8:	00c00044 	movi	r3,1
  8045ec:	01800244 	movi	r6,9
  8045f0:	40800515 	stw	r2,20(r8)
  8045f4:	40c00415 	stw	r3,16(r8)
  8045f8:	3440260e 	bge	r6,r17,804694 <__s2b+0x110>
  8045fc:	3021883a 	mov	r16,r6
  804600:	99ab883a 	add	r21,r19,r6
  804604:	9c05883a 	add	r2,r19,r16
  804608:	11c00007 	ldb	r7,0(r2)
  80460c:	400b883a 	mov	r5,r8
  804610:	9009883a 	mov	r4,r18
  804614:	39fff404 	addi	r7,r7,-48
  804618:	01800284 	movi	r6,10
  80461c:	08043640 	call	804364 <__multadd>
  804620:	84000044 	addi	r16,r16,1
  804624:	1011883a 	mov	r8,r2
  804628:	8c3ff61e 	bne	r17,r16,804604 <__s2b+0x80>
  80462c:	ac45883a 	add	r2,r21,r17
  804630:	117ffe04 	addi	r5,r2,-8
  804634:	880d883a 	mov	r6,r17
  804638:	35000c0e 	bge	r6,r20,80466c <__s2b+0xe8>
  80463c:	a185c83a 	sub	r2,r20,r6
  804640:	2821883a 	mov	r16,r5
  804644:	28a3883a 	add	r17,r5,r2
  804648:	81c00007 	ldb	r7,0(r16)
  80464c:	400b883a 	mov	r5,r8
  804650:	9009883a 	mov	r4,r18
  804654:	39fff404 	addi	r7,r7,-48
  804658:	01800284 	movi	r6,10
  80465c:	08043640 	call	804364 <__multadd>
  804660:	84000044 	addi	r16,r16,1
  804664:	1011883a 	mov	r8,r2
  804668:	847ff71e 	bne	r16,r17,804648 <__s2b+0xc4>
  80466c:	4005883a 	mov	r2,r8
  804670:	dfc00617 	ldw	ra,24(sp)
  804674:	dd400517 	ldw	r21,20(sp)
  804678:	dd000417 	ldw	r20,16(sp)
  80467c:	dcc00317 	ldw	r19,12(sp)
  804680:	dc800217 	ldw	r18,8(sp)
  804684:	dc400117 	ldw	r17,4(sp)
  804688:	dc000017 	ldw	r16,0(sp)
  80468c:	dec00704 	addi	sp,sp,28
  804690:	f800283a 	ret
  804694:	99400284 	addi	r5,r19,10
  804698:	003fe706 	br	804638 <__s2b+0xb4>
  80469c:	000b883a 	mov	r5,zero
  8046a0:	003fcd06 	br	8045d8 <__s2b+0x54>

008046a4 <_realloc_r>:
  8046a4:	defff404 	addi	sp,sp,-48
  8046a8:	dd800815 	stw	r22,32(sp)
  8046ac:	dc800415 	stw	r18,16(sp)
  8046b0:	dc400315 	stw	r17,12(sp)
  8046b4:	dfc00b15 	stw	ra,44(sp)
  8046b8:	df000a15 	stw	fp,40(sp)
  8046bc:	ddc00915 	stw	r23,36(sp)
  8046c0:	dd400715 	stw	r21,28(sp)
  8046c4:	dd000615 	stw	r20,24(sp)
  8046c8:	dcc00515 	stw	r19,20(sp)
  8046cc:	dc000215 	stw	r16,8(sp)
  8046d0:	2825883a 	mov	r18,r5
  8046d4:	3023883a 	mov	r17,r6
  8046d8:	202d883a 	mov	r22,r4
  8046dc:	2800c926 	beq	r5,zero,804a04 <_realloc_r+0x360>
  8046e0:	08072f80 	call	8072f8 <__malloc_lock>
  8046e4:	943ffe04 	addi	r16,r18,-8
  8046e8:	88c002c4 	addi	r3,r17,11
  8046ec:	00800584 	movi	r2,22
  8046f0:	82000117 	ldw	r8,4(r16)
  8046f4:	10c01b2e 	bgeu	r2,r3,804764 <_realloc_r+0xc0>
  8046f8:	00bffe04 	movi	r2,-8
  8046fc:	188e703a 	and	r7,r3,r2
  804700:	3839883a 	mov	fp,r7
  804704:	38001a16 	blt	r7,zero,804770 <_realloc_r+0xcc>
  804708:	e4401936 	bltu	fp,r17,804770 <_realloc_r+0xcc>
  80470c:	013fff04 	movi	r4,-4
  804710:	4126703a 	and	r19,r8,r4
  804714:	99c02616 	blt	r19,r7,8047b0 <_realloc_r+0x10c>
  804718:	802b883a 	mov	r21,r16
  80471c:	9829883a 	mov	r20,r19
  804720:	84000204 	addi	r16,r16,8
  804724:	a80f883a 	mov	r7,r21
  804728:	a70dc83a 	sub	r6,r20,fp
  80472c:	008003c4 	movi	r2,15
  804730:	1180c136 	bltu	r2,r6,804a38 <_realloc_r+0x394>
  804734:	38800117 	ldw	r2,4(r7)
  804738:	a549883a 	add	r4,r20,r21
  80473c:	1080004c 	andi	r2,r2,1
  804740:	a084b03a 	or	r2,r20,r2
  804744:	38800115 	stw	r2,4(r7)
  804748:	20c00117 	ldw	r3,4(r4)
  80474c:	18c00054 	ori	r3,r3,1
  804750:	20c00115 	stw	r3,4(r4)
  804754:	b009883a 	mov	r4,r22
  804758:	08072fc0 	call	8072fc <__malloc_unlock>
  80475c:	8023883a 	mov	r17,r16
  804760:	00000606 	br	80477c <_realloc_r+0xd8>
  804764:	01c00404 	movi	r7,16
  804768:	3839883a 	mov	fp,r7
  80476c:	e47fe72e 	bgeu	fp,r17,80470c <_realloc_r+0x68>
  804770:	00800304 	movi	r2,12
  804774:	0023883a 	mov	r17,zero
  804778:	b0800015 	stw	r2,0(r22)
  80477c:	8805883a 	mov	r2,r17
  804780:	dfc00b17 	ldw	ra,44(sp)
  804784:	df000a17 	ldw	fp,40(sp)
  804788:	ddc00917 	ldw	r23,36(sp)
  80478c:	dd800817 	ldw	r22,32(sp)
  804790:	dd400717 	ldw	r21,28(sp)
  804794:	dd000617 	ldw	r20,24(sp)
  804798:	dcc00517 	ldw	r19,20(sp)
  80479c:	dc800417 	ldw	r18,16(sp)
  8047a0:	dc400317 	ldw	r17,12(sp)
  8047a4:	dc000217 	ldw	r16,8(sp)
  8047a8:	dec00c04 	addi	sp,sp,48
  8047ac:	f800283a 	ret
  8047b0:	00802074 	movhi	r2,129
  8047b4:	10a96b04 	addi	r2,r2,-23124
  8047b8:	12400217 	ldw	r9,8(r2)
  8047bc:	84cd883a 	add	r6,r16,r19
  8047c0:	802b883a 	mov	r21,r16
  8047c4:	3240b926 	beq	r6,r9,804aac <_realloc_r+0x408>
  8047c8:	31400117 	ldw	r5,4(r6)
  8047cc:	00bfff84 	movi	r2,-2
  8047d0:	2884703a 	and	r2,r5,r2
  8047d4:	1185883a 	add	r2,r2,r6
  8047d8:	10c00117 	ldw	r3,4(r2)
  8047dc:	18c0004c 	andi	r3,r3,1
  8047e0:	1807003a 	cmpeq	r3,r3,zero
  8047e4:	1800a326 	beq	r3,zero,804a74 <_realloc_r+0x3d0>
  8047e8:	2908703a 	and	r4,r5,r4
  8047ec:	9929883a 	add	r20,r19,r4
  8047f0:	a1c0a30e 	bge	r20,r7,804a80 <_realloc_r+0x3dc>
  8047f4:	4080004c 	andi	r2,r8,1
  8047f8:	1000551e 	bne	r2,zero,804950 <_realloc_r+0x2ac>
  8047fc:	80800017 	ldw	r2,0(r16)
  804800:	80afc83a 	sub	r23,r16,r2
  804804:	b8c00117 	ldw	r3,4(r23)
  804808:	00bfff04 	movi	r2,-4
  80480c:	1884703a 	and	r2,r3,r2
  804810:	30002e26 	beq	r6,zero,8048cc <_realloc_r+0x228>
  804814:	3240b926 	beq	r6,r9,804afc <_realloc_r+0x458>
  804818:	98a9883a 	add	r20,r19,r2
  80481c:	2509883a 	add	r4,r4,r20
  804820:	d9000015 	stw	r4,0(sp)
  804824:	21c02a16 	blt	r4,r7,8048d0 <_realloc_r+0x22c>
  804828:	30800317 	ldw	r2,12(r6)
  80482c:	30c00217 	ldw	r3,8(r6)
  804830:	01400904 	movi	r5,36
  804834:	99bfff04 	addi	r6,r19,-4
  804838:	18800315 	stw	r2,12(r3)
  80483c:	10c00215 	stw	r3,8(r2)
  804840:	b9000317 	ldw	r4,12(r23)
  804844:	b8800217 	ldw	r2,8(r23)
  804848:	b82b883a 	mov	r21,r23
  80484c:	bc000204 	addi	r16,r23,8
  804850:	20800215 	stw	r2,8(r4)
  804854:	11000315 	stw	r4,12(r2)
  804858:	2980e436 	bltu	r5,r6,804bec <_realloc_r+0x548>
  80485c:	008004c4 	movi	r2,19
  804860:	9009883a 	mov	r4,r18
  804864:	8011883a 	mov	r8,r16
  804868:	11800f2e 	bgeu	r2,r6,8048a8 <_realloc_r+0x204>
  80486c:	90800017 	ldw	r2,0(r18)
  804870:	ba000404 	addi	r8,r23,16
  804874:	91000204 	addi	r4,r18,8
  804878:	b8800215 	stw	r2,8(r23)
  80487c:	90c00117 	ldw	r3,4(r18)
  804880:	008006c4 	movi	r2,27
  804884:	b8c00315 	stw	r3,12(r23)
  804888:	1180072e 	bgeu	r2,r6,8048a8 <_realloc_r+0x204>
  80488c:	90c00217 	ldw	r3,8(r18)
  804890:	ba000604 	addi	r8,r23,24
  804894:	91000404 	addi	r4,r18,16
  804898:	b8c00415 	stw	r3,16(r23)
  80489c:	90800317 	ldw	r2,12(r18)
  8048a0:	b8800515 	stw	r2,20(r23)
  8048a4:	3140e726 	beq	r6,r5,804c44 <_realloc_r+0x5a0>
  8048a8:	20800017 	ldw	r2,0(r4)
  8048ac:	dd000017 	ldw	r20,0(sp)
  8048b0:	b80f883a 	mov	r7,r23
  8048b4:	40800015 	stw	r2,0(r8)
  8048b8:	20c00117 	ldw	r3,4(r4)
  8048bc:	40c00115 	stw	r3,4(r8)
  8048c0:	20800217 	ldw	r2,8(r4)
  8048c4:	40800215 	stw	r2,8(r8)
  8048c8:	003f9706 	br	804728 <_realloc_r+0x84>
  8048cc:	98a9883a 	add	r20,r19,r2
  8048d0:	a1c01f16 	blt	r20,r7,804950 <_realloc_r+0x2ac>
  8048d4:	b8c00317 	ldw	r3,12(r23)
  8048d8:	b8800217 	ldw	r2,8(r23)
  8048dc:	99bfff04 	addi	r6,r19,-4
  8048e0:	01400904 	movi	r5,36
  8048e4:	b82b883a 	mov	r21,r23
  8048e8:	18800215 	stw	r2,8(r3)
  8048ec:	10c00315 	stw	r3,12(r2)
  8048f0:	bc000204 	addi	r16,r23,8
  8048f4:	2980c336 	bltu	r5,r6,804c04 <_realloc_r+0x560>
  8048f8:	008004c4 	movi	r2,19
  8048fc:	9009883a 	mov	r4,r18
  804900:	8011883a 	mov	r8,r16
  804904:	11800f2e 	bgeu	r2,r6,804944 <_realloc_r+0x2a0>
  804908:	90800017 	ldw	r2,0(r18)
  80490c:	ba000404 	addi	r8,r23,16
  804910:	91000204 	addi	r4,r18,8
  804914:	b8800215 	stw	r2,8(r23)
  804918:	90c00117 	ldw	r3,4(r18)
  80491c:	008006c4 	movi	r2,27
  804920:	b8c00315 	stw	r3,12(r23)
  804924:	1180072e 	bgeu	r2,r6,804944 <_realloc_r+0x2a0>
  804928:	90c00217 	ldw	r3,8(r18)
  80492c:	ba000604 	addi	r8,r23,24
  804930:	91000404 	addi	r4,r18,16
  804934:	b8c00415 	stw	r3,16(r23)
  804938:	90800317 	ldw	r2,12(r18)
  80493c:	b8800515 	stw	r2,20(r23)
  804940:	3140c726 	beq	r6,r5,804c60 <_realloc_r+0x5bc>
  804944:	20800017 	ldw	r2,0(r4)
  804948:	b80f883a 	mov	r7,r23
  80494c:	003fd906 	br	8048b4 <_realloc_r+0x210>
  804950:	880b883a 	mov	r5,r17
  804954:	b009883a 	mov	r4,r22
  804958:	0801f680 	call	801f68 <_malloc_r>
  80495c:	1023883a 	mov	r17,r2
  804960:	10002526 	beq	r2,zero,8049f8 <_realloc_r+0x354>
  804964:	80800117 	ldw	r2,4(r16)
  804968:	00ffff84 	movi	r3,-2
  80496c:	893ffe04 	addi	r4,r17,-8
  804970:	10c4703a 	and	r2,r2,r3
  804974:	8085883a 	add	r2,r16,r2
  804978:	20809526 	beq	r4,r2,804bd0 <_realloc_r+0x52c>
  80497c:	99bfff04 	addi	r6,r19,-4
  804980:	01c00904 	movi	r7,36
  804984:	39804536 	bltu	r7,r6,804a9c <_realloc_r+0x3f8>
  804988:	008004c4 	movi	r2,19
  80498c:	9009883a 	mov	r4,r18
  804990:	880b883a 	mov	r5,r17
  804994:	11800f2e 	bgeu	r2,r6,8049d4 <_realloc_r+0x330>
  804998:	90800017 	ldw	r2,0(r18)
  80499c:	89400204 	addi	r5,r17,8
  8049a0:	91000204 	addi	r4,r18,8
  8049a4:	88800015 	stw	r2,0(r17)
  8049a8:	90c00117 	ldw	r3,4(r18)
  8049ac:	008006c4 	movi	r2,27
  8049b0:	88c00115 	stw	r3,4(r17)
  8049b4:	1180072e 	bgeu	r2,r6,8049d4 <_realloc_r+0x330>
  8049b8:	90c00217 	ldw	r3,8(r18)
  8049bc:	89400404 	addi	r5,r17,16
  8049c0:	91000404 	addi	r4,r18,16
  8049c4:	88c00215 	stw	r3,8(r17)
  8049c8:	90800317 	ldw	r2,12(r18)
  8049cc:	88800315 	stw	r2,12(r17)
  8049d0:	31c09126 	beq	r6,r7,804c18 <_realloc_r+0x574>
  8049d4:	20800017 	ldw	r2,0(r4)
  8049d8:	28800015 	stw	r2,0(r5)
  8049dc:	20c00117 	ldw	r3,4(r4)
  8049e0:	28c00115 	stw	r3,4(r5)
  8049e4:	20800217 	ldw	r2,8(r4)
  8049e8:	28800215 	stw	r2,8(r5)
  8049ec:	900b883a 	mov	r5,r18
  8049f0:	b009883a 	mov	r4,r22
  8049f4:	080339c0 	call	80339c <_free_r>
  8049f8:	b009883a 	mov	r4,r22
  8049fc:	08072fc0 	call	8072fc <__malloc_unlock>
  804a00:	003f5e06 	br	80477c <_realloc_r+0xd8>
  804a04:	300b883a 	mov	r5,r6
  804a08:	dfc00b17 	ldw	ra,44(sp)
  804a0c:	df000a17 	ldw	fp,40(sp)
  804a10:	ddc00917 	ldw	r23,36(sp)
  804a14:	dd800817 	ldw	r22,32(sp)
  804a18:	dd400717 	ldw	r21,28(sp)
  804a1c:	dd000617 	ldw	r20,24(sp)
  804a20:	dcc00517 	ldw	r19,20(sp)
  804a24:	dc800417 	ldw	r18,16(sp)
  804a28:	dc400317 	ldw	r17,12(sp)
  804a2c:	dc000217 	ldw	r16,8(sp)
  804a30:	dec00c04 	addi	sp,sp,48
  804a34:	0801f681 	jmpi	801f68 <_malloc_r>
  804a38:	38800117 	ldw	r2,4(r7)
  804a3c:	e54b883a 	add	r5,fp,r21
  804a40:	31000054 	ori	r4,r6,1
  804a44:	1080004c 	andi	r2,r2,1
  804a48:	1704b03a 	or	r2,r2,fp
  804a4c:	38800115 	stw	r2,4(r7)
  804a50:	29000115 	stw	r4,4(r5)
  804a54:	2987883a 	add	r3,r5,r6
  804a58:	18800117 	ldw	r2,4(r3)
  804a5c:	29400204 	addi	r5,r5,8
  804a60:	b009883a 	mov	r4,r22
  804a64:	10800054 	ori	r2,r2,1
  804a68:	18800115 	stw	r2,4(r3)
  804a6c:	080339c0 	call	80339c <_free_r>
  804a70:	003f3806 	br	804754 <_realloc_r+0xb0>
  804a74:	000d883a 	mov	r6,zero
  804a78:	0009883a 	mov	r4,zero
  804a7c:	003f5d06 	br	8047f4 <_realloc_r+0x150>
  804a80:	30c00217 	ldw	r3,8(r6)
  804a84:	30800317 	ldw	r2,12(r6)
  804a88:	800f883a 	mov	r7,r16
  804a8c:	84000204 	addi	r16,r16,8
  804a90:	10c00215 	stw	r3,8(r2)
  804a94:	18800315 	stw	r2,12(r3)
  804a98:	003f2306 	br	804728 <_realloc_r+0x84>
  804a9c:	8809883a 	mov	r4,r17
  804aa0:	900b883a 	mov	r5,r18
  804aa4:	08065a40 	call	8065a4 <memmove>
  804aa8:	003fd006 	br	8049ec <_realloc_r+0x348>
  804aac:	30800117 	ldw	r2,4(r6)
  804ab0:	e0c00404 	addi	r3,fp,16
  804ab4:	1108703a 	and	r4,r2,r4
  804ab8:	9905883a 	add	r2,r19,r4
  804abc:	10ff4d16 	blt	r2,r3,8047f4 <_realloc_r+0x150>
  804ac0:	1705c83a 	sub	r2,r2,fp
  804ac4:	870b883a 	add	r5,r16,fp
  804ac8:	10800054 	ori	r2,r2,1
  804acc:	28800115 	stw	r2,4(r5)
  804ad0:	80c00117 	ldw	r3,4(r16)
  804ad4:	00802074 	movhi	r2,129
  804ad8:	10a96b04 	addi	r2,r2,-23124
  804adc:	b009883a 	mov	r4,r22
  804ae0:	18c0004c 	andi	r3,r3,1
  804ae4:	e0c6b03a 	or	r3,fp,r3
  804ae8:	11400215 	stw	r5,8(r2)
  804aec:	80c00115 	stw	r3,4(r16)
  804af0:	08072fc0 	call	8072fc <__malloc_unlock>
  804af4:	84400204 	addi	r17,r16,8
  804af8:	003f2006 	br	80477c <_realloc_r+0xd8>
  804afc:	98a9883a 	add	r20,r19,r2
  804b00:	2509883a 	add	r4,r4,r20
  804b04:	e0800404 	addi	r2,fp,16
  804b08:	d9000115 	stw	r4,4(sp)
  804b0c:	20bf7016 	blt	r4,r2,8048d0 <_realloc_r+0x22c>
  804b10:	b8c00317 	ldw	r3,12(r23)
  804b14:	b8800217 	ldw	r2,8(r23)
  804b18:	99bfff04 	addi	r6,r19,-4
  804b1c:	01400904 	movi	r5,36
  804b20:	18800215 	stw	r2,8(r3)
  804b24:	10c00315 	stw	r3,12(r2)
  804b28:	bc400204 	addi	r17,r23,8
  804b2c:	29804136 	bltu	r5,r6,804c34 <_realloc_r+0x590>
  804b30:	008004c4 	movi	r2,19
  804b34:	9009883a 	mov	r4,r18
  804b38:	880f883a 	mov	r7,r17
  804b3c:	11800f2e 	bgeu	r2,r6,804b7c <_realloc_r+0x4d8>
  804b40:	90800017 	ldw	r2,0(r18)
  804b44:	b9c00404 	addi	r7,r23,16
  804b48:	91000204 	addi	r4,r18,8
  804b4c:	b8800215 	stw	r2,8(r23)
  804b50:	90c00117 	ldw	r3,4(r18)
  804b54:	008006c4 	movi	r2,27
  804b58:	b8c00315 	stw	r3,12(r23)
  804b5c:	1180072e 	bgeu	r2,r6,804b7c <_realloc_r+0x4d8>
  804b60:	90c00217 	ldw	r3,8(r18)
  804b64:	b9c00604 	addi	r7,r23,24
  804b68:	91000404 	addi	r4,r18,16
  804b6c:	b8c00415 	stw	r3,16(r23)
  804b70:	90800317 	ldw	r2,12(r18)
  804b74:	b8800515 	stw	r2,20(r23)
  804b78:	31404026 	beq	r6,r5,804c7c <_realloc_r+0x5d8>
  804b7c:	20800017 	ldw	r2,0(r4)
  804b80:	38800015 	stw	r2,0(r7)
  804b84:	20c00117 	ldw	r3,4(r4)
  804b88:	38c00115 	stw	r3,4(r7)
  804b8c:	20800217 	ldw	r2,8(r4)
  804b90:	38800215 	stw	r2,8(r7)
  804b94:	d8c00117 	ldw	r3,4(sp)
  804b98:	bf0b883a 	add	r5,r23,fp
  804b9c:	b009883a 	mov	r4,r22
  804ba0:	1f05c83a 	sub	r2,r3,fp
  804ba4:	10800054 	ori	r2,r2,1
  804ba8:	28800115 	stw	r2,4(r5)
  804bac:	b8c00117 	ldw	r3,4(r23)
  804bb0:	00802074 	movhi	r2,129
  804bb4:	10a96b04 	addi	r2,r2,-23124
  804bb8:	11400215 	stw	r5,8(r2)
  804bbc:	18c0004c 	andi	r3,r3,1
  804bc0:	e0c6b03a 	or	r3,fp,r3
  804bc4:	b8c00115 	stw	r3,4(r23)
  804bc8:	08072fc0 	call	8072fc <__malloc_unlock>
  804bcc:	003eeb06 	br	80477c <_realloc_r+0xd8>
  804bd0:	20800117 	ldw	r2,4(r4)
  804bd4:	00ffff04 	movi	r3,-4
  804bd8:	800f883a 	mov	r7,r16
  804bdc:	10c4703a 	and	r2,r2,r3
  804be0:	98a9883a 	add	r20,r19,r2
  804be4:	84000204 	addi	r16,r16,8
  804be8:	003ecf06 	br	804728 <_realloc_r+0x84>
  804bec:	900b883a 	mov	r5,r18
  804bf0:	8009883a 	mov	r4,r16
  804bf4:	08065a40 	call	8065a4 <memmove>
  804bf8:	dd000017 	ldw	r20,0(sp)
  804bfc:	b80f883a 	mov	r7,r23
  804c00:	003ec906 	br	804728 <_realloc_r+0x84>
  804c04:	900b883a 	mov	r5,r18
  804c08:	8009883a 	mov	r4,r16
  804c0c:	08065a40 	call	8065a4 <memmove>
  804c10:	b80f883a 	mov	r7,r23
  804c14:	003ec406 	br	804728 <_realloc_r+0x84>
  804c18:	90c00417 	ldw	r3,16(r18)
  804c1c:	89400604 	addi	r5,r17,24
  804c20:	91000604 	addi	r4,r18,24
  804c24:	88c00415 	stw	r3,16(r17)
  804c28:	90800517 	ldw	r2,20(r18)
  804c2c:	88800515 	stw	r2,20(r17)
  804c30:	003f6806 	br	8049d4 <_realloc_r+0x330>
  804c34:	900b883a 	mov	r5,r18
  804c38:	8809883a 	mov	r4,r17
  804c3c:	08065a40 	call	8065a4 <memmove>
  804c40:	003fd406 	br	804b94 <_realloc_r+0x4f0>
  804c44:	90c00417 	ldw	r3,16(r18)
  804c48:	91000604 	addi	r4,r18,24
  804c4c:	ba000804 	addi	r8,r23,32
  804c50:	b8c00615 	stw	r3,24(r23)
  804c54:	90800517 	ldw	r2,20(r18)
  804c58:	b8800715 	stw	r2,28(r23)
  804c5c:	003f1206 	br	8048a8 <_realloc_r+0x204>
  804c60:	90c00417 	ldw	r3,16(r18)
  804c64:	91000604 	addi	r4,r18,24
  804c68:	ba000804 	addi	r8,r23,32
  804c6c:	b8c00615 	stw	r3,24(r23)
  804c70:	90800517 	ldw	r2,20(r18)
  804c74:	b8800715 	stw	r2,28(r23)
  804c78:	003f3206 	br	804944 <_realloc_r+0x2a0>
  804c7c:	90c00417 	ldw	r3,16(r18)
  804c80:	91000604 	addi	r4,r18,24
  804c84:	b9c00804 	addi	r7,r23,32
  804c88:	b8c00615 	stw	r3,24(r23)
  804c8c:	90800517 	ldw	r2,20(r18)
  804c90:	b8800715 	stw	r2,28(r23)
  804c94:	003fb906 	br	804b7c <_realloc_r+0x4d8>

00804c98 <strcpy>:
  804c98:	2904b03a 	or	r2,r5,r4
  804c9c:	108000cc 	andi	r2,r2,3
  804ca0:	10000826 	beq	r2,zero,804cc4 <strcpy+0x2c>
  804ca4:	2007883a 	mov	r3,r4
  804ca8:	28800003 	ldbu	r2,0(r5)
  804cac:	29400044 	addi	r5,r5,1
  804cb0:	18800005 	stb	r2,0(r3)
  804cb4:	18c00044 	addi	r3,r3,1
  804cb8:	103ffb1e 	bne	r2,zero,804ca8 <strcpy+0x10>
  804cbc:	2005883a 	mov	r2,r4
  804cc0:	f800283a 	ret
  804cc4:	29800017 	ldw	r6,0(r5)
  804cc8:	023fbff4 	movhi	r8,65279
  804ccc:	423fbfc4 	addi	r8,r8,-257
  804cd0:	02a02074 	movhi	r10,32897
  804cd4:	52a02004 	addi	r10,r10,-32640
  804cd8:	3205883a 	add	r2,r6,r8
  804cdc:	0186303a 	nor	r3,zero,r6
  804ce0:	10c4703a 	and	r2,r2,r3
  804ce4:	1284703a 	and	r2,r2,r10
  804ce8:	200f883a 	mov	r7,r4
  804cec:	10000b1e 	bne	r2,zero,804d1c <strcpy+0x84>
  804cf0:	4013883a 	mov	r9,r8
  804cf4:	5011883a 	mov	r8,r10
  804cf8:	39800015 	stw	r6,0(r7)
  804cfc:	29400104 	addi	r5,r5,4
  804d00:	29800017 	ldw	r6,0(r5)
  804d04:	39c00104 	addi	r7,r7,4
  804d08:	3245883a 	add	r2,r6,r9
  804d0c:	0186303a 	nor	r3,zero,r6
  804d10:	10c4703a 	and	r2,r2,r3
  804d14:	1204703a 	and	r2,r2,r8
  804d18:	103ff726 	beq	r2,zero,804cf8 <strcpy+0x60>
  804d1c:	3807883a 	mov	r3,r7
  804d20:	003fe106 	br	804ca8 <strcpy+0x10>

00804d24 <_calloc_r>:
  804d24:	298b383a 	mul	r5,r5,r6
  804d28:	defffe04 	addi	sp,sp,-8
  804d2c:	dc000015 	stw	r16,0(sp)
  804d30:	dfc00115 	stw	ra,4(sp)
  804d34:	0801f680 	call	801f68 <_malloc_r>
  804d38:	1021883a 	mov	r16,r2
  804d3c:	01c00904 	movi	r7,36
  804d40:	10000d26 	beq	r2,zero,804d78 <_calloc_r+0x54>
  804d44:	10ffff17 	ldw	r3,-4(r2)
  804d48:	1009883a 	mov	r4,r2
  804d4c:	00bfff04 	movi	r2,-4
  804d50:	1886703a 	and	r3,r3,r2
  804d54:	1887883a 	add	r3,r3,r2
  804d58:	180d883a 	mov	r6,r3
  804d5c:	000b883a 	mov	r5,zero
  804d60:	38c01736 	bltu	r7,r3,804dc0 <_calloc_r+0x9c>
  804d64:	008004c4 	movi	r2,19
  804d68:	10c00836 	bltu	r2,r3,804d8c <_calloc_r+0x68>
  804d6c:	20000215 	stw	zero,8(r4)
  804d70:	20000015 	stw	zero,0(r4)
  804d74:	20000115 	stw	zero,4(r4)
  804d78:	8005883a 	mov	r2,r16
  804d7c:	dfc00117 	ldw	ra,4(sp)
  804d80:	dc000017 	ldw	r16,0(sp)
  804d84:	dec00204 	addi	sp,sp,8
  804d88:	f800283a 	ret
  804d8c:	008006c4 	movi	r2,27
  804d90:	80000015 	stw	zero,0(r16)
  804d94:	80000115 	stw	zero,4(r16)
  804d98:	81000204 	addi	r4,r16,8
  804d9c:	10fff32e 	bgeu	r2,r3,804d6c <_calloc_r+0x48>
  804da0:	80000215 	stw	zero,8(r16)
  804da4:	80000315 	stw	zero,12(r16)
  804da8:	81000404 	addi	r4,r16,16
  804dac:	19ffef1e 	bne	r3,r7,804d6c <_calloc_r+0x48>
  804db0:	81000604 	addi	r4,r16,24
  804db4:	80000415 	stw	zero,16(r16)
  804db8:	80000515 	stw	zero,20(r16)
  804dbc:	003feb06 	br	804d6c <_calloc_r+0x48>
  804dc0:	08066840 	call	806684 <memset>
  804dc4:	8005883a 	mov	r2,r16
  804dc8:	dfc00117 	ldw	ra,4(sp)
  804dcc:	dc000017 	ldw	r16,0(sp)
  804dd0:	dec00204 	addi	sp,sp,8
  804dd4:	f800283a 	ret

00804dd8 <quorem>:
  804dd8:	28c00417 	ldw	r3,16(r5)
  804ddc:	20800417 	ldw	r2,16(r4)
  804de0:	defff604 	addi	sp,sp,-40
  804de4:	ddc00715 	stw	r23,28(sp)
  804de8:	dd400515 	stw	r21,20(sp)
  804dec:	dfc00915 	stw	ra,36(sp)
  804df0:	df000815 	stw	fp,32(sp)
  804df4:	dd800615 	stw	r22,24(sp)
  804df8:	dd000415 	stw	r20,16(sp)
  804dfc:	dcc00315 	stw	r19,12(sp)
  804e00:	dc800215 	stw	r18,8(sp)
  804e04:	dc400115 	stw	r17,4(sp)
  804e08:	dc000015 	stw	r16,0(sp)
  804e0c:	202f883a 	mov	r23,r4
  804e10:	282b883a 	mov	r21,r5
  804e14:	10c07416 	blt	r2,r3,804fe8 <quorem+0x210>
  804e18:	1c7fffc4 	addi	r17,r3,-1
  804e1c:	8c45883a 	add	r2,r17,r17
  804e20:	1085883a 	add	r2,r2,r2
  804e24:	2c000504 	addi	r16,r5,20
  804e28:	24c00504 	addi	r19,r4,20
  804e2c:	14ed883a 	add	r22,r2,r19
  804e30:	80a5883a 	add	r18,r16,r2
  804e34:	b7000017 	ldw	fp,0(r22)
  804e38:	91400017 	ldw	r5,0(r18)
  804e3c:	e009883a 	mov	r4,fp
  804e40:	29400044 	addi	r5,r5,1
  804e44:	080711c0 	call	80711c <__udivsi3>
  804e48:	1029883a 	mov	r20,r2
  804e4c:	10003c1e 	bne	r2,zero,804f40 <quorem+0x168>
  804e50:	a80b883a 	mov	r5,r21
  804e54:	b809883a 	mov	r4,r23
  804e58:	080380c0 	call	80380c <__mcmp>
  804e5c:	10002b16 	blt	r2,zero,804f0c <quorem+0x134>
  804e60:	a5000044 	addi	r20,r20,1
  804e64:	980f883a 	mov	r7,r19
  804e68:	0011883a 	mov	r8,zero
  804e6c:	0009883a 	mov	r4,zero
  804e70:	81400017 	ldw	r5,0(r16)
  804e74:	38c00017 	ldw	r3,0(r7)
  804e78:	84000104 	addi	r16,r16,4
  804e7c:	28bfffcc 	andi	r2,r5,65535
  804e80:	2085883a 	add	r2,r4,r2
  804e84:	11bfffcc 	andi	r6,r2,65535
  804e88:	193fffcc 	andi	r4,r3,65535
  804e8c:	1004d43a 	srli	r2,r2,16
  804e90:	280ad43a 	srli	r5,r5,16
  804e94:	2189c83a 	sub	r4,r4,r6
  804e98:	2209883a 	add	r4,r4,r8
  804e9c:	1806d43a 	srli	r3,r3,16
  804ea0:	288b883a 	add	r5,r5,r2
  804ea4:	200dd43a 	srai	r6,r4,16
  804ea8:	28bfffcc 	andi	r2,r5,65535
  804eac:	1887c83a 	sub	r3,r3,r2
  804eb0:	1987883a 	add	r3,r3,r6
  804eb4:	3900000d 	sth	r4,0(r7)
  804eb8:	38c0008d 	sth	r3,2(r7)
  804ebc:	2808d43a 	srli	r4,r5,16
  804ec0:	39c00104 	addi	r7,r7,4
  804ec4:	1811d43a 	srai	r8,r3,16
  804ec8:	943fe92e 	bgeu	r18,r16,804e70 <quorem+0x98>
  804ecc:	8c45883a 	add	r2,r17,r17
  804ed0:	1085883a 	add	r2,r2,r2
  804ed4:	9885883a 	add	r2,r19,r2
  804ed8:	10c00017 	ldw	r3,0(r2)
  804edc:	18000b1e 	bne	r3,zero,804f0c <quorem+0x134>
  804ee0:	113fff04 	addi	r4,r2,-4
  804ee4:	9900082e 	bgeu	r19,r4,804f08 <quorem+0x130>
  804ee8:	10bfff17 	ldw	r2,-4(r2)
  804eec:	10000326 	beq	r2,zero,804efc <quorem+0x124>
  804ef0:	00000506 	br	804f08 <quorem+0x130>
  804ef4:	20800017 	ldw	r2,0(r4)
  804ef8:	1000031e 	bne	r2,zero,804f08 <quorem+0x130>
  804efc:	213fff04 	addi	r4,r4,-4
  804f00:	8c7fffc4 	addi	r17,r17,-1
  804f04:	993ffb36 	bltu	r19,r4,804ef4 <quorem+0x11c>
  804f08:	bc400415 	stw	r17,16(r23)
  804f0c:	a005883a 	mov	r2,r20
  804f10:	dfc00917 	ldw	ra,36(sp)
  804f14:	df000817 	ldw	fp,32(sp)
  804f18:	ddc00717 	ldw	r23,28(sp)
  804f1c:	dd800617 	ldw	r22,24(sp)
  804f20:	dd400517 	ldw	r21,20(sp)
  804f24:	dd000417 	ldw	r20,16(sp)
  804f28:	dcc00317 	ldw	r19,12(sp)
  804f2c:	dc800217 	ldw	r18,8(sp)
  804f30:	dc400117 	ldw	r17,4(sp)
  804f34:	dc000017 	ldw	r16,0(sp)
  804f38:	dec00a04 	addi	sp,sp,40
  804f3c:	f800283a 	ret
  804f40:	980f883a 	mov	r7,r19
  804f44:	8011883a 	mov	r8,r16
  804f48:	0013883a 	mov	r9,zero
  804f4c:	000d883a 	mov	r6,zero
  804f50:	40c00017 	ldw	r3,0(r8)
  804f54:	39000017 	ldw	r4,0(r7)
  804f58:	42000104 	addi	r8,r8,4
  804f5c:	18bfffcc 	andi	r2,r3,65535
  804f60:	a085383a 	mul	r2,r20,r2
  804f64:	1806d43a 	srli	r3,r3,16
  804f68:	217fffcc 	andi	r5,r4,65535
  804f6c:	3085883a 	add	r2,r6,r2
  804f70:	11bfffcc 	andi	r6,r2,65535
  804f74:	a0c7383a 	mul	r3,r20,r3
  804f78:	1004d43a 	srli	r2,r2,16
  804f7c:	298bc83a 	sub	r5,r5,r6
  804f80:	2a4b883a 	add	r5,r5,r9
  804f84:	2008d43a 	srli	r4,r4,16
  804f88:	1887883a 	add	r3,r3,r2
  804f8c:	280dd43a 	srai	r6,r5,16
  804f90:	18bfffcc 	andi	r2,r3,65535
  804f94:	2089c83a 	sub	r4,r4,r2
  804f98:	2189883a 	add	r4,r4,r6
  804f9c:	3900008d 	sth	r4,2(r7)
  804fa0:	3940000d 	sth	r5,0(r7)
  804fa4:	180cd43a 	srli	r6,r3,16
  804fa8:	39c00104 	addi	r7,r7,4
  804fac:	2013d43a 	srai	r9,r4,16
  804fb0:	923fe72e 	bgeu	r18,r8,804f50 <quorem+0x178>
  804fb4:	e03fa61e 	bne	fp,zero,804e50 <quorem+0x78>
  804fb8:	b0ffff04 	addi	r3,r22,-4
  804fbc:	98c0082e 	bgeu	r19,r3,804fe0 <quorem+0x208>
  804fc0:	b0bfff17 	ldw	r2,-4(r22)
  804fc4:	10000326 	beq	r2,zero,804fd4 <quorem+0x1fc>
  804fc8:	00000506 	br	804fe0 <quorem+0x208>
  804fcc:	18800017 	ldw	r2,0(r3)
  804fd0:	1000031e 	bne	r2,zero,804fe0 <quorem+0x208>
  804fd4:	18ffff04 	addi	r3,r3,-4
  804fd8:	8c7fffc4 	addi	r17,r17,-1
  804fdc:	98fffb36 	bltu	r19,r3,804fcc <quorem+0x1f4>
  804fe0:	bc400415 	stw	r17,16(r23)
  804fe4:	003f9a06 	br	804e50 <quorem+0x78>
  804fe8:	0005883a 	mov	r2,zero
  804fec:	003fc806 	br	804f10 <quorem+0x138>

00804ff0 <_dtoa_r>:
  804ff0:	22001017 	ldw	r8,64(r4)
  804ff4:	deffda04 	addi	sp,sp,-152
  804ff8:	dd402115 	stw	r21,132(sp)
  804ffc:	dd002015 	stw	r20,128(sp)
  805000:	dc801e15 	stw	r18,120(sp)
  805004:	dc401d15 	stw	r17,116(sp)
  805008:	dfc02515 	stw	ra,148(sp)
  80500c:	df002415 	stw	fp,144(sp)
  805010:	ddc02315 	stw	r23,140(sp)
  805014:	dd802215 	stw	r22,136(sp)
  805018:	dcc01f15 	stw	r19,124(sp)
  80501c:	dc001c15 	stw	r16,112(sp)
  805020:	d9001615 	stw	r4,88(sp)
  805024:	3023883a 	mov	r17,r6
  805028:	2829883a 	mov	r20,r5
  80502c:	d9c01715 	stw	r7,92(sp)
  805030:	dc802817 	ldw	r18,160(sp)
  805034:	302b883a 	mov	r21,r6
  805038:	40000a26 	beq	r8,zero,805064 <_dtoa_r+0x74>
  80503c:	20801117 	ldw	r2,68(r4)
  805040:	400b883a 	mov	r5,r8
  805044:	40800115 	stw	r2,4(r8)
  805048:	20c01117 	ldw	r3,68(r4)
  80504c:	00800044 	movi	r2,1
  805050:	10c4983a 	sll	r2,r2,r3
  805054:	40800215 	stw	r2,8(r8)
  805058:	08036b00 	call	8036b0 <_Bfree>
  80505c:	d8c01617 	ldw	r3,88(sp)
  805060:	18001015 	stw	zero,64(r3)
  805064:	8800a316 	blt	r17,zero,8052f4 <_dtoa_r+0x304>
  805068:	90000015 	stw	zero,0(r18)
  80506c:	a8dffc2c 	andhi	r3,r21,32752
  805070:	009ffc34 	movhi	r2,32752
  805074:	18809126 	beq	r3,r2,8052bc <_dtoa_r+0x2cc>
  805078:	000d883a 	mov	r6,zero
  80507c:	000f883a 	mov	r7,zero
  805080:	a009883a 	mov	r4,r20
  805084:	a80b883a 	mov	r5,r21
  805088:	dd001215 	stw	r20,72(sp)
  80508c:	dd401315 	stw	r21,76(sp)
  805090:	0806b680 	call	806b68 <__nedf2>
  805094:	1000171e 	bne	r2,zero,8050f4 <_dtoa_r+0x104>
  805098:	d9802717 	ldw	r6,156(sp)
  80509c:	00800044 	movi	r2,1
  8050a0:	30800015 	stw	r2,0(r6)
  8050a4:	d8802917 	ldw	r2,164(sp)
  8050a8:	10029b26 	beq	r2,zero,805b18 <_dtoa_r+0xb28>
  8050ac:	d9002917 	ldw	r4,164(sp)
  8050b0:	00802074 	movhi	r2,129
  8050b4:	10a86344 	addi	r2,r2,-24179
  8050b8:	10ffffc4 	addi	r3,r2,-1
  8050bc:	20800015 	stw	r2,0(r4)
  8050c0:	1805883a 	mov	r2,r3
  8050c4:	dfc02517 	ldw	ra,148(sp)
  8050c8:	df002417 	ldw	fp,144(sp)
  8050cc:	ddc02317 	ldw	r23,140(sp)
  8050d0:	dd802217 	ldw	r22,136(sp)
  8050d4:	dd402117 	ldw	r21,132(sp)
  8050d8:	dd002017 	ldw	r20,128(sp)
  8050dc:	dcc01f17 	ldw	r19,124(sp)
  8050e0:	dc801e17 	ldw	r18,120(sp)
  8050e4:	dc401d17 	ldw	r17,116(sp)
  8050e8:	dc001c17 	ldw	r16,112(sp)
  8050ec:	dec02604 	addi	sp,sp,152
  8050f0:	f800283a 	ret
  8050f4:	d9001617 	ldw	r4,88(sp)
  8050f8:	d9401217 	ldw	r5,72(sp)
  8050fc:	d8800104 	addi	r2,sp,4
  805100:	a80d883a 	mov	r6,r21
  805104:	d9c00204 	addi	r7,sp,8
  805108:	d8800015 	stw	r2,0(sp)
  80510c:	0803cec0 	call	803cec <__d2b>
  805110:	d8800715 	stw	r2,28(sp)
  805114:	a804d53a 	srli	r2,r21,20
  805118:	1101ffcc 	andi	r4,r2,2047
  80511c:	20008626 	beq	r4,zero,805338 <_dtoa_r+0x348>
  805120:	d8c01217 	ldw	r3,72(sp)
  805124:	00800434 	movhi	r2,16
  805128:	10bfffc4 	addi	r2,r2,-1
  80512c:	ddc00117 	ldw	r23,4(sp)
  805130:	a884703a 	and	r2,r21,r2
  805134:	1811883a 	mov	r8,r3
  805138:	124ffc34 	orhi	r9,r2,16368
  80513c:	25bf0044 	addi	r22,r4,-1023
  805140:	d8000815 	stw	zero,32(sp)
  805144:	0005883a 	mov	r2,zero
  805148:	00cffe34 	movhi	r3,16376
  80514c:	480b883a 	mov	r5,r9
  805150:	4009883a 	mov	r4,r8
  805154:	180f883a 	mov	r7,r3
  805158:	100d883a 	mov	r6,r2
  80515c:	08010a00 	call	8010a0 <__subdf3>
  805160:	0218dbf4 	movhi	r8,25455
  805164:	4210d844 	addi	r8,r8,17249
  805168:	024ff4f4 	movhi	r9,16339
  80516c:	4a61e9c4 	addi	r9,r9,-30809
  805170:	480f883a 	mov	r7,r9
  805174:	400d883a 	mov	r6,r8
  805178:	180b883a 	mov	r5,r3
  80517c:	1009883a 	mov	r4,r2
  805180:	080671c0 	call	80671c <__muldf3>
  805184:	0222d874 	movhi	r8,35681
  805188:	42322cc4 	addi	r8,r8,-14157
  80518c:	024ff1f4 	movhi	r9,16327
  805190:	4a628a04 	addi	r9,r9,-30168
  805194:	480f883a 	mov	r7,r9
  805198:	400d883a 	mov	r6,r8
  80519c:	180b883a 	mov	r5,r3
  8051a0:	1009883a 	mov	r4,r2
  8051a4:	08011200 	call	801120 <__adddf3>
  8051a8:	b009883a 	mov	r4,r22
  8051ac:	1021883a 	mov	r16,r2
  8051b0:	1823883a 	mov	r17,r3
  8051b4:	0806e100 	call	806e10 <__floatsidf>
  8051b8:	021427f4 	movhi	r8,20639
  8051bc:	421e7ec4 	addi	r8,r8,31227
  8051c0:	024ff4f4 	movhi	r9,16339
  8051c4:	4a5104c4 	addi	r9,r9,17427
  8051c8:	480f883a 	mov	r7,r9
  8051cc:	400d883a 	mov	r6,r8
  8051d0:	180b883a 	mov	r5,r3
  8051d4:	1009883a 	mov	r4,r2
  8051d8:	080671c0 	call	80671c <__muldf3>
  8051dc:	180f883a 	mov	r7,r3
  8051e0:	880b883a 	mov	r5,r17
  8051e4:	100d883a 	mov	r6,r2
  8051e8:	8009883a 	mov	r4,r16
  8051ec:	08011200 	call	801120 <__adddf3>
  8051f0:	1009883a 	mov	r4,r2
  8051f4:	180b883a 	mov	r5,r3
  8051f8:	1021883a 	mov	r16,r2
  8051fc:	1823883a 	mov	r17,r3
  805200:	0806f080 	call	806f08 <__fixdfsi>
  805204:	000d883a 	mov	r6,zero
  805208:	000f883a 	mov	r7,zero
  80520c:	8009883a 	mov	r4,r16
  805210:	880b883a 	mov	r5,r17
  805214:	d8800d15 	stw	r2,52(sp)
  805218:	0806d000 	call	806d00 <__ltdf2>
  80521c:	10031716 	blt	r2,zero,805e7c <_dtoa_r+0xe8c>
  805220:	d8c00d17 	ldw	r3,52(sp)
  805224:	00800584 	movi	r2,22
  805228:	10c1482e 	bgeu	r2,r3,80574c <_dtoa_r+0x75c>
  80522c:	01000044 	movi	r4,1
  805230:	d9000c15 	stw	r4,48(sp)
  805234:	bd85c83a 	sub	r2,r23,r22
  805238:	11bfffc4 	addi	r6,r2,-1
  80523c:	30030b16 	blt	r6,zero,805e6c <_dtoa_r+0xe7c>
  805240:	d9800a15 	stw	r6,40(sp)
  805244:	d8001115 	stw	zero,68(sp)
  805248:	d8c00d17 	ldw	r3,52(sp)
  80524c:	1802ff16 	blt	r3,zero,805e4c <_dtoa_r+0xe5c>
  805250:	d9000a17 	ldw	r4,40(sp)
  805254:	d8c00915 	stw	r3,36(sp)
  805258:	d8001015 	stw	zero,64(sp)
  80525c:	20c9883a 	add	r4,r4,r3
  805260:	d9000a15 	stw	r4,40(sp)
  805264:	d9001717 	ldw	r4,92(sp)
  805268:	00800244 	movi	r2,9
  80526c:	11004636 	bltu	r2,r4,805388 <_dtoa_r+0x398>
  805270:	00800144 	movi	r2,5
  805274:	11020416 	blt	r2,r4,805a88 <_dtoa_r+0xa98>
  805278:	04400044 	movi	r17,1
  80527c:	d8c01717 	ldw	r3,92(sp)
  805280:	00800144 	movi	r2,5
  805284:	10c1ed36 	bltu	r2,r3,805a3c <_dtoa_r+0xa4c>
  805288:	18c5883a 	add	r2,r3,r3
  80528c:	1085883a 	add	r2,r2,r2
  805290:	00c02034 	movhi	r3,128
  805294:	18d4a904 	addi	r3,r3,21156
  805298:	10c5883a 	add	r2,r2,r3
  80529c:	11000017 	ldw	r4,0(r2)
  8052a0:	2000683a 	jmp	r4
  8052a4:	00805390 	cmplti	r2,zero,334
  8052a8:	00805390 	cmplti	r2,zero,334
  8052ac:	00805d90 	cmplti	r2,zero,374
  8052b0:	00805d68 	cmpgeui	r2,zero,373
  8052b4:	00805dac 	andhi	r2,zero,374
  8052b8:	00805db8 	rdprs	r2,zero,374
  8052bc:	d9002717 	ldw	r4,156(sp)
  8052c0:	0089c3c4 	movi	r2,9999
  8052c4:	20800015 	stw	r2,0(r4)
  8052c8:	a0001026 	beq	r20,zero,80530c <_dtoa_r+0x31c>
  8052cc:	00c02074 	movhi	r3,129
  8052d0:	18e86204 	addi	r3,r3,-24184
  8052d4:	d9802917 	ldw	r6,164(sp)
  8052d8:	303f7926 	beq	r6,zero,8050c0 <_dtoa_r+0xd0>
  8052dc:	188000c7 	ldb	r2,3(r3)
  8052e0:	190000c4 	addi	r4,r3,3
  8052e4:	1000101e 	bne	r2,zero,805328 <_dtoa_r+0x338>
  8052e8:	d8802917 	ldw	r2,164(sp)
  8052ec:	11000015 	stw	r4,0(r2)
  8052f0:	003f7306 	br	8050c0 <_dtoa_r+0xd0>
  8052f4:	00a00034 	movhi	r2,32768
  8052f8:	10bfffc4 	addi	r2,r2,-1
  8052fc:	00c00044 	movi	r3,1
  805300:	88aa703a 	and	r21,r17,r2
  805304:	90c00015 	stw	r3,0(r18)
  805308:	003f5806 	br	80506c <_dtoa_r+0x7c>
  80530c:	00800434 	movhi	r2,16
  805310:	10bfffc4 	addi	r2,r2,-1
  805314:	a884703a 	and	r2,r21,r2
  805318:	103fec1e 	bne	r2,zero,8052cc <_dtoa_r+0x2dc>
  80531c:	00c02074 	movhi	r3,129
  805320:	18e85f04 	addi	r3,r3,-24196
  805324:	003feb06 	br	8052d4 <_dtoa_r+0x2e4>
  805328:	d8802917 	ldw	r2,164(sp)
  80532c:	19000204 	addi	r4,r3,8
  805330:	11000015 	stw	r4,0(r2)
  805334:	003f6206 	br	8050c0 <_dtoa_r+0xd0>
  805338:	ddc00117 	ldw	r23,4(sp)
  80533c:	d8800217 	ldw	r2,8(sp)
  805340:	01000804 	movi	r4,32
  805344:	b8c10c84 	addi	r3,r23,1074
  805348:	18a3883a 	add	r17,r3,r2
  80534c:	2441b80e 	bge	r4,r17,805a30 <_dtoa_r+0xa40>
  805350:	00c01004 	movi	r3,64
  805354:	1c47c83a 	sub	r3,r3,r17
  805358:	88bff804 	addi	r2,r17,-32
  80535c:	a8c6983a 	sll	r3,r21,r3
  805360:	a084d83a 	srl	r2,r20,r2
  805364:	1888b03a 	or	r4,r3,r2
  805368:	08014240 	call	801424 <__floatunsidf>
  80536c:	1011883a 	mov	r8,r2
  805370:	00bf8434 	movhi	r2,65040
  805374:	01000044 	movi	r4,1
  805378:	10d3883a 	add	r9,r2,r3
  80537c:	8dbef344 	addi	r22,r17,-1075
  805380:	d9000815 	stw	r4,32(sp)
  805384:	003f6f06 	br	805144 <_dtoa_r+0x154>
  805388:	d8001715 	stw	zero,92(sp)
  80538c:	04400044 	movi	r17,1
  805390:	00bfffc4 	movi	r2,-1
  805394:	00c00044 	movi	r3,1
  805398:	d8800e15 	stw	r2,56(sp)
  80539c:	d8002615 	stw	zero,152(sp)
  8053a0:	d8800f15 	stw	r2,60(sp)
  8053a4:	d8c00b15 	stw	r3,44(sp)
  8053a8:	1021883a 	mov	r16,r2
  8053ac:	d8801617 	ldw	r2,88(sp)
  8053b0:	10001115 	stw	zero,68(r2)
  8053b4:	d8801617 	ldw	r2,88(sp)
  8053b8:	11401117 	ldw	r5,68(r2)
  8053bc:	1009883a 	mov	r4,r2
  8053c0:	0803c300 	call	803c30 <_Balloc>
  8053c4:	d8c01617 	ldw	r3,88(sp)
  8053c8:	d8800515 	stw	r2,20(sp)
  8053cc:	18801015 	stw	r2,64(r3)
  8053d0:	00800384 	movi	r2,14
  8053d4:	14006836 	bltu	r2,r16,805578 <_dtoa_r+0x588>
  8053d8:	8805003a 	cmpeq	r2,r17,zero
  8053dc:	1000661e 	bne	r2,zero,805578 <_dtoa_r+0x588>
  8053e0:	d9000d17 	ldw	r4,52(sp)
  8053e4:	0102300e 	bge	zero,r4,805ca8 <_dtoa_r+0xcb8>
  8053e8:	208003cc 	andi	r2,r4,15
  8053ec:	100490fa 	slli	r2,r2,3
  8053f0:	2025d13a 	srai	r18,r4,4
  8053f4:	00c02074 	movhi	r3,129
  8053f8:	18e81604 	addi	r3,r3,-24488
  8053fc:	10c5883a 	add	r2,r2,r3
  805400:	90c0040c 	andi	r3,r18,16
  805404:	14000017 	ldw	r16,0(r2)
  805408:	14400117 	ldw	r17,4(r2)
  80540c:	18036a1e 	bne	r3,zero,8061b8 <_dtoa_r+0x11c8>
  805410:	05800084 	movi	r22,2
  805414:	90001026 	beq	r18,zero,805458 <_dtoa_r+0x468>
  805418:	04c02074 	movhi	r19,129
  80541c:	9ce84804 	addi	r19,r19,-24288
  805420:	9080004c 	andi	r2,r18,1
  805424:	1005003a 	cmpeq	r2,r2,zero
  805428:	1000081e 	bne	r2,zero,80544c <_dtoa_r+0x45c>
  80542c:	99800017 	ldw	r6,0(r19)
  805430:	99c00117 	ldw	r7,4(r19)
  805434:	880b883a 	mov	r5,r17
  805438:	8009883a 	mov	r4,r16
  80543c:	080671c0 	call	80671c <__muldf3>
  805440:	1021883a 	mov	r16,r2
  805444:	b5800044 	addi	r22,r22,1
  805448:	1823883a 	mov	r17,r3
  80544c:	9025d07a 	srai	r18,r18,1
  805450:	9cc00204 	addi	r19,r19,8
  805454:	903ff21e 	bne	r18,zero,805420 <_dtoa_r+0x430>
  805458:	a80b883a 	mov	r5,r21
  80545c:	a009883a 	mov	r4,r20
  805460:	880f883a 	mov	r7,r17
  805464:	800d883a 	mov	r6,r16
  805468:	08011940 	call	801194 <__divdf3>
  80546c:	1029883a 	mov	r20,r2
  805470:	182b883a 	mov	r21,r3
  805474:	d8c00c17 	ldw	r3,48(sp)
  805478:	1805003a 	cmpeq	r2,r3,zero
  80547c:	1000081e 	bne	r2,zero,8054a0 <_dtoa_r+0x4b0>
  805480:	0005883a 	mov	r2,zero
  805484:	00cffc34 	movhi	r3,16368
  805488:	180f883a 	mov	r7,r3
  80548c:	a009883a 	mov	r4,r20
  805490:	a80b883a 	mov	r5,r21
  805494:	100d883a 	mov	r6,r2
  805498:	0806d000 	call	806d00 <__ltdf2>
  80549c:	1003fe16 	blt	r2,zero,806498 <_dtoa_r+0x14a8>
  8054a0:	b009883a 	mov	r4,r22
  8054a4:	0806e100 	call	806e10 <__floatsidf>
  8054a8:	180b883a 	mov	r5,r3
  8054ac:	1009883a 	mov	r4,r2
  8054b0:	a00d883a 	mov	r6,r20
  8054b4:	a80f883a 	mov	r7,r21
  8054b8:	080671c0 	call	80671c <__muldf3>
  8054bc:	0011883a 	mov	r8,zero
  8054c0:	02500734 	movhi	r9,16412
  8054c4:	1009883a 	mov	r4,r2
  8054c8:	180b883a 	mov	r5,r3
  8054cc:	480f883a 	mov	r7,r9
  8054d0:	400d883a 	mov	r6,r8
  8054d4:	08011200 	call	801120 <__adddf3>
  8054d8:	d9000f17 	ldw	r4,60(sp)
  8054dc:	102d883a 	mov	r22,r2
  8054e0:	00bf3034 	movhi	r2,64704
  8054e4:	18b9883a 	add	fp,r3,r2
  8054e8:	e02f883a 	mov	r23,fp
  8054ec:	20028f1e 	bne	r4,zero,805f2c <_dtoa_r+0xf3c>
  8054f0:	0005883a 	mov	r2,zero
  8054f4:	00d00534 	movhi	r3,16404
  8054f8:	a009883a 	mov	r4,r20
  8054fc:	a80b883a 	mov	r5,r21
  805500:	180f883a 	mov	r7,r3
  805504:	100d883a 	mov	r6,r2
  805508:	08010a00 	call	8010a0 <__subdf3>
  80550c:	1009883a 	mov	r4,r2
  805510:	e00f883a 	mov	r7,fp
  805514:	180b883a 	mov	r5,r3
  805518:	b00d883a 	mov	r6,r22
  80551c:	1025883a 	mov	r18,r2
  805520:	1827883a 	mov	r19,r3
  805524:	0806bf00 	call	806bf0 <__gtdf2>
  805528:	00834f16 	blt	zero,r2,806268 <_dtoa_r+0x1278>
  80552c:	e0e0003c 	xorhi	r3,fp,32768
  805530:	9009883a 	mov	r4,r18
  805534:	980b883a 	mov	r5,r19
  805538:	180f883a 	mov	r7,r3
  80553c:	b00d883a 	mov	r6,r22
  805540:	0806d000 	call	806d00 <__ltdf2>
  805544:	1000080e 	bge	r2,zero,805568 <_dtoa_r+0x578>
  805548:	0027883a 	mov	r19,zero
  80554c:	0025883a 	mov	r18,zero
  805550:	d8802617 	ldw	r2,152(sp)
  805554:	df000517 	ldw	fp,20(sp)
  805558:	d8000615 	stw	zero,24(sp)
  80555c:	0084303a 	nor	r2,zero,r2
  805560:	d8800d15 	stw	r2,52(sp)
  805564:	00019b06 	br	805bd4 <_dtoa_r+0xbe4>
  805568:	d9801217 	ldw	r6,72(sp)
  80556c:	d8801317 	ldw	r2,76(sp)
  805570:	3029883a 	mov	r20,r6
  805574:	102b883a 	mov	r21,r2
  805578:	d8c00217 	ldw	r3,8(sp)
  80557c:	18008516 	blt	r3,zero,805794 <_dtoa_r+0x7a4>
  805580:	d9000d17 	ldw	r4,52(sp)
  805584:	00800384 	movi	r2,14
  805588:	11008216 	blt	r2,r4,805794 <_dtoa_r+0x7a4>
  80558c:	200490fa 	slli	r2,r4,3
  805590:	d9802617 	ldw	r6,152(sp)
  805594:	00c02074 	movhi	r3,129
  805598:	18e81604 	addi	r3,r3,-24488
  80559c:	10c5883a 	add	r2,r2,r3
  8055a0:	14800017 	ldw	r18,0(r2)
  8055a4:	14c00117 	ldw	r19,4(r2)
  8055a8:	30031e16 	blt	r6,zero,806224 <_dtoa_r+0x1234>
  8055ac:	d9000517 	ldw	r4,20(sp)
  8055b0:	d8c00f17 	ldw	r3,60(sp)
  8055b4:	a823883a 	mov	r17,r21
  8055b8:	a021883a 	mov	r16,r20
  8055bc:	192b883a 	add	r21,r3,r4
  8055c0:	2039883a 	mov	fp,r4
  8055c4:	00000f06 	br	805604 <_dtoa_r+0x614>
  8055c8:	0005883a 	mov	r2,zero
  8055cc:	00d00934 	movhi	r3,16420
  8055d0:	5009883a 	mov	r4,r10
  8055d4:	580b883a 	mov	r5,r11
  8055d8:	180f883a 	mov	r7,r3
  8055dc:	100d883a 	mov	r6,r2
  8055e0:	080671c0 	call	80671c <__muldf3>
  8055e4:	180b883a 	mov	r5,r3
  8055e8:	000d883a 	mov	r6,zero
  8055ec:	000f883a 	mov	r7,zero
  8055f0:	1009883a 	mov	r4,r2
  8055f4:	1021883a 	mov	r16,r2
  8055f8:	1823883a 	mov	r17,r3
  8055fc:	0806b680 	call	806b68 <__nedf2>
  805600:	10004526 	beq	r2,zero,805718 <_dtoa_r+0x728>
  805604:	900d883a 	mov	r6,r18
  805608:	980f883a 	mov	r7,r19
  80560c:	8009883a 	mov	r4,r16
  805610:	880b883a 	mov	r5,r17
  805614:	08011940 	call	801194 <__divdf3>
  805618:	180b883a 	mov	r5,r3
  80561c:	1009883a 	mov	r4,r2
  805620:	0806f080 	call	806f08 <__fixdfsi>
  805624:	1009883a 	mov	r4,r2
  805628:	1029883a 	mov	r20,r2
  80562c:	0806e100 	call	806e10 <__floatsidf>
  805630:	180f883a 	mov	r7,r3
  805634:	9009883a 	mov	r4,r18
  805638:	980b883a 	mov	r5,r19
  80563c:	100d883a 	mov	r6,r2
  805640:	080671c0 	call	80671c <__muldf3>
  805644:	180f883a 	mov	r7,r3
  805648:	880b883a 	mov	r5,r17
  80564c:	8009883a 	mov	r4,r16
  805650:	100d883a 	mov	r6,r2
  805654:	08010a00 	call	8010a0 <__subdf3>
  805658:	1015883a 	mov	r10,r2
  80565c:	a0800c04 	addi	r2,r20,48
  805660:	e0800005 	stb	r2,0(fp)
  805664:	e7000044 	addi	fp,fp,1
  805668:	1817883a 	mov	r11,r3
  80566c:	e57fd61e 	bne	fp,r21,8055c8 <_dtoa_r+0x5d8>
  805670:	500d883a 	mov	r6,r10
  805674:	180f883a 	mov	r7,r3
  805678:	5009883a 	mov	r4,r10
  80567c:	180b883a 	mov	r5,r3
  805680:	08011200 	call	801120 <__adddf3>
  805684:	100d883a 	mov	r6,r2
  805688:	9009883a 	mov	r4,r18
  80568c:	980b883a 	mov	r5,r19
  805690:	180f883a 	mov	r7,r3
  805694:	1021883a 	mov	r16,r2
  805698:	1823883a 	mov	r17,r3
  80569c:	0806d000 	call	806d00 <__ltdf2>
  8056a0:	10000816 	blt	r2,zero,8056c4 <_dtoa_r+0x6d4>
  8056a4:	980b883a 	mov	r5,r19
  8056a8:	800d883a 	mov	r6,r16
  8056ac:	880f883a 	mov	r7,r17
  8056b0:	9009883a 	mov	r4,r18
  8056b4:	0806ae00 	call	806ae0 <__eqdf2>
  8056b8:	1000171e 	bne	r2,zero,805718 <_dtoa_r+0x728>
  8056bc:	a080004c 	andi	r2,r20,1
  8056c0:	10001526 	beq	r2,zero,805718 <_dtoa_r+0x728>
  8056c4:	d8800d17 	ldw	r2,52(sp)
  8056c8:	d8800415 	stw	r2,16(sp)
  8056cc:	e009883a 	mov	r4,fp
  8056d0:	213fffc4 	addi	r4,r4,-1
  8056d4:	20c00007 	ldb	r3,0(r4)
  8056d8:	00800e44 	movi	r2,57
  8056dc:	1880081e 	bne	r3,r2,805700 <_dtoa_r+0x710>
  8056e0:	d8800517 	ldw	r2,20(sp)
  8056e4:	113ffa1e 	bne	r2,r4,8056d0 <_dtoa_r+0x6e0>
  8056e8:	d8c00417 	ldw	r3,16(sp)
  8056ec:	d9800517 	ldw	r6,20(sp)
  8056f0:	00800c04 	movi	r2,48
  8056f4:	18c00044 	addi	r3,r3,1
  8056f8:	d8c00415 	stw	r3,16(sp)
  8056fc:	30800005 	stb	r2,0(r6)
  805700:	20800003 	ldbu	r2,0(r4)
  805704:	d8c00417 	ldw	r3,16(sp)
  805708:	27000044 	addi	fp,r4,1
  80570c:	10800044 	addi	r2,r2,1
  805710:	d8c00d15 	stw	r3,52(sp)
  805714:	20800005 	stb	r2,0(r4)
  805718:	d9001617 	ldw	r4,88(sp)
  80571c:	d9400717 	ldw	r5,28(sp)
  805720:	08036b00 	call	8036b0 <_Bfree>
  805724:	e0000005 	stb	zero,0(fp)
  805728:	d9800d17 	ldw	r6,52(sp)
  80572c:	d8c02717 	ldw	r3,156(sp)
  805730:	d9002917 	ldw	r4,164(sp)
  805734:	30800044 	addi	r2,r6,1
  805738:	18800015 	stw	r2,0(r3)
  80573c:	20029c26 	beq	r4,zero,8061b0 <_dtoa_r+0x11c0>
  805740:	d8c00517 	ldw	r3,20(sp)
  805744:	27000015 	stw	fp,0(r4)
  805748:	003e5d06 	br	8050c0 <_dtoa_r+0xd0>
  80574c:	d9800d17 	ldw	r6,52(sp)
  805750:	00c02074 	movhi	r3,129
  805754:	18e81604 	addi	r3,r3,-24488
  805758:	d9001217 	ldw	r4,72(sp)
  80575c:	300490fa 	slli	r2,r6,3
  805760:	d9401317 	ldw	r5,76(sp)
  805764:	10c5883a 	add	r2,r2,r3
  805768:	12000017 	ldw	r8,0(r2)
  80576c:	12400117 	ldw	r9,4(r2)
  805770:	400d883a 	mov	r6,r8
  805774:	480f883a 	mov	r7,r9
  805778:	0806d000 	call	806d00 <__ltdf2>
  80577c:	1000030e 	bge	r2,zero,80578c <_dtoa_r+0x79c>
  805780:	d8800d17 	ldw	r2,52(sp)
  805784:	10bfffc4 	addi	r2,r2,-1
  805788:	d8800d15 	stw	r2,52(sp)
  80578c:	d8000c15 	stw	zero,48(sp)
  805790:	003ea806 	br	805234 <_dtoa_r+0x244>
  805794:	d9000b17 	ldw	r4,44(sp)
  805798:	202cc03a 	cmpne	r22,r4,zero
  80579c:	b000c71e 	bne	r22,zero,805abc <_dtoa_r+0xacc>
  8057a0:	dc001117 	ldw	r16,68(sp)
  8057a4:	dc801017 	ldw	r18,64(sp)
  8057a8:	0027883a 	mov	r19,zero
  8057ac:	04000b0e 	bge	zero,r16,8057dc <_dtoa_r+0x7ec>
  8057b0:	d8c00a17 	ldw	r3,40(sp)
  8057b4:	00c0090e 	bge	zero,r3,8057dc <_dtoa_r+0x7ec>
  8057b8:	8005883a 	mov	r2,r16
  8057bc:	1c011316 	blt	r3,r16,805c0c <_dtoa_r+0xc1c>
  8057c0:	d9000a17 	ldw	r4,40(sp)
  8057c4:	d9801117 	ldw	r6,68(sp)
  8057c8:	80a1c83a 	sub	r16,r16,r2
  8057cc:	2089c83a 	sub	r4,r4,r2
  8057d0:	308dc83a 	sub	r6,r6,r2
  8057d4:	d9000a15 	stw	r4,40(sp)
  8057d8:	d9801115 	stw	r6,68(sp)
  8057dc:	d8801017 	ldw	r2,64(sp)
  8057e0:	0080150e 	bge	zero,r2,805838 <_dtoa_r+0x848>
  8057e4:	d8c00b17 	ldw	r3,44(sp)
  8057e8:	1805003a 	cmpeq	r2,r3,zero
  8057ec:	1001c91e 	bne	r2,zero,805f14 <_dtoa_r+0xf24>
  8057f0:	04800e0e 	bge	zero,r18,80582c <_dtoa_r+0x83c>
  8057f4:	d9001617 	ldw	r4,88(sp)
  8057f8:	980b883a 	mov	r5,r19
  8057fc:	900d883a 	mov	r6,r18
  805800:	08044640 	call	804464 <__pow5mult>
  805804:	d9001617 	ldw	r4,88(sp)
  805808:	d9800717 	ldw	r6,28(sp)
  80580c:	100b883a 	mov	r5,r2
  805810:	1027883a 	mov	r19,r2
  805814:	08041400 	call	804140 <__multiply>
  805818:	d9001617 	ldw	r4,88(sp)
  80581c:	d9400717 	ldw	r5,28(sp)
  805820:	1023883a 	mov	r17,r2
  805824:	08036b00 	call	8036b0 <_Bfree>
  805828:	dc400715 	stw	r17,28(sp)
  80582c:	d9001017 	ldw	r4,64(sp)
  805830:	248dc83a 	sub	r6,r4,r18
  805834:	30010e1e 	bne	r6,zero,805c70 <_dtoa_r+0xc80>
  805838:	d9001617 	ldw	r4,88(sp)
  80583c:	04400044 	movi	r17,1
  805840:	880b883a 	mov	r5,r17
  805844:	08043280 	call	804328 <__i2b>
  805848:	d9800917 	ldw	r6,36(sp)
  80584c:	1025883a 	mov	r18,r2
  805850:	0180040e 	bge	zero,r6,805864 <_dtoa_r+0x874>
  805854:	d9001617 	ldw	r4,88(sp)
  805858:	100b883a 	mov	r5,r2
  80585c:	08044640 	call	804464 <__pow5mult>
  805860:	1025883a 	mov	r18,r2
  805864:	d8801717 	ldw	r2,92(sp)
  805868:	8880f30e 	bge	r17,r2,805c38 <_dtoa_r+0xc48>
  80586c:	0023883a 	mov	r17,zero
  805870:	d9800917 	ldw	r6,36(sp)
  805874:	30019e1e 	bne	r6,zero,805ef0 <_dtoa_r+0xf00>
  805878:	00c00044 	movi	r3,1
  80587c:	d9000a17 	ldw	r4,40(sp)
  805880:	20c5883a 	add	r2,r4,r3
  805884:	10c007cc 	andi	r3,r2,31
  805888:	1800841e 	bne	r3,zero,805a9c <_dtoa_r+0xaac>
  80588c:	00800704 	movi	r2,28
  805890:	d9000a17 	ldw	r4,40(sp)
  805894:	d9801117 	ldw	r6,68(sp)
  805898:	80a1883a 	add	r16,r16,r2
  80589c:	2089883a 	add	r4,r4,r2
  8058a0:	308d883a 	add	r6,r6,r2
  8058a4:	d9000a15 	stw	r4,40(sp)
  8058a8:	d9801115 	stw	r6,68(sp)
  8058ac:	d8801117 	ldw	r2,68(sp)
  8058b0:	0080050e 	bge	zero,r2,8058c8 <_dtoa_r+0x8d8>
  8058b4:	d9400717 	ldw	r5,28(sp)
  8058b8:	d9001617 	ldw	r4,88(sp)
  8058bc:	100d883a 	mov	r6,r2
  8058c0:	0803ff40 	call	803ff4 <__lshift>
  8058c4:	d8800715 	stw	r2,28(sp)
  8058c8:	d8c00a17 	ldw	r3,40(sp)
  8058cc:	00c0050e 	bge	zero,r3,8058e4 <_dtoa_r+0x8f4>
  8058d0:	d9001617 	ldw	r4,88(sp)
  8058d4:	900b883a 	mov	r5,r18
  8058d8:	180d883a 	mov	r6,r3
  8058dc:	0803ff40 	call	803ff4 <__lshift>
  8058e0:	1025883a 	mov	r18,r2
  8058e4:	d9000c17 	ldw	r4,48(sp)
  8058e8:	2005003a 	cmpeq	r2,r4,zero
  8058ec:	10016f26 	beq	r2,zero,805eac <_dtoa_r+0xebc>
  8058f0:	d9000f17 	ldw	r4,60(sp)
  8058f4:	0102170e 	bge	zero,r4,806154 <_dtoa_r+0x1164>
  8058f8:	d9800b17 	ldw	r6,44(sp)
  8058fc:	3005003a 	cmpeq	r2,r6,zero
  805900:	1000881e 	bne	r2,zero,805b24 <_dtoa_r+0xb34>
  805904:	0400050e 	bge	zero,r16,80591c <_dtoa_r+0x92c>
  805908:	d9001617 	ldw	r4,88(sp)
  80590c:	980b883a 	mov	r5,r19
  805910:	800d883a 	mov	r6,r16
  805914:	0803ff40 	call	803ff4 <__lshift>
  805918:	1027883a 	mov	r19,r2
  80591c:	8804c03a 	cmpne	r2,r17,zero
  805920:	1002541e 	bne	r2,zero,806274 <_dtoa_r+0x1284>
  805924:	980b883a 	mov	r5,r19
  805928:	dd800517 	ldw	r22,20(sp)
  80592c:	dcc00615 	stw	r19,24(sp)
  805930:	a700004c 	andi	fp,r20,1
  805934:	2827883a 	mov	r19,r5
  805938:	d9000717 	ldw	r4,28(sp)
  80593c:	900b883a 	mov	r5,r18
  805940:	0804dd80 	call	804dd8 <quorem>
  805944:	d9000717 	ldw	r4,28(sp)
  805948:	d9400617 	ldw	r5,24(sp)
  80594c:	1023883a 	mov	r17,r2
  805950:	8dc00c04 	addi	r23,r17,48
  805954:	080380c0 	call	80380c <__mcmp>
  805958:	d9001617 	ldw	r4,88(sp)
  80595c:	900b883a 	mov	r5,r18
  805960:	980d883a 	mov	r6,r19
  805964:	1029883a 	mov	r20,r2
  805968:	0803e680 	call	803e68 <__mdiff>
  80596c:	102b883a 	mov	r21,r2
  805970:	10800317 	ldw	r2,12(r2)
  805974:	1001281e 	bne	r2,zero,805e18 <_dtoa_r+0xe28>
  805978:	d9000717 	ldw	r4,28(sp)
  80597c:	a80b883a 	mov	r5,r21
  805980:	080380c0 	call	80380c <__mcmp>
  805984:	d9001617 	ldw	r4,88(sp)
  805988:	1021883a 	mov	r16,r2
  80598c:	a80b883a 	mov	r5,r21
  805990:	08036b00 	call	8036b0 <_Bfree>
  805994:	8000041e 	bne	r16,zero,8059a8 <_dtoa_r+0x9b8>
  805998:	d8801717 	ldw	r2,92(sp)
  80599c:	1000021e 	bne	r2,zero,8059a8 <_dtoa_r+0x9b8>
  8059a0:	e004c03a 	cmpne	r2,fp,zero
  8059a4:	10011726 	beq	r2,zero,805e04 <_dtoa_r+0xe14>
  8059a8:	a0010616 	blt	r20,zero,805dc4 <_dtoa_r+0xdd4>
  8059ac:	a000041e 	bne	r20,zero,8059c0 <_dtoa_r+0x9d0>
  8059b0:	d8c01717 	ldw	r3,92(sp)
  8059b4:	1800021e 	bne	r3,zero,8059c0 <_dtoa_r+0x9d0>
  8059b8:	e004c03a 	cmpne	r2,fp,zero
  8059bc:	10010126 	beq	r2,zero,805dc4 <_dtoa_r+0xdd4>
  8059c0:	04023d16 	blt	zero,r16,8062b8 <_dtoa_r+0x12c8>
  8059c4:	b5c00005 	stb	r23,0(r22)
  8059c8:	d9800517 	ldw	r6,20(sp)
  8059cc:	d9000f17 	ldw	r4,60(sp)
  8059d0:	b5800044 	addi	r22,r22,1
  8059d4:	3105883a 	add	r2,r6,r4
  8059d8:	b0806526 	beq	r22,r2,805b70 <_dtoa_r+0xb80>
  8059dc:	d9400717 	ldw	r5,28(sp)
  8059e0:	d9001617 	ldw	r4,88(sp)
  8059e4:	01800284 	movi	r6,10
  8059e8:	000f883a 	mov	r7,zero
  8059ec:	08043640 	call	804364 <__multadd>
  8059f0:	d8800715 	stw	r2,28(sp)
  8059f4:	d8800617 	ldw	r2,24(sp)
  8059f8:	14c10c26 	beq	r2,r19,805e2c <_dtoa_r+0xe3c>
  8059fc:	d9400617 	ldw	r5,24(sp)
  805a00:	d9001617 	ldw	r4,88(sp)
  805a04:	01800284 	movi	r6,10
  805a08:	000f883a 	mov	r7,zero
  805a0c:	08043640 	call	804364 <__multadd>
  805a10:	d9001617 	ldw	r4,88(sp)
  805a14:	980b883a 	mov	r5,r19
  805a18:	01800284 	movi	r6,10
  805a1c:	000f883a 	mov	r7,zero
  805a20:	d8800615 	stw	r2,24(sp)
  805a24:	08043640 	call	804364 <__multadd>
  805a28:	1027883a 	mov	r19,r2
  805a2c:	003fc206 	br	805938 <_dtoa_r+0x948>
  805a30:	2445c83a 	sub	r2,r4,r17
  805a34:	a088983a 	sll	r4,r20,r2
  805a38:	003e4b06 	br	805368 <_dtoa_r+0x378>
  805a3c:	01bfffc4 	movi	r6,-1
  805a40:	00800044 	movi	r2,1
  805a44:	d9800e15 	stw	r6,56(sp)
  805a48:	d9800f15 	stw	r6,60(sp)
  805a4c:	d8800b15 	stw	r2,44(sp)
  805a50:	d8c01617 	ldw	r3,88(sp)
  805a54:	008005c4 	movi	r2,23
  805a58:	18001115 	stw	zero,68(r3)
  805a5c:	1580082e 	bgeu	r2,r22,805a80 <_dtoa_r+0xa90>
  805a60:	00c00104 	movi	r3,4
  805a64:	0009883a 	mov	r4,zero
  805a68:	18c7883a 	add	r3,r3,r3
  805a6c:	18800504 	addi	r2,r3,20
  805a70:	21000044 	addi	r4,r4,1
  805a74:	b0bffc2e 	bgeu	r22,r2,805a68 <_dtoa_r+0xa78>
  805a78:	d9801617 	ldw	r6,88(sp)
  805a7c:	31001115 	stw	r4,68(r6)
  805a80:	dc000f17 	ldw	r16,60(sp)
  805a84:	003e4b06 	br	8053b4 <_dtoa_r+0x3c4>
  805a88:	d9801717 	ldw	r6,92(sp)
  805a8c:	0023883a 	mov	r17,zero
  805a90:	31bfff04 	addi	r6,r6,-4
  805a94:	d9801715 	stw	r6,92(sp)
  805a98:	003df806 	br	80527c <_dtoa_r+0x28c>
  805a9c:	00800804 	movi	r2,32
  805aa0:	10c9c83a 	sub	r4,r2,r3
  805aa4:	00c00104 	movi	r3,4
  805aa8:	19005a16 	blt	r3,r4,805c14 <_dtoa_r+0xc24>
  805aac:	008000c4 	movi	r2,3
  805ab0:	113f7e16 	blt	r2,r4,8058ac <_dtoa_r+0x8bc>
  805ab4:	20800704 	addi	r2,r4,28
  805ab8:	003f7506 	br	805890 <_dtoa_r+0x8a0>
  805abc:	d9801717 	ldw	r6,92(sp)
  805ac0:	00800044 	movi	r2,1
  805ac4:	1180a10e 	bge	r2,r6,805d4c <_dtoa_r+0xd5c>
  805ac8:	d9800f17 	ldw	r6,60(sp)
  805acc:	d8c01017 	ldw	r3,64(sp)
  805ad0:	30bfffc4 	addi	r2,r6,-1
  805ad4:	1881c616 	blt	r3,r2,8061f0 <_dtoa_r+0x1200>
  805ad8:	18a5c83a 	sub	r18,r3,r2
  805adc:	d8800f17 	ldw	r2,60(sp)
  805ae0:	10026216 	blt	r2,zero,80646c <_dtoa_r+0x147c>
  805ae4:	dc001117 	ldw	r16,68(sp)
  805ae8:	1007883a 	mov	r3,r2
  805aec:	d9800a17 	ldw	r6,40(sp)
  805af0:	d8801117 	ldw	r2,68(sp)
  805af4:	d9001617 	ldw	r4,88(sp)
  805af8:	30cd883a 	add	r6,r6,r3
  805afc:	10c5883a 	add	r2,r2,r3
  805b00:	01400044 	movi	r5,1
  805b04:	d9800a15 	stw	r6,40(sp)
  805b08:	d8801115 	stw	r2,68(sp)
  805b0c:	08043280 	call	804328 <__i2b>
  805b10:	1027883a 	mov	r19,r2
  805b14:	003f2506 	br	8057ac <_dtoa_r+0x7bc>
  805b18:	00c02074 	movhi	r3,129
  805b1c:	18e86304 	addi	r3,r3,-24180
  805b20:	003d6706 	br	8050c0 <_dtoa_r+0xd0>
  805b24:	dd800517 	ldw	r22,20(sp)
  805b28:	04000044 	movi	r16,1
  805b2c:	00000706 	br	805b4c <_dtoa_r+0xb5c>
  805b30:	d9400717 	ldw	r5,28(sp)
  805b34:	d9001617 	ldw	r4,88(sp)
  805b38:	01800284 	movi	r6,10
  805b3c:	000f883a 	mov	r7,zero
  805b40:	08043640 	call	804364 <__multadd>
  805b44:	d8800715 	stw	r2,28(sp)
  805b48:	84000044 	addi	r16,r16,1
  805b4c:	d9000717 	ldw	r4,28(sp)
  805b50:	900b883a 	mov	r5,r18
  805b54:	0804dd80 	call	804dd8 <quorem>
  805b58:	15c00c04 	addi	r23,r2,48
  805b5c:	b5c00005 	stb	r23,0(r22)
  805b60:	d8c00f17 	ldw	r3,60(sp)
  805b64:	b5800044 	addi	r22,r22,1
  805b68:	80fff116 	blt	r16,r3,805b30 <_dtoa_r+0xb40>
  805b6c:	d8000615 	stw	zero,24(sp)
  805b70:	d9400717 	ldw	r5,28(sp)
  805b74:	d9001617 	ldw	r4,88(sp)
  805b78:	01800044 	movi	r6,1
  805b7c:	0803ff40 	call	803ff4 <__lshift>
  805b80:	1009883a 	mov	r4,r2
  805b84:	900b883a 	mov	r5,r18
  805b88:	d8800715 	stw	r2,28(sp)
  805b8c:	080380c0 	call	80380c <__mcmp>
  805b90:	00803c0e 	bge	zero,r2,805c84 <_dtoa_r+0xc94>
  805b94:	b009883a 	mov	r4,r22
  805b98:	213fffc4 	addi	r4,r4,-1
  805b9c:	21400003 	ldbu	r5,0(r4)
  805ba0:	00800e44 	movi	r2,57
  805ba4:	28c03fcc 	andi	r3,r5,255
  805ba8:	18c0201c 	xori	r3,r3,128
  805bac:	18ffe004 	addi	r3,r3,-128
  805bb0:	1881981e 	bne	r3,r2,806214 <_dtoa_r+0x1224>
  805bb4:	d9800517 	ldw	r6,20(sp)
  805bb8:	21bff71e 	bne	r4,r6,805b98 <_dtoa_r+0xba8>
  805bbc:	d8800d17 	ldw	r2,52(sp)
  805bc0:	37000044 	addi	fp,r6,1
  805bc4:	10800044 	addi	r2,r2,1
  805bc8:	d8800d15 	stw	r2,52(sp)
  805bcc:	00800c44 	movi	r2,49
  805bd0:	30800005 	stb	r2,0(r6)
  805bd4:	d9001617 	ldw	r4,88(sp)
  805bd8:	900b883a 	mov	r5,r18
  805bdc:	08036b00 	call	8036b0 <_Bfree>
  805be0:	983ecd26 	beq	r19,zero,805718 <_dtoa_r+0x728>
  805be4:	d8c00617 	ldw	r3,24(sp)
  805be8:	18000426 	beq	r3,zero,805bfc <_dtoa_r+0xc0c>
  805bec:	1cc00326 	beq	r3,r19,805bfc <_dtoa_r+0xc0c>
  805bf0:	d9001617 	ldw	r4,88(sp)
  805bf4:	180b883a 	mov	r5,r3
  805bf8:	08036b00 	call	8036b0 <_Bfree>
  805bfc:	d9001617 	ldw	r4,88(sp)
  805c00:	980b883a 	mov	r5,r19
  805c04:	08036b00 	call	8036b0 <_Bfree>
  805c08:	003ec306 	br	805718 <_dtoa_r+0x728>
  805c0c:	1805883a 	mov	r2,r3
  805c10:	003eeb06 	br	8057c0 <_dtoa_r+0x7d0>
  805c14:	d9800a17 	ldw	r6,40(sp)
  805c18:	d8c01117 	ldw	r3,68(sp)
  805c1c:	20bfff04 	addi	r2,r4,-4
  805c20:	308d883a 	add	r6,r6,r2
  805c24:	1887883a 	add	r3,r3,r2
  805c28:	80a1883a 	add	r16,r16,r2
  805c2c:	d9800a15 	stw	r6,40(sp)
  805c30:	d8c01115 	stw	r3,68(sp)
  805c34:	003f1d06 	br	8058ac <_dtoa_r+0x8bc>
  805c38:	a03f0c1e 	bne	r20,zero,80586c <_dtoa_r+0x87c>
  805c3c:	00800434 	movhi	r2,16
  805c40:	10bfffc4 	addi	r2,r2,-1
  805c44:	a884703a 	and	r2,r21,r2
  805c48:	103f081e 	bne	r2,zero,80586c <_dtoa_r+0x87c>
  805c4c:	a89ffc2c 	andhi	r2,r21,32752
  805c50:	103f0626 	beq	r2,zero,80586c <_dtoa_r+0x87c>
  805c54:	d8c01117 	ldw	r3,68(sp)
  805c58:	d9000a17 	ldw	r4,40(sp)
  805c5c:	18c00044 	addi	r3,r3,1
  805c60:	21000044 	addi	r4,r4,1
  805c64:	d8c01115 	stw	r3,68(sp)
  805c68:	d9000a15 	stw	r4,40(sp)
  805c6c:	003f0006 	br	805870 <_dtoa_r+0x880>
  805c70:	d9400717 	ldw	r5,28(sp)
  805c74:	d9001617 	ldw	r4,88(sp)
  805c78:	08044640 	call	804464 <__pow5mult>
  805c7c:	d8800715 	stw	r2,28(sp)
  805c80:	003eed06 	br	805838 <_dtoa_r+0x848>
  805c84:	1000021e 	bne	r2,zero,805c90 <_dtoa_r+0xca0>
  805c88:	b880004c 	andi	r2,r23,1
  805c8c:	103fc11e 	bne	r2,zero,805b94 <_dtoa_r+0xba4>
  805c90:	b5bfffc4 	addi	r22,r22,-1
  805c94:	b0c00007 	ldb	r3,0(r22)
  805c98:	00800c04 	movi	r2,48
  805c9c:	18bffc26 	beq	r3,r2,805c90 <_dtoa_r+0xca0>
  805ca0:	b7000044 	addi	fp,r22,1
  805ca4:	003fcb06 	br	805bd4 <_dtoa_r+0xbe4>
  805ca8:	d9800d17 	ldw	r6,52(sp)
  805cac:	018fc83a 	sub	r7,zero,r6
  805cb0:	3801f726 	beq	r7,zero,806490 <_dtoa_r+0x14a0>
  805cb4:	398003cc 	andi	r6,r7,15
  805cb8:	300c90fa 	slli	r6,r6,3
  805cbc:	01402074 	movhi	r5,129
  805cc0:	29681604 	addi	r5,r5,-24488
  805cc4:	d9001217 	ldw	r4,72(sp)
  805cc8:	314d883a 	add	r6,r6,r5
  805ccc:	30c00117 	ldw	r3,4(r6)
  805cd0:	30800017 	ldw	r2,0(r6)
  805cd4:	d9401317 	ldw	r5,76(sp)
  805cd8:	3821d13a 	srai	r16,r7,4
  805cdc:	100d883a 	mov	r6,r2
  805ce0:	180f883a 	mov	r7,r3
  805ce4:	080671c0 	call	80671c <__muldf3>
  805ce8:	1011883a 	mov	r8,r2
  805cec:	1813883a 	mov	r9,r3
  805cf0:	1029883a 	mov	r20,r2
  805cf4:	182b883a 	mov	r21,r3
  805cf8:	8001e526 	beq	r16,zero,806490 <_dtoa_r+0x14a0>
  805cfc:	05800084 	movi	r22,2
  805d00:	04402074 	movhi	r17,129
  805d04:	8c684804 	addi	r17,r17,-24288
  805d08:	8080004c 	andi	r2,r16,1
  805d0c:	1005003a 	cmpeq	r2,r2,zero
  805d10:	1000081e 	bne	r2,zero,805d34 <_dtoa_r+0xd44>
  805d14:	89800017 	ldw	r6,0(r17)
  805d18:	89c00117 	ldw	r7,4(r17)
  805d1c:	480b883a 	mov	r5,r9
  805d20:	4009883a 	mov	r4,r8
  805d24:	080671c0 	call	80671c <__muldf3>
  805d28:	1011883a 	mov	r8,r2
  805d2c:	b5800044 	addi	r22,r22,1
  805d30:	1813883a 	mov	r9,r3
  805d34:	8021d07a 	srai	r16,r16,1
  805d38:	8c400204 	addi	r17,r17,8
  805d3c:	803ff21e 	bne	r16,zero,805d08 <_dtoa_r+0xd18>
  805d40:	4029883a 	mov	r20,r8
  805d44:	482b883a 	mov	r21,r9
  805d48:	003dca06 	br	805474 <_dtoa_r+0x484>
  805d4c:	d9000817 	ldw	r4,32(sp)
  805d50:	2005003a 	cmpeq	r2,r4,zero
  805d54:	1001f61e 	bne	r2,zero,806530 <_dtoa_r+0x1540>
  805d58:	dc001117 	ldw	r16,68(sp)
  805d5c:	dc801017 	ldw	r18,64(sp)
  805d60:	18c10cc4 	addi	r3,r3,1075
  805d64:	003f6106 	br	805aec <_dtoa_r+0xafc>
  805d68:	d8000b15 	stw	zero,44(sp)
  805d6c:	d9802617 	ldw	r6,152(sp)
  805d70:	d8c00d17 	ldw	r3,52(sp)
  805d74:	30800044 	addi	r2,r6,1
  805d78:	18ad883a 	add	r22,r3,r2
  805d7c:	b13fffc4 	addi	r4,r22,-1
  805d80:	d9000e15 	stw	r4,56(sp)
  805d84:	0581f60e 	bge	zero,r22,806560 <_dtoa_r+0x1570>
  805d88:	dd800f15 	stw	r22,60(sp)
  805d8c:	003f3006 	br	805a50 <_dtoa_r+0xa60>
  805d90:	d8000b15 	stw	zero,44(sp)
  805d94:	d9002617 	ldw	r4,152(sp)
  805d98:	0101eb0e 	bge	zero,r4,806548 <_dtoa_r+0x1558>
  805d9c:	202d883a 	mov	r22,r4
  805da0:	d9000e15 	stw	r4,56(sp)
  805da4:	d9000f15 	stw	r4,60(sp)
  805da8:	003f2906 	br	805a50 <_dtoa_r+0xa60>
  805dac:	01800044 	movi	r6,1
  805db0:	d9800b15 	stw	r6,44(sp)
  805db4:	003ff706 	br	805d94 <_dtoa_r+0xda4>
  805db8:	01000044 	movi	r4,1
  805dbc:	d9000b15 	stw	r4,44(sp)
  805dc0:	003fea06 	br	805d6c <_dtoa_r+0xd7c>
  805dc4:	04000c0e 	bge	zero,r16,805df8 <_dtoa_r+0xe08>
  805dc8:	d9400717 	ldw	r5,28(sp)
  805dcc:	d9001617 	ldw	r4,88(sp)
  805dd0:	01800044 	movi	r6,1
  805dd4:	0803ff40 	call	803ff4 <__lshift>
  805dd8:	1009883a 	mov	r4,r2
  805ddc:	900b883a 	mov	r5,r18
  805de0:	d8800715 	stw	r2,28(sp)
  805de4:	080380c0 	call	80380c <__mcmp>
  805de8:	0081e00e 	bge	zero,r2,80656c <_dtoa_r+0x157c>
  805dec:	bdc00044 	addi	r23,r23,1
  805df0:	00800e84 	movi	r2,58
  805df4:	b881a226 	beq	r23,r2,806480 <_dtoa_r+0x1490>
  805df8:	b7000044 	addi	fp,r22,1
  805dfc:	b5c00005 	stb	r23,0(r22)
  805e00:	003f7406 	br	805bd4 <_dtoa_r+0xbe4>
  805e04:	00800e44 	movi	r2,57
  805e08:	b8819d26 	beq	r23,r2,806480 <_dtoa_r+0x1490>
  805e0c:	053ffa0e 	bge	zero,r20,805df8 <_dtoa_r+0xe08>
  805e10:	8dc00c44 	addi	r23,r17,49
  805e14:	003ff806 	br	805df8 <_dtoa_r+0xe08>
  805e18:	d9001617 	ldw	r4,88(sp)
  805e1c:	a80b883a 	mov	r5,r21
  805e20:	04000044 	movi	r16,1
  805e24:	08036b00 	call	8036b0 <_Bfree>
  805e28:	003edf06 	br	8059a8 <_dtoa_r+0x9b8>
  805e2c:	d9001617 	ldw	r4,88(sp)
  805e30:	980b883a 	mov	r5,r19
  805e34:	01800284 	movi	r6,10
  805e38:	000f883a 	mov	r7,zero
  805e3c:	08043640 	call	804364 <__multadd>
  805e40:	1027883a 	mov	r19,r2
  805e44:	d8800615 	stw	r2,24(sp)
  805e48:	003ebb06 	br	805938 <_dtoa_r+0x948>
  805e4c:	d9801117 	ldw	r6,68(sp)
  805e50:	d8800d17 	ldw	r2,52(sp)
  805e54:	d8000915 	stw	zero,36(sp)
  805e58:	308dc83a 	sub	r6,r6,r2
  805e5c:	0087c83a 	sub	r3,zero,r2
  805e60:	d9801115 	stw	r6,68(sp)
  805e64:	d8c01015 	stw	r3,64(sp)
  805e68:	003cfe06 	br	805264 <_dtoa_r+0x274>
  805e6c:	018dc83a 	sub	r6,zero,r6
  805e70:	d9801115 	stw	r6,68(sp)
  805e74:	d8000a15 	stw	zero,40(sp)
  805e78:	003cf306 	br	805248 <_dtoa_r+0x258>
  805e7c:	d9000d17 	ldw	r4,52(sp)
  805e80:	0806e100 	call	806e10 <__floatsidf>
  805e84:	880b883a 	mov	r5,r17
  805e88:	8009883a 	mov	r4,r16
  805e8c:	180f883a 	mov	r7,r3
  805e90:	100d883a 	mov	r6,r2
  805e94:	0806b680 	call	806b68 <__nedf2>
  805e98:	103ce126 	beq	r2,zero,805220 <_dtoa_r+0x230>
  805e9c:	d9800d17 	ldw	r6,52(sp)
  805ea0:	31bfffc4 	addi	r6,r6,-1
  805ea4:	d9800d15 	stw	r6,52(sp)
  805ea8:	003cdd06 	br	805220 <_dtoa_r+0x230>
  805eac:	d9000717 	ldw	r4,28(sp)
  805eb0:	900b883a 	mov	r5,r18
  805eb4:	080380c0 	call	80380c <__mcmp>
  805eb8:	103e8d0e 	bge	r2,zero,8058f0 <_dtoa_r+0x900>
  805ebc:	d9400717 	ldw	r5,28(sp)
  805ec0:	d9001617 	ldw	r4,88(sp)
  805ec4:	01800284 	movi	r6,10
  805ec8:	000f883a 	mov	r7,zero
  805ecc:	08043640 	call	804364 <__multadd>
  805ed0:	d9800d17 	ldw	r6,52(sp)
  805ed4:	d8800715 	stw	r2,28(sp)
  805ed8:	31bfffc4 	addi	r6,r6,-1
  805edc:	d9800d15 	stw	r6,52(sp)
  805ee0:	b001a71e 	bne	r22,zero,806580 <_dtoa_r+0x1590>
  805ee4:	d8800e17 	ldw	r2,56(sp)
  805ee8:	d8800f15 	stw	r2,60(sp)
  805eec:	003e8006 	br	8058f0 <_dtoa_r+0x900>
  805ef0:	90800417 	ldw	r2,16(r18)
  805ef4:	1085883a 	add	r2,r2,r2
  805ef8:	1085883a 	add	r2,r2,r2
  805efc:	1485883a 	add	r2,r2,r18
  805f00:	11000417 	ldw	r4,16(r2)
  805f04:	08036d80 	call	8036d8 <__hi0bits>
  805f08:	00c00804 	movi	r3,32
  805f0c:	1887c83a 	sub	r3,r3,r2
  805f10:	003e5a06 	br	80587c <_dtoa_r+0x88c>
  805f14:	d9400717 	ldw	r5,28(sp)
  805f18:	d9801017 	ldw	r6,64(sp)
  805f1c:	d9001617 	ldw	r4,88(sp)
  805f20:	08044640 	call	804464 <__pow5mult>
  805f24:	d8800715 	stw	r2,28(sp)
  805f28:	003e4306 	br	805838 <_dtoa_r+0x848>
  805f2c:	d9800f17 	ldw	r6,60(sp)
  805f30:	d8800d17 	ldw	r2,52(sp)
  805f34:	d9800315 	stw	r6,12(sp)
  805f38:	d8800415 	stw	r2,16(sp)
  805f3c:	d8c00b17 	ldw	r3,44(sp)
  805f40:	1805003a 	cmpeq	r2,r3,zero
  805f44:	1000e21e 	bne	r2,zero,8062d0 <_dtoa_r+0x12e0>
  805f48:	d9000317 	ldw	r4,12(sp)
  805f4c:	0005883a 	mov	r2,zero
  805f50:	00cff834 	movhi	r3,16352
  805f54:	200c90fa 	slli	r6,r4,3
  805f58:	01002074 	movhi	r4,129
  805f5c:	21281604 	addi	r4,r4,-24488
  805f60:	180b883a 	mov	r5,r3
  805f64:	310d883a 	add	r6,r6,r4
  805f68:	327fff17 	ldw	r9,-4(r6)
  805f6c:	323ffe17 	ldw	r8,-8(r6)
  805f70:	1009883a 	mov	r4,r2
  805f74:	480f883a 	mov	r7,r9
  805f78:	400d883a 	mov	r6,r8
  805f7c:	08011940 	call	801194 <__divdf3>
  805f80:	180b883a 	mov	r5,r3
  805f84:	b00d883a 	mov	r6,r22
  805f88:	b80f883a 	mov	r7,r23
  805f8c:	1009883a 	mov	r4,r2
  805f90:	08010a00 	call	8010a0 <__subdf3>
  805f94:	a80b883a 	mov	r5,r21
  805f98:	a009883a 	mov	r4,r20
  805f9c:	d8c01915 	stw	r3,100(sp)
  805fa0:	d8801815 	stw	r2,96(sp)
  805fa4:	0806f080 	call	806f08 <__fixdfsi>
  805fa8:	1009883a 	mov	r4,r2
  805fac:	1027883a 	mov	r19,r2
  805fb0:	0806e100 	call	806e10 <__floatsidf>
  805fb4:	a80b883a 	mov	r5,r21
  805fb8:	a009883a 	mov	r4,r20
  805fbc:	180f883a 	mov	r7,r3
  805fc0:	100d883a 	mov	r6,r2
  805fc4:	08010a00 	call	8010a0 <__subdf3>
  805fc8:	d9801817 	ldw	r6,96(sp)
  805fcc:	1823883a 	mov	r17,r3
  805fd0:	d8801415 	stw	r2,80(sp)
  805fd4:	302d883a 	mov	r22,r6
  805fd8:	d9800517 	ldw	r6,20(sp)
  805fdc:	9cc00c04 	addi	r19,r19,48
  805fe0:	dc401515 	stw	r17,84(sp)
  805fe4:	d8c01917 	ldw	r3,100(sp)
  805fe8:	34c00005 	stb	r19,0(r6)
  805fec:	d8800517 	ldw	r2,20(sp)
  805ff0:	d9401917 	ldw	r5,100(sp)
  805ff4:	d9801417 	ldw	r6,80(sp)
  805ff8:	b009883a 	mov	r4,r22
  805ffc:	880f883a 	mov	r7,r17
  806000:	182f883a 	mov	r23,r3
  806004:	17000044 	addi	fp,r2,1
  806008:	0806bf00 	call	806bf0 <__gtdf2>
  80600c:	00804e16 	blt	zero,r2,806148 <_dtoa_r+0x1158>
  806010:	d9801417 	ldw	r6,80(sp)
  806014:	0005883a 	mov	r2,zero
  806018:	00cffc34 	movhi	r3,16368
  80601c:	180b883a 	mov	r5,r3
  806020:	880f883a 	mov	r7,r17
  806024:	1009883a 	mov	r4,r2
  806028:	08010a00 	call	8010a0 <__subdf3>
  80602c:	d9401917 	ldw	r5,100(sp)
  806030:	180f883a 	mov	r7,r3
  806034:	b009883a 	mov	r4,r22
  806038:	100d883a 	mov	r6,r2
  80603c:	0806bf00 	call	806bf0 <__gtdf2>
  806040:	00bda216 	blt	zero,r2,8056cc <_dtoa_r+0x6dc>
  806044:	d8c00317 	ldw	r3,12(sp)
  806048:	00800044 	movi	r2,1
  80604c:	10c01216 	blt	r2,r3,806098 <_dtoa_r+0x10a8>
  806050:	003d4506 	br	805568 <_dtoa_r+0x578>
  806054:	d9801417 	ldw	r6,80(sp)
  806058:	0005883a 	mov	r2,zero
  80605c:	00cffc34 	movhi	r3,16368
  806060:	180b883a 	mov	r5,r3
  806064:	880f883a 	mov	r7,r17
  806068:	1009883a 	mov	r4,r2
  80606c:	08010a00 	call	8010a0 <__subdf3>
  806070:	d9c01b17 	ldw	r7,108(sp)
  806074:	180b883a 	mov	r5,r3
  806078:	1009883a 	mov	r4,r2
  80607c:	b00d883a 	mov	r6,r22
  806080:	0806d000 	call	806d00 <__ltdf2>
  806084:	103d9116 	blt	r2,zero,8056cc <_dtoa_r+0x6dc>
  806088:	d9800517 	ldw	r6,20(sp)
  80608c:	d9000317 	ldw	r4,12(sp)
  806090:	3105883a 	add	r2,r6,r4
  806094:	e0bd3426 	beq	fp,r2,805568 <_dtoa_r+0x578>
  806098:	04500934 	movhi	r17,16420
  80609c:	0021883a 	mov	r16,zero
  8060a0:	b80b883a 	mov	r5,r23
  8060a4:	b009883a 	mov	r4,r22
  8060a8:	800d883a 	mov	r6,r16
  8060ac:	880f883a 	mov	r7,r17
  8060b0:	080671c0 	call	80671c <__muldf3>
  8060b4:	d9401517 	ldw	r5,84(sp)
  8060b8:	d9001417 	ldw	r4,80(sp)
  8060bc:	880f883a 	mov	r7,r17
  8060c0:	000d883a 	mov	r6,zero
  8060c4:	d8801a15 	stw	r2,104(sp)
  8060c8:	d8c01b15 	stw	r3,108(sp)
  8060cc:	080671c0 	call	80671c <__muldf3>
  8060d0:	180b883a 	mov	r5,r3
  8060d4:	1009883a 	mov	r4,r2
  8060d8:	1823883a 	mov	r17,r3
  8060dc:	1021883a 	mov	r16,r2
  8060e0:	0806f080 	call	806f08 <__fixdfsi>
  8060e4:	1009883a 	mov	r4,r2
  8060e8:	102b883a 	mov	r21,r2
  8060ec:	0806e100 	call	806e10 <__floatsidf>
  8060f0:	880b883a 	mov	r5,r17
  8060f4:	8009883a 	mov	r4,r16
  8060f8:	180f883a 	mov	r7,r3
  8060fc:	100d883a 	mov	r6,r2
  806100:	08010a00 	call	8010a0 <__subdf3>
  806104:	1021883a 	mov	r16,r2
  806108:	d9001b17 	ldw	r4,108(sp)
  80610c:	1823883a 	mov	r17,r3
  806110:	dc001415 	stw	r16,80(sp)
  806114:	ad400c04 	addi	r21,r21,48
  806118:	dc401515 	stw	r17,84(sp)
  80611c:	d8801a17 	ldw	r2,104(sp)
  806120:	e5400005 	stb	r21,0(fp)
  806124:	202f883a 	mov	r23,r4
  806128:	d9c01b17 	ldw	r7,108(sp)
  80612c:	d9001417 	ldw	r4,80(sp)
  806130:	880b883a 	mov	r5,r17
  806134:	100d883a 	mov	r6,r2
  806138:	102d883a 	mov	r22,r2
  80613c:	e7000044 	addi	fp,fp,1
  806140:	0806d000 	call	806d00 <__ltdf2>
  806144:	103fc30e 	bge	r2,zero,806054 <_dtoa_r+0x1064>
  806148:	d9000417 	ldw	r4,16(sp)
  80614c:	d9000d15 	stw	r4,52(sp)
  806150:	003d7106 	br	805718 <_dtoa_r+0x728>
  806154:	d9801717 	ldw	r6,92(sp)
  806158:	00800084 	movi	r2,2
  80615c:	11bde60e 	bge	r2,r6,8058f8 <_dtoa_r+0x908>
  806160:	203cfb1e 	bne	r4,zero,805550 <_dtoa_r+0x560>
  806164:	d9001617 	ldw	r4,88(sp)
  806168:	900b883a 	mov	r5,r18
  80616c:	01800144 	movi	r6,5
  806170:	000f883a 	mov	r7,zero
  806174:	08043640 	call	804364 <__multadd>
  806178:	d9000717 	ldw	r4,28(sp)
  80617c:	100b883a 	mov	r5,r2
  806180:	1025883a 	mov	r18,r2
  806184:	080380c0 	call	80380c <__mcmp>
  806188:	00bcf10e 	bge	zero,r2,805550 <_dtoa_r+0x560>
  80618c:	d8c00d17 	ldw	r3,52(sp)
  806190:	d9000517 	ldw	r4,20(sp)
  806194:	d8000615 	stw	zero,24(sp)
  806198:	18c00044 	addi	r3,r3,1
  80619c:	d8c00d15 	stw	r3,52(sp)
  8061a0:	00800c44 	movi	r2,49
  8061a4:	27000044 	addi	fp,r4,1
  8061a8:	20800005 	stb	r2,0(r4)
  8061ac:	003e8906 	br	805bd4 <_dtoa_r+0xbe4>
  8061b0:	d8c00517 	ldw	r3,20(sp)
  8061b4:	003bc206 	br	8050c0 <_dtoa_r+0xd0>
  8061b8:	01802074 	movhi	r6,129
  8061bc:	31a84804 	addi	r6,r6,-24288
  8061c0:	30c00917 	ldw	r3,36(r6)
  8061c4:	30800817 	ldw	r2,32(r6)
  8061c8:	d9001217 	ldw	r4,72(sp)
  8061cc:	d9401317 	ldw	r5,76(sp)
  8061d0:	180f883a 	mov	r7,r3
  8061d4:	100d883a 	mov	r6,r2
  8061d8:	08011940 	call	801194 <__divdf3>
  8061dc:	948003cc 	andi	r18,r18,15
  8061e0:	058000c4 	movi	r22,3
  8061e4:	1029883a 	mov	r20,r2
  8061e8:	182b883a 	mov	r21,r3
  8061ec:	003c8906 	br	805414 <_dtoa_r+0x424>
  8061f0:	d9001017 	ldw	r4,64(sp)
  8061f4:	d9800917 	ldw	r6,36(sp)
  8061f8:	0025883a 	mov	r18,zero
  8061fc:	1105c83a 	sub	r2,r2,r4
  806200:	2089883a 	add	r4,r4,r2
  806204:	308d883a 	add	r6,r6,r2
  806208:	d9001015 	stw	r4,64(sp)
  80620c:	d9800915 	stw	r6,36(sp)
  806210:	003e3206 	br	805adc <_dtoa_r+0xaec>
  806214:	28800044 	addi	r2,r5,1
  806218:	27000044 	addi	fp,r4,1
  80621c:	20800005 	stb	r2,0(r4)
  806220:	003e6c06 	br	805bd4 <_dtoa_r+0xbe4>
  806224:	d8800f17 	ldw	r2,60(sp)
  806228:	00bce016 	blt	zero,r2,8055ac <_dtoa_r+0x5bc>
  80622c:	d9800f17 	ldw	r6,60(sp)
  806230:	303cc51e 	bne	r6,zero,805548 <_dtoa_r+0x558>
  806234:	0005883a 	mov	r2,zero
  806238:	00d00534 	movhi	r3,16404
  80623c:	980b883a 	mov	r5,r19
  806240:	180f883a 	mov	r7,r3
  806244:	9009883a 	mov	r4,r18
  806248:	100d883a 	mov	r6,r2
  80624c:	080671c0 	call	80671c <__muldf3>
  806250:	180b883a 	mov	r5,r3
  806254:	a80f883a 	mov	r7,r21
  806258:	1009883a 	mov	r4,r2
  80625c:	a00d883a 	mov	r6,r20
  806260:	0806c780 	call	806c78 <__gedf2>
  806264:	103cb80e 	bge	r2,zero,805548 <_dtoa_r+0x558>
  806268:	0027883a 	mov	r19,zero
  80626c:	0025883a 	mov	r18,zero
  806270:	003fc606 	br	80618c <_dtoa_r+0x119c>
  806274:	99400117 	ldw	r5,4(r19)
  806278:	d9001617 	ldw	r4,88(sp)
  80627c:	0803c300 	call	803c30 <_Balloc>
  806280:	99800417 	ldw	r6,16(r19)
  806284:	11000304 	addi	r4,r2,12
  806288:	99400304 	addi	r5,r19,12
  80628c:	318d883a 	add	r6,r6,r6
  806290:	318d883a 	add	r6,r6,r6
  806294:	31800204 	addi	r6,r6,8
  806298:	1023883a 	mov	r17,r2
  80629c:	08026a80 	call	8026a8 <memcpy>
  8062a0:	d9001617 	ldw	r4,88(sp)
  8062a4:	880b883a 	mov	r5,r17
  8062a8:	01800044 	movi	r6,1
  8062ac:	0803ff40 	call	803ff4 <__lshift>
  8062b0:	100b883a 	mov	r5,r2
  8062b4:	003d9c06 	br	805928 <_dtoa_r+0x938>
  8062b8:	00800e44 	movi	r2,57
  8062bc:	b8807026 	beq	r23,r2,806480 <_dtoa_r+0x1490>
  8062c0:	b8800044 	addi	r2,r23,1
  8062c4:	b7000044 	addi	fp,r22,1
  8062c8:	b0800005 	stb	r2,0(r22)
  8062cc:	003e4106 	br	805bd4 <_dtoa_r+0xbe4>
  8062d0:	d8800317 	ldw	r2,12(sp)
  8062d4:	01802074 	movhi	r6,129
  8062d8:	31a81604 	addi	r6,r6,-24488
  8062dc:	b009883a 	mov	r4,r22
  8062e0:	100e90fa 	slli	r7,r2,3
  8062e4:	b80b883a 	mov	r5,r23
  8062e8:	398f883a 	add	r7,r7,r6
  8062ec:	38bffe17 	ldw	r2,-8(r7)
  8062f0:	d9800517 	ldw	r6,20(sp)
  8062f4:	38ffff17 	ldw	r3,-4(r7)
  8062f8:	37000044 	addi	fp,r6,1
  8062fc:	180f883a 	mov	r7,r3
  806300:	100d883a 	mov	r6,r2
  806304:	080671c0 	call	80671c <__muldf3>
  806308:	a80b883a 	mov	r5,r21
  80630c:	a009883a 	mov	r4,r20
  806310:	182f883a 	mov	r23,r3
  806314:	102d883a 	mov	r22,r2
  806318:	0806f080 	call	806f08 <__fixdfsi>
  80631c:	1009883a 	mov	r4,r2
  806320:	1027883a 	mov	r19,r2
  806324:	0806e100 	call	806e10 <__floatsidf>
  806328:	a80b883a 	mov	r5,r21
  80632c:	a009883a 	mov	r4,r20
  806330:	180f883a 	mov	r7,r3
  806334:	100d883a 	mov	r6,r2
  806338:	08010a00 	call	8010a0 <__subdf3>
  80633c:	180b883a 	mov	r5,r3
  806340:	d8c00517 	ldw	r3,20(sp)
  806344:	9cc00c04 	addi	r19,r19,48
  806348:	1009883a 	mov	r4,r2
  80634c:	1cc00005 	stb	r19,0(r3)
  806350:	2021883a 	mov	r16,r4
  806354:	d9000317 	ldw	r4,12(sp)
  806358:	00800044 	movi	r2,1
  80635c:	2823883a 	mov	r17,r5
  806360:	20802226 	beq	r4,r2,8063ec <_dtoa_r+0x13fc>
  806364:	1029883a 	mov	r20,r2
  806368:	0005883a 	mov	r2,zero
  80636c:	00d00934 	movhi	r3,16420
  806370:	180f883a 	mov	r7,r3
  806374:	100d883a 	mov	r6,r2
  806378:	880b883a 	mov	r5,r17
  80637c:	8009883a 	mov	r4,r16
  806380:	080671c0 	call	80671c <__muldf3>
  806384:	180b883a 	mov	r5,r3
  806388:	1009883a 	mov	r4,r2
  80638c:	1823883a 	mov	r17,r3
  806390:	1021883a 	mov	r16,r2
  806394:	0806f080 	call	806f08 <__fixdfsi>
  806398:	1009883a 	mov	r4,r2
  80639c:	102b883a 	mov	r21,r2
  8063a0:	0806e100 	call	806e10 <__floatsidf>
  8063a4:	880b883a 	mov	r5,r17
  8063a8:	8009883a 	mov	r4,r16
  8063ac:	180f883a 	mov	r7,r3
  8063b0:	100d883a 	mov	r6,r2
  8063b4:	08010a00 	call	8010a0 <__subdf3>
  8063b8:	180b883a 	mov	r5,r3
  8063bc:	d8c00517 	ldw	r3,20(sp)
  8063c0:	1009883a 	mov	r4,r2
  8063c4:	ad400c04 	addi	r21,r21,48
  8063c8:	1d05883a 	add	r2,r3,r20
  8063cc:	15400005 	stb	r21,0(r2)
  8063d0:	2021883a 	mov	r16,r4
  8063d4:	d9000317 	ldw	r4,12(sp)
  8063d8:	a5000044 	addi	r20,r20,1
  8063dc:	2823883a 	mov	r17,r5
  8063e0:	a13fe11e 	bne	r20,r4,806368 <_dtoa_r+0x1378>
  8063e4:	e505883a 	add	r2,fp,r20
  8063e8:	173fffc4 	addi	fp,r2,-1
  8063ec:	0025883a 	mov	r18,zero
  8063f0:	04cff834 	movhi	r19,16352
  8063f4:	b009883a 	mov	r4,r22
  8063f8:	b80b883a 	mov	r5,r23
  8063fc:	900d883a 	mov	r6,r18
  806400:	980f883a 	mov	r7,r19
  806404:	08011200 	call	801120 <__adddf3>
  806408:	180b883a 	mov	r5,r3
  80640c:	1009883a 	mov	r4,r2
  806410:	800d883a 	mov	r6,r16
  806414:	880f883a 	mov	r7,r17
  806418:	0806d000 	call	806d00 <__ltdf2>
  80641c:	103cab16 	blt	r2,zero,8056cc <_dtoa_r+0x6dc>
  806420:	0009883a 	mov	r4,zero
  806424:	980b883a 	mov	r5,r19
  806428:	b80f883a 	mov	r7,r23
  80642c:	b00d883a 	mov	r6,r22
  806430:	08010a00 	call	8010a0 <__subdf3>
  806434:	180b883a 	mov	r5,r3
  806438:	880f883a 	mov	r7,r17
  80643c:	1009883a 	mov	r4,r2
  806440:	800d883a 	mov	r6,r16
  806444:	0806bf00 	call	806bf0 <__gtdf2>
  806448:	00bc470e 	bge	zero,r2,805568 <_dtoa_r+0x578>
  80644c:	00c00c04 	movi	r3,48
  806450:	e73fffc4 	addi	fp,fp,-1
  806454:	e0800007 	ldb	r2,0(fp)
  806458:	10fffd26 	beq	r2,r3,806450 <_dtoa_r+0x1460>
  80645c:	d9800417 	ldw	r6,16(sp)
  806460:	e7000044 	addi	fp,fp,1
  806464:	d9800d15 	stw	r6,52(sp)
  806468:	003cab06 	br	805718 <_dtoa_r+0x728>
  80646c:	d8c00f17 	ldw	r3,60(sp)
  806470:	d9001117 	ldw	r4,68(sp)
  806474:	20e1c83a 	sub	r16,r4,r3
  806478:	0007883a 	mov	r3,zero
  80647c:	003d9b06 	br	805aec <_dtoa_r+0xafc>
  806480:	00800e44 	movi	r2,57
  806484:	b0800005 	stb	r2,0(r22)
  806488:	b5800044 	addi	r22,r22,1
  80648c:	003dc106 	br	805b94 <_dtoa_r+0xba4>
  806490:	05800084 	movi	r22,2
  806494:	003bf706 	br	805474 <_dtoa_r+0x484>
  806498:	d9000f17 	ldw	r4,60(sp)
  80649c:	013c000e 	bge	zero,r4,8054a0 <_dtoa_r+0x4b0>
  8064a0:	d9800e17 	ldw	r6,56(sp)
  8064a4:	01bc300e 	bge	zero,r6,805568 <_dtoa_r+0x578>
  8064a8:	0005883a 	mov	r2,zero
  8064ac:	00d00934 	movhi	r3,16420
  8064b0:	a80b883a 	mov	r5,r21
  8064b4:	180f883a 	mov	r7,r3
  8064b8:	a009883a 	mov	r4,r20
  8064bc:	100d883a 	mov	r6,r2
  8064c0:	080671c0 	call	80671c <__muldf3>
  8064c4:	b1000044 	addi	r4,r22,1
  8064c8:	1021883a 	mov	r16,r2
  8064cc:	1823883a 	mov	r17,r3
  8064d0:	0806e100 	call	806e10 <__floatsidf>
  8064d4:	880b883a 	mov	r5,r17
  8064d8:	8009883a 	mov	r4,r16
  8064dc:	180f883a 	mov	r7,r3
  8064e0:	100d883a 	mov	r6,r2
  8064e4:	080671c0 	call	80671c <__muldf3>
  8064e8:	0011883a 	mov	r8,zero
  8064ec:	02500734 	movhi	r9,16412
  8064f0:	180b883a 	mov	r5,r3
  8064f4:	480f883a 	mov	r7,r9
  8064f8:	1009883a 	mov	r4,r2
  8064fc:	400d883a 	mov	r6,r8
  806500:	08011200 	call	801120 <__adddf3>
  806504:	102d883a 	mov	r22,r2
  806508:	00bf3034 	movhi	r2,64704
  80650c:	10ef883a 	add	r23,r2,r3
  806510:	d8800d17 	ldw	r2,52(sp)
  806514:	d8c00e17 	ldw	r3,56(sp)
  806518:	8029883a 	mov	r20,r16
  80651c:	10bfffc4 	addi	r2,r2,-1
  806520:	882b883a 	mov	r21,r17
  806524:	d8800415 	stw	r2,16(sp)
  806528:	d8c00315 	stw	r3,12(sp)
  80652c:	003e8306 	br	805f3c <_dtoa_r+0xf4c>
  806530:	d8800117 	ldw	r2,4(sp)
  806534:	dc001117 	ldw	r16,68(sp)
  806538:	dc801017 	ldw	r18,64(sp)
  80653c:	00c00d84 	movi	r3,54
  806540:	1887c83a 	sub	r3,r3,r2
  806544:	003d6906 	br	805aec <_dtoa_r+0xafc>
  806548:	01800044 	movi	r6,1
  80654c:	3021883a 	mov	r16,r6
  806550:	d9800f15 	stw	r6,60(sp)
  806554:	d9802615 	stw	r6,152(sp)
  806558:	d9800e15 	stw	r6,56(sp)
  80655c:	003b9306 	br	8053ac <_dtoa_r+0x3bc>
  806560:	b021883a 	mov	r16,r22
  806564:	dd800f15 	stw	r22,60(sp)
  806568:	003b9006 	br	8053ac <_dtoa_r+0x3bc>
  80656c:	103e221e 	bne	r2,zero,805df8 <_dtoa_r+0xe08>
  806570:	b880004c 	andi	r2,r23,1
  806574:	1005003a 	cmpeq	r2,r2,zero
  806578:	103e1f1e 	bne	r2,zero,805df8 <_dtoa_r+0xe08>
  80657c:	003e1b06 	br	805dec <_dtoa_r+0xdfc>
  806580:	d9001617 	ldw	r4,88(sp)
  806584:	980b883a 	mov	r5,r19
  806588:	01800284 	movi	r6,10
  80658c:	000f883a 	mov	r7,zero
  806590:	08043640 	call	804364 <__multadd>
  806594:	d8c00e17 	ldw	r3,56(sp)
  806598:	1027883a 	mov	r19,r2
  80659c:	d8c00f15 	stw	r3,60(sp)
  8065a0:	003cd306 	br	8058f0 <_dtoa_r+0x900>

008065a4 <memmove>:
  8065a4:	2807883a 	mov	r3,r5
  8065a8:	2011883a 	mov	r8,r4
  8065ac:	29000c2e 	bgeu	r5,r4,8065e0 <memmove+0x3c>
  8065b0:	298f883a 	add	r7,r5,r6
  8065b4:	21c00a2e 	bgeu	r4,r7,8065e0 <memmove+0x3c>
  8065b8:	30000726 	beq	r6,zero,8065d8 <memmove+0x34>
  8065bc:	2187883a 	add	r3,r4,r6
  8065c0:	198dc83a 	sub	r6,r3,r6
  8065c4:	39ffffc4 	addi	r7,r7,-1
  8065c8:	38800003 	ldbu	r2,0(r7)
  8065cc:	18ffffc4 	addi	r3,r3,-1
  8065d0:	18800005 	stb	r2,0(r3)
  8065d4:	19bffb1e 	bne	r3,r6,8065c4 <memmove+0x20>
  8065d8:	2005883a 	mov	r2,r4
  8065dc:	f800283a 	ret
  8065e0:	01c003c4 	movi	r7,15
  8065e4:	39800a36 	bltu	r7,r6,806610 <memmove+0x6c>
  8065e8:	303ffb26 	beq	r6,zero,8065d8 <memmove+0x34>
  8065ec:	400f883a 	mov	r7,r8
  8065f0:	320d883a 	add	r6,r6,r8
  8065f4:	28800003 	ldbu	r2,0(r5)
  8065f8:	29400044 	addi	r5,r5,1
  8065fc:	38800005 	stb	r2,0(r7)
  806600:	39c00044 	addi	r7,r7,1
  806604:	39bffb1e 	bne	r7,r6,8065f4 <memmove+0x50>
  806608:	2005883a 	mov	r2,r4
  80660c:	f800283a 	ret
  806610:	1904b03a 	or	r2,r3,r4
  806614:	108000cc 	andi	r2,r2,3
  806618:	103ff31e 	bne	r2,zero,8065e8 <memmove+0x44>
  80661c:	3811883a 	mov	r8,r7
  806620:	180b883a 	mov	r5,r3
  806624:	200f883a 	mov	r7,r4
  806628:	28c00017 	ldw	r3,0(r5)
  80662c:	31bffc04 	addi	r6,r6,-16
  806630:	38c00015 	stw	r3,0(r7)
  806634:	28800117 	ldw	r2,4(r5)
  806638:	38800115 	stw	r2,4(r7)
  80663c:	28c00217 	ldw	r3,8(r5)
  806640:	38c00215 	stw	r3,8(r7)
  806644:	28800317 	ldw	r2,12(r5)
  806648:	29400404 	addi	r5,r5,16
  80664c:	38800315 	stw	r2,12(r7)
  806650:	39c00404 	addi	r7,r7,16
  806654:	41bff436 	bltu	r8,r6,806628 <memmove+0x84>
  806658:	008000c4 	movi	r2,3
  80665c:	1180072e 	bgeu	r2,r6,80667c <memmove+0xd8>
  806660:	1007883a 	mov	r3,r2
  806664:	28800017 	ldw	r2,0(r5)
  806668:	31bfff04 	addi	r6,r6,-4
  80666c:	29400104 	addi	r5,r5,4
  806670:	38800015 	stw	r2,0(r7)
  806674:	39c00104 	addi	r7,r7,4
  806678:	19bffa36 	bltu	r3,r6,806664 <memmove+0xc0>
  80667c:	3811883a 	mov	r8,r7
  806680:	003fd906 	br	8065e8 <memmove+0x44>

00806684 <memset>:
  806684:	008000c4 	movi	r2,3
  806688:	29403fcc 	andi	r5,r5,255
  80668c:	2007883a 	mov	r3,r4
  806690:	1180022e 	bgeu	r2,r6,80669c <memset+0x18>
  806694:	2084703a 	and	r2,r4,r2
  806698:	10000826 	beq	r2,zero,8066bc <memset+0x38>
  80669c:	30000526 	beq	r6,zero,8066b4 <memset+0x30>
  8066a0:	2805883a 	mov	r2,r5
  8066a4:	30cd883a 	add	r6,r6,r3
  8066a8:	18800005 	stb	r2,0(r3)
  8066ac:	18c00044 	addi	r3,r3,1
  8066b0:	19bffd1e 	bne	r3,r6,8066a8 <memset+0x24>
  8066b4:	2005883a 	mov	r2,r4
  8066b8:	f800283a 	ret
  8066bc:	2804923a 	slli	r2,r5,8
  8066c0:	020003c4 	movi	r8,15
  8066c4:	200f883a 	mov	r7,r4
  8066c8:	2884b03a 	or	r2,r5,r2
  8066cc:	1006943a 	slli	r3,r2,16
  8066d0:	10c6b03a 	or	r3,r2,r3
  8066d4:	41800a2e 	bgeu	r8,r6,806700 <memset+0x7c>
  8066d8:	4005883a 	mov	r2,r8
  8066dc:	31bffc04 	addi	r6,r6,-16
  8066e0:	38c00015 	stw	r3,0(r7)
  8066e4:	38c00115 	stw	r3,4(r7)
  8066e8:	38c00215 	stw	r3,8(r7)
  8066ec:	38c00315 	stw	r3,12(r7)
  8066f0:	39c00404 	addi	r7,r7,16
  8066f4:	11bff936 	bltu	r2,r6,8066dc <memset+0x58>
  8066f8:	008000c4 	movi	r2,3
  8066fc:	1180052e 	bgeu	r2,r6,806714 <memset+0x90>
  806700:	31bfff04 	addi	r6,r6,-4
  806704:	008000c4 	movi	r2,3
  806708:	38c00015 	stw	r3,0(r7)
  80670c:	39c00104 	addi	r7,r7,4
  806710:	11bffb36 	bltu	r2,r6,806700 <memset+0x7c>
  806714:	3807883a 	mov	r3,r7
  806718:	003fe006 	br	80669c <memset+0x18>

0080671c <__muldf3>:
  80671c:	deffe004 	addi	sp,sp,-128
  806720:	dc401815 	stw	r17,96(sp)
  806724:	dc400404 	addi	r17,sp,16
  806728:	2011883a 	mov	r8,r4
  80672c:	2813883a 	mov	r9,r5
  806730:	dc001715 	stw	r16,92(sp)
  806734:	d809883a 	mov	r4,sp
  806738:	880b883a 	mov	r5,r17
  80673c:	dc000904 	addi	r16,sp,36
  806740:	dfc01f15 	stw	ra,124(sp)
  806744:	da400115 	stw	r9,4(sp)
  806748:	d9c00315 	stw	r7,12(sp)
  80674c:	da000015 	stw	r8,0(sp)
  806750:	d9800215 	stw	r6,8(sp)
  806754:	ddc01e15 	stw	r23,120(sp)
  806758:	dd801d15 	stw	r22,116(sp)
  80675c:	dd401c15 	stw	r21,112(sp)
  806760:	dd001b15 	stw	r20,108(sp)
  806764:	dcc01a15 	stw	r19,104(sp)
  806768:	dc801915 	stw	r18,100(sp)
  80676c:	0801c0c0 	call	801c0c <__unpack_d>
  806770:	d9000204 	addi	r4,sp,8
  806774:	800b883a 	mov	r5,r16
  806778:	0801c0c0 	call	801c0c <__unpack_d>
  80677c:	d9000417 	ldw	r4,16(sp)
  806780:	00800044 	movi	r2,1
  806784:	1100102e 	bgeu	r2,r4,8067c8 <__muldf3+0xac>
  806788:	d8c00917 	ldw	r3,36(sp)
  80678c:	10c0062e 	bgeu	r2,r3,8067a8 <__muldf3+0x8c>
  806790:	00800104 	movi	r2,4
  806794:	20800a26 	beq	r4,r2,8067c0 <__muldf3+0xa4>
  806798:	1880cc26 	beq	r3,r2,806acc <__muldf3+0x3b0>
  80679c:	00800084 	movi	r2,2
  8067a0:	20800926 	beq	r4,r2,8067c8 <__muldf3+0xac>
  8067a4:	1880191e 	bne	r3,r2,80680c <__muldf3+0xf0>
  8067a8:	d8c00a17 	ldw	r3,40(sp)
  8067ac:	d8800517 	ldw	r2,20(sp)
  8067b0:	8009883a 	mov	r4,r16
  8067b4:	10c4c03a 	cmpne	r2,r2,r3
  8067b8:	d8800a15 	stw	r2,40(sp)
  8067bc:	00000706 	br	8067dc <__muldf3+0xc0>
  8067c0:	00800084 	movi	r2,2
  8067c4:	1880c326 	beq	r3,r2,806ad4 <__muldf3+0x3b8>
  8067c8:	d8800517 	ldw	r2,20(sp)
  8067cc:	d8c00a17 	ldw	r3,40(sp)
  8067d0:	8809883a 	mov	r4,r17
  8067d4:	10c4c03a 	cmpne	r2,r2,r3
  8067d8:	d8800515 	stw	r2,20(sp)
  8067dc:	08018f80 	call	8018f8 <__pack_d>
  8067e0:	dfc01f17 	ldw	ra,124(sp)
  8067e4:	ddc01e17 	ldw	r23,120(sp)
  8067e8:	dd801d17 	ldw	r22,116(sp)
  8067ec:	dd401c17 	ldw	r21,112(sp)
  8067f0:	dd001b17 	ldw	r20,108(sp)
  8067f4:	dcc01a17 	ldw	r19,104(sp)
  8067f8:	dc801917 	ldw	r18,100(sp)
  8067fc:	dc401817 	ldw	r17,96(sp)
  806800:	dc001717 	ldw	r16,92(sp)
  806804:	dec02004 	addi	sp,sp,128
  806808:	f800283a 	ret
  80680c:	dd800717 	ldw	r22,28(sp)
  806810:	dc800c17 	ldw	r18,48(sp)
  806814:	002b883a 	mov	r21,zero
  806818:	0023883a 	mov	r17,zero
  80681c:	a80b883a 	mov	r5,r21
  806820:	b00d883a 	mov	r6,r22
  806824:	880f883a 	mov	r7,r17
  806828:	ddc00817 	ldw	r23,32(sp)
  80682c:	dcc00d17 	ldw	r19,52(sp)
  806830:	9009883a 	mov	r4,r18
  806834:	08015b80 	call	8015b8 <__muldi3>
  806838:	001b883a 	mov	r13,zero
  80683c:	680f883a 	mov	r7,r13
  806840:	b009883a 	mov	r4,r22
  806844:	000b883a 	mov	r5,zero
  806848:	980d883a 	mov	r6,r19
  80684c:	b82d883a 	mov	r22,r23
  806850:	002f883a 	mov	r23,zero
  806854:	db401615 	stw	r13,88(sp)
  806858:	d8801315 	stw	r2,76(sp)
  80685c:	d8c01415 	stw	r3,80(sp)
  806860:	dcc01515 	stw	r19,84(sp)
  806864:	08015b80 	call	8015b8 <__muldi3>
  806868:	b00d883a 	mov	r6,r22
  80686c:	000b883a 	mov	r5,zero
  806870:	9009883a 	mov	r4,r18
  806874:	b80f883a 	mov	r7,r23
  806878:	1021883a 	mov	r16,r2
  80687c:	1823883a 	mov	r17,r3
  806880:	08015b80 	call	8015b8 <__muldi3>
  806884:	8085883a 	add	r2,r16,r2
  806888:	140d803a 	cmpltu	r6,r2,r16
  80688c:	88c7883a 	add	r3,r17,r3
  806890:	30cd883a 	add	r6,r6,r3
  806894:	1029883a 	mov	r20,r2
  806898:	302b883a 	mov	r21,r6
  80689c:	da801317 	ldw	r10,76(sp)
  8068a0:	dac01417 	ldw	r11,80(sp)
  8068a4:	db001517 	ldw	r12,84(sp)
  8068a8:	db401617 	ldw	r13,88(sp)
  8068ac:	3440612e 	bgeu	r6,r17,806a34 <__muldf3+0x318>
  8068b0:	0009883a 	mov	r4,zero
  8068b4:	5105883a 	add	r2,r10,r4
  8068b8:	128d803a 	cmpltu	r6,r2,r10
  8068bc:	5d07883a 	add	r3,r11,r20
  8068c0:	30cd883a 	add	r6,r6,r3
  8068c4:	0021883a 	mov	r16,zero
  8068c8:	04400044 	movi	r17,1
  8068cc:	1025883a 	mov	r18,r2
  8068d0:	3027883a 	mov	r19,r6
  8068d4:	32c06236 	bltu	r6,r11,806a60 <__muldf3+0x344>
  8068d8:	59807a26 	beq	r11,r6,806ac4 <__muldf3+0x3a8>
  8068dc:	680b883a 	mov	r5,r13
  8068e0:	b80f883a 	mov	r7,r23
  8068e4:	6009883a 	mov	r4,r12
  8068e8:	b00d883a 	mov	r6,r22
  8068ec:	08015b80 	call	8015b8 <__muldi3>
  8068f0:	1009883a 	mov	r4,r2
  8068f4:	000f883a 	mov	r7,zero
  8068f8:	1545883a 	add	r2,r2,r21
  8068fc:	1111803a 	cmpltu	r8,r2,r4
  806900:	19c7883a 	add	r3,r3,r7
  806904:	40c7883a 	add	r3,r8,r3
  806908:	88cb883a 	add	r5,r17,r3
  80690c:	d8c00617 	ldw	r3,24(sp)
  806910:	8089883a 	add	r4,r16,r2
  806914:	d8800b17 	ldw	r2,44(sp)
  806918:	18c00104 	addi	r3,r3,4
  80691c:	240d803a 	cmpltu	r6,r4,r16
  806920:	10c7883a 	add	r3,r2,r3
  806924:	2013883a 	mov	r9,r4
  806928:	d8800a17 	ldw	r2,40(sp)
  80692c:	d9000517 	ldw	r4,20(sp)
  806930:	314d883a 	add	r6,r6,r5
  806934:	3015883a 	mov	r10,r6
  806938:	2088c03a 	cmpne	r4,r4,r2
  80693c:	00880034 	movhi	r2,8192
  806940:	10bfffc4 	addi	r2,r2,-1
  806944:	d9000f15 	stw	r4,60(sp)
  806948:	d8c01015 	stw	r3,64(sp)
  80694c:	1180162e 	bgeu	r2,r6,8069a8 <__muldf3+0x28c>
  806950:	1811883a 	mov	r8,r3
  806954:	101f883a 	mov	r15,r2
  806958:	980497fa 	slli	r2,r19,31
  80695c:	9016d07a 	srli	r11,r18,1
  806960:	500697fa 	slli	r3,r10,31
  806964:	480cd07a 	srli	r6,r9,1
  806968:	500ed07a 	srli	r7,r10,1
  80696c:	12d6b03a 	or	r11,r2,r11
  806970:	00800044 	movi	r2,1
  806974:	198cb03a 	or	r6,r3,r6
  806978:	4888703a 	and	r4,r9,r2
  80697c:	9818d07a 	srli	r12,r19,1
  806980:	001b883a 	mov	r13,zero
  806984:	03a00034 	movhi	r14,32768
  806988:	3013883a 	mov	r9,r6
  80698c:	3815883a 	mov	r10,r7
  806990:	4091883a 	add	r8,r8,r2
  806994:	20000226 	beq	r4,zero,8069a0 <__muldf3+0x284>
  806998:	5b64b03a 	or	r18,r11,r13
  80699c:	63a6b03a 	or	r19,r12,r14
  8069a0:	7abfed36 	bltu	r15,r10,806958 <__muldf3+0x23c>
  8069a4:	da001015 	stw	r8,64(sp)
  8069a8:	00840034 	movhi	r2,4096
  8069ac:	10bfffc4 	addi	r2,r2,-1
  8069b0:	12801436 	bltu	r2,r10,806a04 <__muldf3+0x2e8>
  8069b4:	da001017 	ldw	r8,64(sp)
  8069b8:	101f883a 	mov	r15,r2
  8069bc:	4a45883a 	add	r2,r9,r9
  8069c0:	124d803a 	cmpltu	r6,r2,r9
  8069c4:	5287883a 	add	r3,r10,r10
  8069c8:	9497883a 	add	r11,r18,r18
  8069cc:	5c8f803a 	cmpltu	r7,r11,r18
  8069d0:	9cd9883a 	add	r12,r19,r19
  8069d4:	01000044 	movi	r4,1
  8069d8:	30cd883a 	add	r6,r6,r3
  8069dc:	3b0f883a 	add	r7,r7,r12
  8069e0:	423fffc4 	addi	r8,r8,-1
  8069e4:	1013883a 	mov	r9,r2
  8069e8:	3015883a 	mov	r10,r6
  8069ec:	111ab03a 	or	r13,r2,r4
  8069f0:	98003016 	blt	r19,zero,806ab4 <__muldf3+0x398>
  8069f4:	5825883a 	mov	r18,r11
  8069f8:	3827883a 	mov	r19,r7
  8069fc:	7abfef2e 	bgeu	r15,r10,8069bc <__muldf3+0x2a0>
  806a00:	da001015 	stw	r8,64(sp)
  806a04:	00803fc4 	movi	r2,255
  806a08:	488e703a 	and	r7,r9,r2
  806a0c:	00802004 	movi	r2,128
  806a10:	0007883a 	mov	r3,zero
  806a14:	0011883a 	mov	r8,zero
  806a18:	38801826 	beq	r7,r2,806a7c <__muldf3+0x360>
  806a1c:	008000c4 	movi	r2,3
  806a20:	d9000e04 	addi	r4,sp,56
  806a24:	da801215 	stw	r10,72(sp)
  806a28:	d8800e15 	stw	r2,56(sp)
  806a2c:	da401115 	stw	r9,68(sp)
  806a30:	003f6a06 	br	8067dc <__muldf3+0xc0>
  806a34:	89802126 	beq	r17,r6,806abc <__muldf3+0x3a0>
  806a38:	0009883a 	mov	r4,zero
  806a3c:	5105883a 	add	r2,r10,r4
  806a40:	128d803a 	cmpltu	r6,r2,r10
  806a44:	5d07883a 	add	r3,r11,r20
  806a48:	30cd883a 	add	r6,r6,r3
  806a4c:	0021883a 	mov	r16,zero
  806a50:	0023883a 	mov	r17,zero
  806a54:	1025883a 	mov	r18,r2
  806a58:	3027883a 	mov	r19,r6
  806a5c:	32ff9e2e 	bgeu	r6,r11,8068d8 <__muldf3+0x1bc>
  806a60:	00800044 	movi	r2,1
  806a64:	8089883a 	add	r4,r16,r2
  806a68:	240d803a 	cmpltu	r6,r4,r16
  806a6c:	344d883a 	add	r6,r6,r17
  806a70:	2021883a 	mov	r16,r4
  806a74:	3023883a 	mov	r17,r6
  806a78:	003f9806 	br	8068dc <__muldf3+0x1c0>
  806a7c:	403fe71e 	bne	r8,zero,806a1c <__muldf3+0x300>
  806a80:	01004004 	movi	r4,256
  806a84:	4904703a 	and	r2,r9,r4
  806a88:	10c4b03a 	or	r2,r2,r3
  806a8c:	103fe31e 	bne	r2,zero,806a1c <__muldf3+0x300>
  806a90:	94c4b03a 	or	r2,r18,r19
  806a94:	103fe126 	beq	r2,zero,806a1c <__muldf3+0x300>
  806a98:	49c5883a 	add	r2,r9,r7
  806a9c:	1251803a 	cmpltu	r8,r2,r9
  806aa0:	4291883a 	add	r8,r8,r10
  806aa4:	013fc004 	movi	r4,-256
  806aa8:	1112703a 	and	r9,r2,r4
  806aac:	4015883a 	mov	r10,r8
  806ab0:	003fda06 	br	806a1c <__muldf3+0x300>
  806ab4:	6813883a 	mov	r9,r13
  806ab8:	003fce06 	br	8069f4 <__muldf3+0x2d8>
  806abc:	143f7c36 	bltu	r2,r16,8068b0 <__muldf3+0x194>
  806ac0:	003fdd06 	br	806a38 <__muldf3+0x31c>
  806ac4:	12bf852e 	bgeu	r2,r10,8068dc <__muldf3+0x1c0>
  806ac8:	003fe506 	br	806a60 <__muldf3+0x344>
  806acc:	00800084 	movi	r2,2
  806ad0:	20bf351e 	bne	r4,r2,8067a8 <__muldf3+0x8c>
  806ad4:	01002074 	movhi	r4,129
  806ad8:	2127d004 	addi	r4,r4,-24768
  806adc:	003f3f06 	br	8067dc <__muldf3+0xc0>

00806ae0 <__eqdf2>:
  806ae0:	deffef04 	addi	sp,sp,-68
  806ae4:	dc400f15 	stw	r17,60(sp)
  806ae8:	dc400404 	addi	r17,sp,16
  806aec:	2005883a 	mov	r2,r4
  806af0:	2807883a 	mov	r3,r5
  806af4:	dc000e15 	stw	r16,56(sp)
  806af8:	d809883a 	mov	r4,sp
  806afc:	880b883a 	mov	r5,r17
  806b00:	dc000904 	addi	r16,sp,36
  806b04:	d8c00115 	stw	r3,4(sp)
  806b08:	d8800015 	stw	r2,0(sp)
  806b0c:	d9800215 	stw	r6,8(sp)
  806b10:	dfc01015 	stw	ra,64(sp)
  806b14:	d9c00315 	stw	r7,12(sp)
  806b18:	0801c0c0 	call	801c0c <__unpack_d>
  806b1c:	d9000204 	addi	r4,sp,8
  806b20:	800b883a 	mov	r5,r16
  806b24:	0801c0c0 	call	801c0c <__unpack_d>
  806b28:	d8800417 	ldw	r2,16(sp)
  806b2c:	00c00044 	movi	r3,1
  806b30:	180d883a 	mov	r6,r3
  806b34:	1880062e 	bgeu	r3,r2,806b50 <__eqdf2+0x70>
  806b38:	d8800917 	ldw	r2,36(sp)
  806b3c:	8809883a 	mov	r4,r17
  806b40:	800b883a 	mov	r5,r16
  806b44:	1880022e 	bgeu	r3,r2,806b50 <__eqdf2+0x70>
  806b48:	080712c0 	call	80712c <__fpcmp_parts_d>
  806b4c:	100d883a 	mov	r6,r2
  806b50:	3005883a 	mov	r2,r6
  806b54:	dfc01017 	ldw	ra,64(sp)
  806b58:	dc400f17 	ldw	r17,60(sp)
  806b5c:	dc000e17 	ldw	r16,56(sp)
  806b60:	dec01104 	addi	sp,sp,68
  806b64:	f800283a 	ret

00806b68 <__nedf2>:
  806b68:	deffef04 	addi	sp,sp,-68
  806b6c:	dc400f15 	stw	r17,60(sp)
  806b70:	dc400404 	addi	r17,sp,16
  806b74:	2005883a 	mov	r2,r4
  806b78:	2807883a 	mov	r3,r5
  806b7c:	dc000e15 	stw	r16,56(sp)
  806b80:	d809883a 	mov	r4,sp
  806b84:	880b883a 	mov	r5,r17
  806b88:	dc000904 	addi	r16,sp,36
  806b8c:	d8c00115 	stw	r3,4(sp)
  806b90:	d8800015 	stw	r2,0(sp)
  806b94:	d9800215 	stw	r6,8(sp)
  806b98:	dfc01015 	stw	ra,64(sp)
  806b9c:	d9c00315 	stw	r7,12(sp)
  806ba0:	0801c0c0 	call	801c0c <__unpack_d>
  806ba4:	d9000204 	addi	r4,sp,8
  806ba8:	800b883a 	mov	r5,r16
  806bac:	0801c0c0 	call	801c0c <__unpack_d>
  806bb0:	d8800417 	ldw	r2,16(sp)
  806bb4:	00c00044 	movi	r3,1
  806bb8:	180d883a 	mov	r6,r3
  806bbc:	1880062e 	bgeu	r3,r2,806bd8 <__nedf2+0x70>
  806bc0:	d8800917 	ldw	r2,36(sp)
  806bc4:	8809883a 	mov	r4,r17
  806bc8:	800b883a 	mov	r5,r16
  806bcc:	1880022e 	bgeu	r3,r2,806bd8 <__nedf2+0x70>
  806bd0:	080712c0 	call	80712c <__fpcmp_parts_d>
  806bd4:	100d883a 	mov	r6,r2
  806bd8:	3005883a 	mov	r2,r6
  806bdc:	dfc01017 	ldw	ra,64(sp)
  806be0:	dc400f17 	ldw	r17,60(sp)
  806be4:	dc000e17 	ldw	r16,56(sp)
  806be8:	dec01104 	addi	sp,sp,68
  806bec:	f800283a 	ret

00806bf0 <__gtdf2>:
  806bf0:	deffef04 	addi	sp,sp,-68
  806bf4:	dc400f15 	stw	r17,60(sp)
  806bf8:	dc400404 	addi	r17,sp,16
  806bfc:	2005883a 	mov	r2,r4
  806c00:	2807883a 	mov	r3,r5
  806c04:	dc000e15 	stw	r16,56(sp)
  806c08:	d809883a 	mov	r4,sp
  806c0c:	880b883a 	mov	r5,r17
  806c10:	dc000904 	addi	r16,sp,36
  806c14:	d8c00115 	stw	r3,4(sp)
  806c18:	d8800015 	stw	r2,0(sp)
  806c1c:	d9800215 	stw	r6,8(sp)
  806c20:	dfc01015 	stw	ra,64(sp)
  806c24:	d9c00315 	stw	r7,12(sp)
  806c28:	0801c0c0 	call	801c0c <__unpack_d>
  806c2c:	d9000204 	addi	r4,sp,8
  806c30:	800b883a 	mov	r5,r16
  806c34:	0801c0c0 	call	801c0c <__unpack_d>
  806c38:	d8800417 	ldw	r2,16(sp)
  806c3c:	00c00044 	movi	r3,1
  806c40:	01bfffc4 	movi	r6,-1
  806c44:	1880062e 	bgeu	r3,r2,806c60 <__gtdf2+0x70>
  806c48:	d8800917 	ldw	r2,36(sp)
  806c4c:	8809883a 	mov	r4,r17
  806c50:	800b883a 	mov	r5,r16
  806c54:	1880022e 	bgeu	r3,r2,806c60 <__gtdf2+0x70>
  806c58:	080712c0 	call	80712c <__fpcmp_parts_d>
  806c5c:	100d883a 	mov	r6,r2
  806c60:	3005883a 	mov	r2,r6
  806c64:	dfc01017 	ldw	ra,64(sp)
  806c68:	dc400f17 	ldw	r17,60(sp)
  806c6c:	dc000e17 	ldw	r16,56(sp)
  806c70:	dec01104 	addi	sp,sp,68
  806c74:	f800283a 	ret

00806c78 <__gedf2>:
  806c78:	deffef04 	addi	sp,sp,-68
  806c7c:	dc400f15 	stw	r17,60(sp)
  806c80:	dc400404 	addi	r17,sp,16
  806c84:	2005883a 	mov	r2,r4
  806c88:	2807883a 	mov	r3,r5
  806c8c:	dc000e15 	stw	r16,56(sp)
  806c90:	d809883a 	mov	r4,sp
  806c94:	880b883a 	mov	r5,r17
  806c98:	dc000904 	addi	r16,sp,36
  806c9c:	d8c00115 	stw	r3,4(sp)
  806ca0:	d8800015 	stw	r2,0(sp)
  806ca4:	d9800215 	stw	r6,8(sp)
  806ca8:	dfc01015 	stw	ra,64(sp)
  806cac:	d9c00315 	stw	r7,12(sp)
  806cb0:	0801c0c0 	call	801c0c <__unpack_d>
  806cb4:	d9000204 	addi	r4,sp,8
  806cb8:	800b883a 	mov	r5,r16
  806cbc:	0801c0c0 	call	801c0c <__unpack_d>
  806cc0:	d8800417 	ldw	r2,16(sp)
  806cc4:	00c00044 	movi	r3,1
  806cc8:	01bfffc4 	movi	r6,-1
  806ccc:	1880062e 	bgeu	r3,r2,806ce8 <__gedf2+0x70>
  806cd0:	d8800917 	ldw	r2,36(sp)
  806cd4:	8809883a 	mov	r4,r17
  806cd8:	800b883a 	mov	r5,r16
  806cdc:	1880022e 	bgeu	r3,r2,806ce8 <__gedf2+0x70>
  806ce0:	080712c0 	call	80712c <__fpcmp_parts_d>
  806ce4:	100d883a 	mov	r6,r2
  806ce8:	3005883a 	mov	r2,r6
  806cec:	dfc01017 	ldw	ra,64(sp)
  806cf0:	dc400f17 	ldw	r17,60(sp)
  806cf4:	dc000e17 	ldw	r16,56(sp)
  806cf8:	dec01104 	addi	sp,sp,68
  806cfc:	f800283a 	ret

00806d00 <__ltdf2>:
  806d00:	deffef04 	addi	sp,sp,-68
  806d04:	dc400f15 	stw	r17,60(sp)
  806d08:	dc400404 	addi	r17,sp,16
  806d0c:	2005883a 	mov	r2,r4
  806d10:	2807883a 	mov	r3,r5
  806d14:	dc000e15 	stw	r16,56(sp)
  806d18:	d809883a 	mov	r4,sp
  806d1c:	880b883a 	mov	r5,r17
  806d20:	dc000904 	addi	r16,sp,36
  806d24:	d8c00115 	stw	r3,4(sp)
  806d28:	d8800015 	stw	r2,0(sp)
  806d2c:	d9800215 	stw	r6,8(sp)
  806d30:	dfc01015 	stw	ra,64(sp)
  806d34:	d9c00315 	stw	r7,12(sp)
  806d38:	0801c0c0 	call	801c0c <__unpack_d>
  806d3c:	d9000204 	addi	r4,sp,8
  806d40:	800b883a 	mov	r5,r16
  806d44:	0801c0c0 	call	801c0c <__unpack_d>
  806d48:	d8800417 	ldw	r2,16(sp)
  806d4c:	00c00044 	movi	r3,1
  806d50:	180d883a 	mov	r6,r3
  806d54:	1880062e 	bgeu	r3,r2,806d70 <__ltdf2+0x70>
  806d58:	d8800917 	ldw	r2,36(sp)
  806d5c:	8809883a 	mov	r4,r17
  806d60:	800b883a 	mov	r5,r16
  806d64:	1880022e 	bgeu	r3,r2,806d70 <__ltdf2+0x70>
  806d68:	080712c0 	call	80712c <__fpcmp_parts_d>
  806d6c:	100d883a 	mov	r6,r2
  806d70:	3005883a 	mov	r2,r6
  806d74:	dfc01017 	ldw	ra,64(sp)
  806d78:	dc400f17 	ldw	r17,60(sp)
  806d7c:	dc000e17 	ldw	r16,56(sp)
  806d80:	dec01104 	addi	sp,sp,68
  806d84:	f800283a 	ret

00806d88 <__ledf2>:
  806d88:	deffef04 	addi	sp,sp,-68
  806d8c:	dc400f15 	stw	r17,60(sp)
  806d90:	dc400404 	addi	r17,sp,16
  806d94:	2005883a 	mov	r2,r4
  806d98:	2807883a 	mov	r3,r5
  806d9c:	dc000e15 	stw	r16,56(sp)
  806da0:	d809883a 	mov	r4,sp
  806da4:	880b883a 	mov	r5,r17
  806da8:	dc000904 	addi	r16,sp,36
  806dac:	d8c00115 	stw	r3,4(sp)
  806db0:	d8800015 	stw	r2,0(sp)
  806db4:	d9800215 	stw	r6,8(sp)
  806db8:	dfc01015 	stw	ra,64(sp)
  806dbc:	d9c00315 	stw	r7,12(sp)
  806dc0:	0801c0c0 	call	801c0c <__unpack_d>
  806dc4:	d9000204 	addi	r4,sp,8
  806dc8:	800b883a 	mov	r5,r16
  806dcc:	0801c0c0 	call	801c0c <__unpack_d>
  806dd0:	d8800417 	ldw	r2,16(sp)
  806dd4:	00c00044 	movi	r3,1
  806dd8:	180d883a 	mov	r6,r3
  806ddc:	1880062e 	bgeu	r3,r2,806df8 <__ledf2+0x70>
  806de0:	d8800917 	ldw	r2,36(sp)
  806de4:	8809883a 	mov	r4,r17
  806de8:	800b883a 	mov	r5,r16
  806dec:	1880022e 	bgeu	r3,r2,806df8 <__ledf2+0x70>
  806df0:	080712c0 	call	80712c <__fpcmp_parts_d>
  806df4:	100d883a 	mov	r6,r2
  806df8:	3005883a 	mov	r2,r6
  806dfc:	dfc01017 	ldw	ra,64(sp)
  806e00:	dc400f17 	ldw	r17,60(sp)
  806e04:	dc000e17 	ldw	r16,56(sp)
  806e08:	dec01104 	addi	sp,sp,68
  806e0c:	f800283a 	ret

00806e10 <__floatsidf>:
  806e10:	2006d7fa 	srli	r3,r4,31
  806e14:	defff604 	addi	sp,sp,-40
  806e18:	008000c4 	movi	r2,3
  806e1c:	dfc00915 	stw	ra,36(sp)
  806e20:	dcc00815 	stw	r19,32(sp)
  806e24:	dc800715 	stw	r18,28(sp)
  806e28:	dc400615 	stw	r17,24(sp)
  806e2c:	dc000515 	stw	r16,20(sp)
  806e30:	d8800015 	stw	r2,0(sp)
  806e34:	d8c00115 	stw	r3,4(sp)
  806e38:	20000f1e 	bne	r4,zero,806e78 <__floatsidf+0x68>
  806e3c:	00800084 	movi	r2,2
  806e40:	d8800015 	stw	r2,0(sp)
  806e44:	d809883a 	mov	r4,sp
  806e48:	08018f80 	call	8018f8 <__pack_d>
  806e4c:	1009883a 	mov	r4,r2
  806e50:	180b883a 	mov	r5,r3
  806e54:	2005883a 	mov	r2,r4
  806e58:	2807883a 	mov	r3,r5
  806e5c:	dfc00917 	ldw	ra,36(sp)
  806e60:	dcc00817 	ldw	r19,32(sp)
  806e64:	dc800717 	ldw	r18,28(sp)
  806e68:	dc400617 	ldw	r17,24(sp)
  806e6c:	dc000517 	ldw	r16,20(sp)
  806e70:	dec00a04 	addi	sp,sp,40
  806e74:	f800283a 	ret
  806e78:	00800f04 	movi	r2,60
  806e7c:	1807003a 	cmpeq	r3,r3,zero
  806e80:	d8800215 	stw	r2,8(sp)
  806e84:	18001126 	beq	r3,zero,806ecc <__floatsidf+0xbc>
  806e88:	0027883a 	mov	r19,zero
  806e8c:	2025883a 	mov	r18,r4
  806e90:	d9000315 	stw	r4,12(sp)
  806e94:	dcc00415 	stw	r19,16(sp)
  806e98:	08016500 	call	801650 <__clzsi2>
  806e9c:	11000744 	addi	r4,r2,29
  806ea0:	013fe80e 	bge	zero,r4,806e44 <__floatsidf+0x34>
  806ea4:	10bfff44 	addi	r2,r2,-3
  806ea8:	10000c16 	blt	r2,zero,806edc <__floatsidf+0xcc>
  806eac:	90a2983a 	sll	r17,r18,r2
  806eb0:	0021883a 	mov	r16,zero
  806eb4:	d8800217 	ldw	r2,8(sp)
  806eb8:	dc400415 	stw	r17,16(sp)
  806ebc:	dc000315 	stw	r16,12(sp)
  806ec0:	1105c83a 	sub	r2,r2,r4
  806ec4:	d8800215 	stw	r2,8(sp)
  806ec8:	003fde06 	br	806e44 <__floatsidf+0x34>
  806ecc:	00a00034 	movhi	r2,32768
  806ed0:	20800a26 	beq	r4,r2,806efc <__floatsidf+0xec>
  806ed4:	0109c83a 	sub	r4,zero,r4
  806ed8:	003feb06 	br	806e88 <__floatsidf+0x78>
  806edc:	9006d07a 	srli	r3,r18,1
  806ee0:	008007c4 	movi	r2,31
  806ee4:	1105c83a 	sub	r2,r2,r4
  806ee8:	1886d83a 	srl	r3,r3,r2
  806eec:	9922983a 	sll	r17,r19,r4
  806ef0:	9120983a 	sll	r16,r18,r4
  806ef4:	1c62b03a 	or	r17,r3,r17
  806ef8:	003fee06 	br	806eb4 <__floatsidf+0xa4>
  806efc:	0009883a 	mov	r4,zero
  806f00:	01707834 	movhi	r5,49632
  806f04:	003fd306 	br	806e54 <__floatsidf+0x44>

00806f08 <__fixdfsi>:
  806f08:	defff804 	addi	sp,sp,-32
  806f0c:	2005883a 	mov	r2,r4
  806f10:	2807883a 	mov	r3,r5
  806f14:	d809883a 	mov	r4,sp
  806f18:	d9400204 	addi	r5,sp,8
  806f1c:	d8c00115 	stw	r3,4(sp)
  806f20:	d8800015 	stw	r2,0(sp)
  806f24:	dfc00715 	stw	ra,28(sp)
  806f28:	0801c0c0 	call	801c0c <__unpack_d>
  806f2c:	d8c00217 	ldw	r3,8(sp)
  806f30:	00800084 	movi	r2,2
  806f34:	1880051e 	bne	r3,r2,806f4c <__fixdfsi+0x44>
  806f38:	0007883a 	mov	r3,zero
  806f3c:	1805883a 	mov	r2,r3
  806f40:	dfc00717 	ldw	ra,28(sp)
  806f44:	dec00804 	addi	sp,sp,32
  806f48:	f800283a 	ret
  806f4c:	00800044 	movi	r2,1
  806f50:	10fff92e 	bgeu	r2,r3,806f38 <__fixdfsi+0x30>
  806f54:	00800104 	movi	r2,4
  806f58:	18800426 	beq	r3,r2,806f6c <__fixdfsi+0x64>
  806f5c:	d8c00417 	ldw	r3,16(sp)
  806f60:	183ff516 	blt	r3,zero,806f38 <__fixdfsi+0x30>
  806f64:	00800784 	movi	r2,30
  806f68:	10c0080e 	bge	r2,r3,806f8c <__fixdfsi+0x84>
  806f6c:	d8800317 	ldw	r2,12(sp)
  806f70:	1000121e 	bne	r2,zero,806fbc <__fixdfsi+0xb4>
  806f74:	00e00034 	movhi	r3,32768
  806f78:	18ffffc4 	addi	r3,r3,-1
  806f7c:	1805883a 	mov	r2,r3
  806f80:	dfc00717 	ldw	ra,28(sp)
  806f84:	dec00804 	addi	sp,sp,32
  806f88:	f800283a 	ret
  806f8c:	00800f04 	movi	r2,60
  806f90:	10d1c83a 	sub	r8,r2,r3
  806f94:	40bff804 	addi	r2,r8,-32
  806f98:	d9800517 	ldw	r6,20(sp)
  806f9c:	d9c00617 	ldw	r7,24(sp)
  806fa0:	10000816 	blt	r2,zero,806fc4 <__fixdfsi+0xbc>
  806fa4:	3888d83a 	srl	r4,r7,r2
  806fa8:	d8800317 	ldw	r2,12(sp)
  806fac:	2007883a 	mov	r3,r4
  806fb0:	103fe226 	beq	r2,zero,806f3c <__fixdfsi+0x34>
  806fb4:	0107c83a 	sub	r3,zero,r4
  806fb8:	003fe006 	br	806f3c <__fixdfsi+0x34>
  806fbc:	00e00034 	movhi	r3,32768
  806fc0:	003fde06 	br	806f3c <__fixdfsi+0x34>
  806fc4:	39c7883a 	add	r3,r7,r7
  806fc8:	008007c4 	movi	r2,31
  806fcc:	1205c83a 	sub	r2,r2,r8
  806fd0:	1886983a 	sll	r3,r3,r2
  806fd4:	3208d83a 	srl	r4,r6,r8
  806fd8:	1908b03a 	or	r4,r3,r4
  806fdc:	003ff206 	br	806fa8 <__fixdfsi+0xa0>

00806fe0 <udivmodsi4>:
  806fe0:	29001b2e 	bgeu	r5,r4,807050 <udivmodsi4+0x70>
  806fe4:	28001a16 	blt	r5,zero,807050 <udivmodsi4+0x70>
  806fe8:	00800044 	movi	r2,1
  806fec:	0007883a 	mov	r3,zero
  806ff0:	01c007c4 	movi	r7,31
  806ff4:	00000306 	br	807004 <udivmodsi4+0x24>
  806ff8:	19c01326 	beq	r3,r7,807048 <udivmodsi4+0x68>
  806ffc:	18c00044 	addi	r3,r3,1
  807000:	28000416 	blt	r5,zero,807014 <udivmodsi4+0x34>
  807004:	294b883a 	add	r5,r5,r5
  807008:	1085883a 	add	r2,r2,r2
  80700c:	293ffa36 	bltu	r5,r4,806ff8 <udivmodsi4+0x18>
  807010:	10000d26 	beq	r2,zero,807048 <udivmodsi4+0x68>
  807014:	0007883a 	mov	r3,zero
  807018:	21400236 	bltu	r4,r5,807024 <udivmodsi4+0x44>
  80701c:	2149c83a 	sub	r4,r4,r5
  807020:	1886b03a 	or	r3,r3,r2
  807024:	1004d07a 	srli	r2,r2,1
  807028:	280ad07a 	srli	r5,r5,1
  80702c:	103ffa1e 	bne	r2,zero,807018 <udivmodsi4+0x38>
  807030:	30000226 	beq	r6,zero,80703c <udivmodsi4+0x5c>
  807034:	2005883a 	mov	r2,r4
  807038:	f800283a 	ret
  80703c:	1809883a 	mov	r4,r3
  807040:	2005883a 	mov	r2,r4
  807044:	f800283a 	ret
  807048:	0007883a 	mov	r3,zero
  80704c:	003ff806 	br	807030 <udivmodsi4+0x50>
  807050:	00800044 	movi	r2,1
  807054:	0007883a 	mov	r3,zero
  807058:	003fef06 	br	807018 <udivmodsi4+0x38>

0080705c <__divsi3>:
  80705c:	defffe04 	addi	sp,sp,-8
  807060:	dc000015 	stw	r16,0(sp)
  807064:	dfc00115 	stw	ra,4(sp)
  807068:	0021883a 	mov	r16,zero
  80706c:	20000c16 	blt	r4,zero,8070a0 <__divsi3+0x44>
  807070:	000d883a 	mov	r6,zero
  807074:	28000e16 	blt	r5,zero,8070b0 <__divsi3+0x54>
  807078:	0806fe00 	call	806fe0 <udivmodsi4>
  80707c:	1007883a 	mov	r3,r2
  807080:	8005003a 	cmpeq	r2,r16,zero
  807084:	1000011e 	bne	r2,zero,80708c <__divsi3+0x30>
  807088:	00c7c83a 	sub	r3,zero,r3
  80708c:	1805883a 	mov	r2,r3
  807090:	dfc00117 	ldw	ra,4(sp)
  807094:	dc000017 	ldw	r16,0(sp)
  807098:	dec00204 	addi	sp,sp,8
  80709c:	f800283a 	ret
  8070a0:	0109c83a 	sub	r4,zero,r4
  8070a4:	04000044 	movi	r16,1
  8070a8:	000d883a 	mov	r6,zero
  8070ac:	283ff20e 	bge	r5,zero,807078 <__divsi3+0x1c>
  8070b0:	014bc83a 	sub	r5,zero,r5
  8070b4:	8021003a 	cmpeq	r16,r16,zero
  8070b8:	003fef06 	br	807078 <__divsi3+0x1c>

008070bc <__modsi3>:
  8070bc:	deffff04 	addi	sp,sp,-4
  8070c0:	dfc00015 	stw	ra,0(sp)
  8070c4:	01800044 	movi	r6,1
  8070c8:	2807883a 	mov	r3,r5
  8070cc:	20000416 	blt	r4,zero,8070e0 <__modsi3+0x24>
  8070d0:	28000c16 	blt	r5,zero,807104 <__modsi3+0x48>
  8070d4:	dfc00017 	ldw	ra,0(sp)
  8070d8:	dec00104 	addi	sp,sp,4
  8070dc:	0806fe01 	jmpi	806fe0 <udivmodsi4>
  8070e0:	0109c83a 	sub	r4,zero,r4
  8070e4:	28000b16 	blt	r5,zero,807114 <__modsi3+0x58>
  8070e8:	180b883a 	mov	r5,r3
  8070ec:	01800044 	movi	r6,1
  8070f0:	0806fe00 	call	806fe0 <udivmodsi4>
  8070f4:	0085c83a 	sub	r2,zero,r2
  8070f8:	dfc00017 	ldw	ra,0(sp)
  8070fc:	dec00104 	addi	sp,sp,4
  807100:	f800283a 	ret
  807104:	014bc83a 	sub	r5,zero,r5
  807108:	dfc00017 	ldw	ra,0(sp)
  80710c:	dec00104 	addi	sp,sp,4
  807110:	0806fe01 	jmpi	806fe0 <udivmodsi4>
  807114:	0147c83a 	sub	r3,zero,r5
  807118:	003ff306 	br	8070e8 <__modsi3+0x2c>

0080711c <__udivsi3>:
  80711c:	000d883a 	mov	r6,zero
  807120:	0806fe01 	jmpi	806fe0 <udivmodsi4>

00807124 <__umodsi3>:
  807124:	01800044 	movi	r6,1
  807128:	0806fe01 	jmpi	806fe0 <udivmodsi4>

0080712c <__fpcmp_parts_d>:
  80712c:	21800017 	ldw	r6,0(r4)
  807130:	00c00044 	movi	r3,1
  807134:	19800a2e 	bgeu	r3,r6,807160 <__fpcmp_parts_d+0x34>
  807138:	28800017 	ldw	r2,0(r5)
  80713c:	1880082e 	bgeu	r3,r2,807160 <__fpcmp_parts_d+0x34>
  807140:	00c00104 	movi	r3,4
  807144:	30c02626 	beq	r6,r3,8071e0 <__fpcmp_parts_d+0xb4>
  807148:	10c02226 	beq	r2,r3,8071d4 <__fpcmp_parts_d+0xa8>
  80714c:	00c00084 	movi	r3,2
  807150:	30c00526 	beq	r6,r3,807168 <__fpcmp_parts_d+0x3c>
  807154:	10c0071e 	bne	r2,r3,807174 <__fpcmp_parts_d+0x48>
  807158:	20800117 	ldw	r2,4(r4)
  80715c:	1000091e 	bne	r2,zero,807184 <__fpcmp_parts_d+0x58>
  807160:	00800044 	movi	r2,1
  807164:	f800283a 	ret
  807168:	10c01a1e 	bne	r2,r3,8071d4 <__fpcmp_parts_d+0xa8>
  80716c:	0005883a 	mov	r2,zero
  807170:	f800283a 	ret
  807174:	22000117 	ldw	r8,4(r4)
  807178:	28800117 	ldw	r2,4(r5)
  80717c:	40800326 	beq	r8,r2,80718c <__fpcmp_parts_d+0x60>
  807180:	403ff726 	beq	r8,zero,807160 <__fpcmp_parts_d+0x34>
  807184:	00bfffc4 	movi	r2,-1
  807188:	f800283a 	ret
  80718c:	20c00217 	ldw	r3,8(r4)
  807190:	28800217 	ldw	r2,8(r5)
  807194:	10fffa16 	blt	r2,r3,807180 <__fpcmp_parts_d+0x54>
  807198:	18800916 	blt	r3,r2,8071c0 <__fpcmp_parts_d+0x94>
  80719c:	21c00417 	ldw	r7,16(r4)
  8071a0:	28c00417 	ldw	r3,16(r5)
  8071a4:	21800317 	ldw	r6,12(r4)
  8071a8:	28800317 	ldw	r2,12(r5)
  8071ac:	19fff436 	bltu	r3,r7,807180 <__fpcmp_parts_d+0x54>
  8071b0:	38c00526 	beq	r7,r3,8071c8 <__fpcmp_parts_d+0x9c>
  8071b4:	38c00236 	bltu	r7,r3,8071c0 <__fpcmp_parts_d+0x94>
  8071b8:	19ffec1e 	bne	r3,r7,80716c <__fpcmp_parts_d+0x40>
  8071bc:	30bfeb2e 	bgeu	r6,r2,80716c <__fpcmp_parts_d+0x40>
  8071c0:	403fe71e 	bne	r8,zero,807160 <__fpcmp_parts_d+0x34>
  8071c4:	003fef06 	br	807184 <__fpcmp_parts_d+0x58>
  8071c8:	11bffa2e 	bgeu	r2,r6,8071b4 <__fpcmp_parts_d+0x88>
  8071cc:	403fe426 	beq	r8,zero,807160 <__fpcmp_parts_d+0x34>
  8071d0:	003fec06 	br	807184 <__fpcmp_parts_d+0x58>
  8071d4:	28800117 	ldw	r2,4(r5)
  8071d8:	103fe11e 	bne	r2,zero,807160 <__fpcmp_parts_d+0x34>
  8071dc:	003fe906 	br	807184 <__fpcmp_parts_d+0x58>
  8071e0:	11bfdd1e 	bne	r2,r6,807158 <__fpcmp_parts_d+0x2c>
  8071e4:	28c00117 	ldw	r3,4(r5)
  8071e8:	20800117 	ldw	r2,4(r4)
  8071ec:	1885c83a 	sub	r2,r3,r2
  8071f0:	f800283a 	ret

008071f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8071f4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8071f8:	01002074 	movhi	r4,129
  8071fc:	212efd04 	addi	r4,r4,-17420
  807200:	00c02074 	movhi	r3,129
  807204:	18e86b04 	addi	r3,r3,-24148
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  807208:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80720c:	20c00826 	beq	r4,r3,807230 <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  807210:	01402074 	movhi	r5,129
  807214:	296efd04 	addi	r5,r5,-17420
  {
    while( to != end )
  807218:	19400526 	beq	r3,r5,807230 <alt_load+0x3c>
    {
      *to++ = *from++;
  80721c:	20800017 	ldw	r2,0(r4)
  807220:	21000104 	addi	r4,r4,4
  807224:	18800015 	stw	r2,0(r3)
  807228:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80722c:	28fffb1e 	bne	r5,r3,80721c <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807230:	01002034 	movhi	r4,128
  807234:	21000804 	addi	r4,r4,32
  807238:	00c02034 	movhi	r3,128
  80723c:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  807240:	20c00826 	beq	r4,r3,807264 <alt_load+0x70>
  807244:	01402034 	movhi	r5,128
  807248:	29406104 	addi	r5,r5,388
  {
    while( to != end )
  80724c:	19400526 	beq	r3,r5,807264 <alt_load+0x70>
    {
      *to++ = *from++;
  807250:	20800017 	ldw	r2,0(r4)
  807254:	21000104 	addi	r4,r4,4
  807258:	18800015 	stw	r2,0(r3)
  80725c:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807260:	28fffb1e 	bne	r5,r3,807250 <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  807264:	01002074 	movhi	r4,129
  807268:	2127be04 	addi	r4,r4,-24840
  80726c:	00c02074 	movhi	r3,129
  807270:	18e7be04 	addi	r3,r3,-24840

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  807274:	20c00826 	beq	r4,r3,807298 <alt_load+0xa4>
  807278:	01402074 	movhi	r5,129
  80727c:	29686b04 	addi	r5,r5,-24148
  {
    while( to != end )
  807280:	19400526 	beq	r3,r5,807298 <alt_load+0xa4>
    {
      *to++ = *from++;
  807284:	20800017 	ldw	r2,0(r4)
  807288:	21000104 	addi	r4,r4,4
  80728c:	18800015 	stw	r2,0(r3)
  807290:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  807294:	28fffb1e 	bne	r5,r3,807284 <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  807298:	0807d680 	call	807d68 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  80729c:	dfc00017 	ldw	ra,0(sp)
  8072a0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8072a4:	0807df01 	jmpi	807df0 <alt_icache_flush_all>

008072a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8072a8:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8072ac:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8072b0:	dfc00115 	stw	ra,4(sp)
  8072b4:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8072b8:	080755c0 	call	80755c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8072bc:	08075040 	call	807504 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8072c0:	01002074 	movhi	r4,129
  8072c4:	21286404 	addi	r4,r4,-24176
  8072c8:	200b883a 	mov	r5,r4
  8072cc:	200d883a 	mov	r6,r4
  8072d0:	0807f200 	call	807f20 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8072d4:	d126a417 	ldw	r4,-25968(gp)
  8072d8:	d166a517 	ldw	r5,-25964(gp)
  8072dc:	d1a6a617 	ldw	r6,-25960(gp)
  8072e0:	08004d40 	call	8004d4 <main>
  8072e4:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  8072e8:	01000044 	movi	r4,1
  8072ec:	0807c780 	call	807c78 <close>
  exit (result);
  8072f0:	8809883a 	mov	r4,r17
  8072f4:	08083ac0 	call	8083ac <exit>

008072f8 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
  8072f8:	f800283a 	ret

008072fc <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
  8072fc:	f800283a 	ret

00807300 <alt_putstr>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  807300:	00802074 	movhi	r2,129
  807304:	10aeef04 	addi	r2,r2,-17476
  807308:	10c00017 	ldw	r3,0(r2)
  80730c:	19400217 	ldw	r5,8(r3)
  807310:	08084581 	jmpi	808458 <fputs>

00807314 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807314:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807318:	00bfff84 	movi	r2,-2
  80731c:	2884703a 	and	r2,r5,r2
  807320:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807324:	d0e00417 	ldw	r3,-32752(gp)
  807328:	00bfff04 	movi	r2,-4
  80732c:	18c000c4 	addi	r3,r3,3
  807330:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  807334:	1909883a 	add	r4,r3,r4
  807338:	00804034 	movhi	r2,256
  80733c:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  807340:	d0e00415 	stw	r3,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  807344:	1100042e 	bgeu	r2,r4,807358 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807348:	2801703a 	wrctl	status,r5
  80734c:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  807350:	1805883a 	mov	r2,r3
  807354:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  807358:	d1200415 	stw	r4,-32752(gp)
  80735c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  807360:	1805883a 	mov	r2,r3
  807364:	f800283a 	ret

00807368 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807368:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80736c:	00bfff84 	movi	r2,-2
  807370:	3084703a 	and	r2,r6,r2
  807374:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  807378:	21400017 	ldw	r5,0(r4)
  80737c:	20800117 	ldw	r2,4(r4)
  807380:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  807384:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  807388:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  80738c:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  807390:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807394:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  807398:	f800283a 	ret

0080739c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80739c:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8073a0:	d0a6a817 	ldw	r2,-25952(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8073a4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8073a8:	d4200517 	ldw	r16,-32748(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8073ac:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8073b0:	10800044 	addi	r2,r2,1
  8073b4:	d4a00504 	addi	r18,gp,-32748
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8073b8:	dfc00315 	stw	ra,12(sp)
  8073bc:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8073c0:	d0a6a815 	stw	r2,-25952(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8073c4:	84800d26 	beq	r16,r18,8073fc <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8073c8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  8073cc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8073d0:	10000326 	beq	r2,zero,8073e0 <alt_tick+0x44>
  8073d4:	d0a6a817 	ldw	r2,-25952(gp)
  8073d8:	1000011e 	bne	r2,zero,8073e0 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  8073dc:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8073e0:	d0e6a817 	ldw	r3,-25952(gp)
  8073e4:	80800217 	ldw	r2,8(r16)
  8073e8:	18800236 	bltu	r3,r2,8073f4 <alt_tick+0x58>
  8073ec:	80800403 	ldbu	r2,16(r16)
  8073f0:	10000826 	beq	r2,zero,807414 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  8073f4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8073f8:	84bff31e 	bne	r16,r18,8073c8 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8073fc:	dfc00317 	ldw	ra,12(sp)
  807400:	dc800217 	ldw	r18,8(sp)
  807404:	dc400117 	ldw	r17,4(sp)
  807408:	dc000017 	ldw	r16,0(sp)
  80740c:	dec00404 	addi	sp,sp,16
  807410:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  807414:	81000517 	ldw	r4,20(r16)
  807418:	80c00317 	ldw	r3,12(r16)
  80741c:	183ee83a 	callr	r3
  807420:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  807424:	10000926 	beq	r2,zero,80744c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  807428:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80742c:	d0e6a817 	ldw	r3,-25952(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  807430:	2085883a 	add	r2,r4,r2
  807434:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807438:	10ffee2e 	bgeu	r2,r3,8073f4 <alt_tick+0x58>
        {
          alarm->rollover = 1;
  80743c:	00800044 	movi	r2,1
  807440:	80800405 	stb	r2,16(r16)
  807444:	8821883a 	mov	r16,r17
  807448:	003feb06 	br	8073f8 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80744c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807450:	00bfff84 	movi	r2,-2
  807454:	2884703a 	and	r2,r5,r2
  807458:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80745c:	81000017 	ldw	r4,0(r16)
  807460:	80800117 	ldw	r2,4(r16)
  807464:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  807468:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80746c:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  807470:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  807474:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807478:	2801703a 	wrctl	status,r5
  80747c:	8821883a 	mov	r16,r17
  807480:	003fdd06 	br	8073f8 <alt_tick+0x5c>

00807484 <times>:
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  807484:	00802074 	movhi	r2,129
  807488:	10b59604 	addi	r2,r2,-10664
  80748c:	11400017 	ldw	r5,0(r2)
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  807490:	deffff04 	addi	sp,sp,-4
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  807494:	00c02074 	movhi	r3,129
  807498:	18f59704 	addi	r3,r3,-10660
  80749c:	dfc00015 	stw	ra,0(sp)
  8074a0:	18c00017 	ldw	r3,0(r3)
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8074a4:	28000f1e 	bne	r5,zero,8074e4 <times+0x60>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8074a8:	00802074 	movhi	r2,129
  8074ac:	10aefb04 	addi	r2,r2,-17428
  8074b0:	10800017 	ldw	r2,0(r2)
  8074b4:	01002074 	movhi	r4,129
  8074b8:	21359204 	addi	r4,r4,-10680
  8074bc:	10000226 	beq	r2,zero,8074c8 <times+0x44>
  8074c0:	103ee83a 	callr	r2
  8074c4:	1009883a 	mov	r4,r2
  {
    ALT_ERRNO = ENOSYS;
  8074c8:	0007883a 	mov	r3,zero
  8074cc:	00801604 	movi	r2,88
  8074d0:	20800015 	stw	r2,0(r4)
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
  8074d4:	1805883a 	mov	r2,r3
  8074d8:	dfc00017 	ldw	ra,0(sp)
  8074dc:	dec00104 	addi	sp,sp,4
  8074e0:	f800283a 	ret
  8074e4:	1805883a 	mov	r2,r3
  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;
  8074e8:	20000315 	stw	zero,12(r4)
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  8074ec:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
  8074f0:	20c00115 	stw	r3,4(r4)
  buf->tms_cutime = 0;
  8074f4:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;

  return ticks;
}
  8074f8:	dfc00017 	ldw	ra,0(sp)
  8074fc:	dec00104 	addi	sp,sp,4
  807500:	f800283a 	ret

00807504 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807504:	defffe04 	addi	sp,sp,-8
  807508:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80750c:	01c0fa04 	movi	r7,1000
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807510:	04002074 	movhi	r16,129
  807514:	842a7704 	addi	r16,r16,-22052
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  807518:	01004034 	movhi	r4,256
  80751c:	21040004 	addi	r4,r4,4096
  807520:	000b883a 	mov	r5,zero
  807524:	01800044 	movi	r6,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807528:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80752c:	0807b580 	call	807b58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  807530:	8009883a 	mov	r4,r16
  807534:	000b883a 	mov	r5,zero
  807538:	01800404 	movi	r6,16
  80753c:	08076580 	call	807658 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807540:	813ff604 	addi	r4,r16,-40
  807544:	01402074 	movhi	r5,129
  807548:	296ef804 	addi	r5,r5,-17440
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  80754c:	dfc00117 	ldw	ra,4(sp)
  807550:	dc000017 	ldw	r16,0(sp)
  807554:	dec00204 	addi	sp,sp,8
  807558:	0807d741 	jmpi	807d74 <alt_dev_llist_insert>

0080755c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80755c:	deffff04 	addi	sp,sp,-4
  807560:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  807564:	08081c80 	call	8081c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807568:	00800044 	movi	r2,1
  80756c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  807570:	dfc00017 	ldw	ra,0(sp)
  807574:	dec00104 	addi	sp,sp,4
  807578:	f800283a 	ret

0080757c <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80757c:	21000017 	ldw	r4,0(r4)
  807580:	21000a04 	addi	r4,r4,40
  807584:	08077e01 	jmpi	8077e0 <altera_avalon_jtag_uart_ioctl>

00807588 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  807588:	20800017 	ldw	r2,0(r4)
  80758c:	21400217 	ldw	r5,8(r4)
  807590:	11000a04 	addi	r4,r2,40
  807594:	08075b81 	jmpi	8075b8 <altera_avalon_jtag_uart_close>

00807598 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  807598:	20800017 	ldw	r2,0(r4)
  80759c:	21c00217 	ldw	r7,8(r4)
  8075a0:	11000a04 	addi	r4,r2,40
  8075a4:	08079d41 	jmpi	8079d4 <altera_avalon_jtag_uart_write>

008075a8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8075a8:	20800017 	ldw	r2,0(r4)
  8075ac:	21c00217 	ldw	r7,8(r4)
  8075b0:	11000a04 	addi	r4,r2,40
  8075b4:	08078681 	jmpi	807868 <altera_avalon_jtag_uart_read>

008075b8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8075b8:	2950000c 	andi	r5,r5,16384
  8075bc:	21800c17 	ldw	r6,48(r4)
  8075c0:	28000426 	beq	r5,zero,8075d4 <altera_avalon_jtag_uart_close+0x1c>
  8075c4:	00000706 	br	8075e4 <altera_avalon_jtag_uart_close+0x2c>
  8075c8:	20c00917 	ldw	r3,36(r4)
  8075cc:	20800117 	ldw	r2,4(r4)
  8075d0:	1880022e 	bgeu	r3,r2,8075dc <altera_avalon_jtag_uart_close+0x24>
  8075d4:	20800d17 	ldw	r2,52(r4)
  8075d8:	11bffb1e 	bne	r2,r6,8075c8 <altera_avalon_jtag_uart_close+0x10>
  8075dc:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  8075e0:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8075e4:	20800d17 	ldw	r2,52(r4)
  8075e8:	11bffc26 	beq	r2,r6,8075dc <altera_avalon_jtag_uart_close+0x24>
  8075ec:	20c00117 	ldw	r3,4(r4)
  8075f0:	20800917 	ldw	r2,36(r4)
  8075f4:	10fff92e 	bgeu	r2,r3,8075dc <altera_avalon_jtag_uart_close+0x24>
  8075f8:	00bffd44 	movi	r2,-11
  8075fc:	f800283a 	ret

00807600 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  807600:	20c00017 	ldw	r3,0(r4)
  807604:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  807608:	1081000c 	andi	r2,r2,1024
  80760c:	10000a1e 	bne	r2,zero,807638 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807610:	20c00917 	ldw	r3,36(r4)
  807614:	00a00034 	movhi	r2,32768
  807618:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  80761c:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807620:	10c00136 	bltu	r2,r3,807628 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  807624:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  807628:	00c02074 	movhi	r3,129
  80762c:	18f59604 	addi	r3,r3,-10664
  807630:	18800017 	ldw	r2,0(r3)
  807634:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  807638:	20800817 	ldw	r2,32(r4)
  80763c:	10810014 	ori	r2,r2,1024
  807640:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  807644:	00c02074 	movhi	r3,129
  807648:	18f59604 	addi	r3,r3,-10664
  80764c:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  807650:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  807654:	f800283a 	ret

00807658 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  807658:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80765c:	defffd04 	addi	sp,sp,-12
  807660:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807664:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  807668:	2021883a 	mov	r16,r4
  80766c:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807670:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  807674:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  807678:	2809883a 	mov	r4,r5
  80767c:	800f883a 	mov	r7,r16
  807680:	300b883a 	mov	r5,r6
  807684:	01802034 	movhi	r6,128
  807688:	319db604 	addi	r6,r6,30424
  80768c:	d8000015 	stw	zero,0(sp)
  807690:	0807e940 	call	807e94 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  807694:	00c02074 	movhi	r3,129
  807698:	18f59604 	addi	r3,r3,-10664
  80769c:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8076a0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8076a4:	81000204 	addi	r4,r16,8
  8076a8:	01802034 	movhi	r6,128
  8076ac:	319d8004 	addi	r6,r6,30208
  8076b0:	800f883a 	mov	r7,r16
  8076b4:	0807be40 	call	807be4 <alt_alarm_start>
  8076b8:	1000030e 	bge	r2,zero,8076c8 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8076bc:	00a00034 	movhi	r2,32768
  8076c0:	10bfffc4 	addi	r2,r2,-1
  8076c4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8076c8:	dfc00217 	ldw	ra,8(sp)
  8076cc:	dc000117 	ldw	r16,4(sp)
  8076d0:	dec00304 	addi	sp,sp,12
  8076d4:	f800283a 	ret

008076d8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  8076d8:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8076dc:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  8076e0:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8076e4:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8076e8:	4880c00c 	andi	r2,r9,768
  8076ec:	10003426 	beq	r2,zero,8077c0 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8076f0:	4880400c 	andi	r2,r9,256
  8076f4:	10001626 	beq	r2,zero,807750 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8076f8:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  8076fc:	2a000b17 	ldw	r8,44(r5)
  807700:	10800044 	addi	r2,r2,1
  807704:	1081ffcc 	andi	r2,r2,2047
  807708:	12000c1e 	bne	r2,r8,80773c <altera_avalon_jtag_uart_irq+0x64>
  80770c:	00002d06 	br	8077c4 <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807710:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807714:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  807718:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80771c:	18c00044 	addi	r3,r3,1
  807720:	18c1ffcc 	andi	r3,r3,2047
  807724:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807728:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80772c:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  807730:	21000044 	addi	r4,r4,1
  807734:	2101ffcc 	andi	r4,r4,2047
  807738:	22000326 	beq	r4,r8,807748 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80773c:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  807740:	30a0000c 	andi	r2,r6,32768
  807744:	103ff21e 	bne	r2,zero,807710 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  807748:	30bfffec 	andhi	r2,r6,65535
  80774c:	10001d1e 	bne	r2,zero,8077c4 <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  807750:	4880800c 	andi	r2,r9,512
  807754:	103fe326 	beq	r2,zero,8076e4 <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  807758:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  80775c:	20000b1e 	bne	r4,zero,80778c <altera_avalon_jtag_uart_irq+0xb4>
  807760:	003fe006 	br	8076e4 <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  807764:	28800d17 	ldw	r2,52(r5)
  807768:	1145883a 	add	r2,r2,r5
  80776c:	10c20e07 	ldb	r3,2104(r2)
  807770:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807774:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  807778:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80777c:	10800044 	addi	r2,r2,1
  807780:	1081ffcc 	andi	r2,r2,2047
  807784:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  807788:	203fd626 	beq	r4,zero,8076e4 <altera_avalon_jtag_uart_irq+0xc>
  80778c:	28c00d17 	ldw	r3,52(r5)
  807790:	28800c17 	ldw	r2,48(r5)
  807794:	18bff31e 	bne	r3,r2,807764 <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807798:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80779c:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8077a0:	00ffff44 	movi	r3,-3
  8077a4:	10c4703a 	and	r2,r2,r3
  8077a8:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8077ac:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8077b0:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8077b4:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8077b8:	4880c00c 	andi	r2,r9,768
  8077bc:	103fcc1e 	bne	r2,zero,8076f0 <altera_avalon_jtag_uart_irq+0x18>
  8077c0:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8077c4:	28800817 	ldw	r2,32(r5)
  8077c8:	00ffff84 	movi	r3,-2
  8077cc:	10c4703a 	and	r2,r2,r3
  8077d0:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8077d4:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8077d8:	50c00037 	ldwio	r3,0(r10)
  8077dc:	003fdc06 	br	807750 <altera_avalon_jtag_uart_irq+0x78>

008077e0 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  8077e0:	009a8044 	movi	r2,27137
  8077e4:	28800f26 	beq	r5,r2,807824 <altera_avalon_jtag_uart_ioctl+0x44>
  8077e8:	009a8084 	movi	r2,27138
  8077ec:	28800326 	beq	r5,r2,8077fc <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8077f0:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  8077f4:	1805883a 	mov	r2,r3
  8077f8:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8077fc:	21400117 	ldw	r5,4(r4)
  807800:	00a00034 	movhi	r2,32768
  807804:	10bfffc4 	addi	r2,r2,-1
  807808:	28bff926 	beq	r5,r2,8077f0 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80780c:	20800917 	ldw	r2,36(r4)
  807810:	0007883a 	mov	r3,zero
  807814:	1145803a 	cmpltu	r2,r2,r5
  807818:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  80781c:	1805883a 	mov	r2,r3
  807820:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  807824:	20c00117 	ldw	r3,4(r4)
  807828:	00a00034 	movhi	r2,32768
  80782c:	10bfffc4 	addi	r2,r2,-1
  807830:	18bfef26 	beq	r3,r2,8077f0 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  807834:	31800017 	ldw	r6,0(r6)
  807838:	10bfff44 	addi	r2,r2,-3
  80783c:	30ffff84 	addi	r3,r6,-2
  807840:	10c00436 	bltu	r2,r3,807854 <altera_avalon_jtag_uart_ioctl+0x74>
  807844:	0007883a 	mov	r3,zero
  807848:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  80784c:	1805883a 	mov	r2,r3
  807850:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  807854:	01a00034 	movhi	r6,32768
  807858:	31bfff84 	addi	r6,r6,-2
  80785c:	0007883a 	mov	r3,zero
  807860:	21800115 	stw	r6,4(r4)
  807864:	003ff906 	br	80784c <altera_avalon_jtag_uart_ioctl+0x6c>

00807868 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  807868:	defff404 	addi	sp,sp,-48
  80786c:	dd400715 	stw	r21,28(sp)
  807870:	dcc00515 	stw	r19,20(sp)
  807874:	dfc00b15 	stw	ra,44(sp)
  807878:	df000a15 	stw	fp,40(sp)
  80787c:	ddc00915 	stw	r23,36(sp)
  807880:	dd800815 	stw	r22,32(sp)
  807884:	dd000615 	stw	r20,24(sp)
  807888:	dc800415 	stw	r18,16(sp)
  80788c:	dc400315 	stw	r17,12(sp)
  807890:	dc000215 	stw	r16,8(sp)
  807894:	302b883a 	mov	r21,r6
  807898:	2027883a 	mov	r19,r4
  80789c:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8078a0:	0180480e 	bge	zero,r6,8079c4 <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8078a4:	39d0000c 	andi	r7,r7,16384
  8078a8:	d9c00015 	stw	r7,0(sp)
  8078ac:	dd000117 	ldw	r20,4(sp)
  8078b0:	07020004 	movi	fp,2048
  8078b4:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  8078b8:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8078bc:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8078c0:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  8078c4:	b4400136 	bltu	r22,r17,8078cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8078c8:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  8078cc:	a009883a 	mov	r4,r20
  8078d0:	bc4b883a 	add	r5,r23,r17
  8078d4:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  8078d8:	80000826 	beq	r16,zero,8078fc <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  8078dc:	ac002036 	bltu	r21,r16,807960 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  8078e0:	08026a80 	call	8026a8 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8078e4:	8445883a 	add	r2,r16,r17
  8078e8:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  8078ec:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8078f0:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  8078f4:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  8078f8:	057fef16 	blt	zero,r21,8078b8 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  8078fc:	d8800117 	ldw	r2,4(sp)
  807900:	a080231e 	bne	r20,r2,807990 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  807904:	d8c00017 	ldw	r3,0(sp)
  807908:	1800301e 	bne	r3,zero,8079cc <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80790c:	98800a17 	ldw	r2,40(r19)
  807910:	b080031e 	bne	r22,r2,807920 <altera_avalon_jtag_uart_read+0xb8>
  807914:	98c00917 	ldw	r3,36(r19)
  807918:	98800117 	ldw	r2,4(r19)
  80791c:	18bffb36 	bltu	r3,r2,80790c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  807920:	98800a17 	ldw	r2,40(r19)
  807924:	b0800126 	beq	r22,r2,80792c <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807928:	057fe016 	blt	zero,r21,8078ac <altera_avalon_jtag_uart_read+0x44>
  80792c:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  807930:	dfc00b17 	ldw	ra,44(sp)
  807934:	df000a17 	ldw	fp,40(sp)
  807938:	ddc00917 	ldw	r23,36(sp)
  80793c:	dd800817 	ldw	r22,32(sp)
  807940:	dd400717 	ldw	r21,28(sp)
  807944:	dd000617 	ldw	r20,24(sp)
  807948:	dcc00517 	ldw	r19,20(sp)
  80794c:	dc800417 	ldw	r18,16(sp)
  807950:	dc400317 	ldw	r17,12(sp)
  807954:	dc000217 	ldw	r16,8(sp)
  807958:	dec00c04 	addi	sp,sp,48
  80795c:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  807960:	99400e04 	addi	r5,r19,56
  807964:	a009883a 	mov	r4,r20
  807968:	a80d883a 	mov	r6,r21
  80796c:	894b883a 	add	r5,r17,r5
  807970:	08026a80 	call	8026a8 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  807974:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807978:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80797c:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807980:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  807984:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807988:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80798c:	a0bfdd26 	beq	r20,r2,807904 <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807990:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807994:	00bfff84 	movi	r2,-2
  807998:	2084703a 	and	r2,r4,r2
  80799c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8079a0:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8079a4:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8079a8:	18c00054 	ori	r3,r3,1
  8079ac:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8079b0:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8079b4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  8079b8:	d8c00117 	ldw	r3,4(sp)
  8079bc:	a0c5c83a 	sub	r2,r20,r3
  8079c0:	003fdb06 	br	807930 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  8079c4:	3890000c 	andi	r2,r7,16384
  8079c8:	103fd826 	beq	r2,zero,80792c <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8079cc:	00bffd44 	movi	r2,-11
  8079d0:	003fd706 	br	807930 <altera_avalon_jtag_uart_read+0xc8>

008079d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8079d4:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8079d8:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8079dc:	ddc00715 	stw	r23,28(sp)
  8079e0:	dd800615 	stw	r22,24(sp)
  8079e4:	dcc00315 	stw	r19,12(sp)
  8079e8:	dc000015 	stw	r16,0(sp)
  8079ec:	dfc00815 	stw	ra,32(sp)
  8079f0:	dd400515 	stw	r21,20(sp)
  8079f4:	dd000415 	stw	r20,16(sp)
  8079f8:	dc800215 	stw	r18,8(sp)
  8079fc:	dc400115 	stw	r17,4(sp)
  807a00:	3027883a 	mov	r19,r6
  807a04:	2021883a 	mov	r16,r4
  807a08:	282d883a 	mov	r22,r5
  807a0c:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807a10:	40004926 	beq	r8,zero,807b38 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  807a14:	3d50000c 	andi	r21,r7,16384
  807a18:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  807a1c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  807a20:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  807a24:	91403d2e 	bgeu	r18,r5,807b1c <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  807a28:	2c85c83a 	sub	r2,r5,r18
  807a2c:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  807a30:	30002626 	beq	r6,zero,807acc <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  807a34:	3023883a 	mov	r17,r6
  807a38:	9980012e 	bgeu	r19,r6,807a40 <altera_avalon_jtag_uart_write+0x6c>
  807a3c:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  807a40:	81020e04 	addi	r4,r16,2104
  807a44:	a00b883a 	mov	r5,r20
  807a48:	2489883a 	add	r4,r4,r18
  807a4c:	880d883a 	mov	r6,r17
  807a50:	08026a80 	call	8026a8 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807a54:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  807a58:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807a5c:	18c1ffcc 	andi	r3,r3,2047
  807a60:	9a000048 	cmpgei	r8,r19,1
  807a64:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  807a68:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807a6c:	403feb1e 	bne	r8,zero,807a1c <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807a70:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807a74:	00bfff84 	movi	r2,-2
  807a78:	2084703a 	and	r2,r4,r2
  807a7c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807a80:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807a84:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807a88:	18c00094 	ori	r3,r3,2
  807a8c:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807a90:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807a94:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  807a98:	b5002926 	beq	r22,r20,807b40 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  807a9c:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  807aa0:	dfc00817 	ldw	ra,32(sp)
  807aa4:	ddc00717 	ldw	r23,28(sp)
  807aa8:	dd800617 	ldw	r22,24(sp)
  807aac:	dd400517 	ldw	r21,20(sp)
  807ab0:	dd000417 	ldw	r20,16(sp)
  807ab4:	dcc00317 	ldw	r19,12(sp)
  807ab8:	dc800217 	ldw	r18,8(sp)
  807abc:	dc400117 	ldw	r17,4(sp)
  807ac0:	dc000017 	ldw	r16,0(sp)
  807ac4:	dec00904 	addi	sp,sp,36
  807ac8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807acc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ad0:	00bfff84 	movi	r2,-2
  807ad4:	2084703a 	and	r2,r4,r2
  807ad8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807adc:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807ae0:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807ae4:	18c00094 	ori	r3,r3,2
  807ae8:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807aec:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807af0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  807af4:	a83fe81e 	bne	r21,zero,807a98 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  807af8:	80800d17 	ldw	r2,52(r16)
  807afc:	1140031e 	bne	r2,r5,807b0c <altera_avalon_jtag_uart_write+0x138>
  807b00:	80c00917 	ldw	r3,36(r16)
  807b04:	80800117 	ldw	r2,4(r16)
  807b08:	18bffb36 	bltu	r3,r2,807af8 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  807b0c:	80800d17 	ldw	r2,52(r16)
  807b10:	117fe126 	beq	r2,r5,807a98 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807b14:	403fc11e 	bne	r8,zero,807a1c <altera_avalon_jtag_uart_write+0x48>
  807b18:	003fd506 	br	807a70 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  807b1c:	28000326 	beq	r5,zero,807b2c <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  807b20:	00820004 	movi	r2,2048
  807b24:	148dc83a 	sub	r6,r2,r18
  807b28:	003fc106 	br	807a30 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  807b2c:	0081ffc4 	movi	r2,2047
  807b30:	148dc83a 	sub	r6,r2,r18
  807b34:	003fbe06 	br	807a30 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807b38:	2829883a 	mov	r20,r5
  807b3c:	003fcc06 	br	807a70 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  807b40:	b890000c 	andi	r2,r23,16384
  807b44:	1000021e 	bne	r2,zero,807b50 <altera_avalon_jtag_uart_write+0x17c>
  807b48:	00bffec4 	movi	r2,-5
  807b4c:	003fd406 	br	807aa0 <altera_avalon_jtag_uart_write+0xcc>
  807b50:	00bffd44 	movi	r2,-11
  807b54:	003fd206 	br	807aa0 <altera_avalon_jtag_uart_write+0xcc>

00807b58 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  807b58:	02002074 	movhi	r8,129
  807b5c:	42359604 	addi	r8,r8,-10664
  807b60:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  807b64:	defffe04 	addi	sp,sp,-8
  807b68:	3807883a 	mov	r3,r7
  807b6c:	dfc00115 	stw	ra,4(sp)
  807b70:	200f883a 	mov	r7,r4
  807b74:	1000011e 	bne	r2,zero,807b7c <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  807b78:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  807b7c:	008001c4 	movi	r2,7
  807b80:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  807b84:	2809883a 	mov	r4,r5
  807b88:	300b883a 	mov	r5,r6
  807b8c:	01802034 	movhi	r6,128
  807b90:	319eea04 	addi	r6,r6,31656
  807b94:	d8000015 	stw	zero,0(sp)
  807b98:	0807e940 	call	807e94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  807b9c:	dfc00117 	ldw	ra,4(sp)
  807ba0:	dec00204 	addi	sp,sp,8
  807ba4:	f800283a 	ret

00807ba8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  807ba8:	defffe04 	addi	sp,sp,-8
  807bac:	dfc00115 	stw	ra,4(sp)
  807bb0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  807bb4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  807bb8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807bbc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807bc0:	00bfff84 	movi	r2,-2
  807bc4:	8084703a 	and	r2,r16,r2
  807bc8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  807bcc:	080739c0 	call	80739c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807bd0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  807bd4:	dfc00117 	ldw	ra,4(sp)
  807bd8:	dc000017 	ldw	r16,0(sp)
  807bdc:	dec00204 	addi	sp,sp,8
  807be0:	f800283a 	ret

00807be4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  807be4:	00802074 	movhi	r2,129
  807be8:	10b59604 	addi	r2,r2,-10664
  807bec:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  807bf0:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  807bf4:	00bfde84 	movi	r2,-134
  807bf8:	1800011e 	bne	r3,zero,807c00 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  807bfc:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  807c00:	00bffa84 	movi	r2,-22
  807c04:	203ffd26 	beq	r4,zero,807bfc <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  807c08:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  807c0c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c10:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c14:	00bfff84 	movi	r2,-2
  807c18:	3084703a 	and	r2,r6,r2
  807c1c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  807c20:	00c02074 	movhi	r3,129
  807c24:	18f59704 	addi	r3,r3,-10660
  807c28:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  807c2c:	20800044 	addi	r2,r4,1
  807c30:	2885883a 	add	r2,r5,r2
  807c34:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  807c38:	11000d2e 	bgeu	r2,r4,807c70 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  807c3c:	00800044 	movi	r2,1
  807c40:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807c44:	00802074 	movhi	r2,129
  807c48:	10aef404 	addi	r2,r2,-17456
  entry->next     = list->next;
  807c4c:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807c50:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  807c54:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  807c58:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  807c5c:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  807c60:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c64:	3001703a 	wrctl	status,r6
  807c68:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  807c6c:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  807c70:	40000405 	stb	zero,16(r8)
  807c74:	003ff306 	br	807c44 <alt_alarm_start+0x60>

00807c78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  807c78:	defffd04 	addi	sp,sp,-12
  807c7c:	dc000015 	stw	r16,0(sp)
  807c80:	dfc00215 	stw	ra,8(sp)
  807c84:	dc400115 	stw	r17,4(sp)
  807c88:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  807c8c:	20001516 	blt	r4,zero,807ce4 <close+0x6c>
  807c90:	20c00324 	muli	r3,r4,12
  807c94:	00802074 	movhi	r2,129
  807c98:	10ae8f04 	addi	r2,r2,-17860
  807c9c:	1887883a 	add	r3,r3,r2

  if (fd)
  807ca0:	18001026 	beq	r3,zero,807ce4 <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  807ca4:	18800017 	ldw	r2,0(r3)
  807ca8:	10800417 	ldw	r2,16(r2)
  807cac:	10001c26 	beq	r2,zero,807d20 <close+0xa8>
  807cb0:	1809883a 	mov	r4,r3
  807cb4:	103ee83a 	callr	r2
  807cb8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807cbc:	8009883a 	mov	r4,r16
  807cc0:	08081a40 	call	8081a4 <alt_release_fd>
    if (rval < 0)
  807cc4:	88001b16 	blt	r17,zero,807d34 <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807cc8:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  807ccc:	1805883a 	mov	r2,r3
  807cd0:	dfc00217 	ldw	ra,8(sp)
  807cd4:	dc400117 	ldw	r17,4(sp)
  807cd8:	dc000017 	ldw	r16,0(sp)
  807cdc:	dec00304 	addi	sp,sp,12
  807ce0:	f800283a 	ret
  807ce4:	00802074 	movhi	r2,129
  807ce8:	10aefb04 	addi	r2,r2,-17428
  807cec:	10800017 	ldw	r2,0(r2)
  807cf0:	10000d26 	beq	r2,zero,807d28 <close+0xb0>
  807cf4:	103ee83a 	callr	r2
  807cf8:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807cfc:	00ffffc4 	movi	r3,-1
  807d00:	00801444 	movi	r2,81
  807d04:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  807d08:	1805883a 	mov	r2,r3
  807d0c:	dfc00217 	ldw	ra,8(sp)
  807d10:	dc400117 	ldw	r17,4(sp)
  807d14:	dc000017 	ldw	r16,0(sp)
  807d18:	dec00304 	addi	sp,sp,12
  807d1c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807d20:	08081a40 	call	8081a4 <alt_release_fd>
  807d24:	003fe806 	br	807cc8 <close+0x50>
  807d28:	01002074 	movhi	r4,129
  807d2c:	21359204 	addi	r4,r4,-10680
  807d30:	003ff206 	br	807cfc <close+0x84>
  807d34:	00802074 	movhi	r2,129
  807d38:	10aefb04 	addi	r2,r2,-17428
  807d3c:	10800017 	ldw	r2,0(r2)
  807d40:	10000626 	beq	r2,zero,807d5c <close+0xe4>
  807d44:	103ee83a 	callr	r2
  807d48:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  807d4c:	0445c83a 	sub	r2,zero,r17
  807d50:	00ffffc4 	movi	r3,-1
  807d54:	20800015 	stw	r2,0(r4)
  807d58:	003fdc06 	br	807ccc <close+0x54>
  807d5c:	01002074 	movhi	r4,129
  807d60:	21359204 	addi	r4,r4,-10680
  807d64:	003ff906 	br	807d4c <close+0xd4>

00807d68 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807d68:	f800283a 	ret

00807d6c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  807d6c:	3005883a 	mov	r2,r6
  807d70:	f800283a 	ret

00807d74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807d74:	deffff04 	addi	sp,sp,-4
  807d78:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  807d7c:	20000d26 	beq	r4,zero,807db4 <alt_dev_llist_insert+0x40>
  807d80:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
  807d84:	000d883a 	mov	r6,zero
  807d88:	10000a26 	beq	r2,zero,807db4 <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  807d8c:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807d90:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  807d94:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  807d98:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  807d9c:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  807da0:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  807da4:	3005883a 	mov	r2,r6
  807da8:	dfc00017 	ldw	ra,0(sp)
  807dac:	dec00104 	addi	sp,sp,4
  807db0:	f800283a 	ret
  807db4:	00802074 	movhi	r2,129
  807db8:	10aefb04 	addi	r2,r2,-17428
  807dbc:	10800017 	ldw	r2,0(r2)
  807dc0:	00c02074 	movhi	r3,129
  807dc4:	18f59204 	addi	r3,r3,-10680
  807dc8:	10000226 	beq	r2,zero,807dd4 <alt_dev_llist_insert+0x60>
  807dcc:	103ee83a 	callr	r2
  807dd0:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  807dd4:	01bffa84 	movi	r6,-22
  807dd8:	00800584 	movi	r2,22
  807ddc:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  807de0:	3005883a 	mov	r2,r6
  807de4:	dfc00017 	ldw	ra,0(sp)
  807de8:	dec00104 	addi	sp,sp,4
  807dec:	f800283a 	ret

00807df0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807df0:	0009883a 	mov	r4,zero
  807df4:	01420004 	movi	r5,2048
  807df8:	08083741 	jmpi	808374 <alt_icache_flush>

00807dfc <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807dfc:	000530fa 	rdctl	r2,ienable
  807e00:	00c00044 	movi	r3,1
  807e04:	1946983a 	sll	r3,r3,r5
  807e08:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  807e0c:	1004c03a 	cmpne	r2,r2,zero
  807e10:	f800283a 	ret

00807e14 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e14:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e18:	00bfff84 	movi	r2,-2
  807e1c:	3084703a 	and	r2,r6,r2
  807e20:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  807e24:	01002074 	movhi	r4,129
  807e28:	21359804 	addi	r4,r4,-10656
  807e2c:	00800044 	movi	r2,1
  807e30:	20c00017 	ldw	r3,0(r4)
  807e34:	1144983a 	sll	r2,r2,r5
  807e38:	10c4b03a 	or	r2,r2,r3
  807e3c:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807e40:	20c00017 	ldw	r3,0(r4)
  807e44:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e48:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  807e4c:	0005883a 	mov	r2,zero
  807e50:	f800283a 	ret

00807e54 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e54:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e58:	00bfff84 	movi	r2,-2
  807e5c:	3084703a 	and	r2,r6,r2
  807e60:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  807e64:	01002074 	movhi	r4,129
  807e68:	21359804 	addi	r4,r4,-10656
  807e6c:	00bfff84 	movi	r2,-2
  807e70:	20c00017 	ldw	r3,0(r4)
  807e74:	1144183a 	rol	r2,r2,r5
  807e78:	10c4703a 	and	r2,r2,r3
  807e7c:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807e80:	20c00017 	ldw	r3,0(r4)
  807e84:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e88:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  807e8c:	0005883a 	mov	r2,zero
  807e90:	f800283a 	ret

00807e94 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807e94:	0807e981 	jmpi	807e98 <alt_iic_isr_register>

00807e98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807e98:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807e9c:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807ea0:	dfc00115 	stw	ra,4(sp)
  807ea4:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807ea8:	023ffa84 	movi	r8,-22
  807eac:	1140050e 	bge	r2,r5,807ec4 <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  807eb0:	4005883a 	mov	r2,r8
  807eb4:	dfc00117 	ldw	ra,4(sp)
  807eb8:	dc000017 	ldw	r16,0(sp)
  807ebc:	dec00204 	addi	sp,sp,8
  807ec0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807ec4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ec8:	00bfff84 	movi	r2,-2
  807ecc:	8084703a 	and	r2,r16,r2
  807ed0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  807ed4:	280690fa 	slli	r3,r5,3
  807ed8:	00802074 	movhi	r2,129
  807edc:	10b5a304 	addi	r2,r2,-10612
  807ee0:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  807ee4:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  807ee8:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807eec:	30000826 	beq	r6,zero,807f10 <alt_iic_isr_register+0x78>
  807ef0:	0807e140 	call	807e14 <alt_ic_irq_enable>
  807ef4:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ef8:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  807efc:	4005883a 	mov	r2,r8
  807f00:	dfc00117 	ldw	ra,4(sp)
  807f04:	dc000017 	ldw	r16,0(sp)
  807f08:	dec00204 	addi	sp,sp,8
  807f0c:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807f10:	0807e540 	call	807e54 <alt_ic_irq_disable>
  807f14:	1011883a 	mov	r8,r2
  807f18:	8001703a 	wrctl	status,r16
  807f1c:	003ff706 	br	807efc <alt_iic_isr_register+0x64>

00807f20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807f20:	defffd04 	addi	sp,sp,-12
  807f24:	dc400115 	stw	r17,4(sp)
  807f28:	dc000015 	stw	r16,0(sp)
  807f2c:	3023883a 	mov	r17,r6
  807f30:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807f34:	01807fc4 	movi	r6,511
  807f38:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807f3c:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807f40:	08080240 	call	808024 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f44:	10c00324 	muli	r3,r2,12
  807f48:	01802074 	movhi	r6,129
  807f4c:	31ae8f04 	addi	r6,r6,-17860
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807f50:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f54:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  807f58:	10000716 	blt	r2,zero,807f78 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807f5c:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f60:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  807f64:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807f68:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f6c:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  807f70:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807f74:	08081a40 	call	8081a4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807f78:	8009883a 	mov	r4,r16
  807f7c:	000b883a 	mov	r5,zero
  807f80:	01807fc4 	movi	r6,511
  807f84:	08080240 	call	808024 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f88:	10c00324 	muli	r3,r2,12
  807f8c:	01802074 	movhi	r6,129
  807f90:	31ae8f04 	addi	r6,r6,-17860
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807f94:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807f98:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  807f9c:	10000716 	blt	r2,zero,807fbc <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807fa0:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fa4:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  807fa8:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807fac:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fb0:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  807fb4:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807fb8:	08081a40 	call	8081a4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  807fbc:	8809883a 	mov	r4,r17
  807fc0:	01400044 	movi	r5,1
  807fc4:	01807fc4 	movi	r6,511
  807fc8:	08080240 	call	808024 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fcc:	10c00324 	muli	r3,r2,12
  807fd0:	01802074 	movhi	r6,129
  807fd4:	31ae8f04 	addi	r6,r6,-17860
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  807fd8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fdc:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  807fe0:	10000b16 	blt	r2,zero,808010 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807fe4:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807fe8:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  807fec:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  807ff0:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  807ff4:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  807ff8:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  807ffc:	dfc00217 	ldw	ra,8(sp)
  808000:	dc400117 	ldw	r17,4(sp)
  808004:	dc000017 	ldw	r16,0(sp)
  808008:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80800c:	08081a41 	jmpi	8081a4 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  808010:	dfc00217 	ldw	ra,8(sp)
  808014:	dc400117 	ldw	r17,4(sp)
  808018:	dc000017 	ldw	r16,0(sp)
  80801c:	dec00304 	addi	sp,sp,12
  808020:	f800283a 	ret

00808024 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  808024:	defff904 	addi	sp,sp,-28
  808028:	dcc00315 	stw	r19,12(sp)
  80802c:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808030:	01402074 	movhi	r5,129
  808034:	296ef804 	addi	r5,r5,-17440
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  808038:	dd400515 	stw	r21,20(sp)
  80803c:	dd000415 	stw	r20,16(sp)
  808040:	dc400115 	stw	r17,4(sp)
  808044:	dfc00615 	stw	ra,24(sp)
  808048:	dc800215 	stw	r18,8(sp)
  80804c:	dc000015 	stw	r16,0(sp)
  808050:	302b883a 	mov	r21,r6
  808054:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808058:	08081d00 	call	8081d0 <alt_find_dev>
  80805c:	1023883a 	mov	r17,r2
  808060:	10004726 	beq	r2,zero,808180 <open+0x15c>
  808064:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  808068:	8809883a 	mov	r4,r17
  80806c:	08083140 	call	808314 <alt_get_fd>
  808070:	1021883a 	mov	r16,r2
  808074:	10002d16 	blt	r2,zero,80812c <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  808078:	10800324 	muli	r2,r2,12
  80807c:	01402074 	movhi	r5,129
  808080:	296e8f04 	addi	r5,r5,-17860
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  808084:	00d00034 	movhi	r3,16384
  808088:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  80808c:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  808090:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  808094:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  808098:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80809c:	1000121e 	bne	r2,zero,8080e8 <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8080a0:	00802074 	movhi	r2,129
  8080a4:	10aefa04 	addi	r2,r2,-17432
  8080a8:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8080ac:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8080b0:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8080b4:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8080b8:	20800215 	stw	r2,8(r4)
  8080bc:	00000206 	br	8080c8 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8080c0:	29400304 	addi	r5,r5,12
  8080c4:	38c00836 	bltu	r7,r3,8080e8 <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8080c8:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8080cc:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8080d0:	11bffb1e 	bne	r2,r6,8080c0 <open+0x9c>
  8080d4:	28800217 	ldw	r2,8(r5)
  8080d8:	103ff90e 	bge	r2,zero,8080c0 <open+0x9c>
  8080dc:	293ff826 	beq	r5,r4,8080c0 <open+0x9c>
  8080e0:	04400344 	movi	r17,13
  8080e4:	00001206 	br	808130 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8080e8:	88800317 	ldw	r2,12(r17)
  8080ec:	10000526 	beq	r2,zero,808104 <open+0xe0>
  8080f0:	a00b883a 	mov	r5,r20
  8080f4:	980d883a 	mov	r6,r19
  8080f8:	a80f883a 	mov	r7,r21
  8080fc:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  808100:	10001516 	blt	r2,zero,808158 <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  808104:	8005883a 	mov	r2,r16
  808108:	dfc00617 	ldw	ra,24(sp)
  80810c:	dd400517 	ldw	r21,20(sp)
  808110:	dd000417 	ldw	r20,16(sp)
  808114:	dcc00317 	ldw	r19,12(sp)
  808118:	dc800217 	ldw	r18,8(sp)
  80811c:	dc400117 	ldw	r17,4(sp)
  808120:	dc000017 	ldw	r16,0(sp)
  808124:	dec00704 	addi	sp,sp,28
  808128:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  80812c:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  808130:	8009883a 	mov	r4,r16
  808134:	08081a40 	call	8081a4 <alt_release_fd>
  808138:	00802074 	movhi	r2,129
  80813c:	10aefb04 	addi	r2,r2,-17428
  808140:	10800017 	ldw	r2,0(r2)
  808144:	10000b26 	beq	r2,zero,808174 <open+0x150>
  808148:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  80814c:	043fffc4 	movi	r16,-1
  808150:	14400015 	stw	r17,0(r2)
  808154:	003feb06 	br	808104 <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  808158:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80815c:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  808160:	08081a40 	call	8081a4 <alt_release_fd>
  808164:	00802074 	movhi	r2,129
  808168:	10aefb04 	addi	r2,r2,-17428
  80816c:	10800017 	ldw	r2,0(r2)
  808170:	103ff51e 	bne	r2,zero,808148 <open+0x124>
  808174:	00802074 	movhi	r2,129
  808178:	10b59204 	addi	r2,r2,-10680
  80817c:	003ff306 	br	80814c <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  808180:	a009883a 	mov	r4,r20
  808184:	08082640 	call	808264 <alt_find_file>
  808188:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80818c:	10000226 	beq	r2,zero,808198 <open+0x174>
  808190:	04800044 	movi	r18,1
  808194:	003fb406 	br	808068 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  808198:	043fffc4 	movi	r16,-1
  80819c:	044004c4 	movi	r17,19
  8081a0:	003fe306 	br	808130 <open+0x10c>

008081a4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  8081a4:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  8081a8:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  8081ac:	1100050e 	bge	r2,r4,8081c4 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  8081b0:	00802074 	movhi	r2,129
  8081b4:	10ae8f04 	addi	r2,r2,-17860
  8081b8:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  8081bc:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  8081c0:	10000215 	stw	zero,8(r2)
  8081c4:	f800283a 	ret

008081c8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8081c8:	000170fa 	wrctl	ienable,zero
}
  8081cc:	f800283a 	ret

008081d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8081d0:	defffb04 	addi	sp,sp,-20
  8081d4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  8081d8:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8081dc:	dcc00315 	stw	r19,12(sp)
  8081e0:	dc400115 	stw	r17,4(sp)
  8081e4:	dfc00415 	stw	ra,16(sp)
  8081e8:	2823883a 	mov	r17,r5
  8081ec:	dc800215 	stw	r18,8(sp)
  8081f0:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  8081f4:	0808a680 	call	808a68 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8081f8:	84401126 	beq	r16,r17,808240 <alt_find_dev+0x70>
  8081fc:	14800044 	addi	r18,r2,1
  808200:	00000206 	br	80820c <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  808204:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808208:	84400d26 	beq	r16,r17,808240 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80820c:	81000217 	ldw	r4,8(r16)
  808210:	980b883a 	mov	r5,r19
  808214:	900d883a 	mov	r6,r18
  808218:	08089f40 	call	8089f4 <memcmp>
  80821c:	103ff91e 	bne	r2,zero,808204 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  808220:	8005883a 	mov	r2,r16
  808224:	dfc00417 	ldw	ra,16(sp)
  808228:	dcc00317 	ldw	r19,12(sp)
  80822c:	dc800217 	ldw	r18,8(sp)
  808230:	dc400117 	ldw	r17,4(sp)
  808234:	dc000017 	ldw	r16,0(sp)
  808238:	dec00504 	addi	sp,sp,20
  80823c:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  808240:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  808244:	8005883a 	mov	r2,r16
  808248:	dfc00417 	ldw	ra,16(sp)
  80824c:	dcc00317 	ldw	r19,12(sp)
  808250:	dc800217 	ldw	r18,8(sp)
  808254:	dc400117 	ldw	r17,4(sp)
  808258:	dc000017 	ldw	r16,0(sp)
  80825c:	dec00504 	addi	sp,sp,20
  808260:	f800283a 	ret

00808264 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808264:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  808268:	00802074 	movhi	r2,129
  80826c:	10aef604 	addi	r2,r2,-17448
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808270:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  808274:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808278:	dd000415 	stw	r20,16(sp)
  80827c:	dc800215 	stw	r18,8(sp)
  808280:	dfc00515 	stw	ra,20(sp)
  808284:	dcc00315 	stw	r19,12(sp)
  808288:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80828c:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  808290:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  808294:	80801526 	beq	r16,r2,8082ec <alt_find_file+0x88>
  808298:	04c00bc4 	movi	r19,47
  80829c:	00000806 	br	8082c0 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8082a0:	3485883a 	add	r2,r6,r18
  8082a4:	10800007 	ldb	r2,0(r2)
  8082a8:	14c00126 	beq	r2,r19,8082b0 <alt_find_file+0x4c>
  8082ac:	1000021e 	bne	r2,zero,8082b8 <alt_find_file+0x54>
  8082b0:	08089f40 	call	8089f4 <memcmp>
  8082b4:	10000e26 	beq	r2,zero,8082f0 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8082b8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8082bc:	85000b26 	beq	r16,r20,8082ec <alt_find_file+0x88>
  {
    len = strlen(next->name);
  8082c0:	84400217 	ldw	r17,8(r16)
  8082c4:	8809883a 	mov	r4,r17
  8082c8:	0808a680 	call	808a68 <strlen>
  8082cc:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  8082d0:	8885883a 	add	r2,r17,r2
  8082d4:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8082d8:	8809883a 	mov	r4,r17
  8082dc:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  8082e0:	1cffef1e 	bne	r3,r19,8082a0 <alt_find_file+0x3c>
    {
      len -= 1;
  8082e4:	31bfffc4 	addi	r6,r6,-1
  8082e8:	003fed06 	br	8082a0 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8082ec:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  8082f0:	8005883a 	mov	r2,r16
  8082f4:	dfc00517 	ldw	ra,20(sp)
  8082f8:	dd000417 	ldw	r20,16(sp)
  8082fc:	dcc00317 	ldw	r19,12(sp)
  808300:	dc800217 	ldw	r18,8(sp)
  808304:	dc400117 	ldw	r17,4(sp)
  808308:	dc000017 	ldw	r16,0(sp)
  80830c:	dec00604 	addi	sp,sp,24
  808310:	f800283a 	ret

00808314 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  808314:	01402074 	movhi	r5,129
  808318:	296e8f04 	addi	r5,r5,-17860
  80831c:	0007883a 	mov	r3,zero
  808320:	01c00804 	movi	r7,32
  808324:	280d883a 	mov	r6,r5
  808328:	00000306 	br	808338 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80832c:	18c00044 	addi	r3,r3,1
  808330:	31800304 	addi	r6,r6,12
  808334:	19c00d26 	beq	r3,r7,80836c <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  808338:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80833c:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  808340:	103ffa1e 	bne	r2,zero,80832c <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  808344:	01402074 	movhi	r5,129
  808348:	296efa04 	addi	r5,r5,-17432
  80834c:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  808350:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  808354:	10c0030e 	bge	r2,r3,808364 <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  808358:	1805883a 	mov	r2,r3
  80835c:	28c00015 	stw	r3,0(r5)
  808360:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  808364:	1805883a 	mov	r2,r3
  808368:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80836c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  808370:	f800283a 	ret

00808374 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  808374:	00820004 	movi	r2,2048
  808378:	2007883a 	mov	r3,r4
  80837c:	1140012e 	bgeu	r2,r5,808384 <alt_icache_flush+0x10>
  808380:	100b883a 	mov	r5,r2
  808384:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808388:	1940032e 	bgeu	r3,r5,808398 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80838c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808390:	18c00804 	addi	r3,r3,32
  808394:	197ffd36 	bltu	r3,r5,80838c <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  808398:	208007cc 	andi	r2,r4,31
  80839c:	10000126 	beq	r2,zero,8083a4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8083a0:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8083a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8083a8:	f800283a 	ret

008083ac <exit>:
  8083ac:	defffe04 	addi	sp,sp,-8
  8083b0:	000b883a 	mov	r5,zero
  8083b4:	dc000015 	stw	r16,0(sp)
  8083b8:	dfc00115 	stw	ra,4(sp)
  8083bc:	2021883a 	mov	r16,r4
  8083c0:	0808c1c0 	call	808c1c <__call_exitprocs>
  8083c4:	00802074 	movhi	r2,129
  8083c8:	10aef004 	addi	r2,r2,-17472
  8083cc:	11000017 	ldw	r4,0(r2)
  8083d0:	20800f17 	ldw	r2,60(r4)
  8083d4:	10000126 	beq	r2,zero,8083dc <exit+0x30>
  8083d8:	103ee83a 	callr	r2
  8083dc:	8009883a 	mov	r4,r16
  8083e0:	0809afc0 	call	809afc <_exit>

008083e4 <_fputs_r>:
  8083e4:	defff804 	addi	sp,sp,-32
  8083e8:	dc000515 	stw	r16,20(sp)
  8083ec:	2021883a 	mov	r16,r4
  8083f0:	2809883a 	mov	r4,r5
  8083f4:	dc400615 	stw	r17,24(sp)
  8083f8:	dfc00715 	stw	ra,28(sp)
  8083fc:	3023883a 	mov	r17,r6
  808400:	d9400015 	stw	r5,0(sp)
  808404:	0808a680 	call	808a68 <strlen>
  808408:	00c00044 	movi	r3,1
  80840c:	d8800115 	stw	r2,4(sp)
  808410:	d8c00315 	stw	r3,12(sp)
  808414:	d8800415 	stw	r2,16(sp)
  808418:	dec00215 	stw	sp,8(sp)
  80841c:	80000326 	beq	r16,zero,80842c <_fputs_r+0x48>
  808420:	80800e17 	ldw	r2,56(r16)
  808424:	8009883a 	mov	r4,r16
  808428:	10000926 	beq	r2,zero,808450 <_fputs_r+0x6c>
  80842c:	8009883a 	mov	r4,r16
  808430:	880b883a 	mov	r5,r17
  808434:	d9800204 	addi	r6,sp,8
  808438:	08084740 	call	808474 <__sfvwrite_r>
  80843c:	dfc00717 	ldw	ra,28(sp)
  808440:	dc400617 	ldw	r17,24(sp)
  808444:	dc000517 	ldw	r16,20(sp)
  808448:	dec00804 	addi	sp,sp,32
  80844c:	f800283a 	ret
  808450:	08090640 	call	809064 <__sinit>
  808454:	003ff506 	br	80842c <_fputs_r+0x48>

00808458 <fputs>:
  808458:	01802074 	movhi	r6,129
  80845c:	31aeef04 	addi	r6,r6,-17476
  808460:	2007883a 	mov	r3,r4
  808464:	31000017 	ldw	r4,0(r6)
  808468:	280d883a 	mov	r6,r5
  80846c:	180b883a 	mov	r5,r3
  808470:	08083e41 	jmpi	8083e4 <_fputs_r>

00808474 <__sfvwrite_r>:
  808474:	30800217 	ldw	r2,8(r6)
  808478:	defff504 	addi	sp,sp,-44
  80847c:	df000915 	stw	fp,36(sp)
  808480:	dd800715 	stw	r22,28(sp)
  808484:	dc800315 	stw	r18,12(sp)
  808488:	dfc00a15 	stw	ra,40(sp)
  80848c:	ddc00815 	stw	r23,32(sp)
  808490:	dd400615 	stw	r21,24(sp)
  808494:	dd000515 	stw	r20,20(sp)
  808498:	dcc00415 	stw	r19,16(sp)
  80849c:	dc400215 	stw	r17,8(sp)
  8084a0:	dc000115 	stw	r16,4(sp)
  8084a4:	302d883a 	mov	r22,r6
  8084a8:	2039883a 	mov	fp,r4
  8084ac:	2825883a 	mov	r18,r5
  8084b0:	10001c26 	beq	r2,zero,808524 <__sfvwrite_r+0xb0>
  8084b4:	29c0030b 	ldhu	r7,12(r5)
  8084b8:	3880020c 	andi	r2,r7,8
  8084bc:	10002726 	beq	r2,zero,80855c <__sfvwrite_r+0xe8>
  8084c0:	28800417 	ldw	r2,16(r5)
  8084c4:	10002526 	beq	r2,zero,80855c <__sfvwrite_r+0xe8>
  8084c8:	3880008c 	andi	r2,r7,2
  8084cc:	b5400017 	ldw	r21,0(r22)
  8084d0:	10002826 	beq	r2,zero,808574 <__sfvwrite_r+0x100>
  8084d4:	0021883a 	mov	r16,zero
  8084d8:	0023883a 	mov	r17,zero
  8084dc:	880d883a 	mov	r6,r17
  8084e0:	e009883a 	mov	r4,fp
  8084e4:	00810004 	movi	r2,1024
  8084e8:	80006e26 	beq	r16,zero,8086a4 <__sfvwrite_r+0x230>
  8084ec:	800f883a 	mov	r7,r16
  8084f0:	91400717 	ldw	r5,28(r18)
  8084f4:	1400012e 	bgeu	r2,r16,8084fc <__sfvwrite_r+0x88>
  8084f8:	100f883a 	mov	r7,r2
  8084fc:	90c00917 	ldw	r3,36(r18)
  808500:	183ee83a 	callr	r3
  808504:	1007883a 	mov	r3,r2
  808508:	80a1c83a 	sub	r16,r16,r2
  80850c:	88a3883a 	add	r17,r17,r2
  808510:	00806d0e 	bge	zero,r2,8086c8 <__sfvwrite_r+0x254>
  808514:	b0800217 	ldw	r2,8(r22)
  808518:	10c5c83a 	sub	r2,r2,r3
  80851c:	b0800215 	stw	r2,8(r22)
  808520:	103fee1e 	bne	r2,zero,8084dc <__sfvwrite_r+0x68>
  808524:	0009883a 	mov	r4,zero
  808528:	2005883a 	mov	r2,r4
  80852c:	dfc00a17 	ldw	ra,40(sp)
  808530:	df000917 	ldw	fp,36(sp)
  808534:	ddc00817 	ldw	r23,32(sp)
  808538:	dd800717 	ldw	r22,28(sp)
  80853c:	dd400617 	ldw	r21,24(sp)
  808540:	dd000517 	ldw	r20,20(sp)
  808544:	dcc00417 	ldw	r19,16(sp)
  808548:	dc800317 	ldw	r18,12(sp)
  80854c:	dc400217 	ldw	r17,8(sp)
  808550:	dc000117 	ldw	r16,4(sp)
  808554:	dec00b04 	addi	sp,sp,44
  808558:	f800283a 	ret
  80855c:	0808adc0 	call	808adc <__swsetup_r>
  808560:	1000e41e 	bne	r2,zero,8088f4 <__sfvwrite_r+0x480>
  808564:	91c0030b 	ldhu	r7,12(r18)
  808568:	b5400017 	ldw	r21,0(r22)
  80856c:	3880008c 	andi	r2,r7,2
  808570:	103fd81e 	bne	r2,zero,8084d4 <__sfvwrite_r+0x60>
  808574:	3880004c 	andi	r2,r7,1
  808578:	1005003a 	cmpeq	r2,r2,zero
  80857c:	10005726 	beq	r2,zero,8086dc <__sfvwrite_r+0x268>
  808580:	0029883a 	mov	r20,zero
  808584:	002f883a 	mov	r23,zero
  808588:	a0004226 	beq	r20,zero,808694 <__sfvwrite_r+0x220>
  80858c:	3880800c 	andi	r2,r7,512
  808590:	94000217 	ldw	r16,8(r18)
  808594:	10008b26 	beq	r2,zero,8087c4 <__sfvwrite_r+0x350>
  808598:	800d883a 	mov	r6,r16
  80859c:	a400a536 	bltu	r20,r16,808834 <__sfvwrite_r+0x3c0>
  8085a0:	3881200c 	andi	r2,r7,1152
  8085a4:	10002726 	beq	r2,zero,808644 <__sfvwrite_r+0x1d0>
  8085a8:	90800517 	ldw	r2,20(r18)
  8085ac:	92000417 	ldw	r8,16(r18)
  8085b0:	91400017 	ldw	r5,0(r18)
  8085b4:	1087883a 	add	r3,r2,r2
  8085b8:	1887883a 	add	r3,r3,r2
  8085bc:	1808d7fa 	srli	r4,r3,31
  8085c0:	2a21c83a 	sub	r16,r5,r8
  8085c4:	80800044 	addi	r2,r16,1
  8085c8:	20c9883a 	add	r4,r4,r3
  8085cc:	2027d07a 	srai	r19,r4,1
  8085d0:	a085883a 	add	r2,r20,r2
  8085d4:	980d883a 	mov	r6,r19
  8085d8:	9880022e 	bgeu	r19,r2,8085e4 <__sfvwrite_r+0x170>
  8085dc:	1027883a 	mov	r19,r2
  8085e0:	100d883a 	mov	r6,r2
  8085e4:	3881000c 	andi	r2,r7,1024
  8085e8:	1000b826 	beq	r2,zero,8088cc <__sfvwrite_r+0x458>
  8085ec:	300b883a 	mov	r5,r6
  8085f0:	e009883a 	mov	r4,fp
  8085f4:	0801f680 	call	801f68 <_malloc_r>
  8085f8:	10003126 	beq	r2,zero,8086c0 <__sfvwrite_r+0x24c>
  8085fc:	91400417 	ldw	r5,16(r18)
  808600:	1009883a 	mov	r4,r2
  808604:	800d883a 	mov	r6,r16
  808608:	1023883a 	mov	r17,r2
  80860c:	08026a80 	call	8026a8 <memcpy>
  808610:	90c0030b 	ldhu	r3,12(r18)
  808614:	00beffc4 	movi	r2,-1025
  808618:	1886703a 	and	r3,r3,r2
  80861c:	18c02014 	ori	r3,r3,128
  808620:	90c0030d 	sth	r3,12(r18)
  808624:	9c07c83a 	sub	r3,r19,r16
  808628:	8c05883a 	add	r2,r17,r16
  80862c:	a00d883a 	mov	r6,r20
  808630:	a021883a 	mov	r16,r20
  808634:	90800015 	stw	r2,0(r18)
  808638:	90c00215 	stw	r3,8(r18)
  80863c:	94400415 	stw	r17,16(r18)
  808640:	94c00515 	stw	r19,20(r18)
  808644:	91000017 	ldw	r4,0(r18)
  808648:	b80b883a 	mov	r5,r23
  80864c:	a023883a 	mov	r17,r20
  808650:	08065a40 	call	8065a4 <memmove>
  808654:	90c00217 	ldw	r3,8(r18)
  808658:	90800017 	ldw	r2,0(r18)
  80865c:	a027883a 	mov	r19,r20
  808660:	1c07c83a 	sub	r3,r3,r16
  808664:	1405883a 	add	r2,r2,r16
  808668:	90c00215 	stw	r3,8(r18)
  80866c:	a021883a 	mov	r16,r20
  808670:	90800015 	stw	r2,0(r18)
  808674:	b0800217 	ldw	r2,8(r22)
  808678:	1405c83a 	sub	r2,r2,r16
  80867c:	b0800215 	stw	r2,8(r22)
  808680:	103fa826 	beq	r2,zero,808524 <__sfvwrite_r+0xb0>
  808684:	a469c83a 	sub	r20,r20,r17
  808688:	91c0030b 	ldhu	r7,12(r18)
  80868c:	bcef883a 	add	r23,r23,r19
  808690:	a03fbe1e 	bne	r20,zero,80858c <__sfvwrite_r+0x118>
  808694:	adc00017 	ldw	r23,0(r21)
  808698:	ad000117 	ldw	r20,4(r21)
  80869c:	ad400204 	addi	r21,r21,8
  8086a0:	003fb906 	br	808588 <__sfvwrite_r+0x114>
  8086a4:	ac400017 	ldw	r17,0(r21)
  8086a8:	ac000117 	ldw	r16,4(r21)
  8086ac:	ad400204 	addi	r21,r21,8
  8086b0:	003f8a06 	br	8084dc <__sfvwrite_r+0x68>
  8086b4:	91400417 	ldw	r5,16(r18)
  8086b8:	e009883a 	mov	r4,fp
  8086bc:	080339c0 	call	80339c <_free_r>
  8086c0:	00800304 	movi	r2,12
  8086c4:	e0800015 	stw	r2,0(fp)
  8086c8:	9080030b 	ldhu	r2,12(r18)
  8086cc:	013fffc4 	movi	r4,-1
  8086d0:	10801014 	ori	r2,r2,64
  8086d4:	9080030d 	sth	r2,12(r18)
  8086d8:	003f9306 	br	808528 <__sfvwrite_r+0xb4>
  8086dc:	0027883a 	mov	r19,zero
  8086e0:	002f883a 	mov	r23,zero
  8086e4:	d8000015 	stw	zero,0(sp)
  8086e8:	0029883a 	mov	r20,zero
  8086ec:	98001e26 	beq	r19,zero,808768 <__sfvwrite_r+0x2f4>
  8086f0:	d8c00017 	ldw	r3,0(sp)
  8086f4:	1804c03a 	cmpne	r2,r3,zero
  8086f8:	10005e26 	beq	r2,zero,808874 <__sfvwrite_r+0x400>
  8086fc:	9821883a 	mov	r16,r19
  808700:	a4c0012e 	bgeu	r20,r19,808708 <__sfvwrite_r+0x294>
  808704:	a021883a 	mov	r16,r20
  808708:	91000017 	ldw	r4,0(r18)
  80870c:	90800417 	ldw	r2,16(r18)
  808710:	91800217 	ldw	r6,8(r18)
  808714:	91c00517 	ldw	r7,20(r18)
  808718:	1100022e 	bgeu	r2,r4,808724 <__sfvwrite_r+0x2b0>
  80871c:	31e3883a 	add	r17,r6,r7
  808720:	8c001616 	blt	r17,r16,80877c <__sfvwrite_r+0x308>
  808724:	81c03816 	blt	r16,r7,808808 <__sfvwrite_r+0x394>
  808728:	90c00917 	ldw	r3,36(r18)
  80872c:	91400717 	ldw	r5,28(r18)
  808730:	e009883a 	mov	r4,fp
  808734:	b80d883a 	mov	r6,r23
  808738:	183ee83a 	callr	r3
  80873c:	1023883a 	mov	r17,r2
  808740:	00bfe10e 	bge	zero,r2,8086c8 <__sfvwrite_r+0x254>
  808744:	a469c83a 	sub	r20,r20,r17
  808748:	a0001826 	beq	r20,zero,8087ac <__sfvwrite_r+0x338>
  80874c:	b0800217 	ldw	r2,8(r22)
  808750:	1445c83a 	sub	r2,r2,r17
  808754:	b0800215 	stw	r2,8(r22)
  808758:	103f7226 	beq	r2,zero,808524 <__sfvwrite_r+0xb0>
  80875c:	9c67c83a 	sub	r19,r19,r17
  808760:	bc6f883a 	add	r23,r23,r17
  808764:	983fe21e 	bne	r19,zero,8086f0 <__sfvwrite_r+0x27c>
  808768:	adc00017 	ldw	r23,0(r21)
  80876c:	acc00117 	ldw	r19,4(r21)
  808770:	ad400204 	addi	r21,r21,8
  808774:	d8000015 	stw	zero,0(sp)
  808778:	003fdc06 	br	8086ec <__sfvwrite_r+0x278>
  80877c:	b80b883a 	mov	r5,r23
  808780:	880d883a 	mov	r6,r17
  808784:	08065a40 	call	8065a4 <memmove>
  808788:	90c00017 	ldw	r3,0(r18)
  80878c:	e009883a 	mov	r4,fp
  808790:	900b883a 	mov	r5,r18
  808794:	1c47883a 	add	r3,r3,r17
  808798:	90c00015 	stw	r3,0(r18)
  80879c:	0808dcc0 	call	808dcc <_fflush_r>
  8087a0:	103fc91e 	bne	r2,zero,8086c8 <__sfvwrite_r+0x254>
  8087a4:	a469c83a 	sub	r20,r20,r17
  8087a8:	a03fe81e 	bne	r20,zero,80874c <__sfvwrite_r+0x2d8>
  8087ac:	e009883a 	mov	r4,fp
  8087b0:	900b883a 	mov	r5,r18
  8087b4:	0808dcc0 	call	808dcc <_fflush_r>
  8087b8:	103fc31e 	bne	r2,zero,8086c8 <__sfvwrite_r+0x254>
  8087bc:	d8000015 	stw	zero,0(sp)
  8087c0:	003fe206 	br	80874c <__sfvwrite_r+0x2d8>
  8087c4:	91000017 	ldw	r4,0(r18)
  8087c8:	90800417 	ldw	r2,16(r18)
  8087cc:	1100022e 	bgeu	r2,r4,8087d8 <__sfvwrite_r+0x364>
  8087d0:	8023883a 	mov	r17,r16
  8087d4:	85003136 	bltu	r16,r20,80889c <__sfvwrite_r+0x428>
  8087d8:	91c00517 	ldw	r7,20(r18)
  8087dc:	a1c01836 	bltu	r20,r7,808840 <__sfvwrite_r+0x3cc>
  8087e0:	90c00917 	ldw	r3,36(r18)
  8087e4:	91400717 	ldw	r5,28(r18)
  8087e8:	e009883a 	mov	r4,fp
  8087ec:	b80d883a 	mov	r6,r23
  8087f0:	183ee83a 	callr	r3
  8087f4:	1021883a 	mov	r16,r2
  8087f8:	00bfb30e 	bge	zero,r2,8086c8 <__sfvwrite_r+0x254>
  8087fc:	1023883a 	mov	r17,r2
  808800:	1027883a 	mov	r19,r2
  808804:	003f9b06 	br	808674 <__sfvwrite_r+0x200>
  808808:	b80b883a 	mov	r5,r23
  80880c:	800d883a 	mov	r6,r16
  808810:	08065a40 	call	8065a4 <memmove>
  808814:	90c00217 	ldw	r3,8(r18)
  808818:	90800017 	ldw	r2,0(r18)
  80881c:	8023883a 	mov	r17,r16
  808820:	1c07c83a 	sub	r3,r3,r16
  808824:	1405883a 	add	r2,r2,r16
  808828:	90c00215 	stw	r3,8(r18)
  80882c:	90800015 	stw	r2,0(r18)
  808830:	003fc406 	br	808744 <__sfvwrite_r+0x2d0>
  808834:	a00d883a 	mov	r6,r20
  808838:	a021883a 	mov	r16,r20
  80883c:	003f8106 	br	808644 <__sfvwrite_r+0x1d0>
  808840:	b80b883a 	mov	r5,r23
  808844:	a00d883a 	mov	r6,r20
  808848:	08065a40 	call	8065a4 <memmove>
  80884c:	90c00217 	ldw	r3,8(r18)
  808850:	90800017 	ldw	r2,0(r18)
  808854:	a021883a 	mov	r16,r20
  808858:	1d07c83a 	sub	r3,r3,r20
  80885c:	1505883a 	add	r2,r2,r20
  808860:	a023883a 	mov	r17,r20
  808864:	a027883a 	mov	r19,r20
  808868:	90c00215 	stw	r3,8(r18)
  80886c:	90800015 	stw	r2,0(r18)
  808870:	003f8006 	br	808674 <__sfvwrite_r+0x200>
  808874:	b809883a 	mov	r4,r23
  808878:	01400284 	movi	r5,10
  80887c:	980d883a 	mov	r6,r19
  808880:	08089100 	call	808910 <memchr>
  808884:	10001726 	beq	r2,zero,8088e4 <__sfvwrite_r+0x470>
  808888:	15c5c83a 	sub	r2,r2,r23
  80888c:	15000044 	addi	r20,r2,1
  808890:	00800044 	movi	r2,1
  808894:	d8800015 	stw	r2,0(sp)
  808898:	003f9806 	br	8086fc <__sfvwrite_r+0x288>
  80889c:	b80b883a 	mov	r5,r23
  8088a0:	800d883a 	mov	r6,r16
  8088a4:	08065a40 	call	8065a4 <memmove>
  8088a8:	90c00017 	ldw	r3,0(r18)
  8088ac:	e009883a 	mov	r4,fp
  8088b0:	900b883a 	mov	r5,r18
  8088b4:	1c07883a 	add	r3,r3,r16
  8088b8:	90c00015 	stw	r3,0(r18)
  8088bc:	8027883a 	mov	r19,r16
  8088c0:	0808dcc0 	call	808dcc <_fflush_r>
  8088c4:	103f6b26 	beq	r2,zero,808674 <__sfvwrite_r+0x200>
  8088c8:	003f7f06 	br	8086c8 <__sfvwrite_r+0x254>
  8088cc:	400b883a 	mov	r5,r8
  8088d0:	e009883a 	mov	r4,fp
  8088d4:	08046a40 	call	8046a4 <_realloc_r>
  8088d8:	103f7626 	beq	r2,zero,8086b4 <__sfvwrite_r+0x240>
  8088dc:	1023883a 	mov	r17,r2
  8088e0:	003f5006 	br	808624 <__sfvwrite_r+0x1b0>
  8088e4:	00c00044 	movi	r3,1
  8088e8:	9d000044 	addi	r20,r19,1
  8088ec:	d8c00015 	stw	r3,0(sp)
  8088f0:	003f8206 	br	8086fc <__sfvwrite_r+0x288>
  8088f4:	9080030b 	ldhu	r2,12(r18)
  8088f8:	00c00244 	movi	r3,9
  8088fc:	013fffc4 	movi	r4,-1
  808900:	10801014 	ori	r2,r2,64
  808904:	9080030d 	sth	r2,12(r18)
  808908:	e0c00015 	stw	r3,0(fp)
  80890c:	003f0606 	br	808528 <__sfvwrite_r+0xb4>

00808910 <memchr>:
  808910:	008000c4 	movi	r2,3
  808914:	29403fcc 	andi	r5,r5,255
  808918:	2007883a 	mov	r3,r4
  80891c:	1180022e 	bgeu	r2,r6,808928 <memchr+0x18>
  808920:	2084703a 	and	r2,r4,r2
  808924:	10000b26 	beq	r2,zero,808954 <memchr+0x44>
  808928:	313fffc4 	addi	r4,r6,-1
  80892c:	3000051e 	bne	r6,zero,808944 <memchr+0x34>
  808930:	00002c06 	br	8089e4 <memchr+0xd4>
  808934:	213fffc4 	addi	r4,r4,-1
  808938:	00bfffc4 	movi	r2,-1
  80893c:	18c00044 	addi	r3,r3,1
  808940:	20802826 	beq	r4,r2,8089e4 <memchr+0xd4>
  808944:	18800003 	ldbu	r2,0(r3)
  808948:	28bffa1e 	bne	r5,r2,808934 <memchr+0x24>
  80894c:	1805883a 	mov	r2,r3
  808950:	f800283a 	ret
  808954:	0011883a 	mov	r8,zero
  808958:	0007883a 	mov	r3,zero
  80895c:	01c00104 	movi	r7,4
  808960:	4004923a 	slli	r2,r8,8
  808964:	18c00044 	addi	r3,r3,1
  808968:	1151883a 	add	r8,r2,r5
  80896c:	19fffc1e 	bne	r3,r7,808960 <memchr+0x50>
  808970:	02bfbff4 	movhi	r10,65279
  808974:	52bfbfc4 	addi	r10,r10,-257
  808978:	02602074 	movhi	r9,32897
  80897c:	4a602004 	addi	r9,r9,-32640
  808980:	02c000c4 	movi	r11,3
  808984:	20800017 	ldw	r2,0(r4)
  808988:	31bfff04 	addi	r6,r6,-4
  80898c:	200f883a 	mov	r7,r4
  808990:	1204f03a 	xor	r2,r2,r8
  808994:	1287883a 	add	r3,r2,r10
  808998:	1a46703a 	and	r3,r3,r9
  80899c:	0084303a 	nor	r2,zero,r2
  8089a0:	10c4703a 	and	r2,r2,r3
  8089a4:	10000b26 	beq	r2,zero,8089d4 <memchr+0xc4>
  8089a8:	20800003 	ldbu	r2,0(r4)
  8089ac:	28800f26 	beq	r5,r2,8089ec <memchr+0xdc>
  8089b0:	20800043 	ldbu	r2,1(r4)
  8089b4:	21c00044 	addi	r7,r4,1
  8089b8:	28800c26 	beq	r5,r2,8089ec <memchr+0xdc>
  8089bc:	20800083 	ldbu	r2,2(r4)
  8089c0:	21c00084 	addi	r7,r4,2
  8089c4:	28800926 	beq	r5,r2,8089ec <memchr+0xdc>
  8089c8:	208000c3 	ldbu	r2,3(r4)
  8089cc:	21c000c4 	addi	r7,r4,3
  8089d0:	28800626 	beq	r5,r2,8089ec <memchr+0xdc>
  8089d4:	21000104 	addi	r4,r4,4
  8089d8:	59bfea36 	bltu	r11,r6,808984 <memchr+0x74>
  8089dc:	2007883a 	mov	r3,r4
  8089e0:	003fd106 	br	808928 <memchr+0x18>
  8089e4:	0005883a 	mov	r2,zero
  8089e8:	f800283a 	ret
  8089ec:	3805883a 	mov	r2,r7
  8089f0:	f800283a 	ret

008089f4 <memcmp>:
  8089f4:	00c000c4 	movi	r3,3
  8089f8:	1980032e 	bgeu	r3,r6,808a08 <memcmp+0x14>
  8089fc:	2144b03a 	or	r2,r4,r5
  808a00:	10c4703a 	and	r2,r2,r3
  808a04:	10000f26 	beq	r2,zero,808a44 <memcmp+0x50>
  808a08:	31ffffc4 	addi	r7,r6,-1
  808a0c:	3000061e 	bne	r6,zero,808a28 <memcmp+0x34>
  808a10:	00000a06 	br	808a3c <memcmp+0x48>
  808a14:	39ffffc4 	addi	r7,r7,-1
  808a18:	00bfffc4 	movi	r2,-1
  808a1c:	21000044 	addi	r4,r4,1
  808a20:	29400044 	addi	r5,r5,1
  808a24:	38800526 	beq	r7,r2,808a3c <memcmp+0x48>
  808a28:	20c00003 	ldbu	r3,0(r4)
  808a2c:	28800003 	ldbu	r2,0(r5)
  808a30:	18bff826 	beq	r3,r2,808a14 <memcmp+0x20>
  808a34:	1885c83a 	sub	r2,r3,r2
  808a38:	f800283a 	ret
  808a3c:	0005883a 	mov	r2,zero
  808a40:	f800283a 	ret
  808a44:	180f883a 	mov	r7,r3
  808a48:	20c00017 	ldw	r3,0(r4)
  808a4c:	28800017 	ldw	r2,0(r5)
  808a50:	18bfed1e 	bne	r3,r2,808a08 <memcmp+0x14>
  808a54:	31bfff04 	addi	r6,r6,-4
  808a58:	21000104 	addi	r4,r4,4
  808a5c:	29400104 	addi	r5,r5,4
  808a60:	39bff936 	bltu	r7,r6,808a48 <memcmp+0x54>
  808a64:	003fe806 	br	808a08 <memcmp+0x14>

00808a68 <strlen>:
  808a68:	208000cc 	andi	r2,r4,3
  808a6c:	2011883a 	mov	r8,r4
  808a70:	1000161e 	bne	r2,zero,808acc <strlen+0x64>
  808a74:	20c00017 	ldw	r3,0(r4)
  808a78:	017fbff4 	movhi	r5,65279
  808a7c:	297fbfc4 	addi	r5,r5,-257
  808a80:	01e02074 	movhi	r7,32897
  808a84:	39e02004 	addi	r7,r7,-32640
  808a88:	1945883a 	add	r2,r3,r5
  808a8c:	11c4703a 	and	r2,r2,r7
  808a90:	00c6303a 	nor	r3,zero,r3
  808a94:	1886703a 	and	r3,r3,r2
  808a98:	18000c1e 	bne	r3,zero,808acc <strlen+0x64>
  808a9c:	280d883a 	mov	r6,r5
  808aa0:	380b883a 	mov	r5,r7
  808aa4:	21000104 	addi	r4,r4,4
  808aa8:	20800017 	ldw	r2,0(r4)
  808aac:	1187883a 	add	r3,r2,r6
  808ab0:	1946703a 	and	r3,r3,r5
  808ab4:	0084303a 	nor	r2,zero,r2
  808ab8:	10c4703a 	and	r2,r2,r3
  808abc:	103ff926 	beq	r2,zero,808aa4 <strlen+0x3c>
  808ac0:	20800007 	ldb	r2,0(r4)
  808ac4:	10000326 	beq	r2,zero,808ad4 <strlen+0x6c>
  808ac8:	21000044 	addi	r4,r4,1
  808acc:	20800007 	ldb	r2,0(r4)
  808ad0:	103ffd1e 	bne	r2,zero,808ac8 <strlen+0x60>
  808ad4:	2205c83a 	sub	r2,r4,r8
  808ad8:	f800283a 	ret

00808adc <__swsetup_r>:
  808adc:	00802074 	movhi	r2,129
  808ae0:	10aeef04 	addi	r2,r2,-17476
  808ae4:	10c00017 	ldw	r3,0(r2)
  808ae8:	defffd04 	addi	sp,sp,-12
  808aec:	dc400115 	stw	r17,4(sp)
  808af0:	dc000015 	stw	r16,0(sp)
  808af4:	dfc00215 	stw	ra,8(sp)
  808af8:	2023883a 	mov	r17,r4
  808afc:	2821883a 	mov	r16,r5
  808b00:	18000226 	beq	r3,zero,808b0c <__swsetup_r+0x30>
  808b04:	18800e17 	ldw	r2,56(r3)
  808b08:	10001f26 	beq	r2,zero,808b88 <__swsetup_r+0xac>
  808b0c:	8100030b 	ldhu	r4,12(r16)
  808b10:	2080020c 	andi	r2,r4,8
  808b14:	10002826 	beq	r2,zero,808bb8 <__swsetup_r+0xdc>
  808b18:	81400417 	ldw	r5,16(r16)
  808b1c:	28001d26 	beq	r5,zero,808b94 <__swsetup_r+0xb8>
  808b20:	2080004c 	andi	r2,r4,1
  808b24:	1005003a 	cmpeq	r2,r2,zero
  808b28:	10000b26 	beq	r2,zero,808b58 <__swsetup_r+0x7c>
  808b2c:	2080008c 	andi	r2,r4,2
  808b30:	10001226 	beq	r2,zero,808b7c <__swsetup_r+0xa0>
  808b34:	0005883a 	mov	r2,zero
  808b38:	80800215 	stw	r2,8(r16)
  808b3c:	28000b26 	beq	r5,zero,808b6c <__swsetup_r+0x90>
  808b40:	0005883a 	mov	r2,zero
  808b44:	dfc00217 	ldw	ra,8(sp)
  808b48:	dc400117 	ldw	r17,4(sp)
  808b4c:	dc000017 	ldw	r16,0(sp)
  808b50:	dec00304 	addi	sp,sp,12
  808b54:	f800283a 	ret
  808b58:	80800517 	ldw	r2,20(r16)
  808b5c:	80000215 	stw	zero,8(r16)
  808b60:	0085c83a 	sub	r2,zero,r2
  808b64:	80800615 	stw	r2,24(r16)
  808b68:	283ff51e 	bne	r5,zero,808b40 <__swsetup_r+0x64>
  808b6c:	2080200c 	andi	r2,r4,128
  808b70:	103ff326 	beq	r2,zero,808b40 <__swsetup_r+0x64>
  808b74:	00bfffc4 	movi	r2,-1
  808b78:	003ff206 	br	808b44 <__swsetup_r+0x68>
  808b7c:	80800517 	ldw	r2,20(r16)
  808b80:	80800215 	stw	r2,8(r16)
  808b84:	003fed06 	br	808b3c <__swsetup_r+0x60>
  808b88:	1809883a 	mov	r4,r3
  808b8c:	08090640 	call	809064 <__sinit>
  808b90:	003fde06 	br	808b0c <__swsetup_r+0x30>
  808b94:	20c0a00c 	andi	r3,r4,640
  808b98:	00808004 	movi	r2,512
  808b9c:	18bfe026 	beq	r3,r2,808b20 <__swsetup_r+0x44>
  808ba0:	8809883a 	mov	r4,r17
  808ba4:	800b883a 	mov	r5,r16
  808ba8:	080943c0 	call	80943c <__smakebuf_r>
  808bac:	8100030b 	ldhu	r4,12(r16)
  808bb0:	81400417 	ldw	r5,16(r16)
  808bb4:	003fda06 	br	808b20 <__swsetup_r+0x44>
  808bb8:	2080040c 	andi	r2,r4,16
  808bbc:	103fed26 	beq	r2,zero,808b74 <__swsetup_r+0x98>
  808bc0:	2080010c 	andi	r2,r4,4
  808bc4:	10001226 	beq	r2,zero,808c10 <__swsetup_r+0x134>
  808bc8:	81400c17 	ldw	r5,48(r16)
  808bcc:	28000526 	beq	r5,zero,808be4 <__swsetup_r+0x108>
  808bd0:	80801004 	addi	r2,r16,64
  808bd4:	28800226 	beq	r5,r2,808be0 <__swsetup_r+0x104>
  808bd8:	8809883a 	mov	r4,r17
  808bdc:	080339c0 	call	80339c <_free_r>
  808be0:	80000c15 	stw	zero,48(r16)
  808be4:	8080030b 	ldhu	r2,12(r16)
  808be8:	81400417 	ldw	r5,16(r16)
  808bec:	80000115 	stw	zero,4(r16)
  808bf0:	10bff6cc 	andi	r2,r2,65499
  808bf4:	8080030d 	sth	r2,12(r16)
  808bf8:	81400015 	stw	r5,0(r16)
  808bfc:	8080030b 	ldhu	r2,12(r16)
  808c00:	10800214 	ori	r2,r2,8
  808c04:	113fffcc 	andi	r4,r2,65535
  808c08:	8080030d 	sth	r2,12(r16)
  808c0c:	003fc306 	br	808b1c <__swsetup_r+0x40>
  808c10:	81400417 	ldw	r5,16(r16)
  808c14:	003ff906 	br	808bfc <__swsetup_r+0x120>

00808c18 <register_fini>:
  808c18:	f800283a 	ret

00808c1c <__call_exitprocs>:
  808c1c:	00802074 	movhi	r2,129
  808c20:	10aef004 	addi	r2,r2,-17472
  808c24:	10800017 	ldw	r2,0(r2)
  808c28:	defff304 	addi	sp,sp,-52
  808c2c:	df000b15 	stw	fp,44(sp)
  808c30:	d8800115 	stw	r2,4(sp)
  808c34:	00802034 	movhi	r2,128
  808c38:	1087d004 	addi	r2,r2,8000
  808c3c:	1005003a 	cmpeq	r2,r2,zero
  808c40:	d8800215 	stw	r2,8(sp)
  808c44:	d8800117 	ldw	r2,4(sp)
  808c48:	dd400815 	stw	r21,32(sp)
  808c4c:	dd000715 	stw	r20,28(sp)
  808c50:	10805204 	addi	r2,r2,328
  808c54:	dfc00c15 	stw	ra,48(sp)
  808c58:	ddc00a15 	stw	r23,40(sp)
  808c5c:	dd800915 	stw	r22,36(sp)
  808c60:	dcc00615 	stw	r19,24(sp)
  808c64:	dc800515 	stw	r18,20(sp)
  808c68:	dc400415 	stw	r17,16(sp)
  808c6c:	dc000315 	stw	r16,12(sp)
  808c70:	282b883a 	mov	r21,r5
  808c74:	2039883a 	mov	fp,r4
  808c78:	d8800015 	stw	r2,0(sp)
  808c7c:	2829003a 	cmpeq	r20,r5,zero
  808c80:	d8800117 	ldw	r2,4(sp)
  808c84:	14405217 	ldw	r17,328(r2)
  808c88:	88001026 	beq	r17,zero,808ccc <__call_exitprocs+0xb0>
  808c8c:	ddc00017 	ldw	r23,0(sp)
  808c90:	88800117 	ldw	r2,4(r17)
  808c94:	8c802204 	addi	r18,r17,136
  808c98:	143fffc4 	addi	r16,r2,-1
  808c9c:	80000916 	blt	r16,zero,808cc4 <__call_exitprocs+0xa8>
  808ca0:	05bfffc4 	movi	r22,-1
  808ca4:	a000151e 	bne	r20,zero,808cfc <__call_exitprocs+0xe0>
  808ca8:	8409883a 	add	r4,r16,r16
  808cac:	2105883a 	add	r2,r4,r4
  808cb0:	1485883a 	add	r2,r2,r18
  808cb4:	10c02017 	ldw	r3,128(r2)
  808cb8:	a8c01126 	beq	r21,r3,808d00 <__call_exitprocs+0xe4>
  808cbc:	843fffc4 	addi	r16,r16,-1
  808cc0:	85bff81e 	bne	r16,r22,808ca4 <__call_exitprocs+0x88>
  808cc4:	d8800217 	ldw	r2,8(sp)
  808cc8:	10003126 	beq	r2,zero,808d90 <__call_exitprocs+0x174>
  808ccc:	dfc00c17 	ldw	ra,48(sp)
  808cd0:	df000b17 	ldw	fp,44(sp)
  808cd4:	ddc00a17 	ldw	r23,40(sp)
  808cd8:	dd800917 	ldw	r22,36(sp)
  808cdc:	dd400817 	ldw	r21,32(sp)
  808ce0:	dd000717 	ldw	r20,28(sp)
  808ce4:	dcc00617 	ldw	r19,24(sp)
  808ce8:	dc800517 	ldw	r18,20(sp)
  808cec:	dc400417 	ldw	r17,16(sp)
  808cf0:	dc000317 	ldw	r16,12(sp)
  808cf4:	dec00d04 	addi	sp,sp,52
  808cf8:	f800283a 	ret
  808cfc:	8409883a 	add	r4,r16,r16
  808d00:	88c00117 	ldw	r3,4(r17)
  808d04:	2105883a 	add	r2,r4,r4
  808d08:	1445883a 	add	r2,r2,r17
  808d0c:	18ffffc4 	addi	r3,r3,-1
  808d10:	11800217 	ldw	r6,8(r2)
  808d14:	1c001526 	beq	r3,r16,808d6c <__call_exitprocs+0x150>
  808d18:	10000215 	stw	zero,8(r2)
  808d1c:	303fe726 	beq	r6,zero,808cbc <__call_exitprocs+0xa0>
  808d20:	00c00044 	movi	r3,1
  808d24:	1c06983a 	sll	r3,r3,r16
  808d28:	90804017 	ldw	r2,256(r18)
  808d2c:	8cc00117 	ldw	r19,4(r17)
  808d30:	1884703a 	and	r2,r3,r2
  808d34:	10001426 	beq	r2,zero,808d88 <__call_exitprocs+0x16c>
  808d38:	90804117 	ldw	r2,260(r18)
  808d3c:	1884703a 	and	r2,r3,r2
  808d40:	10000c1e 	bne	r2,zero,808d74 <__call_exitprocs+0x158>
  808d44:	2105883a 	add	r2,r4,r4
  808d48:	1485883a 	add	r2,r2,r18
  808d4c:	11400017 	ldw	r5,0(r2)
  808d50:	e009883a 	mov	r4,fp
  808d54:	303ee83a 	callr	r6
  808d58:	88800117 	ldw	r2,4(r17)
  808d5c:	98bfc81e 	bne	r19,r2,808c80 <__call_exitprocs+0x64>
  808d60:	b8800017 	ldw	r2,0(r23)
  808d64:	147fd526 	beq	r2,r17,808cbc <__call_exitprocs+0xa0>
  808d68:	003fc506 	br	808c80 <__call_exitprocs+0x64>
  808d6c:	8c000115 	stw	r16,4(r17)
  808d70:	003fea06 	br	808d1c <__call_exitprocs+0x100>
  808d74:	2105883a 	add	r2,r4,r4
  808d78:	1485883a 	add	r2,r2,r18
  808d7c:	11000017 	ldw	r4,0(r2)
  808d80:	303ee83a 	callr	r6
  808d84:	003ff406 	br	808d58 <__call_exitprocs+0x13c>
  808d88:	303ee83a 	callr	r6
  808d8c:	003ff206 	br	808d58 <__call_exitprocs+0x13c>
  808d90:	88800117 	ldw	r2,4(r17)
  808d94:	1000081e 	bne	r2,zero,808db8 <__call_exitprocs+0x19c>
  808d98:	89000017 	ldw	r4,0(r17)
  808d9c:	20000726 	beq	r4,zero,808dbc <__call_exitprocs+0x1a0>
  808da0:	b9000015 	stw	r4,0(r23)
  808da4:	8809883a 	mov	r4,r17
  808da8:	0801f400 	call	801f40 <free>
  808dac:	bc400017 	ldw	r17,0(r23)
  808db0:	883fb71e 	bne	r17,zero,808c90 <__call_exitprocs+0x74>
  808db4:	003fc506 	br	808ccc <__call_exitprocs+0xb0>
  808db8:	89000017 	ldw	r4,0(r17)
  808dbc:	882f883a 	mov	r23,r17
  808dc0:	2023883a 	mov	r17,r4
  808dc4:	883fb21e 	bne	r17,zero,808c90 <__call_exitprocs+0x74>
  808dc8:	003fc006 	br	808ccc <__call_exitprocs+0xb0>

00808dcc <_fflush_r>:
  808dcc:	defffb04 	addi	sp,sp,-20
  808dd0:	dcc00315 	stw	r19,12(sp)
  808dd4:	dc800215 	stw	r18,8(sp)
  808dd8:	dfc00415 	stw	ra,16(sp)
  808ddc:	dc400115 	stw	r17,4(sp)
  808de0:	dc000015 	stw	r16,0(sp)
  808de4:	2027883a 	mov	r19,r4
  808de8:	2825883a 	mov	r18,r5
  808dec:	20000226 	beq	r4,zero,808df8 <_fflush_r+0x2c>
  808df0:	20800e17 	ldw	r2,56(r4)
  808df4:	10005626 	beq	r2,zero,808f50 <_fflush_r+0x184>
  808df8:	9100030b 	ldhu	r4,12(r18)
  808dfc:	20ffffcc 	andi	r3,r4,65535
  808e00:	18e0001c 	xori	r3,r3,32768
  808e04:	18e00004 	addi	r3,r3,-32768
  808e08:	1880020c 	andi	r2,r3,8
  808e0c:	1000261e 	bne	r2,zero,808ea8 <_fflush_r+0xdc>
  808e10:	90c00117 	ldw	r3,4(r18)
  808e14:	20820014 	ori	r2,r4,2048
  808e18:	9080030d 	sth	r2,12(r18)
  808e1c:	1009883a 	mov	r4,r2
  808e20:	00c0400e 	bge	zero,r3,808f24 <_fflush_r+0x158>
  808e24:	92000a17 	ldw	r8,40(r18)
  808e28:	40004026 	beq	r8,zero,808f2c <_fflush_r+0x160>
  808e2c:	2084000c 	andi	r2,r4,4096
  808e30:	10005326 	beq	r2,zero,808f80 <_fflush_r+0x1b4>
  808e34:	94001417 	ldw	r16,80(r18)
  808e38:	9080030b 	ldhu	r2,12(r18)
  808e3c:	1080010c 	andi	r2,r2,4
  808e40:	1000481e 	bne	r2,zero,808f64 <_fflush_r+0x198>
  808e44:	91400717 	ldw	r5,28(r18)
  808e48:	9809883a 	mov	r4,r19
  808e4c:	800d883a 	mov	r6,r16
  808e50:	000f883a 	mov	r7,zero
  808e54:	403ee83a 	callr	r8
  808e58:	8080261e 	bne	r16,r2,808ef4 <_fflush_r+0x128>
  808e5c:	9080030b 	ldhu	r2,12(r18)
  808e60:	91000417 	ldw	r4,16(r18)
  808e64:	90000115 	stw	zero,4(r18)
  808e68:	10bdffcc 	andi	r2,r2,63487
  808e6c:	10ffffcc 	andi	r3,r2,65535
  808e70:	18c4000c 	andi	r3,r3,4096
  808e74:	9080030d 	sth	r2,12(r18)
  808e78:	91000015 	stw	r4,0(r18)
  808e7c:	18002b26 	beq	r3,zero,808f2c <_fflush_r+0x160>
  808e80:	0007883a 	mov	r3,zero
  808e84:	1805883a 	mov	r2,r3
  808e88:	94001415 	stw	r16,80(r18)
  808e8c:	dfc00417 	ldw	ra,16(sp)
  808e90:	dcc00317 	ldw	r19,12(sp)
  808e94:	dc800217 	ldw	r18,8(sp)
  808e98:	dc400117 	ldw	r17,4(sp)
  808e9c:	dc000017 	ldw	r16,0(sp)
  808ea0:	dec00504 	addi	sp,sp,20
  808ea4:	f800283a 	ret
  808ea8:	94400417 	ldw	r17,16(r18)
  808eac:	88001f26 	beq	r17,zero,808f2c <_fflush_r+0x160>
  808eb0:	90800017 	ldw	r2,0(r18)
  808eb4:	18c000cc 	andi	r3,r3,3
  808eb8:	94400015 	stw	r17,0(r18)
  808ebc:	1461c83a 	sub	r16,r2,r17
  808ec0:	18002526 	beq	r3,zero,808f58 <_fflush_r+0x18c>
  808ec4:	0005883a 	mov	r2,zero
  808ec8:	90800215 	stw	r2,8(r18)
  808ecc:	0400170e 	bge	zero,r16,808f2c <_fflush_r+0x160>
  808ed0:	90c00917 	ldw	r3,36(r18)
  808ed4:	91400717 	ldw	r5,28(r18)
  808ed8:	880d883a 	mov	r6,r17
  808edc:	800f883a 	mov	r7,r16
  808ee0:	9809883a 	mov	r4,r19
  808ee4:	183ee83a 	callr	r3
  808ee8:	88a3883a 	add	r17,r17,r2
  808eec:	80a1c83a 	sub	r16,r16,r2
  808ef0:	00bff616 	blt	zero,r2,808ecc <_fflush_r+0x100>
  808ef4:	9080030b 	ldhu	r2,12(r18)
  808ef8:	00ffffc4 	movi	r3,-1
  808efc:	10801014 	ori	r2,r2,64
  808f00:	9080030d 	sth	r2,12(r18)
  808f04:	1805883a 	mov	r2,r3
  808f08:	dfc00417 	ldw	ra,16(sp)
  808f0c:	dcc00317 	ldw	r19,12(sp)
  808f10:	dc800217 	ldw	r18,8(sp)
  808f14:	dc400117 	ldw	r17,4(sp)
  808f18:	dc000017 	ldw	r16,0(sp)
  808f1c:	dec00504 	addi	sp,sp,20
  808f20:	f800283a 	ret
  808f24:	90800f17 	ldw	r2,60(r18)
  808f28:	00bfbe16 	blt	zero,r2,808e24 <_fflush_r+0x58>
  808f2c:	0007883a 	mov	r3,zero
  808f30:	1805883a 	mov	r2,r3
  808f34:	dfc00417 	ldw	ra,16(sp)
  808f38:	dcc00317 	ldw	r19,12(sp)
  808f3c:	dc800217 	ldw	r18,8(sp)
  808f40:	dc400117 	ldw	r17,4(sp)
  808f44:	dc000017 	ldw	r16,0(sp)
  808f48:	dec00504 	addi	sp,sp,20
  808f4c:	f800283a 	ret
  808f50:	08090640 	call	809064 <__sinit>
  808f54:	003fa806 	br	808df8 <_fflush_r+0x2c>
  808f58:	90800517 	ldw	r2,20(r18)
  808f5c:	90800215 	stw	r2,8(r18)
  808f60:	003fda06 	br	808ecc <_fflush_r+0x100>
  808f64:	90800117 	ldw	r2,4(r18)
  808f68:	90c00c17 	ldw	r3,48(r18)
  808f6c:	80a1c83a 	sub	r16,r16,r2
  808f70:	183fb426 	beq	r3,zero,808e44 <_fflush_r+0x78>
  808f74:	90800f17 	ldw	r2,60(r18)
  808f78:	80a1c83a 	sub	r16,r16,r2
  808f7c:	003fb106 	br	808e44 <_fflush_r+0x78>
  808f80:	91400717 	ldw	r5,28(r18)
  808f84:	9809883a 	mov	r4,r19
  808f88:	000d883a 	mov	r6,zero
  808f8c:	01c00044 	movi	r7,1
  808f90:	403ee83a 	callr	r8
  808f94:	1021883a 	mov	r16,r2
  808f98:	00bfffc4 	movi	r2,-1
  808f9c:	80800226 	beq	r16,r2,808fa8 <_fflush_r+0x1dc>
  808fa0:	92000a17 	ldw	r8,40(r18)
  808fa4:	003fa406 	br	808e38 <_fflush_r+0x6c>
  808fa8:	98c00017 	ldw	r3,0(r19)
  808fac:	00800744 	movi	r2,29
  808fb0:	18bfde26 	beq	r3,r2,808f2c <_fflush_r+0x160>
  808fb4:	9080030b 	ldhu	r2,12(r18)
  808fb8:	8007883a 	mov	r3,r16
  808fbc:	10801014 	ori	r2,r2,64
  808fc0:	9080030d 	sth	r2,12(r18)
  808fc4:	003fcf06 	br	808f04 <_fflush_r+0x138>

00808fc8 <fflush>:
  808fc8:	01402074 	movhi	r5,129
  808fcc:	29637304 	addi	r5,r5,-29236
  808fd0:	2007883a 	mov	r3,r4
  808fd4:	20000526 	beq	r4,zero,808fec <fflush+0x24>
  808fd8:	00802074 	movhi	r2,129
  808fdc:	10aeef04 	addi	r2,r2,-17476
  808fe0:	11000017 	ldw	r4,0(r2)
  808fe4:	180b883a 	mov	r5,r3
  808fe8:	0808dcc1 	jmpi	808dcc <_fflush_r>
  808fec:	00802074 	movhi	r2,129
  808ff0:	10aef004 	addi	r2,r2,-17472
  808ff4:	11000017 	ldw	r4,0(r2)
  808ff8:	08092bc1 	jmpi	8092bc <_fwalk_reent>

00808ffc <std>:
  808ffc:	00802074 	movhi	r2,129
  809000:	10a57404 	addi	r2,r2,-27184
  809004:	20800b15 	stw	r2,44(r4)
  809008:	00802074 	movhi	r2,129
  80900c:	10a5af04 	addi	r2,r2,-26948
  809010:	20800815 	stw	r2,32(r4)
  809014:	00c02074 	movhi	r3,129
  809018:	18e59004 	addi	r3,r3,-27072
  80901c:	00802074 	movhi	r2,129
  809020:	10a57604 	addi	r2,r2,-27176
  809024:	2140030d 	sth	r5,12(r4)
  809028:	2180038d 	sth	r6,14(r4)
  80902c:	20c00915 	stw	r3,36(r4)
  809030:	20800a15 	stw	r2,40(r4)
  809034:	20000015 	stw	zero,0(r4)
  809038:	20000115 	stw	zero,4(r4)
  80903c:	20000215 	stw	zero,8(r4)
  809040:	20000415 	stw	zero,16(r4)
  809044:	20000515 	stw	zero,20(r4)
  809048:	20000615 	stw	zero,24(r4)
  80904c:	21000715 	stw	r4,28(r4)
  809050:	f800283a 	ret

00809054 <__sfp_lock_acquire>:
  809054:	f800283a 	ret

00809058 <__sfp_lock_release>:
  809058:	f800283a 	ret

0080905c <__sinit_lock_acquire>:
  80905c:	f800283a 	ret

00809060 <__sinit_lock_release>:
  809060:	f800283a 	ret

00809064 <__sinit>:
  809064:	20800e17 	ldw	r2,56(r4)
  809068:	defffd04 	addi	sp,sp,-12
  80906c:	dc400115 	stw	r17,4(sp)
  809070:	dc000015 	stw	r16,0(sp)
  809074:	dfc00215 	stw	ra,8(sp)
  809078:	04400044 	movi	r17,1
  80907c:	01400104 	movi	r5,4
  809080:	000d883a 	mov	r6,zero
  809084:	2021883a 	mov	r16,r4
  809088:	2200bb04 	addi	r8,r4,748
  80908c:	200f883a 	mov	r7,r4
  809090:	10000526 	beq	r2,zero,8090a8 <__sinit+0x44>
  809094:	dfc00217 	ldw	ra,8(sp)
  809098:	dc400117 	ldw	r17,4(sp)
  80909c:	dc000017 	ldw	r16,0(sp)
  8090a0:	dec00304 	addi	sp,sp,12
  8090a4:	f800283a 	ret
  8090a8:	21000117 	ldw	r4,4(r4)
  8090ac:	00802074 	movhi	r2,129
  8090b0:	10a45204 	addi	r2,r2,-28344
  8090b4:	00c000c4 	movi	r3,3
  8090b8:	80800f15 	stw	r2,60(r16)
  8090bc:	80c0b915 	stw	r3,740(r16)
  8090c0:	8200ba15 	stw	r8,744(r16)
  8090c4:	84400e15 	stw	r17,56(r16)
  8090c8:	8000b815 	stw	zero,736(r16)
  8090cc:	0808ffc0 	call	808ffc <std>
  8090d0:	81000217 	ldw	r4,8(r16)
  8090d4:	880d883a 	mov	r6,r17
  8090d8:	800f883a 	mov	r7,r16
  8090dc:	01400284 	movi	r5,10
  8090e0:	0808ffc0 	call	808ffc <std>
  8090e4:	81000317 	ldw	r4,12(r16)
  8090e8:	800f883a 	mov	r7,r16
  8090ec:	01400484 	movi	r5,18
  8090f0:	01800084 	movi	r6,2
  8090f4:	dfc00217 	ldw	ra,8(sp)
  8090f8:	dc400117 	ldw	r17,4(sp)
  8090fc:	dc000017 	ldw	r16,0(sp)
  809100:	dec00304 	addi	sp,sp,12
  809104:	0808ffc1 	jmpi	808ffc <std>

00809108 <__fp_lock>:
  809108:	0005883a 	mov	r2,zero
  80910c:	f800283a 	ret

00809110 <__fp_unlock>:
  809110:	0005883a 	mov	r2,zero
  809114:	f800283a 	ret

00809118 <__fp_unlock_all>:
  809118:	00802074 	movhi	r2,129
  80911c:	10aeef04 	addi	r2,r2,-17476
  809120:	11000017 	ldw	r4,0(r2)
  809124:	01402074 	movhi	r5,129
  809128:	29644404 	addi	r5,r5,-28400
  80912c:	08093841 	jmpi	809384 <_fwalk>

00809130 <__fp_lock_all>:
  809130:	00802074 	movhi	r2,129
  809134:	10aeef04 	addi	r2,r2,-17476
  809138:	11000017 	ldw	r4,0(r2)
  80913c:	01402074 	movhi	r5,129
  809140:	29644204 	addi	r5,r5,-28408
  809144:	08093841 	jmpi	809384 <_fwalk>

00809148 <_cleanup_r>:
  809148:	01402074 	movhi	r5,129
  80914c:	29664504 	addi	r5,r5,-26348
  809150:	08093841 	jmpi	809384 <_fwalk>

00809154 <_cleanup>:
  809154:	00802074 	movhi	r2,129
  809158:	10aef004 	addi	r2,r2,-17472
  80915c:	11000017 	ldw	r4,0(r2)
  809160:	08091481 	jmpi	809148 <_cleanup_r>

00809164 <__sfmoreglue>:
  809164:	defffc04 	addi	sp,sp,-16
  809168:	dc400115 	stw	r17,4(sp)
  80916c:	2c401724 	muli	r17,r5,92
  809170:	dc800215 	stw	r18,8(sp)
  809174:	2825883a 	mov	r18,r5
  809178:	89400304 	addi	r5,r17,12
  80917c:	dc000015 	stw	r16,0(sp)
  809180:	dfc00315 	stw	ra,12(sp)
  809184:	0801f680 	call	801f68 <_malloc_r>
  809188:	0021883a 	mov	r16,zero
  80918c:	880d883a 	mov	r6,r17
  809190:	000b883a 	mov	r5,zero
  809194:	10000626 	beq	r2,zero,8091b0 <__sfmoreglue+0x4c>
  809198:	11000304 	addi	r4,r2,12
  80919c:	14800115 	stw	r18,4(r2)
  8091a0:	10000015 	stw	zero,0(r2)
  8091a4:	11000215 	stw	r4,8(r2)
  8091a8:	1021883a 	mov	r16,r2
  8091ac:	08066840 	call	806684 <memset>
  8091b0:	8005883a 	mov	r2,r16
  8091b4:	dfc00317 	ldw	ra,12(sp)
  8091b8:	dc800217 	ldw	r18,8(sp)
  8091bc:	dc400117 	ldw	r17,4(sp)
  8091c0:	dc000017 	ldw	r16,0(sp)
  8091c4:	dec00404 	addi	sp,sp,16
  8091c8:	f800283a 	ret

008091cc <__sfp>:
  8091cc:	defffd04 	addi	sp,sp,-12
  8091d0:	00802074 	movhi	r2,129
  8091d4:	10aef004 	addi	r2,r2,-17472
  8091d8:	dc000015 	stw	r16,0(sp)
  8091dc:	14000017 	ldw	r16,0(r2)
  8091e0:	dc400115 	stw	r17,4(sp)
  8091e4:	dfc00215 	stw	ra,8(sp)
  8091e8:	80800e17 	ldw	r2,56(r16)
  8091ec:	2023883a 	mov	r17,r4
  8091f0:	10002626 	beq	r2,zero,80928c <__sfp+0xc0>
  8091f4:	8400b804 	addi	r16,r16,736
  8091f8:	80800117 	ldw	r2,4(r16)
  8091fc:	81000217 	ldw	r4,8(r16)
  809200:	10ffffc4 	addi	r3,r2,-1
  809204:	18000916 	blt	r3,zero,80922c <__sfp+0x60>
  809208:	2080030f 	ldh	r2,12(r4)
  80920c:	10000b26 	beq	r2,zero,80923c <__sfp+0x70>
  809210:	017fffc4 	movi	r5,-1
  809214:	00000206 	br	809220 <__sfp+0x54>
  809218:	2080030f 	ldh	r2,12(r4)
  80921c:	10000726 	beq	r2,zero,80923c <__sfp+0x70>
  809220:	18ffffc4 	addi	r3,r3,-1
  809224:	21001704 	addi	r4,r4,92
  809228:	197ffb1e 	bne	r3,r5,809218 <__sfp+0x4c>
  80922c:	80800017 	ldw	r2,0(r16)
  809230:	10001926 	beq	r2,zero,809298 <__sfp+0xcc>
  809234:	1021883a 	mov	r16,r2
  809238:	003fef06 	br	8091f8 <__sfp+0x2c>
  80923c:	00bfffc4 	movi	r2,-1
  809240:	00c00044 	movi	r3,1
  809244:	2080038d 	sth	r2,14(r4)
  809248:	20c0030d 	sth	r3,12(r4)
  80924c:	20000015 	stw	zero,0(r4)
  809250:	20000215 	stw	zero,8(r4)
  809254:	20000115 	stw	zero,4(r4)
  809258:	20000415 	stw	zero,16(r4)
  80925c:	20000515 	stw	zero,20(r4)
  809260:	20000615 	stw	zero,24(r4)
  809264:	20000c15 	stw	zero,48(r4)
  809268:	20000d15 	stw	zero,52(r4)
  80926c:	20001115 	stw	zero,68(r4)
  809270:	20001215 	stw	zero,72(r4)
  809274:	2005883a 	mov	r2,r4
  809278:	dfc00217 	ldw	ra,8(sp)
  80927c:	dc400117 	ldw	r17,4(sp)
  809280:	dc000017 	ldw	r16,0(sp)
  809284:	dec00304 	addi	sp,sp,12
  809288:	f800283a 	ret
  80928c:	8009883a 	mov	r4,r16
  809290:	08090640 	call	809064 <__sinit>
  809294:	003fd706 	br	8091f4 <__sfp+0x28>
  809298:	8809883a 	mov	r4,r17
  80929c:	01400104 	movi	r5,4
  8092a0:	08091640 	call	809164 <__sfmoreglue>
  8092a4:	80800015 	stw	r2,0(r16)
  8092a8:	103fe21e 	bne	r2,zero,809234 <__sfp+0x68>
  8092ac:	00800304 	movi	r2,12
  8092b0:	0009883a 	mov	r4,zero
  8092b4:	88800015 	stw	r2,0(r17)
  8092b8:	003fee06 	br	809274 <__sfp+0xa8>

008092bc <_fwalk_reent>:
  8092bc:	defff704 	addi	sp,sp,-36
  8092c0:	dcc00315 	stw	r19,12(sp)
  8092c4:	24c0b804 	addi	r19,r4,736
  8092c8:	dd800615 	stw	r22,24(sp)
  8092cc:	dd400515 	stw	r21,20(sp)
  8092d0:	dfc00815 	stw	ra,32(sp)
  8092d4:	ddc00715 	stw	r23,28(sp)
  8092d8:	dd000415 	stw	r20,16(sp)
  8092dc:	dc800215 	stw	r18,8(sp)
  8092e0:	dc400115 	stw	r17,4(sp)
  8092e4:	dc000015 	stw	r16,0(sp)
  8092e8:	202b883a 	mov	r21,r4
  8092ec:	282d883a 	mov	r22,r5
  8092f0:	08090540 	call	809054 <__sfp_lock_acquire>
  8092f4:	98002126 	beq	r19,zero,80937c <_fwalk_reent+0xc0>
  8092f8:	002f883a 	mov	r23,zero
  8092fc:	9c800117 	ldw	r18,4(r19)
  809300:	9c000217 	ldw	r16,8(r19)
  809304:	90bfffc4 	addi	r2,r18,-1
  809308:	10000d16 	blt	r2,zero,809340 <_fwalk_reent+0x84>
  80930c:	0023883a 	mov	r17,zero
  809310:	053fffc4 	movi	r20,-1
  809314:	8080030f 	ldh	r2,12(r16)
  809318:	8c400044 	addi	r17,r17,1
  80931c:	10000626 	beq	r2,zero,809338 <_fwalk_reent+0x7c>
  809320:	8080038f 	ldh	r2,14(r16)
  809324:	800b883a 	mov	r5,r16
  809328:	a809883a 	mov	r4,r21
  80932c:	15000226 	beq	r2,r20,809338 <_fwalk_reent+0x7c>
  809330:	b03ee83a 	callr	r22
  809334:	b8aeb03a 	or	r23,r23,r2
  809338:	84001704 	addi	r16,r16,92
  80933c:	947ff51e 	bne	r18,r17,809314 <_fwalk_reent+0x58>
  809340:	9cc00017 	ldw	r19,0(r19)
  809344:	983fed1e 	bne	r19,zero,8092fc <_fwalk_reent+0x40>
  809348:	08090580 	call	809058 <__sfp_lock_release>
  80934c:	b805883a 	mov	r2,r23
  809350:	dfc00817 	ldw	ra,32(sp)
  809354:	ddc00717 	ldw	r23,28(sp)
  809358:	dd800617 	ldw	r22,24(sp)
  80935c:	dd400517 	ldw	r21,20(sp)
  809360:	dd000417 	ldw	r20,16(sp)
  809364:	dcc00317 	ldw	r19,12(sp)
  809368:	dc800217 	ldw	r18,8(sp)
  80936c:	dc400117 	ldw	r17,4(sp)
  809370:	dc000017 	ldw	r16,0(sp)
  809374:	dec00904 	addi	sp,sp,36
  809378:	f800283a 	ret
  80937c:	002f883a 	mov	r23,zero
  809380:	003ff106 	br	809348 <_fwalk_reent+0x8c>

00809384 <_fwalk>:
  809384:	defff804 	addi	sp,sp,-32
  809388:	dcc00315 	stw	r19,12(sp)
  80938c:	24c0b804 	addi	r19,r4,736
  809390:	dd400515 	stw	r21,20(sp)
  809394:	dfc00715 	stw	ra,28(sp)
  809398:	dd800615 	stw	r22,24(sp)
  80939c:	dd000415 	stw	r20,16(sp)
  8093a0:	dc800215 	stw	r18,8(sp)
  8093a4:	dc400115 	stw	r17,4(sp)
  8093a8:	dc000015 	stw	r16,0(sp)
  8093ac:	282b883a 	mov	r21,r5
  8093b0:	08090540 	call	809054 <__sfp_lock_acquire>
  8093b4:	98001f26 	beq	r19,zero,809434 <_fwalk+0xb0>
  8093b8:	002d883a 	mov	r22,zero
  8093bc:	9c800117 	ldw	r18,4(r19)
  8093c0:	9c000217 	ldw	r16,8(r19)
  8093c4:	90bfffc4 	addi	r2,r18,-1
  8093c8:	10000c16 	blt	r2,zero,8093fc <_fwalk+0x78>
  8093cc:	0023883a 	mov	r17,zero
  8093d0:	053fffc4 	movi	r20,-1
  8093d4:	8080030f 	ldh	r2,12(r16)
  8093d8:	8c400044 	addi	r17,r17,1
  8093dc:	10000526 	beq	r2,zero,8093f4 <_fwalk+0x70>
  8093e0:	8080038f 	ldh	r2,14(r16)
  8093e4:	8009883a 	mov	r4,r16
  8093e8:	15000226 	beq	r2,r20,8093f4 <_fwalk+0x70>
  8093ec:	a83ee83a 	callr	r21
  8093f0:	b0acb03a 	or	r22,r22,r2
  8093f4:	84001704 	addi	r16,r16,92
  8093f8:	947ff61e 	bne	r18,r17,8093d4 <_fwalk+0x50>
  8093fc:	9cc00017 	ldw	r19,0(r19)
  809400:	983fee1e 	bne	r19,zero,8093bc <_fwalk+0x38>
  809404:	08090580 	call	809058 <__sfp_lock_release>
  809408:	b005883a 	mov	r2,r22
  80940c:	dfc00717 	ldw	ra,28(sp)
  809410:	dd800617 	ldw	r22,24(sp)
  809414:	dd400517 	ldw	r21,20(sp)
  809418:	dd000417 	ldw	r20,16(sp)
  80941c:	dcc00317 	ldw	r19,12(sp)
  809420:	dc800217 	ldw	r18,8(sp)
  809424:	dc400117 	ldw	r17,4(sp)
  809428:	dc000017 	ldw	r16,0(sp)
  80942c:	dec00804 	addi	sp,sp,32
  809430:	f800283a 	ret
  809434:	002d883a 	mov	r22,zero
  809438:	003ff206 	br	809404 <_fwalk+0x80>

0080943c <__smakebuf_r>:
  80943c:	2880030b 	ldhu	r2,12(r5)
  809440:	deffed04 	addi	sp,sp,-76
  809444:	dc401015 	stw	r17,64(sp)
  809448:	1080008c 	andi	r2,r2,2
  80944c:	dc000f15 	stw	r16,60(sp)
  809450:	dfc01215 	stw	ra,72(sp)
  809454:	dc801115 	stw	r18,68(sp)
  809458:	2821883a 	mov	r16,r5
  80945c:	2023883a 	mov	r17,r4
  809460:	10000b26 	beq	r2,zero,809490 <__smakebuf_r+0x54>
  809464:	28c010c4 	addi	r3,r5,67
  809468:	00800044 	movi	r2,1
  80946c:	28800515 	stw	r2,20(r5)
  809470:	28c00415 	stw	r3,16(r5)
  809474:	28c00015 	stw	r3,0(r5)
  809478:	dfc01217 	ldw	ra,72(sp)
  80947c:	dc801117 	ldw	r18,68(sp)
  809480:	dc401017 	ldw	r17,64(sp)
  809484:	dc000f17 	ldw	r16,60(sp)
  809488:	dec01304 	addi	sp,sp,76
  80948c:	f800283a 	ret
  809490:	2940038f 	ldh	r5,14(r5)
  809494:	28002116 	blt	r5,zero,80951c <__smakebuf_r+0xe0>
  809498:	d80d883a 	mov	r6,sp
  80949c:	08099280 	call	809928 <_fstat_r>
  8094a0:	10001e16 	blt	r2,zero,80951c <__smakebuf_r+0xe0>
  8094a4:	d8800117 	ldw	r2,4(sp)
  8094a8:	00e00014 	movui	r3,32768
  8094ac:	113c000c 	andi	r4,r2,61440
  8094b0:	20c03126 	beq	r4,r3,809578 <__smakebuf_r+0x13c>
  8094b4:	8080030b 	ldhu	r2,12(r16)
  8094b8:	00c80004 	movi	r3,8192
  8094bc:	10820014 	ori	r2,r2,2048
  8094c0:	8080030d 	sth	r2,12(r16)
  8094c4:	20c01e26 	beq	r4,r3,809540 <__smakebuf_r+0x104>
  8094c8:	04810004 	movi	r18,1024
  8094cc:	8809883a 	mov	r4,r17
  8094d0:	900b883a 	mov	r5,r18
  8094d4:	0801f680 	call	801f68 <_malloc_r>
  8094d8:	1009883a 	mov	r4,r2
  8094dc:	10003126 	beq	r2,zero,8095a4 <__smakebuf_r+0x168>
  8094e0:	80c0030b 	ldhu	r3,12(r16)
  8094e4:	00802074 	movhi	r2,129
  8094e8:	10a45204 	addi	r2,r2,-28344
  8094ec:	88800f15 	stw	r2,60(r17)
  8094f0:	18c02014 	ori	r3,r3,128
  8094f4:	84800515 	stw	r18,20(r16)
  8094f8:	80c0030d 	sth	r3,12(r16)
  8094fc:	81000415 	stw	r4,16(r16)
  809500:	81000015 	stw	r4,0(r16)
  809504:	dfc01217 	ldw	ra,72(sp)
  809508:	dc801117 	ldw	r18,68(sp)
  80950c:	dc401017 	ldw	r17,64(sp)
  809510:	dc000f17 	ldw	r16,60(sp)
  809514:	dec01304 	addi	sp,sp,76
  809518:	f800283a 	ret
  80951c:	80c0030b 	ldhu	r3,12(r16)
  809520:	1880200c 	andi	r2,r3,128
  809524:	10000426 	beq	r2,zero,809538 <__smakebuf_r+0xfc>
  809528:	04801004 	movi	r18,64
  80952c:	18820014 	ori	r2,r3,2048
  809530:	8080030d 	sth	r2,12(r16)
  809534:	003fe506 	br	8094cc <__smakebuf_r+0x90>
  809538:	04810004 	movi	r18,1024
  80953c:	003ffb06 	br	80952c <__smakebuf_r+0xf0>
  809540:	8140038f 	ldh	r5,14(r16)
  809544:	8809883a 	mov	r4,r17
  809548:	080999c0 	call	80999c <_isatty_r>
  80954c:	103fde26 	beq	r2,zero,8094c8 <__smakebuf_r+0x8c>
  809550:	8080030b 	ldhu	r2,12(r16)
  809554:	80c010c4 	addi	r3,r16,67
  809558:	04810004 	movi	r18,1024
  80955c:	10800054 	ori	r2,r2,1
  809560:	8080030d 	sth	r2,12(r16)
  809564:	00800044 	movi	r2,1
  809568:	80c00415 	stw	r3,16(r16)
  80956c:	80800515 	stw	r2,20(r16)
  809570:	80c00015 	stw	r3,0(r16)
  809574:	003fd506 	br	8094cc <__smakebuf_r+0x90>
  809578:	80c00a17 	ldw	r3,40(r16)
  80957c:	00802074 	movhi	r2,129
  809580:	10a57604 	addi	r2,r2,-27176
  809584:	18bfcb1e 	bne	r3,r2,8094b4 <__smakebuf_r+0x78>
  809588:	8080030b 	ldhu	r2,12(r16)
  80958c:	00c10004 	movi	r3,1024
  809590:	1825883a 	mov	r18,r3
  809594:	10c4b03a 	or	r2,r2,r3
  809598:	8080030d 	sth	r2,12(r16)
  80959c:	80c01315 	stw	r3,76(r16)
  8095a0:	003fca06 	br	8094cc <__smakebuf_r+0x90>
  8095a4:	8100030b 	ldhu	r4,12(r16)
  8095a8:	2080800c 	andi	r2,r4,512
  8095ac:	103fb21e 	bne	r2,zero,809478 <__smakebuf_r+0x3c>
  8095b0:	80c010c4 	addi	r3,r16,67
  8095b4:	21000094 	ori	r4,r4,2
  8095b8:	00800044 	movi	r2,1
  8095bc:	80800515 	stw	r2,20(r16)
  8095c0:	8100030d 	sth	r4,12(r16)
  8095c4:	80c00415 	stw	r3,16(r16)
  8095c8:	80c00015 	stw	r3,0(r16)
  8095cc:	003faa06 	br	809478 <__smakebuf_r+0x3c>

008095d0 <__sclose>:
  8095d0:	2940038f 	ldh	r5,14(r5)
  8095d4:	08097941 	jmpi	809794 <_close_r>

008095d8 <__sseek>:
  8095d8:	defffe04 	addi	sp,sp,-8
  8095dc:	dc000015 	stw	r16,0(sp)
  8095e0:	2821883a 	mov	r16,r5
  8095e4:	2940038f 	ldh	r5,14(r5)
  8095e8:	dfc00115 	stw	ra,4(sp)
  8095ec:	0809a0c0 	call	809a0c <_lseek_r>
  8095f0:	1007883a 	mov	r3,r2
  8095f4:	00bfffc4 	movi	r2,-1
  8095f8:	18800926 	beq	r3,r2,809620 <__sseek+0x48>
  8095fc:	8080030b 	ldhu	r2,12(r16)
  809600:	80c01415 	stw	r3,80(r16)
  809604:	10840014 	ori	r2,r2,4096
  809608:	8080030d 	sth	r2,12(r16)
  80960c:	1805883a 	mov	r2,r3
  809610:	dfc00117 	ldw	ra,4(sp)
  809614:	dc000017 	ldw	r16,0(sp)
  809618:	dec00204 	addi	sp,sp,8
  80961c:	f800283a 	ret
  809620:	8080030b 	ldhu	r2,12(r16)
  809624:	10bbffcc 	andi	r2,r2,61439
  809628:	8080030d 	sth	r2,12(r16)
  80962c:	1805883a 	mov	r2,r3
  809630:	dfc00117 	ldw	ra,4(sp)
  809634:	dc000017 	ldw	r16,0(sp)
  809638:	dec00204 	addi	sp,sp,8
  80963c:	f800283a 	ret

00809640 <__swrite>:
  809640:	2880030b 	ldhu	r2,12(r5)
  809644:	defffb04 	addi	sp,sp,-20
  809648:	dcc00315 	stw	r19,12(sp)
  80964c:	1080400c 	andi	r2,r2,256
  809650:	dc800215 	stw	r18,8(sp)
  809654:	dc400115 	stw	r17,4(sp)
  809658:	dc000015 	stw	r16,0(sp)
  80965c:	3027883a 	mov	r19,r6
  809660:	3825883a 	mov	r18,r7
  809664:	dfc00415 	stw	ra,16(sp)
  809668:	2821883a 	mov	r16,r5
  80966c:	000d883a 	mov	r6,zero
  809670:	01c00084 	movi	r7,2
  809674:	2023883a 	mov	r17,r4
  809678:	10000226 	beq	r2,zero,809684 <__swrite+0x44>
  80967c:	2940038f 	ldh	r5,14(r5)
  809680:	0809a0c0 	call	809a0c <_lseek_r>
  809684:	8080030b 	ldhu	r2,12(r16)
  809688:	8140038f 	ldh	r5,14(r16)
  80968c:	8809883a 	mov	r4,r17
  809690:	10bbffcc 	andi	r2,r2,61439
  809694:	980d883a 	mov	r6,r19
  809698:	900f883a 	mov	r7,r18
  80969c:	8080030d 	sth	r2,12(r16)
  8096a0:	dfc00417 	ldw	ra,16(sp)
  8096a4:	dcc00317 	ldw	r19,12(sp)
  8096a8:	dc800217 	ldw	r18,8(sp)
  8096ac:	dc400117 	ldw	r17,4(sp)
  8096b0:	dc000017 	ldw	r16,0(sp)
  8096b4:	dec00504 	addi	sp,sp,20
  8096b8:	080971c1 	jmpi	80971c <_write_r>

008096bc <__sread>:
  8096bc:	defffe04 	addi	sp,sp,-8
  8096c0:	dc000015 	stw	r16,0(sp)
  8096c4:	2821883a 	mov	r16,r5
  8096c8:	2940038f 	ldh	r5,14(r5)
  8096cc:	dfc00115 	stw	ra,4(sp)
  8096d0:	0809a840 	call	809a84 <_read_r>
  8096d4:	1007883a 	mov	r3,r2
  8096d8:	10000816 	blt	r2,zero,8096fc <__sread+0x40>
  8096dc:	80801417 	ldw	r2,80(r16)
  8096e0:	10c5883a 	add	r2,r2,r3
  8096e4:	80801415 	stw	r2,80(r16)
  8096e8:	1805883a 	mov	r2,r3
  8096ec:	dfc00117 	ldw	ra,4(sp)
  8096f0:	dc000017 	ldw	r16,0(sp)
  8096f4:	dec00204 	addi	sp,sp,8
  8096f8:	f800283a 	ret
  8096fc:	8080030b 	ldhu	r2,12(r16)
  809700:	10bbffcc 	andi	r2,r2,61439
  809704:	8080030d 	sth	r2,12(r16)
  809708:	1805883a 	mov	r2,r3
  80970c:	dfc00117 	ldw	ra,4(sp)
  809710:	dc000017 	ldw	r16,0(sp)
  809714:	dec00204 	addi	sp,sp,8
  809718:	f800283a 	ret

0080971c <_write_r>:
  80971c:	defffd04 	addi	sp,sp,-12
  809720:	dc000015 	stw	r16,0(sp)
  809724:	04002074 	movhi	r16,129
  809728:	84359204 	addi	r16,r16,-10680
  80972c:	dc400115 	stw	r17,4(sp)
  809730:	80000015 	stw	zero,0(r16)
  809734:	2023883a 	mov	r17,r4
  809738:	2809883a 	mov	r4,r5
  80973c:	300b883a 	mov	r5,r6
  809740:	380d883a 	mov	r6,r7
  809744:	dfc00215 	stw	ra,8(sp)
  809748:	0809ddc0 	call	809ddc <write>
  80974c:	1007883a 	mov	r3,r2
  809750:	00bfffc4 	movi	r2,-1
  809754:	18800626 	beq	r3,r2,809770 <_write_r+0x54>
  809758:	1805883a 	mov	r2,r3
  80975c:	dfc00217 	ldw	ra,8(sp)
  809760:	dc400117 	ldw	r17,4(sp)
  809764:	dc000017 	ldw	r16,0(sp)
  809768:	dec00304 	addi	sp,sp,12
  80976c:	f800283a 	ret
  809770:	80800017 	ldw	r2,0(r16)
  809774:	103ff826 	beq	r2,zero,809758 <_write_r+0x3c>
  809778:	88800015 	stw	r2,0(r17)
  80977c:	1805883a 	mov	r2,r3
  809780:	dfc00217 	ldw	ra,8(sp)
  809784:	dc400117 	ldw	r17,4(sp)
  809788:	dc000017 	ldw	r16,0(sp)
  80978c:	dec00304 	addi	sp,sp,12
  809790:	f800283a 	ret

00809794 <_close_r>:
  809794:	defffd04 	addi	sp,sp,-12
  809798:	dc000015 	stw	r16,0(sp)
  80979c:	04002074 	movhi	r16,129
  8097a0:	84359204 	addi	r16,r16,-10680
  8097a4:	dc400115 	stw	r17,4(sp)
  8097a8:	80000015 	stw	zero,0(r16)
  8097ac:	2023883a 	mov	r17,r4
  8097b0:	2809883a 	mov	r4,r5
  8097b4:	dfc00215 	stw	ra,8(sp)
  8097b8:	0807c780 	call	807c78 <close>
  8097bc:	1007883a 	mov	r3,r2
  8097c0:	00bfffc4 	movi	r2,-1
  8097c4:	18800626 	beq	r3,r2,8097e0 <_close_r+0x4c>
  8097c8:	1805883a 	mov	r2,r3
  8097cc:	dfc00217 	ldw	ra,8(sp)
  8097d0:	dc400117 	ldw	r17,4(sp)
  8097d4:	dc000017 	ldw	r16,0(sp)
  8097d8:	dec00304 	addi	sp,sp,12
  8097dc:	f800283a 	ret
  8097e0:	80800017 	ldw	r2,0(r16)
  8097e4:	103ff826 	beq	r2,zero,8097c8 <_close_r+0x34>
  8097e8:	88800015 	stw	r2,0(r17)
  8097ec:	1805883a 	mov	r2,r3
  8097f0:	dfc00217 	ldw	ra,8(sp)
  8097f4:	dc400117 	ldw	r17,4(sp)
  8097f8:	dc000017 	ldw	r16,0(sp)
  8097fc:	dec00304 	addi	sp,sp,12
  809800:	f800283a 	ret

00809804 <_fclose_r>:
  809804:	defffc04 	addi	sp,sp,-16
  809808:	dc400115 	stw	r17,4(sp)
  80980c:	dc000015 	stw	r16,0(sp)
  809810:	dfc00315 	stw	ra,12(sp)
  809814:	dc800215 	stw	r18,8(sp)
  809818:	2821883a 	mov	r16,r5
  80981c:	2023883a 	mov	r17,r4
  809820:	28002926 	beq	r5,zero,8098c8 <_fclose_r+0xc4>
  809824:	08090540 	call	809054 <__sfp_lock_acquire>
  809828:	88000226 	beq	r17,zero,809834 <_fclose_r+0x30>
  80982c:	88800e17 	ldw	r2,56(r17)
  809830:	10002d26 	beq	r2,zero,8098e8 <_fclose_r+0xe4>
  809834:	8080030f 	ldh	r2,12(r16)
  809838:	10002226 	beq	r2,zero,8098c4 <_fclose_r+0xc0>
  80983c:	8809883a 	mov	r4,r17
  809840:	800b883a 	mov	r5,r16
  809844:	0808dcc0 	call	808dcc <_fflush_r>
  809848:	1025883a 	mov	r18,r2
  80984c:	80800b17 	ldw	r2,44(r16)
  809850:	10000426 	beq	r2,zero,809864 <_fclose_r+0x60>
  809854:	81400717 	ldw	r5,28(r16)
  809858:	8809883a 	mov	r4,r17
  80985c:	103ee83a 	callr	r2
  809860:	10002a16 	blt	r2,zero,80990c <_fclose_r+0x108>
  809864:	8080030b 	ldhu	r2,12(r16)
  809868:	1080200c 	andi	r2,r2,128
  80986c:	1000231e 	bne	r2,zero,8098fc <_fclose_r+0xf8>
  809870:	81400c17 	ldw	r5,48(r16)
  809874:	28000526 	beq	r5,zero,80988c <_fclose_r+0x88>
  809878:	80801004 	addi	r2,r16,64
  80987c:	28800226 	beq	r5,r2,809888 <_fclose_r+0x84>
  809880:	8809883a 	mov	r4,r17
  809884:	080339c0 	call	80339c <_free_r>
  809888:	80000c15 	stw	zero,48(r16)
  80988c:	81401117 	ldw	r5,68(r16)
  809890:	28000326 	beq	r5,zero,8098a0 <_fclose_r+0x9c>
  809894:	8809883a 	mov	r4,r17
  809898:	080339c0 	call	80339c <_free_r>
  80989c:	80001115 	stw	zero,68(r16)
  8098a0:	8000030d 	sth	zero,12(r16)
  8098a4:	08090580 	call	809058 <__sfp_lock_release>
  8098a8:	9005883a 	mov	r2,r18
  8098ac:	dfc00317 	ldw	ra,12(sp)
  8098b0:	dc800217 	ldw	r18,8(sp)
  8098b4:	dc400117 	ldw	r17,4(sp)
  8098b8:	dc000017 	ldw	r16,0(sp)
  8098bc:	dec00404 	addi	sp,sp,16
  8098c0:	f800283a 	ret
  8098c4:	08090580 	call	809058 <__sfp_lock_release>
  8098c8:	0025883a 	mov	r18,zero
  8098cc:	9005883a 	mov	r2,r18
  8098d0:	dfc00317 	ldw	ra,12(sp)
  8098d4:	dc800217 	ldw	r18,8(sp)
  8098d8:	dc400117 	ldw	r17,4(sp)
  8098dc:	dc000017 	ldw	r16,0(sp)
  8098e0:	dec00404 	addi	sp,sp,16
  8098e4:	f800283a 	ret
  8098e8:	8809883a 	mov	r4,r17
  8098ec:	08090640 	call	809064 <__sinit>
  8098f0:	8080030f 	ldh	r2,12(r16)
  8098f4:	103fd11e 	bne	r2,zero,80983c <_fclose_r+0x38>
  8098f8:	003ff206 	br	8098c4 <_fclose_r+0xc0>
  8098fc:	81400417 	ldw	r5,16(r16)
  809900:	8809883a 	mov	r4,r17
  809904:	080339c0 	call	80339c <_free_r>
  809908:	003fd906 	br	809870 <_fclose_r+0x6c>
  80990c:	04bfffc4 	movi	r18,-1
  809910:	003fd406 	br	809864 <_fclose_r+0x60>

00809914 <fclose>:
  809914:	00802074 	movhi	r2,129
  809918:	10aeef04 	addi	r2,r2,-17476
  80991c:	200b883a 	mov	r5,r4
  809920:	11000017 	ldw	r4,0(r2)
  809924:	08098041 	jmpi	809804 <_fclose_r>

00809928 <_fstat_r>:
  809928:	defffd04 	addi	sp,sp,-12
  80992c:	dc000015 	stw	r16,0(sp)
  809930:	04002074 	movhi	r16,129
  809934:	84359204 	addi	r16,r16,-10680
  809938:	dc400115 	stw	r17,4(sp)
  80993c:	80000015 	stw	zero,0(r16)
  809940:	2023883a 	mov	r17,r4
  809944:	2809883a 	mov	r4,r5
  809948:	300b883a 	mov	r5,r6
  80994c:	dfc00215 	stw	ra,8(sp)
  809950:	0809b100 	call	809b10 <fstat>
  809954:	1007883a 	mov	r3,r2
  809958:	00bfffc4 	movi	r2,-1
  80995c:	18800626 	beq	r3,r2,809978 <_fstat_r+0x50>
  809960:	1805883a 	mov	r2,r3
  809964:	dfc00217 	ldw	ra,8(sp)
  809968:	dc400117 	ldw	r17,4(sp)
  80996c:	dc000017 	ldw	r16,0(sp)
  809970:	dec00304 	addi	sp,sp,12
  809974:	f800283a 	ret
  809978:	80800017 	ldw	r2,0(r16)
  80997c:	103ff826 	beq	r2,zero,809960 <_fstat_r+0x38>
  809980:	88800015 	stw	r2,0(r17)
  809984:	1805883a 	mov	r2,r3
  809988:	dfc00217 	ldw	ra,8(sp)
  80998c:	dc400117 	ldw	r17,4(sp)
  809990:	dc000017 	ldw	r16,0(sp)
  809994:	dec00304 	addi	sp,sp,12
  809998:	f800283a 	ret

0080999c <_isatty_r>:
  80999c:	defffd04 	addi	sp,sp,-12
  8099a0:	dc000015 	stw	r16,0(sp)
  8099a4:	04002074 	movhi	r16,129
  8099a8:	84359204 	addi	r16,r16,-10680
  8099ac:	dc400115 	stw	r17,4(sp)
  8099b0:	80000015 	stw	zero,0(r16)
  8099b4:	2023883a 	mov	r17,r4
  8099b8:	2809883a 	mov	r4,r5
  8099bc:	dfc00215 	stw	ra,8(sp)
  8099c0:	0809ba00 	call	809ba0 <isatty>
  8099c4:	1007883a 	mov	r3,r2
  8099c8:	00bfffc4 	movi	r2,-1
  8099cc:	18800626 	beq	r3,r2,8099e8 <_isatty_r+0x4c>
  8099d0:	1805883a 	mov	r2,r3
  8099d4:	dfc00217 	ldw	ra,8(sp)
  8099d8:	dc400117 	ldw	r17,4(sp)
  8099dc:	dc000017 	ldw	r16,0(sp)
  8099e0:	dec00304 	addi	sp,sp,12
  8099e4:	f800283a 	ret
  8099e8:	80800017 	ldw	r2,0(r16)
  8099ec:	103ff826 	beq	r2,zero,8099d0 <_isatty_r+0x34>
  8099f0:	88800015 	stw	r2,0(r17)
  8099f4:	1805883a 	mov	r2,r3
  8099f8:	dfc00217 	ldw	ra,8(sp)
  8099fc:	dc400117 	ldw	r17,4(sp)
  809a00:	dc000017 	ldw	r16,0(sp)
  809a04:	dec00304 	addi	sp,sp,12
  809a08:	f800283a 	ret

00809a0c <_lseek_r>:
  809a0c:	defffd04 	addi	sp,sp,-12
  809a10:	dc000015 	stw	r16,0(sp)
  809a14:	04002074 	movhi	r16,129
  809a18:	84359204 	addi	r16,r16,-10680
  809a1c:	dc400115 	stw	r17,4(sp)
  809a20:	80000015 	stw	zero,0(r16)
  809a24:	2023883a 	mov	r17,r4
  809a28:	2809883a 	mov	r4,r5
  809a2c:	300b883a 	mov	r5,r6
  809a30:	380d883a 	mov	r6,r7
  809a34:	dfc00215 	stw	ra,8(sp)
  809a38:	0809c240 	call	809c24 <lseek>
  809a3c:	1007883a 	mov	r3,r2
  809a40:	00bfffc4 	movi	r2,-1
  809a44:	18800626 	beq	r3,r2,809a60 <_lseek_r+0x54>
  809a48:	1805883a 	mov	r2,r3
  809a4c:	dfc00217 	ldw	ra,8(sp)
  809a50:	dc400117 	ldw	r17,4(sp)
  809a54:	dc000017 	ldw	r16,0(sp)
  809a58:	dec00304 	addi	sp,sp,12
  809a5c:	f800283a 	ret
  809a60:	80800017 	ldw	r2,0(r16)
  809a64:	103ff826 	beq	r2,zero,809a48 <_lseek_r+0x3c>
  809a68:	88800015 	stw	r2,0(r17)
  809a6c:	1805883a 	mov	r2,r3
  809a70:	dfc00217 	ldw	ra,8(sp)
  809a74:	dc400117 	ldw	r17,4(sp)
  809a78:	dc000017 	ldw	r16,0(sp)
  809a7c:	dec00304 	addi	sp,sp,12
  809a80:	f800283a 	ret

00809a84 <_read_r>:
  809a84:	defffd04 	addi	sp,sp,-12
  809a88:	dc000015 	stw	r16,0(sp)
  809a8c:	04002074 	movhi	r16,129
  809a90:	84359204 	addi	r16,r16,-10680
  809a94:	dc400115 	stw	r17,4(sp)
  809a98:	80000015 	stw	zero,0(r16)
  809a9c:	2023883a 	mov	r17,r4
  809aa0:	2809883a 	mov	r4,r5
  809aa4:	300b883a 	mov	r5,r6
  809aa8:	380d883a 	mov	r6,r7
  809aac:	dfc00215 	stw	ra,8(sp)
  809ab0:	0809cc00 	call	809cc0 <read>
  809ab4:	1007883a 	mov	r3,r2
  809ab8:	00bfffc4 	movi	r2,-1
  809abc:	18800626 	beq	r3,r2,809ad8 <_read_r+0x54>
  809ac0:	1805883a 	mov	r2,r3
  809ac4:	dfc00217 	ldw	ra,8(sp)
  809ac8:	dc400117 	ldw	r17,4(sp)
  809acc:	dc000017 	ldw	r16,0(sp)
  809ad0:	dec00304 	addi	sp,sp,12
  809ad4:	f800283a 	ret
  809ad8:	80800017 	ldw	r2,0(r16)
  809adc:	103ff826 	beq	r2,zero,809ac0 <_read_r+0x3c>
  809ae0:	88800015 	stw	r2,0(r17)
  809ae4:	1805883a 	mov	r2,r3
  809ae8:	dfc00217 	ldw	ra,8(sp)
  809aec:	dc400117 	ldw	r17,4(sp)
  809af0:	dc000017 	ldw	r16,0(sp)
  809af4:	dec00304 	addi	sp,sp,12
  809af8:	f800283a 	ret

00809afc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  809afc:	20000226 	beq	r4,zero,809b08 <_exit+0xc>
    ALT_SIM_FAIL();
  809b00:	002af070 	cmpltui	zero,zero,43969
  809b04:	003fff06 	br	809b04 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  809b08:	002af0b0 	cmpltui	zero,zero,43970
  809b0c:	003ffd06 	br	809b04 <_exit+0x8>

00809b10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809b10:	deffff04 	addi	sp,sp,-4
  809b14:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809b18:	20c00324 	muli	r3,r4,12
  809b1c:	20001116 	blt	r4,zero,809b64 <fstat+0x54>
  809b20:	00802074 	movhi	r2,129
  809b24:	10ae8f04 	addi	r2,r2,-17860
  809b28:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809b2c:	20000d26 	beq	r4,zero,809b64 <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809b30:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809b34:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809b38:	10800817 	ldw	r2,32(r2)
  809b3c:	10000326 	beq	r2,zero,809b4c <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  809b40:	dfc00017 	ldw	ra,0(sp)
  809b44:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  809b48:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809b4c:	00880004 	movi	r2,8192
  809b50:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  809b54:	1805883a 	mov	r2,r3
  809b58:	dfc00017 	ldw	ra,0(sp)
  809b5c:	dec00104 	addi	sp,sp,4
  809b60:	f800283a 	ret
  809b64:	00802074 	movhi	r2,129
  809b68:	10aefb04 	addi	r2,r2,-17428
  809b6c:	10800017 	ldw	r2,0(r2)
  809b70:	00c02074 	movhi	r3,129
  809b74:	18f59204 	addi	r3,r3,-10680
  809b78:	10000226 	beq	r2,zero,809b84 <fstat+0x74>
  809b7c:	103ee83a 	callr	r2
  809b80:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809b84:	00801444 	movi	r2,81
  809b88:	18800015 	stw	r2,0(r3)
  809b8c:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  809b90:	1805883a 	mov	r2,r3
  809b94:	dfc00017 	ldw	ra,0(sp)
  809b98:	dec00104 	addi	sp,sp,4
  809b9c:	f800283a 	ret

00809ba0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809ba0:	defff004 	addi	sp,sp,-64
  809ba4:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809ba8:	20c00324 	muli	r3,r4,12
  809bac:	20000f16 	blt	r4,zero,809bec <isatty+0x4c>
  809bb0:	00802074 	movhi	r2,129
  809bb4:	10ae8f04 	addi	r2,r2,-17860
  809bb8:	1885883a 	add	r2,r3,r2
  
  if (fd)
  809bbc:	10000b26 	beq	r2,zero,809bec <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809bc0:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809bc4:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809bc8:	10c00817 	ldw	r3,32(r2)
  809bcc:	00800044 	movi	r2,1
  809bd0:	18000326 	beq	r3,zero,809be0 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809bd4:	0809b100 	call	809b10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  809bd8:	d8c00117 	ldw	r3,4(sp)
  809bdc:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  809be0:	dfc00f17 	ldw	ra,60(sp)
  809be4:	dec01004 	addi	sp,sp,64
  809be8:	f800283a 	ret
  809bec:	00802074 	movhi	r2,129
  809bf0:	10aefb04 	addi	r2,r2,-17428
  809bf4:	10800017 	ldw	r2,0(r2)
  809bf8:	00c02074 	movhi	r3,129
  809bfc:	18f59204 	addi	r3,r3,-10680
  809c00:	10000226 	beq	r2,zero,809c0c <isatty+0x6c>
  809c04:	103ee83a 	callr	r2
  809c08:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809c0c:	00801444 	movi	r2,81
  809c10:	18800015 	stw	r2,0(r3)
  809c14:	0005883a 	mov	r2,zero
    return 0;
  }
}
  809c18:	dfc00f17 	ldw	ra,60(sp)
  809c1c:	dec01004 	addi	sp,sp,64
  809c20:	f800283a 	ret

00809c24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  809c24:	defffe04 	addi	sp,sp,-8
  809c28:	dfc00115 	stw	ra,4(sp)
  809c2c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809c30:	20001f16 	blt	r4,zero,809cb0 <lseek+0x8c>
  809c34:	20c00324 	muli	r3,r4,12
  809c38:	00802074 	movhi	r2,129
  809c3c:	10ae8f04 	addi	r2,r2,-17860
  809c40:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  809c44:	20001c26 	beq	r4,zero,809cb8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809c48:	20800017 	ldw	r2,0(r4)
  809c4c:	10800717 	ldw	r2,28(r2)
  809c50:	10000626 	beq	r2,zero,809c6c <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  809c54:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  809c58:	10000516 	blt	r2,zero,809c70 <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  809c5c:	dfc00117 	ldw	ra,4(sp)
  809c60:	dc000017 	ldw	r16,0(sp)
  809c64:	dec00204 	addi	sp,sp,8
  809c68:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809c6c:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  809c70:	00a1c83a 	sub	r16,zero,r2
  809c74:	00802074 	movhi	r2,129
  809c78:	10aefb04 	addi	r2,r2,-17428
  809c7c:	10800017 	ldw	r2,0(r2)
  809c80:	10000826 	beq	r2,zero,809ca4 <lseek+0x80>
  809c84:	103ee83a 	callr	r2
  809c88:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  809c8c:	00bfffc4 	movi	r2,-1
  809c90:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  809c94:	dfc00117 	ldw	ra,4(sp)
  809c98:	dc000017 	ldw	r16,0(sp)
  809c9c:	dec00204 	addi	sp,sp,8
  809ca0:	f800283a 	ret
  809ca4:	00c02074 	movhi	r3,129
  809ca8:	18f59204 	addi	r3,r3,-10680
  809cac:	003ff706 	br	809c8c <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809cb0:	04001444 	movi	r16,81
  809cb4:	003fef06 	br	809c74 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  809cb8:	00bfebc4 	movi	r2,-81
  809cbc:	003fec06 	br	809c70 <lseek+0x4c>

00809cc0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  809cc0:	defffe04 	addi	sp,sp,-8
  809cc4:	dfc00115 	stw	ra,4(sp)
  809cc8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809ccc:	20002516 	blt	r4,zero,809d64 <read+0xa4>
  809cd0:	20c00324 	muli	r3,r4,12
  809cd4:	00802074 	movhi	r2,129
  809cd8:	10ae8f04 	addi	r2,r2,-17860
  809cdc:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809ce0:	20002026 	beq	r4,zero,809d64 <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  809ce4:	20800217 	ldw	r2,8(r4)
  809ce8:	00c00044 	movi	r3,1
  809cec:	108000cc 	andi	r2,r2,3
  809cf0:	10c00b26 	beq	r2,r3,809d20 <read+0x60>
  809cf4:	20800017 	ldw	r2,0(r4)
  809cf8:	10800517 	ldw	r2,20(r2)
  809cfc:	10000826 	beq	r2,zero,809d20 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  809d00:	103ee83a 	callr	r2
  809d04:	1021883a 	mov	r16,r2
  809d08:	10002716 	blt	r2,zero,809da8 <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809d0c:	8005883a 	mov	r2,r16
  809d10:	dfc00117 	ldw	ra,4(sp)
  809d14:	dc000017 	ldw	r16,0(sp)
  809d18:	dec00204 	addi	sp,sp,8
  809d1c:	f800283a 	ret
  809d20:	00802074 	movhi	r2,129
  809d24:	10aefb04 	addi	r2,r2,-17428
  809d28:	10800017 	ldw	r2,0(r2)
  809d2c:	10000a26 	beq	r2,zero,809d58 <read+0x98>
  809d30:	103ee83a 	callr	r2
  809d34:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  809d38:	043fffc4 	movi	r16,-1
  809d3c:	00800344 	movi	r2,13
  809d40:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809d44:	8005883a 	mov	r2,r16
  809d48:	dfc00117 	ldw	ra,4(sp)
  809d4c:	dc000017 	ldw	r16,0(sp)
  809d50:	dec00204 	addi	sp,sp,8
  809d54:	f800283a 	ret
  809d58:	00c02074 	movhi	r3,129
  809d5c:	18f59204 	addi	r3,r3,-10680
  809d60:	003ff506 	br	809d38 <read+0x78>
  809d64:	00802074 	movhi	r2,129
  809d68:	10aefb04 	addi	r2,r2,-17428
  809d6c:	10800017 	ldw	r2,0(r2)
  809d70:	10000a26 	beq	r2,zero,809d9c <read+0xdc>
  809d74:	103ee83a 	callr	r2
  809d78:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  809d7c:	00801444 	movi	r2,81
  809d80:	043fffc4 	movi	r16,-1
  809d84:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  809d88:	8005883a 	mov	r2,r16
  809d8c:	dfc00117 	ldw	ra,4(sp)
  809d90:	dc000017 	ldw	r16,0(sp)
  809d94:	dec00204 	addi	sp,sp,8
  809d98:	f800283a 	ret
  809d9c:	00c02074 	movhi	r3,129
  809da0:	18f59204 	addi	r3,r3,-10680
  809da4:	003ff506 	br	809d7c <read+0xbc>
  809da8:	00802074 	movhi	r2,129
  809dac:	10aefb04 	addi	r2,r2,-17428
  809db0:	10800017 	ldw	r2,0(r2)
  809db4:	10000626 	beq	r2,zero,809dd0 <read+0x110>
  809db8:	103ee83a 	callr	r2
  809dbc:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  809dc0:	0405c83a 	sub	r2,zero,r16
  809dc4:	043fffc4 	movi	r16,-1
  809dc8:	18800015 	stw	r2,0(r3)
  809dcc:	003fcf06 	br	809d0c <read+0x4c>
  809dd0:	00c02074 	movhi	r3,129
  809dd4:	18f59204 	addi	r3,r3,-10680
  809dd8:	003ff906 	br	809dc0 <read+0x100>

00809ddc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  809ddc:	defffe04 	addi	sp,sp,-8
  809de0:	dfc00115 	stw	ra,4(sp)
  809de4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809de8:	20002416 	blt	r4,zero,809e7c <write+0xa0>
  809dec:	20c00324 	muli	r3,r4,12
  809df0:	00802074 	movhi	r2,129
  809df4:	10ae8f04 	addi	r2,r2,-17860
  809df8:	1889883a 	add	r4,r3,r2
  
  if (fd)
  809dfc:	20001f26 	beq	r4,zero,809e7c <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  809e00:	20800217 	ldw	r2,8(r4)
  809e04:	108000cc 	andi	r2,r2,3
  809e08:	10000b26 	beq	r2,zero,809e38 <write+0x5c>
  809e0c:	20800017 	ldw	r2,0(r4)
  809e10:	10800617 	ldw	r2,24(r2)
  809e14:	10000826 	beq	r2,zero,809e38 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  809e18:	103ee83a 	callr	r2
  809e1c:	1021883a 	mov	r16,r2
  809e20:	10002716 	blt	r2,zero,809ec0 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809e24:	8005883a 	mov	r2,r16
  809e28:	dfc00117 	ldw	ra,4(sp)
  809e2c:	dc000017 	ldw	r16,0(sp)
  809e30:	dec00204 	addi	sp,sp,8
  809e34:	f800283a 	ret
  809e38:	00802074 	movhi	r2,129
  809e3c:	10aefb04 	addi	r2,r2,-17428
  809e40:	10800017 	ldw	r2,0(r2)
  809e44:	10000a26 	beq	r2,zero,809e70 <write+0x94>
  809e48:	103ee83a 	callr	r2
  809e4c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  809e50:	043fffc4 	movi	r16,-1
  809e54:	00800344 	movi	r2,13
  809e58:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  809e5c:	8005883a 	mov	r2,r16
  809e60:	dfc00117 	ldw	ra,4(sp)
  809e64:	dc000017 	ldw	r16,0(sp)
  809e68:	dec00204 	addi	sp,sp,8
  809e6c:	f800283a 	ret
  809e70:	00c02074 	movhi	r3,129
  809e74:	18f59204 	addi	r3,r3,-10680
  809e78:	003ff506 	br	809e50 <write+0x74>
  809e7c:	00802074 	movhi	r2,129
  809e80:	10aefb04 	addi	r2,r2,-17428
  809e84:	10800017 	ldw	r2,0(r2)
  809e88:	10000a26 	beq	r2,zero,809eb4 <write+0xd8>
  809e8c:	103ee83a 	callr	r2
  809e90:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  809e94:	00801444 	movi	r2,81
  809e98:	043fffc4 	movi	r16,-1
  809e9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  809ea0:	8005883a 	mov	r2,r16
  809ea4:	dfc00117 	ldw	ra,4(sp)
  809ea8:	dc000017 	ldw	r16,0(sp)
  809eac:	dec00204 	addi	sp,sp,8
  809eb0:	f800283a 	ret
  809eb4:	00c02074 	movhi	r3,129
  809eb8:	18f59204 	addi	r3,r3,-10680
  809ebc:	003ff506 	br	809e94 <write+0xb8>
  809ec0:	00802074 	movhi	r2,129
  809ec4:	10aefb04 	addi	r2,r2,-17428
  809ec8:	10800017 	ldw	r2,0(r2)
  809ecc:	10000626 	beq	r2,zero,809ee8 <write+0x10c>
  809ed0:	103ee83a 	callr	r2
  809ed4:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  809ed8:	0405c83a 	sub	r2,zero,r16
  809edc:	043fffc4 	movi	r16,-1
  809ee0:	18800015 	stw	r2,0(r3)
  809ee4:	003fcf06 	br	809e24 <write+0x48>
  809ee8:	00c02074 	movhi	r3,129
  809eec:	18f59204 	addi	r3,r3,-10680
  809ef0:	003ff906 	br	809ed8 <write+0xfc>
  809ef4:	00808c18 	cmpnei	r2,zero,560
