
software.elf:     file format elf32-littlenios2
software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000055c4 memsz 0x000055c4 flags r-x
    LOAD off    0x000065e4 vaddr 0x008055e4 paddr 0x0080702c align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008a74 vaddr 0x00808a74 paddr 0x00808a74 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053e8  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0080559c  0080559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  008055e4  0080702c  000065e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00808a74  00808a74  00008a74  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008050  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d51  00000000  00000000  00008948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000193ad  00000000  00000000  00009699  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f02  00000000  00000000  00022a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c4d6  00000000  00000000  00027948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001010  00000000  00000000  00033e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015e0  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e08  00000000  00000000  00036410  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003a218  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c9d5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003c9d8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c9db  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c9dc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003c9dd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003c9e1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003c9e5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003c9e9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003c9f2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003c9fb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0003ca04  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000014  00000000  00000000  0003ca16  2**0
                  CONTENTS, READONLY
 29 .jdi          00005134  00000000  00000000  0003ca2a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003102d  00000000  00000000  00041b5e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080559c l    d  .rodata	00000000 .rodata
008055e4 l    d  .rwdata	00000000 .rwdata
00808a74 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
008055e4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801b5c l     F .text	00000058 std
00801c68 l     F .text	00000008 __fp_lock
00801c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00802c30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00802c90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00802d90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00802eb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00802f90 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008030ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00803318 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080701c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
008035b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00805f94 l     O .rwdata	00001060 jtag_uart
008036a4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008038e4 l     F .text	00000228 altera_avalon_jtag_uart_irq
00803b0c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00804188 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008044ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008048d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00804a0c l     F .text	000000dc alt_file_locked
00804c70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00805384 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00805538 l     F .text	00000040 alt_sim_halt
008029d4 g     F .text	00000070 _isatty_r
0080314c g     F .text	0000006c alt_main
00800224 g     F .text	000000a0 _puts_r
00808ac4 g     O .bss	00000100 alt_irq
00802a44 g     F .text	00000078 _lseek_r
0080702c g       *ABS*	00000000 __flash_rwdata_start
00808d54 g       *ABS*	00000000 __alt_heap_start
00802610 g     F .text	00000068 __sseek
00801bc4 g     F .text	000000a4 __sinit
00801cc4 g     F .text	00000068 __sfmoreglue
008031d8 g     F .text	00000020 __malloc_unlock
008010ac g     F .text	000000e0 memmove
00801cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802960 g     F .text	00000074 _fstat_r
00808a80 g     O .bss	00000004 errno
00808a88 g     O .bss	00000004 alt_argv
0080eff4 g       *ABS*	00000000 _gp
00805e14 g     O .rwdata	00000180 alt_fd_list
00804e94 g     F .text	00000094 alt_find_dev
0080100c g     F .text	000000a0 memcpy
00801ca8 g     F .text	0000000c _cleanup_r
00804994 g     F .text	00000078 alt_io_redirect
0080559c g       *ABS*	00000000 __DTOR_END__
008002c4 g     F .text	00000014 puts
00803d24 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00802df0 g     F .text	000000c0 isatty
00805100 g     F .text	00000090 alt_icache_flush
00808a74 g     O .bss	00000004 __malloc_top_pad
0080034c g     F .text	0000049c __sfvwrite_r
00801780 g     F .text	00000070 _sbrk_r
00802abc g     F .text	00000078 _read_r
00807014 g     O .rwdata	00000004 alt_max_fd
0080283c g     F .text	00000110 _fclose_r
00801b28 g     F .text	00000034 fflush
00808a78 g     O .bss	00000004 __malloc_max_sbrked_mem
00802ffc g     F .text	000000f0 lseek
00806ff8 g     O .rwdata	00000004 _global_impure_ptr
0080118c g     F .text	000005f4 _realloc_r
00808d54 g       *ABS*	00000000 __bss_end
008047d8 g     F .text	000000f8 alt_iic_isr_register
00804d68 g     F .text	0000010c alt_tick
00801c90 g     F .text	00000018 __fp_lock_all
00804790 g     F .text	00000048 alt_ic_irq_enabled
00804cd0 g     F .text	00000098 alt_alarm_stop
00808a90 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
00805dec g     O .rwdata	00000028 alt_dev_null
008043dc g     F .text	0000001c alt_dcache_flush_all
0080702c g       *ABS*	00000000 __ram_rwdata_end
0080700c g     O .rwdata	00000008 alt_dev_list
00803494 g     F .text	00000120 write
008055e4 g       *ABS*	00000000 __ram_rodata_end
00802cbc g     F .text	000000d4 fstat
00808d54 g       *ABS*	00000000 end
00803824 g     F .text	000000c0 altera_avalon_jtag_uart_init
00805598 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008041f8 g     F .text	00000090 alt_avalon_timer_sc_init
00803f48 g     F .text	00000240 altera_avalon_jtag_uart_write
00801bb4 g     F .text	00000004 __sfp_lock_acquire
00800f28 g     F .text	000000e4 memchr
00801f48 g     F .text	00000314 _free_r
00805388 g     F .text	000001b0 __call_exitprocs
00807000 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00808a94 g     O .bss	00000004 _alt_tick_rate
00808a98 g     O .bss	00000004 _alt_nticks
008031f8 g     F .text	00000120 read
00803648 g     F .text	0000005c alt_sys_init
00805250 g     F .text	00000134 __register_exitproc
00803bbc g     F .text	00000074 altera_avalon_jtag_uart_close
008055e4 g       *ABS*	00000000 __ram_rwdata_start
0080559c g       *ABS*	00000000 __ram_rodata_start
00808a9c g     O .bss	00000028 __malloc_current_mallinfo
008036dc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00805048 g     F .text	000000b8 alt_get_fd
008027cc g     F .text	00000070 _close_r
008051dc g     F .text	00000074 memcmp
0080378c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00808d54 g       *ABS*	00000000 __alt_stack_base
008037d4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008017f0 g     F .text	0000013c __swsetup_r
00801d2c g     F .text	000000f0 __sfp
008059e4 g     O .rwdata	00000408 __malloc_av_
00801bc0 g     F .text	00000004 __sinit_lock_release
008026f4 g     F .text	00000060 __sread
00804f28 g     F .text	00000120 alt_find_file
008043f8 g     F .text	000000b4 alt_dev_llist_insert
008031b8 g     F .text	00000020 __malloc_lock
008033d8 g     F .text	000000bc sbrk
0080192c g     F .text	000001fc _fflush_r
00808a74 g       *ABS*	00000000 __bss_start
00802570 g     F .text	00000098 memset
008001f0 g     F .text	00000034 main
00808a8c g     O .bss	00000004 alt_envp
00808a7c g     O .bss	00000004 __malloc_max_total_mem
00803734 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00802608 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080294c g     F .text	00000014 fclose
00808bc4 g     O .bss	00000190 _atexit0
008007e8 g     F .text	00000740 _malloc_r
00807018 g     O .rwdata	00000004 alt_errno
00802324 g     F .text	000000b8 _fwalk
00801e1c g     F .text	0000012c _malloc_trim_r
0080559c g       *ABS*	00000000 __CTOR_END__
0080559c g       *ABS*	00000000 __flash_rodata_start
0080559c g       *ABS*	00000000 __DTOR_LIST__
00803614 g     F .text	00000034 alt_irq_init
00803378 g     F .text	00000060 alt_release_fd
00805190 g     F .text	00000014 atexit
00802754 g     F .text	00000078 _write_r
00806ff4 g     O .rwdata	00000004 _impure_ptr
00808a84 g     O .bss	00000004 alt_argc
00804570 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00801c78 g     F .text	00000018 __fp_unlock_all
00807004 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804604 g     F .text	00000050 alt_ic_isr_register
0080702c g       *ABS*	00000000 _edata
00808d54 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00803c30 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008046f0 g     F .text	000000a0 alt_ic_irq_disable
00802678 g     F .text	0000007c __swrite
00806ffc g     O .rwdata	00000004 __malloc_trim_threshold
00804e74 g     F .text	00000020 altera_nios2_qsys_irq_init
008051a4 g     F .text	00000038 exit
0080225c g     F .text	000000c8 _fwalk_reent
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801bb8 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00805578 g     F .text	00000020 _exit
00804288 g     F .text	00000154 alt_alarm_start
008023dc g     F .text	00000194 __smakebuf_r
008002d8 g     F .text	00000074 strlen
00804ae8 g     F .text	00000188 open
008045d4 g     F .text	00000030 alt_icache_flush_all
00807020 g     O .rwdata	00000004 alt_priority_mask
00804654 g     F .text	0000009c alt_ic_irq_enable
00807024 g     O .rwdata	00000008 alt_alarm_list
0080450c g     F .text	00000064 _do_ctors
00802b34 g     F .text	000000fc close
00802f10 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00801bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18e2b104 	addi	r3,r3,-30012
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18e2b104 	addi	r3,r3,-30012
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001c0:	d6bbfd14 	ori	gp,gp,61428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001c8:	10a29d14 	ori	r2,r2,35444

    movhi r3, %hi(__bss_end)
  8001cc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001d0:	18e35514 	ori	r3,r3,36180

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	0802f100 	call	802f10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080314c0 	call	80314c <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <main>:
 */

#include <stdio.h>

int main()
{
  8001f0:	defffe04 	addi	sp,sp,-8
  8001f4:	dfc00115 	stw	ra,4(sp)
  8001f8:	df000015 	stw	fp,0(sp)
  8001fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  800200:	01002034 	movhi	r4,128
  800204:	21156704 	addi	r4,r4,21916
  800208:	08002c40 	call	8002c4 <puts>

  return 0;
  80020c:	0005883a 	mov	r2,zero
}
  800210:	e037883a 	mov	sp,fp
  800214:	dfc00117 	ldw	ra,4(sp)
  800218:	df000017 	ldw	fp,0(sp)
  80021c:	dec00204 	addi	sp,sp,8
  800220:	f800283a 	ret

00800224 <_puts_r>:
  800224:	defff604 	addi	sp,sp,-40
  800228:	dc400715 	stw	r17,28(sp)
  80022c:	2023883a 	mov	r17,r4
  800230:	2809883a 	mov	r4,r5
  800234:	dfc00915 	stw	ra,36(sp)
  800238:	dcc00815 	stw	r19,32(sp)
  80023c:	2827883a 	mov	r19,r5
  800240:	08002d80 	call	8002d8 <strlen>
  800244:	89400217 	ldw	r5,8(r17)
  800248:	00c02034 	movhi	r3,128
  80024c:	18d56c04 	addi	r3,r3,21936
  800250:	01c00044 	movi	r7,1
  800254:	12000044 	addi	r8,r2,1
  800258:	d8c00515 	stw	r3,20(sp)
  80025c:	d9c00615 	stw	r7,24(sp)
  800260:	d8c00304 	addi	r3,sp,12
  800264:	01c00084 	movi	r7,2
  800268:	8809883a 	mov	r4,r17
  80026c:	d80d883a 	mov	r6,sp
  800270:	d8c00015 	stw	r3,0(sp)
  800274:	dcc00315 	stw	r19,12(sp)
  800278:	da000215 	stw	r8,8(sp)
  80027c:	d9c00115 	stw	r7,4(sp)
  800280:	d8800415 	stw	r2,16(sp)
  800284:	080034c0 	call	80034c <__sfvwrite_r>
  800288:	00ffffc4 	movi	r3,-1
  80028c:	10000626 	beq	r2,zero,8002a8 <_puts_r+0x84>
  800290:	1805883a 	mov	r2,r3
  800294:	dfc00917 	ldw	ra,36(sp)
  800298:	dcc00817 	ldw	r19,32(sp)
  80029c:	dc400717 	ldw	r17,28(sp)
  8002a0:	dec00a04 	addi	sp,sp,40
  8002a4:	f800283a 	ret
  8002a8:	00c00284 	movi	r3,10
  8002ac:	1805883a 	mov	r2,r3
  8002b0:	dfc00917 	ldw	ra,36(sp)
  8002b4:	dcc00817 	ldw	r19,32(sp)
  8002b8:	dc400717 	ldw	r17,28(sp)
  8002bc:	dec00a04 	addi	sp,sp,40
  8002c0:	f800283a 	ret

008002c4 <puts>:
  8002c4:	00802034 	movhi	r2,128
  8002c8:	109bfd04 	addi	r2,r2,28660
  8002cc:	200b883a 	mov	r5,r4
  8002d0:	11000017 	ldw	r4,0(r2)
  8002d4:	08002241 	jmpi	800224 <_puts_r>

008002d8 <strlen>:
  8002d8:	208000cc 	andi	r2,r4,3
  8002dc:	2011883a 	mov	r8,r4
  8002e0:	1000161e 	bne	r2,zero,80033c <strlen+0x64>
  8002e4:	20c00017 	ldw	r3,0(r4)
  8002e8:	017fbff4 	movhi	r5,65279
  8002ec:	297fbfc4 	addi	r5,r5,-257
  8002f0:	01e02074 	movhi	r7,32897
  8002f4:	39e02004 	addi	r7,r7,-32640
  8002f8:	1945883a 	add	r2,r3,r5
  8002fc:	11c4703a 	and	r2,r2,r7
  800300:	00c6303a 	nor	r3,zero,r3
  800304:	1886703a 	and	r3,r3,r2
  800308:	18000c1e 	bne	r3,zero,80033c <strlen+0x64>
  80030c:	280d883a 	mov	r6,r5
  800310:	380b883a 	mov	r5,r7
  800314:	21000104 	addi	r4,r4,4
  800318:	20800017 	ldw	r2,0(r4)
  80031c:	1187883a 	add	r3,r2,r6
  800320:	1946703a 	and	r3,r3,r5
  800324:	0084303a 	nor	r2,zero,r2
  800328:	10c4703a 	and	r2,r2,r3
  80032c:	103ff926 	beq	r2,zero,800314 <strlen+0x3c>
  800330:	20800007 	ldb	r2,0(r4)
  800334:	10000326 	beq	r2,zero,800344 <strlen+0x6c>
  800338:	21000044 	addi	r4,r4,1
  80033c:	20800007 	ldb	r2,0(r4)
  800340:	103ffd1e 	bne	r2,zero,800338 <strlen+0x60>
  800344:	2205c83a 	sub	r2,r4,r8
  800348:	f800283a 	ret

0080034c <__sfvwrite_r>:
  80034c:	30800217 	ldw	r2,8(r6)
  800350:	defff504 	addi	sp,sp,-44
  800354:	df000915 	stw	fp,36(sp)
  800358:	dd800715 	stw	r22,28(sp)
  80035c:	dc800315 	stw	r18,12(sp)
  800360:	dfc00a15 	stw	ra,40(sp)
  800364:	ddc00815 	stw	r23,32(sp)
  800368:	dd400615 	stw	r21,24(sp)
  80036c:	dd000515 	stw	r20,20(sp)
  800370:	dcc00415 	stw	r19,16(sp)
  800374:	dc400215 	stw	r17,8(sp)
  800378:	dc000115 	stw	r16,4(sp)
  80037c:	302d883a 	mov	r22,r6
  800380:	2039883a 	mov	fp,r4
  800384:	2825883a 	mov	r18,r5
  800388:	10001c26 	beq	r2,zero,8003fc <__sfvwrite_r+0xb0>
  80038c:	29c0030b 	ldhu	r7,12(r5)
  800390:	3880020c 	andi	r2,r7,8
  800394:	10002726 	beq	r2,zero,800434 <__sfvwrite_r+0xe8>
  800398:	28800417 	ldw	r2,16(r5)
  80039c:	10002526 	beq	r2,zero,800434 <__sfvwrite_r+0xe8>
  8003a0:	3880008c 	andi	r2,r7,2
  8003a4:	b5400017 	ldw	r21,0(r22)
  8003a8:	10002826 	beq	r2,zero,80044c <__sfvwrite_r+0x100>
  8003ac:	0021883a 	mov	r16,zero
  8003b0:	0023883a 	mov	r17,zero
  8003b4:	880d883a 	mov	r6,r17
  8003b8:	e009883a 	mov	r4,fp
  8003bc:	00810004 	movi	r2,1024
  8003c0:	80006e26 	beq	r16,zero,80057c <__sfvwrite_r+0x230>
  8003c4:	800f883a 	mov	r7,r16
  8003c8:	91400717 	ldw	r5,28(r18)
  8003cc:	1400012e 	bgeu	r2,r16,8003d4 <__sfvwrite_r+0x88>
  8003d0:	100f883a 	mov	r7,r2
  8003d4:	90c00917 	ldw	r3,36(r18)
  8003d8:	183ee83a 	callr	r3
  8003dc:	1007883a 	mov	r3,r2
  8003e0:	80a1c83a 	sub	r16,r16,r2
  8003e4:	88a3883a 	add	r17,r17,r2
  8003e8:	00806d0e 	bge	zero,r2,8005a0 <__sfvwrite_r+0x254>
  8003ec:	b0800217 	ldw	r2,8(r22)
  8003f0:	10c5c83a 	sub	r2,r2,r3
  8003f4:	b0800215 	stw	r2,8(r22)
  8003f8:	103fee1e 	bne	r2,zero,8003b4 <__sfvwrite_r+0x68>
  8003fc:	0009883a 	mov	r4,zero
  800400:	2005883a 	mov	r2,r4
  800404:	dfc00a17 	ldw	ra,40(sp)
  800408:	df000917 	ldw	fp,36(sp)
  80040c:	ddc00817 	ldw	r23,32(sp)
  800410:	dd800717 	ldw	r22,28(sp)
  800414:	dd400617 	ldw	r21,24(sp)
  800418:	dd000517 	ldw	r20,20(sp)
  80041c:	dcc00417 	ldw	r19,16(sp)
  800420:	dc800317 	ldw	r18,12(sp)
  800424:	dc400217 	ldw	r17,8(sp)
  800428:	dc000117 	ldw	r16,4(sp)
  80042c:	dec00b04 	addi	sp,sp,44
  800430:	f800283a 	ret
  800434:	08017f00 	call	8017f0 <__swsetup_r>
  800438:	1000e41e 	bne	r2,zero,8007cc <__sfvwrite_r+0x480>
  80043c:	91c0030b 	ldhu	r7,12(r18)
  800440:	b5400017 	ldw	r21,0(r22)
  800444:	3880008c 	andi	r2,r7,2
  800448:	103fd81e 	bne	r2,zero,8003ac <__sfvwrite_r+0x60>
  80044c:	3880004c 	andi	r2,r7,1
  800450:	1005003a 	cmpeq	r2,r2,zero
  800454:	10005726 	beq	r2,zero,8005b4 <__sfvwrite_r+0x268>
  800458:	0029883a 	mov	r20,zero
  80045c:	002f883a 	mov	r23,zero
  800460:	a0004226 	beq	r20,zero,80056c <__sfvwrite_r+0x220>
  800464:	3880800c 	andi	r2,r7,512
  800468:	94000217 	ldw	r16,8(r18)
  80046c:	10008b26 	beq	r2,zero,80069c <__sfvwrite_r+0x350>
  800470:	800d883a 	mov	r6,r16
  800474:	a400a536 	bltu	r20,r16,80070c <__sfvwrite_r+0x3c0>
  800478:	3881200c 	andi	r2,r7,1152
  80047c:	10002726 	beq	r2,zero,80051c <__sfvwrite_r+0x1d0>
  800480:	90800517 	ldw	r2,20(r18)
  800484:	92000417 	ldw	r8,16(r18)
  800488:	91400017 	ldw	r5,0(r18)
  80048c:	1087883a 	add	r3,r2,r2
  800490:	1887883a 	add	r3,r3,r2
  800494:	1808d7fa 	srli	r4,r3,31
  800498:	2a21c83a 	sub	r16,r5,r8
  80049c:	80800044 	addi	r2,r16,1
  8004a0:	20c9883a 	add	r4,r4,r3
  8004a4:	2027d07a 	srai	r19,r4,1
  8004a8:	a085883a 	add	r2,r20,r2
  8004ac:	980d883a 	mov	r6,r19
  8004b0:	9880022e 	bgeu	r19,r2,8004bc <__sfvwrite_r+0x170>
  8004b4:	1027883a 	mov	r19,r2
  8004b8:	100d883a 	mov	r6,r2
  8004bc:	3881000c 	andi	r2,r7,1024
  8004c0:	1000b826 	beq	r2,zero,8007a4 <__sfvwrite_r+0x458>
  8004c4:	300b883a 	mov	r5,r6
  8004c8:	e009883a 	mov	r4,fp
  8004cc:	08007e80 	call	8007e8 <_malloc_r>
  8004d0:	10003126 	beq	r2,zero,800598 <__sfvwrite_r+0x24c>
  8004d4:	91400417 	ldw	r5,16(r18)
  8004d8:	1009883a 	mov	r4,r2
  8004dc:	800d883a 	mov	r6,r16
  8004e0:	1023883a 	mov	r17,r2
  8004e4:	080100c0 	call	80100c <memcpy>
  8004e8:	90c0030b 	ldhu	r3,12(r18)
  8004ec:	00beffc4 	movi	r2,-1025
  8004f0:	1886703a 	and	r3,r3,r2
  8004f4:	18c02014 	ori	r3,r3,128
  8004f8:	90c0030d 	sth	r3,12(r18)
  8004fc:	9c07c83a 	sub	r3,r19,r16
  800500:	8c05883a 	add	r2,r17,r16
  800504:	a00d883a 	mov	r6,r20
  800508:	a021883a 	mov	r16,r20
  80050c:	90800015 	stw	r2,0(r18)
  800510:	90c00215 	stw	r3,8(r18)
  800514:	94400415 	stw	r17,16(r18)
  800518:	94c00515 	stw	r19,20(r18)
  80051c:	91000017 	ldw	r4,0(r18)
  800520:	b80b883a 	mov	r5,r23
  800524:	a023883a 	mov	r17,r20
  800528:	08010ac0 	call	8010ac <memmove>
  80052c:	90c00217 	ldw	r3,8(r18)
  800530:	90800017 	ldw	r2,0(r18)
  800534:	a027883a 	mov	r19,r20
  800538:	1c07c83a 	sub	r3,r3,r16
  80053c:	1405883a 	add	r2,r2,r16
  800540:	90c00215 	stw	r3,8(r18)
  800544:	a021883a 	mov	r16,r20
  800548:	90800015 	stw	r2,0(r18)
  80054c:	b0800217 	ldw	r2,8(r22)
  800550:	1405c83a 	sub	r2,r2,r16
  800554:	b0800215 	stw	r2,8(r22)
  800558:	103fa826 	beq	r2,zero,8003fc <__sfvwrite_r+0xb0>
  80055c:	a469c83a 	sub	r20,r20,r17
  800560:	91c0030b 	ldhu	r7,12(r18)
  800564:	bcef883a 	add	r23,r23,r19
  800568:	a03fbe1e 	bne	r20,zero,800464 <__sfvwrite_r+0x118>
  80056c:	adc00017 	ldw	r23,0(r21)
  800570:	ad000117 	ldw	r20,4(r21)
  800574:	ad400204 	addi	r21,r21,8
  800578:	003fb906 	br	800460 <__sfvwrite_r+0x114>
  80057c:	ac400017 	ldw	r17,0(r21)
  800580:	ac000117 	ldw	r16,4(r21)
  800584:	ad400204 	addi	r21,r21,8
  800588:	003f8a06 	br	8003b4 <__sfvwrite_r+0x68>
  80058c:	91400417 	ldw	r5,16(r18)
  800590:	e009883a 	mov	r4,fp
  800594:	0801f480 	call	801f48 <_free_r>
  800598:	00800304 	movi	r2,12
  80059c:	e0800015 	stw	r2,0(fp)
  8005a0:	9080030b 	ldhu	r2,12(r18)
  8005a4:	013fffc4 	movi	r4,-1
  8005a8:	10801014 	ori	r2,r2,64
  8005ac:	9080030d 	sth	r2,12(r18)
  8005b0:	003f9306 	br	800400 <__sfvwrite_r+0xb4>
  8005b4:	0027883a 	mov	r19,zero
  8005b8:	002f883a 	mov	r23,zero
  8005bc:	d8000015 	stw	zero,0(sp)
  8005c0:	0029883a 	mov	r20,zero
  8005c4:	98001e26 	beq	r19,zero,800640 <__sfvwrite_r+0x2f4>
  8005c8:	d8c00017 	ldw	r3,0(sp)
  8005cc:	1804c03a 	cmpne	r2,r3,zero
  8005d0:	10005e26 	beq	r2,zero,80074c <__sfvwrite_r+0x400>
  8005d4:	9821883a 	mov	r16,r19
  8005d8:	a4c0012e 	bgeu	r20,r19,8005e0 <__sfvwrite_r+0x294>
  8005dc:	a021883a 	mov	r16,r20
  8005e0:	91000017 	ldw	r4,0(r18)
  8005e4:	90800417 	ldw	r2,16(r18)
  8005e8:	91800217 	ldw	r6,8(r18)
  8005ec:	91c00517 	ldw	r7,20(r18)
  8005f0:	1100022e 	bgeu	r2,r4,8005fc <__sfvwrite_r+0x2b0>
  8005f4:	31e3883a 	add	r17,r6,r7
  8005f8:	8c001616 	blt	r17,r16,800654 <__sfvwrite_r+0x308>
  8005fc:	81c03816 	blt	r16,r7,8006e0 <__sfvwrite_r+0x394>
  800600:	90c00917 	ldw	r3,36(r18)
  800604:	91400717 	ldw	r5,28(r18)
  800608:	e009883a 	mov	r4,fp
  80060c:	b80d883a 	mov	r6,r23
  800610:	183ee83a 	callr	r3
  800614:	1023883a 	mov	r17,r2
  800618:	00bfe10e 	bge	zero,r2,8005a0 <__sfvwrite_r+0x254>
  80061c:	a469c83a 	sub	r20,r20,r17
  800620:	a0001826 	beq	r20,zero,800684 <__sfvwrite_r+0x338>
  800624:	b0800217 	ldw	r2,8(r22)
  800628:	1445c83a 	sub	r2,r2,r17
  80062c:	b0800215 	stw	r2,8(r22)
  800630:	103f7226 	beq	r2,zero,8003fc <__sfvwrite_r+0xb0>
  800634:	9c67c83a 	sub	r19,r19,r17
  800638:	bc6f883a 	add	r23,r23,r17
  80063c:	983fe21e 	bne	r19,zero,8005c8 <__sfvwrite_r+0x27c>
  800640:	adc00017 	ldw	r23,0(r21)
  800644:	acc00117 	ldw	r19,4(r21)
  800648:	ad400204 	addi	r21,r21,8
  80064c:	d8000015 	stw	zero,0(sp)
  800650:	003fdc06 	br	8005c4 <__sfvwrite_r+0x278>
  800654:	b80b883a 	mov	r5,r23
  800658:	880d883a 	mov	r6,r17
  80065c:	08010ac0 	call	8010ac <memmove>
  800660:	90c00017 	ldw	r3,0(r18)
  800664:	e009883a 	mov	r4,fp
  800668:	900b883a 	mov	r5,r18
  80066c:	1c47883a 	add	r3,r3,r17
  800670:	90c00015 	stw	r3,0(r18)
  800674:	080192c0 	call	80192c <_fflush_r>
  800678:	103fc91e 	bne	r2,zero,8005a0 <__sfvwrite_r+0x254>
  80067c:	a469c83a 	sub	r20,r20,r17
  800680:	a03fe81e 	bne	r20,zero,800624 <__sfvwrite_r+0x2d8>
  800684:	e009883a 	mov	r4,fp
  800688:	900b883a 	mov	r5,r18
  80068c:	080192c0 	call	80192c <_fflush_r>
  800690:	103fc31e 	bne	r2,zero,8005a0 <__sfvwrite_r+0x254>
  800694:	d8000015 	stw	zero,0(sp)
  800698:	003fe206 	br	800624 <__sfvwrite_r+0x2d8>
  80069c:	91000017 	ldw	r4,0(r18)
  8006a0:	90800417 	ldw	r2,16(r18)
  8006a4:	1100022e 	bgeu	r2,r4,8006b0 <__sfvwrite_r+0x364>
  8006a8:	8023883a 	mov	r17,r16
  8006ac:	85003136 	bltu	r16,r20,800774 <__sfvwrite_r+0x428>
  8006b0:	91c00517 	ldw	r7,20(r18)
  8006b4:	a1c01836 	bltu	r20,r7,800718 <__sfvwrite_r+0x3cc>
  8006b8:	90c00917 	ldw	r3,36(r18)
  8006bc:	91400717 	ldw	r5,28(r18)
  8006c0:	e009883a 	mov	r4,fp
  8006c4:	b80d883a 	mov	r6,r23
  8006c8:	183ee83a 	callr	r3
  8006cc:	1021883a 	mov	r16,r2
  8006d0:	00bfb30e 	bge	zero,r2,8005a0 <__sfvwrite_r+0x254>
  8006d4:	1023883a 	mov	r17,r2
  8006d8:	1027883a 	mov	r19,r2
  8006dc:	003f9b06 	br	80054c <__sfvwrite_r+0x200>
  8006e0:	b80b883a 	mov	r5,r23
  8006e4:	800d883a 	mov	r6,r16
  8006e8:	08010ac0 	call	8010ac <memmove>
  8006ec:	90c00217 	ldw	r3,8(r18)
  8006f0:	90800017 	ldw	r2,0(r18)
  8006f4:	8023883a 	mov	r17,r16
  8006f8:	1c07c83a 	sub	r3,r3,r16
  8006fc:	1405883a 	add	r2,r2,r16
  800700:	90c00215 	stw	r3,8(r18)
  800704:	90800015 	stw	r2,0(r18)
  800708:	003fc406 	br	80061c <__sfvwrite_r+0x2d0>
  80070c:	a00d883a 	mov	r6,r20
  800710:	a021883a 	mov	r16,r20
  800714:	003f8106 	br	80051c <__sfvwrite_r+0x1d0>
  800718:	b80b883a 	mov	r5,r23
  80071c:	a00d883a 	mov	r6,r20
  800720:	08010ac0 	call	8010ac <memmove>
  800724:	90c00217 	ldw	r3,8(r18)
  800728:	90800017 	ldw	r2,0(r18)
  80072c:	a021883a 	mov	r16,r20
  800730:	1d07c83a 	sub	r3,r3,r20
  800734:	1505883a 	add	r2,r2,r20
  800738:	a023883a 	mov	r17,r20
  80073c:	a027883a 	mov	r19,r20
  800740:	90c00215 	stw	r3,8(r18)
  800744:	90800015 	stw	r2,0(r18)
  800748:	003f8006 	br	80054c <__sfvwrite_r+0x200>
  80074c:	b809883a 	mov	r4,r23
  800750:	01400284 	movi	r5,10
  800754:	980d883a 	mov	r6,r19
  800758:	0800f280 	call	800f28 <memchr>
  80075c:	10001726 	beq	r2,zero,8007bc <__sfvwrite_r+0x470>
  800760:	15c5c83a 	sub	r2,r2,r23
  800764:	15000044 	addi	r20,r2,1
  800768:	00800044 	movi	r2,1
  80076c:	d8800015 	stw	r2,0(sp)
  800770:	003f9806 	br	8005d4 <__sfvwrite_r+0x288>
  800774:	b80b883a 	mov	r5,r23
  800778:	800d883a 	mov	r6,r16
  80077c:	08010ac0 	call	8010ac <memmove>
  800780:	90c00017 	ldw	r3,0(r18)
  800784:	e009883a 	mov	r4,fp
  800788:	900b883a 	mov	r5,r18
  80078c:	1c07883a 	add	r3,r3,r16
  800790:	90c00015 	stw	r3,0(r18)
  800794:	8027883a 	mov	r19,r16
  800798:	080192c0 	call	80192c <_fflush_r>
  80079c:	103f6b26 	beq	r2,zero,80054c <__sfvwrite_r+0x200>
  8007a0:	003f7f06 	br	8005a0 <__sfvwrite_r+0x254>
  8007a4:	400b883a 	mov	r5,r8
  8007a8:	e009883a 	mov	r4,fp
  8007ac:	080118c0 	call	80118c <_realloc_r>
  8007b0:	103f7626 	beq	r2,zero,80058c <__sfvwrite_r+0x240>
  8007b4:	1023883a 	mov	r17,r2
  8007b8:	003f5006 	br	8004fc <__sfvwrite_r+0x1b0>
  8007bc:	00c00044 	movi	r3,1
  8007c0:	9d000044 	addi	r20,r19,1
  8007c4:	d8c00015 	stw	r3,0(sp)
  8007c8:	003f8206 	br	8005d4 <__sfvwrite_r+0x288>
  8007cc:	9080030b 	ldhu	r2,12(r18)
  8007d0:	00c00244 	movi	r3,9
  8007d4:	013fffc4 	movi	r4,-1
  8007d8:	10801014 	ori	r2,r2,64
  8007dc:	9080030d 	sth	r2,12(r18)
  8007e0:	e0c00015 	stw	r3,0(fp)
  8007e4:	003f0606 	br	800400 <__sfvwrite_r+0xb4>

008007e8 <_malloc_r>:
  8007e8:	defff604 	addi	sp,sp,-40
  8007ec:	28c002c4 	addi	r3,r5,11
  8007f0:	00800584 	movi	r2,22
  8007f4:	dc800215 	stw	r18,8(sp)
  8007f8:	dfc00915 	stw	ra,36(sp)
  8007fc:	df000815 	stw	fp,32(sp)
  800800:	ddc00715 	stw	r23,28(sp)
  800804:	dd800615 	stw	r22,24(sp)
  800808:	dd400515 	stw	r21,20(sp)
  80080c:	dd000415 	stw	r20,16(sp)
  800810:	dcc00315 	stw	r19,12(sp)
  800814:	dc400115 	stw	r17,4(sp)
  800818:	dc000015 	stw	r16,0(sp)
  80081c:	2025883a 	mov	r18,r4
  800820:	10c01236 	bltu	r2,r3,80086c <_malloc_r+0x84>
  800824:	04400404 	movi	r17,16
  800828:	8940142e 	bgeu	r17,r5,80087c <_malloc_r+0x94>
  80082c:	00800304 	movi	r2,12
  800830:	0007883a 	mov	r3,zero
  800834:	90800015 	stw	r2,0(r18)
  800838:	1805883a 	mov	r2,r3
  80083c:	dfc00917 	ldw	ra,36(sp)
  800840:	df000817 	ldw	fp,32(sp)
  800844:	ddc00717 	ldw	r23,28(sp)
  800848:	dd800617 	ldw	r22,24(sp)
  80084c:	dd400517 	ldw	r21,20(sp)
  800850:	dd000417 	ldw	r20,16(sp)
  800854:	dcc00317 	ldw	r19,12(sp)
  800858:	dc800217 	ldw	r18,8(sp)
  80085c:	dc400117 	ldw	r17,4(sp)
  800860:	dc000017 	ldw	r16,0(sp)
  800864:	dec00a04 	addi	sp,sp,40
  800868:	f800283a 	ret
  80086c:	00bffe04 	movi	r2,-8
  800870:	18a2703a 	and	r17,r3,r2
  800874:	883fed16 	blt	r17,zero,80082c <_malloc_r+0x44>
  800878:	897fec36 	bltu	r17,r5,80082c <_malloc_r+0x44>
  80087c:	9009883a 	mov	r4,r18
  800880:	08031b80 	call	8031b8 <__malloc_lock>
  800884:	00807dc4 	movi	r2,503
  800888:	14402b2e 	bgeu	r2,r17,800938 <_malloc_r+0x150>
  80088c:	8806d27a 	srli	r3,r17,9
  800890:	18003f1e 	bne	r3,zero,800990 <_malloc_r+0x1a8>
  800894:	880cd0fa 	srli	r6,r17,3
  800898:	300490fa 	slli	r2,r6,3
  80089c:	02c02034 	movhi	r11,128
  8008a0:	5ad67904 	addi	r11,r11,23012
  8008a4:	12cb883a 	add	r5,r2,r11
  8008a8:	2c000317 	ldw	r16,12(r5)
  8008ac:	580f883a 	mov	r7,r11
  8008b0:	2c00041e 	bne	r5,r16,8008c4 <_malloc_r+0xdc>
  8008b4:	00000a06 	br	8008e0 <_malloc_r+0xf8>
  8008b8:	1800860e 	bge	r3,zero,800ad4 <_malloc_r+0x2ec>
  8008bc:	84000317 	ldw	r16,12(r16)
  8008c0:	2c000726 	beq	r5,r16,8008e0 <_malloc_r+0xf8>
  8008c4:	80800117 	ldw	r2,4(r16)
  8008c8:	00ffff04 	movi	r3,-4
  8008cc:	10c8703a 	and	r4,r2,r3
  8008d0:	2447c83a 	sub	r3,r4,r17
  8008d4:	008003c4 	movi	r2,15
  8008d8:	10fff70e 	bge	r2,r3,8008b8 <_malloc_r+0xd0>
  8008dc:	31bfffc4 	addi	r6,r6,-1
  8008e0:	32400044 	addi	r9,r6,1
  8008e4:	02802034 	movhi	r10,128
  8008e8:	52967b04 	addi	r10,r10,23020
  8008ec:	54000217 	ldw	r16,8(r10)
  8008f0:	8280a026 	beq	r16,r10,800b74 <_malloc_r+0x38c>
  8008f4:	80800117 	ldw	r2,4(r16)
  8008f8:	00ffff04 	movi	r3,-4
  8008fc:	10ca703a 	and	r5,r2,r3
  800900:	2c4dc83a 	sub	r6,r5,r17
  800904:	008003c4 	movi	r2,15
  800908:	11808316 	blt	r2,r6,800b18 <_malloc_r+0x330>
  80090c:	52800315 	stw	r10,12(r10)
  800910:	52800215 	stw	r10,8(r10)
  800914:	30002916 	blt	r6,zero,8009bc <_malloc_r+0x1d4>
  800918:	8147883a 	add	r3,r16,r5
  80091c:	18800117 	ldw	r2,4(r3)
  800920:	9009883a 	mov	r4,r18
  800924:	10800054 	ori	r2,r2,1
  800928:	18800115 	stw	r2,4(r3)
  80092c:	08031d80 	call	8031d8 <__malloc_unlock>
  800930:	80c00204 	addi	r3,r16,8
  800934:	003fc006 	br	800838 <_malloc_r+0x50>
  800938:	02c02034 	movhi	r11,128
  80093c:	5ad67904 	addi	r11,r11,23012
  800940:	8ac5883a 	add	r2,r17,r11
  800944:	14000317 	ldw	r16,12(r2)
  800948:	580f883a 	mov	r7,r11
  80094c:	8806d0fa 	srli	r3,r17,3
  800950:	14006c26 	beq	r2,r16,800b04 <_malloc_r+0x31c>
  800954:	80c00117 	ldw	r3,4(r16)
  800958:	00bfff04 	movi	r2,-4
  80095c:	81800317 	ldw	r6,12(r16)
  800960:	1886703a 	and	r3,r3,r2
  800964:	80c7883a 	add	r3,r16,r3
  800968:	18800117 	ldw	r2,4(r3)
  80096c:	81400217 	ldw	r5,8(r16)
  800970:	9009883a 	mov	r4,r18
  800974:	10800054 	ori	r2,r2,1
  800978:	18800115 	stw	r2,4(r3)
  80097c:	31400215 	stw	r5,8(r6)
  800980:	29800315 	stw	r6,12(r5)
  800984:	08031d80 	call	8031d8 <__malloc_unlock>
  800988:	80c00204 	addi	r3,r16,8
  80098c:	003faa06 	br	800838 <_malloc_r+0x50>
  800990:	00800104 	movi	r2,4
  800994:	10c0052e 	bgeu	r2,r3,8009ac <_malloc_r+0x1c4>
  800998:	00800504 	movi	r2,20
  80099c:	10c07836 	bltu	r2,r3,800b80 <_malloc_r+0x398>
  8009a0:	198016c4 	addi	r6,r3,91
  8009a4:	300490fa 	slli	r2,r6,3
  8009a8:	003fbc06 	br	80089c <_malloc_r+0xb4>
  8009ac:	8804d1ba 	srli	r2,r17,6
  8009b0:	11800e04 	addi	r6,r2,56
  8009b4:	300490fa 	slli	r2,r6,3
  8009b8:	003fb806 	br	80089c <_malloc_r+0xb4>
  8009bc:	00807fc4 	movi	r2,511
  8009c0:	1140bb36 	bltu	r2,r5,800cb0 <_malloc_r+0x4c8>
  8009c4:	2806d0fa 	srli	r3,r5,3
  8009c8:	573ffe04 	addi	fp,r10,-8
  8009cc:	00800044 	movi	r2,1
  8009d0:	180890fa 	slli	r4,r3,3
  8009d4:	1807d0ba 	srai	r3,r3,2
  8009d8:	e1c00117 	ldw	r7,4(fp)
  8009dc:	5909883a 	add	r4,r11,r4
  8009e0:	21400217 	ldw	r5,8(r4)
  8009e4:	10c4983a 	sll	r2,r2,r3
  8009e8:	81000315 	stw	r4,12(r16)
  8009ec:	81400215 	stw	r5,8(r16)
  8009f0:	388eb03a 	or	r7,r7,r2
  8009f4:	2c000315 	stw	r16,12(r5)
  8009f8:	24000215 	stw	r16,8(r4)
  8009fc:	e1c00115 	stw	r7,4(fp)
  800a00:	4807883a 	mov	r3,r9
  800a04:	4800cd16 	blt	r9,zero,800d3c <_malloc_r+0x554>
  800a08:	1807d0ba 	srai	r3,r3,2
  800a0c:	00800044 	movi	r2,1
  800a10:	10c8983a 	sll	r4,r2,r3
  800a14:	39004436 	bltu	r7,r4,800b28 <_malloc_r+0x340>
  800a18:	21c4703a 	and	r2,r4,r7
  800a1c:	10000a1e 	bne	r2,zero,800a48 <_malloc_r+0x260>
  800a20:	2109883a 	add	r4,r4,r4
  800a24:	00bfff04 	movi	r2,-4
  800a28:	4884703a 	and	r2,r9,r2
  800a2c:	3906703a 	and	r3,r7,r4
  800a30:	12400104 	addi	r9,r2,4
  800a34:	1800041e 	bne	r3,zero,800a48 <_malloc_r+0x260>
  800a38:	2109883a 	add	r4,r4,r4
  800a3c:	3904703a 	and	r2,r7,r4
  800a40:	4a400104 	addi	r9,r9,4
  800a44:	103ffc26 	beq	r2,zero,800a38 <_malloc_r+0x250>
  800a48:	480490fa 	slli	r2,r9,3
  800a4c:	4819883a 	mov	r12,r9
  800a50:	023fff04 	movi	r8,-4
  800a54:	589b883a 	add	r13,r11,r2
  800a58:	6807883a 	mov	r3,r13
  800a5c:	014003c4 	movi	r5,15
  800a60:	1c000317 	ldw	r16,12(r3)
  800a64:	1c00041e 	bne	r3,r16,800a78 <_malloc_r+0x290>
  800a68:	0000a706 	br	800d08 <_malloc_r+0x520>
  800a6c:	3000ab0e 	bge	r6,zero,800d1c <_malloc_r+0x534>
  800a70:	84000317 	ldw	r16,12(r16)
  800a74:	1c00a426 	beq	r3,r16,800d08 <_malloc_r+0x520>
  800a78:	80800117 	ldw	r2,4(r16)
  800a7c:	1204703a 	and	r2,r2,r8
  800a80:	144dc83a 	sub	r6,r2,r17
  800a84:	29bff90e 	bge	r5,r6,800a6c <_malloc_r+0x284>
  800a88:	81000317 	ldw	r4,12(r16)
  800a8c:	80c00217 	ldw	r3,8(r16)
  800a90:	89400054 	ori	r5,r17,1
  800a94:	8445883a 	add	r2,r16,r17
  800a98:	20c00215 	stw	r3,8(r4)
  800a9c:	19000315 	stw	r4,12(r3)
  800aa0:	81400115 	stw	r5,4(r16)
  800aa4:	1187883a 	add	r3,r2,r6
  800aa8:	31000054 	ori	r4,r6,1
  800aac:	50800315 	stw	r2,12(r10)
  800ab0:	50800215 	stw	r2,8(r10)
  800ab4:	19800015 	stw	r6,0(r3)
  800ab8:	11000115 	stw	r4,4(r2)
  800abc:	12800215 	stw	r10,8(r2)
  800ac0:	12800315 	stw	r10,12(r2)
  800ac4:	9009883a 	mov	r4,r18
  800ac8:	08031d80 	call	8031d8 <__malloc_unlock>
  800acc:	80c00204 	addi	r3,r16,8
  800ad0:	003f5906 	br	800838 <_malloc_r+0x50>
  800ad4:	8109883a 	add	r4,r16,r4
  800ad8:	20800117 	ldw	r2,4(r4)
  800adc:	80c00217 	ldw	r3,8(r16)
  800ae0:	81400317 	ldw	r5,12(r16)
  800ae4:	10800054 	ori	r2,r2,1
  800ae8:	20800115 	stw	r2,4(r4)
  800aec:	28c00215 	stw	r3,8(r5)
  800af0:	19400315 	stw	r5,12(r3)
  800af4:	9009883a 	mov	r4,r18
  800af8:	08031d80 	call	8031d8 <__malloc_unlock>
  800afc:	80c00204 	addi	r3,r16,8
  800b00:	003f4d06 	br	800838 <_malloc_r+0x50>
  800b04:	80800204 	addi	r2,r16,8
  800b08:	14000317 	ldw	r16,12(r2)
  800b0c:	143f911e 	bne	r2,r16,800954 <_malloc_r+0x16c>
  800b10:	1a400084 	addi	r9,r3,2
  800b14:	003f7306 	br	8008e4 <_malloc_r+0xfc>
  800b18:	88c00054 	ori	r3,r17,1
  800b1c:	8445883a 	add	r2,r16,r17
  800b20:	80c00115 	stw	r3,4(r16)
  800b24:	003fdf06 	br	800aa4 <_malloc_r+0x2bc>
  800b28:	e4000217 	ldw	r16,8(fp)
  800b2c:	00bfff04 	movi	r2,-4
  800b30:	80c00117 	ldw	r3,4(r16)
  800b34:	802d883a 	mov	r22,r16
  800b38:	18aa703a 	and	r21,r3,r2
  800b3c:	ac401636 	bltu	r21,r17,800b98 <_malloc_r+0x3b0>
  800b40:	ac49c83a 	sub	r4,r21,r17
  800b44:	008003c4 	movi	r2,15
  800b48:	1100130e 	bge	r2,r4,800b98 <_malloc_r+0x3b0>
  800b4c:	88800054 	ori	r2,r17,1
  800b50:	8447883a 	add	r3,r16,r17
  800b54:	80800115 	stw	r2,4(r16)
  800b58:	20800054 	ori	r2,r4,1
  800b5c:	18800115 	stw	r2,4(r3)
  800b60:	e0c00215 	stw	r3,8(fp)
  800b64:	9009883a 	mov	r4,r18
  800b68:	08031d80 	call	8031d8 <__malloc_unlock>
  800b6c:	80c00204 	addi	r3,r16,8
  800b70:	003f3106 	br	800838 <_malloc_r+0x50>
  800b74:	39c00117 	ldw	r7,4(r7)
  800b78:	573ffe04 	addi	fp,r10,-8
  800b7c:	003fa006 	br	800a00 <_malloc_r+0x218>
  800b80:	00801504 	movi	r2,84
  800b84:	10c06736 	bltu	r2,r3,800d24 <_malloc_r+0x53c>
  800b88:	8804d33a 	srli	r2,r17,12
  800b8c:	11801b84 	addi	r6,r2,110
  800b90:	300490fa 	slli	r2,r6,3
  800b94:	003f4106 	br	80089c <_malloc_r+0xb4>
  800b98:	d0a6a017 	ldw	r2,-25984(gp)
  800b9c:	d0e00317 	ldw	r3,-32756(gp)
  800ba0:	053fffc4 	movi	r20,-1
  800ba4:	10800404 	addi	r2,r2,16
  800ba8:	88a7883a 	add	r19,r17,r2
  800bac:	1d000326 	beq	r3,r20,800bbc <_malloc_r+0x3d4>
  800bb0:	98c3ffc4 	addi	r3,r19,4095
  800bb4:	00bc0004 	movi	r2,-4096
  800bb8:	18a6703a 	and	r19,r3,r2
  800bbc:	9009883a 	mov	r4,r18
  800bc0:	980b883a 	mov	r5,r19
  800bc4:	08017800 	call	801780 <_sbrk_r>
  800bc8:	1009883a 	mov	r4,r2
  800bcc:	15000426 	beq	r2,r20,800be0 <_malloc_r+0x3f8>
  800bd0:	854b883a 	add	r5,r16,r21
  800bd4:	1029883a 	mov	r20,r2
  800bd8:	11405a2e 	bgeu	r2,r5,800d44 <_malloc_r+0x55c>
  800bdc:	87000c26 	beq	r16,fp,800c10 <_malloc_r+0x428>
  800be0:	e4000217 	ldw	r16,8(fp)
  800be4:	80c00117 	ldw	r3,4(r16)
  800be8:	00bfff04 	movi	r2,-4
  800bec:	1884703a 	and	r2,r3,r2
  800bf0:	14400336 	bltu	r2,r17,800c00 <_malloc_r+0x418>
  800bf4:	1449c83a 	sub	r4,r2,r17
  800bf8:	008003c4 	movi	r2,15
  800bfc:	113fd316 	blt	r2,r4,800b4c <_malloc_r+0x364>
  800c00:	9009883a 	mov	r4,r18
  800c04:	08031d80 	call	8031d8 <__malloc_unlock>
  800c08:	0007883a 	mov	r3,zero
  800c0c:	003f0a06 	br	800838 <_malloc_r+0x50>
  800c10:	05c02074 	movhi	r23,129
  800c14:	bde2a704 	addi	r23,r23,-30052
  800c18:	b8800017 	ldw	r2,0(r23)
  800c1c:	988d883a 	add	r6,r19,r2
  800c20:	b9800015 	stw	r6,0(r23)
  800c24:	d0e00317 	ldw	r3,-32756(gp)
  800c28:	00bfffc4 	movi	r2,-1
  800c2c:	18808e26 	beq	r3,r2,800e68 <_malloc_r+0x680>
  800c30:	2145c83a 	sub	r2,r4,r5
  800c34:	3085883a 	add	r2,r6,r2
  800c38:	b8800015 	stw	r2,0(r23)
  800c3c:	20c001cc 	andi	r3,r4,7
  800c40:	18005f1e 	bne	r3,zero,800dc0 <_malloc_r+0x5d8>
  800c44:	000b883a 	mov	r5,zero
  800c48:	a4c5883a 	add	r2,r20,r19
  800c4c:	1083ffcc 	andi	r2,r2,4095
  800c50:	00c40004 	movi	r3,4096
  800c54:	1887c83a 	sub	r3,r3,r2
  800c58:	28e7883a 	add	r19,r5,r3
  800c5c:	9009883a 	mov	r4,r18
  800c60:	980b883a 	mov	r5,r19
  800c64:	08017800 	call	801780 <_sbrk_r>
  800c68:	1007883a 	mov	r3,r2
  800c6c:	00bfffc4 	movi	r2,-1
  800c70:	18807a26 	beq	r3,r2,800e5c <_malloc_r+0x674>
  800c74:	1d05c83a 	sub	r2,r3,r20
  800c78:	9885883a 	add	r2,r19,r2
  800c7c:	10c00054 	ori	r3,r2,1
  800c80:	b8800017 	ldw	r2,0(r23)
  800c84:	a021883a 	mov	r16,r20
  800c88:	a0c00115 	stw	r3,4(r20)
  800c8c:	9885883a 	add	r2,r19,r2
  800c90:	b8800015 	stw	r2,0(r23)
  800c94:	e5000215 	stw	r20,8(fp)
  800c98:	b7003626 	beq	r22,fp,800d74 <_malloc_r+0x58c>
  800c9c:	018003c4 	movi	r6,15
  800ca0:	35404b36 	bltu	r6,r21,800dd0 <_malloc_r+0x5e8>
  800ca4:	00800044 	movi	r2,1
  800ca8:	a0800115 	stw	r2,4(r20)
  800cac:	003fcd06 	br	800be4 <_malloc_r+0x3fc>
  800cb0:	2808d27a 	srli	r4,r5,9
  800cb4:	2000371e 	bne	r4,zero,800d94 <_malloc_r+0x5ac>
  800cb8:	2808d0fa 	srli	r4,r5,3
  800cbc:	200690fa 	slli	r3,r4,3
  800cc0:	1ad1883a 	add	r8,r3,r11
  800cc4:	41800217 	ldw	r6,8(r8)
  800cc8:	41805b26 	beq	r8,r6,800e38 <_malloc_r+0x650>
  800ccc:	30800117 	ldw	r2,4(r6)
  800cd0:	00ffff04 	movi	r3,-4
  800cd4:	10c4703a 	and	r2,r2,r3
  800cd8:	2880022e 	bgeu	r5,r2,800ce4 <_malloc_r+0x4fc>
  800cdc:	31800217 	ldw	r6,8(r6)
  800ce0:	41bffa1e 	bne	r8,r6,800ccc <_malloc_r+0x4e4>
  800ce4:	32000317 	ldw	r8,12(r6)
  800ce8:	39c00117 	ldw	r7,4(r7)
  800cec:	82000315 	stw	r8,12(r16)
  800cf0:	81800215 	stw	r6,8(r16)
  800cf4:	07002034 	movhi	fp,128
  800cf8:	e7167904 	addi	fp,fp,23012
  800cfc:	34000315 	stw	r16,12(r6)
  800d00:	44000215 	stw	r16,8(r8)
  800d04:	003f3e06 	br	800a00 <_malloc_r+0x218>
  800d08:	63000044 	addi	r12,r12,1
  800d0c:	608000cc 	andi	r2,r12,3
  800d10:	10005d26 	beq	r2,zero,800e88 <_malloc_r+0x6a0>
  800d14:	18c00204 	addi	r3,r3,8
  800d18:	003f5106 	br	800a60 <_malloc_r+0x278>
  800d1c:	8089883a 	add	r4,r16,r2
  800d20:	003f6d06 	br	800ad8 <_malloc_r+0x2f0>
  800d24:	00805504 	movi	r2,340
  800d28:	10c02036 	bltu	r2,r3,800dac <_malloc_r+0x5c4>
  800d2c:	8804d3fa 	srli	r2,r17,15
  800d30:	11801dc4 	addi	r6,r2,119
  800d34:	300490fa 	slli	r2,r6,3
  800d38:	003ed806 	br	80089c <_malloc_r+0xb4>
  800d3c:	48c000c4 	addi	r3,r9,3
  800d40:	003f3106 	br	800a08 <_malloc_r+0x220>
  800d44:	05c02074 	movhi	r23,129
  800d48:	bde2a704 	addi	r23,r23,-30052
  800d4c:	b8800017 	ldw	r2,0(r23)
  800d50:	988d883a 	add	r6,r19,r2
  800d54:	b9800015 	stw	r6,0(r23)
  800d58:	293fb21e 	bne	r5,r4,800c24 <_malloc_r+0x43c>
  800d5c:	2083ffcc 	andi	r2,r4,4095
  800d60:	103fb01e 	bne	r2,zero,800c24 <_malloc_r+0x43c>
  800d64:	e4000217 	ldw	r16,8(fp)
  800d68:	9d45883a 	add	r2,r19,r21
  800d6c:	10800054 	ori	r2,r2,1
  800d70:	80800115 	stw	r2,4(r16)
  800d74:	b8c00017 	ldw	r3,0(r23)
  800d78:	d0a6a117 	ldw	r2,-25980(gp)
  800d7c:	10c0012e 	bgeu	r2,r3,800d84 <_malloc_r+0x59c>
  800d80:	d0e6a115 	stw	r3,-25980(gp)
  800d84:	d0a6a217 	ldw	r2,-25976(gp)
  800d88:	10ff962e 	bgeu	r2,r3,800be4 <_malloc_r+0x3fc>
  800d8c:	d0e6a215 	stw	r3,-25976(gp)
  800d90:	003f9406 	br	800be4 <_malloc_r+0x3fc>
  800d94:	00800104 	movi	r2,4
  800d98:	11001e36 	bltu	r2,r4,800e14 <_malloc_r+0x62c>
  800d9c:	2804d1ba 	srli	r2,r5,6
  800da0:	11000e04 	addi	r4,r2,56
  800da4:	200690fa 	slli	r3,r4,3
  800da8:	003fc506 	br	800cc0 <_malloc_r+0x4d8>
  800dac:	00815504 	movi	r2,1364
  800db0:	10c01d2e 	bgeu	r2,r3,800e28 <_malloc_r+0x640>
  800db4:	01801f84 	movi	r6,126
  800db8:	0080fc04 	movi	r2,1008
  800dbc:	003eb706 	br	80089c <_malloc_r+0xb4>
  800dc0:	00800204 	movi	r2,8
  800dc4:	10cbc83a 	sub	r5,r2,r3
  800dc8:	2169883a 	add	r20,r4,r5
  800dcc:	003f9e06 	br	800c48 <_malloc_r+0x460>
  800dd0:	00bffe04 	movi	r2,-8
  800dd4:	a93ffd04 	addi	r4,r21,-12
  800dd8:	2088703a 	and	r4,r4,r2
  800ddc:	b10b883a 	add	r5,r22,r4
  800de0:	00c00144 	movi	r3,5
  800de4:	28c00215 	stw	r3,8(r5)
  800de8:	28c00115 	stw	r3,4(r5)
  800dec:	b0800117 	ldw	r2,4(r22)
  800df0:	1080004c 	andi	r2,r2,1
  800df4:	2084b03a 	or	r2,r4,r2
  800df8:	b0800115 	stw	r2,4(r22)
  800dfc:	313fdd2e 	bgeu	r6,r4,800d74 <_malloc_r+0x58c>
  800e00:	b1400204 	addi	r5,r22,8
  800e04:	9009883a 	mov	r4,r18
  800e08:	0801f480 	call	801f48 <_free_r>
  800e0c:	e4000217 	ldw	r16,8(fp)
  800e10:	003fd806 	br	800d74 <_malloc_r+0x58c>
  800e14:	00800504 	movi	r2,20
  800e18:	11001536 	bltu	r2,r4,800e70 <_malloc_r+0x688>
  800e1c:	210016c4 	addi	r4,r4,91
  800e20:	200690fa 	slli	r3,r4,3
  800e24:	003fa606 	br	800cc0 <_malloc_r+0x4d8>
  800e28:	8804d4ba 	srli	r2,r17,18
  800e2c:	11801f04 	addi	r6,r2,124
  800e30:	300490fa 	slli	r2,r6,3
  800e34:	003e9906 	br	80089c <_malloc_r+0xb4>
  800e38:	2009d0ba 	srai	r4,r4,2
  800e3c:	01402034 	movhi	r5,128
  800e40:	29567904 	addi	r5,r5,23012
  800e44:	00c00044 	movi	r3,1
  800e48:	28800117 	ldw	r2,4(r5)
  800e4c:	1906983a 	sll	r3,r3,r4
  800e50:	10c4b03a 	or	r2,r2,r3
  800e54:	28800115 	stw	r2,4(r5)
  800e58:	003fa306 	br	800ce8 <_malloc_r+0x500>
  800e5c:	0027883a 	mov	r19,zero
  800e60:	00c00044 	movi	r3,1
  800e64:	003f8606 	br	800c80 <_malloc_r+0x498>
  800e68:	d1200315 	stw	r4,-32756(gp)
  800e6c:	003f7306 	br	800c3c <_malloc_r+0x454>
  800e70:	00801504 	movi	r2,84
  800e74:	11001936 	bltu	r2,r4,800edc <_malloc_r+0x6f4>
  800e78:	2804d33a 	srli	r2,r5,12
  800e7c:	11001b84 	addi	r4,r2,110
  800e80:	200690fa 	slli	r3,r4,3
  800e84:	003f8e06 	br	800cc0 <_malloc_r+0x4d8>
  800e88:	480b883a 	mov	r5,r9
  800e8c:	6807883a 	mov	r3,r13
  800e90:	288000cc 	andi	r2,r5,3
  800e94:	18fffe04 	addi	r3,r3,-8
  800e98:	297fffc4 	addi	r5,r5,-1
  800e9c:	10001526 	beq	r2,zero,800ef4 <_malloc_r+0x70c>
  800ea0:	18800217 	ldw	r2,8(r3)
  800ea4:	10fffa26 	beq	r2,r3,800e90 <_malloc_r+0x6a8>
  800ea8:	2109883a 	add	r4,r4,r4
  800eac:	393f1e36 	bltu	r7,r4,800b28 <_malloc_r+0x340>
  800eb0:	203f1d26 	beq	r4,zero,800b28 <_malloc_r+0x340>
  800eb4:	21c4703a 	and	r2,r4,r7
  800eb8:	10000226 	beq	r2,zero,800ec4 <_malloc_r+0x6dc>
  800ebc:	6013883a 	mov	r9,r12
  800ec0:	003ee106 	br	800a48 <_malloc_r+0x260>
  800ec4:	2109883a 	add	r4,r4,r4
  800ec8:	3904703a 	and	r2,r7,r4
  800ecc:	63000104 	addi	r12,r12,4
  800ed0:	103ffc26 	beq	r2,zero,800ec4 <_malloc_r+0x6dc>
  800ed4:	6013883a 	mov	r9,r12
  800ed8:	003edb06 	br	800a48 <_malloc_r+0x260>
  800edc:	00805504 	movi	r2,340
  800ee0:	11000836 	bltu	r2,r4,800f04 <_malloc_r+0x71c>
  800ee4:	2804d3fa 	srli	r2,r5,15
  800ee8:	11001dc4 	addi	r4,r2,119
  800eec:	200690fa 	slli	r3,r4,3
  800ef0:	003f7306 	br	800cc0 <_malloc_r+0x4d8>
  800ef4:	0104303a 	nor	r2,zero,r4
  800ef8:	388e703a 	and	r7,r7,r2
  800efc:	e1c00115 	stw	r7,4(fp)
  800f00:	003fe906 	br	800ea8 <_malloc_r+0x6c0>
  800f04:	00815504 	movi	r2,1364
  800f08:	1100032e 	bgeu	r2,r4,800f18 <_malloc_r+0x730>
  800f0c:	01001f84 	movi	r4,126
  800f10:	00c0fc04 	movi	r3,1008
  800f14:	003f6a06 	br	800cc0 <_malloc_r+0x4d8>
  800f18:	2804d4ba 	srli	r2,r5,18
  800f1c:	11001f04 	addi	r4,r2,124
  800f20:	200690fa 	slli	r3,r4,3
  800f24:	003f6606 	br	800cc0 <_malloc_r+0x4d8>

00800f28 <memchr>:
  800f28:	008000c4 	movi	r2,3
  800f2c:	29403fcc 	andi	r5,r5,255
  800f30:	2007883a 	mov	r3,r4
  800f34:	1180022e 	bgeu	r2,r6,800f40 <memchr+0x18>
  800f38:	2084703a 	and	r2,r4,r2
  800f3c:	10000b26 	beq	r2,zero,800f6c <memchr+0x44>
  800f40:	313fffc4 	addi	r4,r6,-1
  800f44:	3000051e 	bne	r6,zero,800f5c <memchr+0x34>
  800f48:	00002c06 	br	800ffc <memchr+0xd4>
  800f4c:	213fffc4 	addi	r4,r4,-1
  800f50:	00bfffc4 	movi	r2,-1
  800f54:	18c00044 	addi	r3,r3,1
  800f58:	20802826 	beq	r4,r2,800ffc <memchr+0xd4>
  800f5c:	18800003 	ldbu	r2,0(r3)
  800f60:	28bffa1e 	bne	r5,r2,800f4c <memchr+0x24>
  800f64:	1805883a 	mov	r2,r3
  800f68:	f800283a 	ret
  800f6c:	0011883a 	mov	r8,zero
  800f70:	0007883a 	mov	r3,zero
  800f74:	01c00104 	movi	r7,4
  800f78:	4004923a 	slli	r2,r8,8
  800f7c:	18c00044 	addi	r3,r3,1
  800f80:	1151883a 	add	r8,r2,r5
  800f84:	19fffc1e 	bne	r3,r7,800f78 <memchr+0x50>
  800f88:	02bfbff4 	movhi	r10,65279
  800f8c:	52bfbfc4 	addi	r10,r10,-257
  800f90:	02602074 	movhi	r9,32897
  800f94:	4a602004 	addi	r9,r9,-32640
  800f98:	02c000c4 	movi	r11,3
  800f9c:	20800017 	ldw	r2,0(r4)
  800fa0:	31bfff04 	addi	r6,r6,-4
  800fa4:	200f883a 	mov	r7,r4
  800fa8:	1204f03a 	xor	r2,r2,r8
  800fac:	1287883a 	add	r3,r2,r10
  800fb0:	1a46703a 	and	r3,r3,r9
  800fb4:	0084303a 	nor	r2,zero,r2
  800fb8:	10c4703a 	and	r2,r2,r3
  800fbc:	10000b26 	beq	r2,zero,800fec <memchr+0xc4>
  800fc0:	20800003 	ldbu	r2,0(r4)
  800fc4:	28800f26 	beq	r5,r2,801004 <memchr+0xdc>
  800fc8:	20800043 	ldbu	r2,1(r4)
  800fcc:	21c00044 	addi	r7,r4,1
  800fd0:	28800c26 	beq	r5,r2,801004 <memchr+0xdc>
  800fd4:	20800083 	ldbu	r2,2(r4)
  800fd8:	21c00084 	addi	r7,r4,2
  800fdc:	28800926 	beq	r5,r2,801004 <memchr+0xdc>
  800fe0:	208000c3 	ldbu	r2,3(r4)
  800fe4:	21c000c4 	addi	r7,r4,3
  800fe8:	28800626 	beq	r5,r2,801004 <memchr+0xdc>
  800fec:	21000104 	addi	r4,r4,4
  800ff0:	59bfea36 	bltu	r11,r6,800f9c <memchr+0x74>
  800ff4:	2007883a 	mov	r3,r4
  800ff8:	003fd106 	br	800f40 <memchr+0x18>
  800ffc:	0005883a 	mov	r2,zero
  801000:	f800283a 	ret
  801004:	3805883a 	mov	r2,r7
  801008:	f800283a 	ret

0080100c <memcpy>:
  80100c:	01c003c4 	movi	r7,15
  801010:	2007883a 	mov	r3,r4
  801014:	3980032e 	bgeu	r7,r6,801024 <memcpy+0x18>
  801018:	2904b03a 	or	r2,r5,r4
  80101c:	108000cc 	andi	r2,r2,3
  801020:	10000926 	beq	r2,zero,801048 <memcpy+0x3c>
  801024:	30000626 	beq	r6,zero,801040 <memcpy+0x34>
  801028:	30cd883a 	add	r6,r6,r3
  80102c:	28800003 	ldbu	r2,0(r5)
  801030:	29400044 	addi	r5,r5,1
  801034:	18800005 	stb	r2,0(r3)
  801038:	18c00044 	addi	r3,r3,1
  80103c:	30fffb1e 	bne	r6,r3,80102c <memcpy+0x20>
  801040:	2005883a 	mov	r2,r4
  801044:	f800283a 	ret
  801048:	3811883a 	mov	r8,r7
  80104c:	200f883a 	mov	r7,r4
  801050:	28c00017 	ldw	r3,0(r5)
  801054:	31bffc04 	addi	r6,r6,-16
  801058:	38c00015 	stw	r3,0(r7)
  80105c:	28800117 	ldw	r2,4(r5)
  801060:	38800115 	stw	r2,4(r7)
  801064:	28c00217 	ldw	r3,8(r5)
  801068:	38c00215 	stw	r3,8(r7)
  80106c:	28800317 	ldw	r2,12(r5)
  801070:	29400404 	addi	r5,r5,16
  801074:	38800315 	stw	r2,12(r7)
  801078:	39c00404 	addi	r7,r7,16
  80107c:	41bff436 	bltu	r8,r6,801050 <memcpy+0x44>
  801080:	008000c4 	movi	r2,3
  801084:	1180072e 	bgeu	r2,r6,8010a4 <memcpy+0x98>
  801088:	1007883a 	mov	r3,r2
  80108c:	28800017 	ldw	r2,0(r5)
  801090:	31bfff04 	addi	r6,r6,-4
  801094:	29400104 	addi	r5,r5,4
  801098:	38800015 	stw	r2,0(r7)
  80109c:	39c00104 	addi	r7,r7,4
  8010a0:	19bffa36 	bltu	r3,r6,80108c <memcpy+0x80>
  8010a4:	3807883a 	mov	r3,r7
  8010a8:	003fde06 	br	801024 <memcpy+0x18>

008010ac <memmove>:
  8010ac:	2807883a 	mov	r3,r5
  8010b0:	2011883a 	mov	r8,r4
  8010b4:	29000c2e 	bgeu	r5,r4,8010e8 <memmove+0x3c>
  8010b8:	298f883a 	add	r7,r5,r6
  8010bc:	21c00a2e 	bgeu	r4,r7,8010e8 <memmove+0x3c>
  8010c0:	30000726 	beq	r6,zero,8010e0 <memmove+0x34>
  8010c4:	2187883a 	add	r3,r4,r6
  8010c8:	198dc83a 	sub	r6,r3,r6
  8010cc:	39ffffc4 	addi	r7,r7,-1
  8010d0:	38800003 	ldbu	r2,0(r7)
  8010d4:	18ffffc4 	addi	r3,r3,-1
  8010d8:	18800005 	stb	r2,0(r3)
  8010dc:	19bffb1e 	bne	r3,r6,8010cc <memmove+0x20>
  8010e0:	2005883a 	mov	r2,r4
  8010e4:	f800283a 	ret
  8010e8:	01c003c4 	movi	r7,15
  8010ec:	39800a36 	bltu	r7,r6,801118 <memmove+0x6c>
  8010f0:	303ffb26 	beq	r6,zero,8010e0 <memmove+0x34>
  8010f4:	400f883a 	mov	r7,r8
  8010f8:	320d883a 	add	r6,r6,r8
  8010fc:	28800003 	ldbu	r2,0(r5)
  801100:	29400044 	addi	r5,r5,1
  801104:	38800005 	stb	r2,0(r7)
  801108:	39c00044 	addi	r7,r7,1
  80110c:	39bffb1e 	bne	r7,r6,8010fc <memmove+0x50>
  801110:	2005883a 	mov	r2,r4
  801114:	f800283a 	ret
  801118:	1904b03a 	or	r2,r3,r4
  80111c:	108000cc 	andi	r2,r2,3
  801120:	103ff31e 	bne	r2,zero,8010f0 <memmove+0x44>
  801124:	3811883a 	mov	r8,r7
  801128:	180b883a 	mov	r5,r3
  80112c:	200f883a 	mov	r7,r4
  801130:	28c00017 	ldw	r3,0(r5)
  801134:	31bffc04 	addi	r6,r6,-16
  801138:	38c00015 	stw	r3,0(r7)
  80113c:	28800117 	ldw	r2,4(r5)
  801140:	38800115 	stw	r2,4(r7)
  801144:	28c00217 	ldw	r3,8(r5)
  801148:	38c00215 	stw	r3,8(r7)
  80114c:	28800317 	ldw	r2,12(r5)
  801150:	29400404 	addi	r5,r5,16
  801154:	38800315 	stw	r2,12(r7)
  801158:	39c00404 	addi	r7,r7,16
  80115c:	41bff436 	bltu	r8,r6,801130 <memmove+0x84>
  801160:	008000c4 	movi	r2,3
  801164:	1180072e 	bgeu	r2,r6,801184 <memmove+0xd8>
  801168:	1007883a 	mov	r3,r2
  80116c:	28800017 	ldw	r2,0(r5)
  801170:	31bfff04 	addi	r6,r6,-4
  801174:	29400104 	addi	r5,r5,4
  801178:	38800015 	stw	r2,0(r7)
  80117c:	39c00104 	addi	r7,r7,4
  801180:	19bffa36 	bltu	r3,r6,80116c <memmove+0xc0>
  801184:	3811883a 	mov	r8,r7
  801188:	003fd906 	br	8010f0 <memmove+0x44>

0080118c <_realloc_r>:
  80118c:	defff404 	addi	sp,sp,-48
  801190:	dd800815 	stw	r22,32(sp)
  801194:	dc800415 	stw	r18,16(sp)
  801198:	dc400315 	stw	r17,12(sp)
  80119c:	dfc00b15 	stw	ra,44(sp)
  8011a0:	df000a15 	stw	fp,40(sp)
  8011a4:	ddc00915 	stw	r23,36(sp)
  8011a8:	dd400715 	stw	r21,28(sp)
  8011ac:	dd000615 	stw	r20,24(sp)
  8011b0:	dcc00515 	stw	r19,20(sp)
  8011b4:	dc000215 	stw	r16,8(sp)
  8011b8:	2825883a 	mov	r18,r5
  8011bc:	3023883a 	mov	r17,r6
  8011c0:	202d883a 	mov	r22,r4
  8011c4:	2800c926 	beq	r5,zero,8014ec <_realloc_r+0x360>
  8011c8:	08031b80 	call	8031b8 <__malloc_lock>
  8011cc:	943ffe04 	addi	r16,r18,-8
  8011d0:	88c002c4 	addi	r3,r17,11
  8011d4:	00800584 	movi	r2,22
  8011d8:	82000117 	ldw	r8,4(r16)
  8011dc:	10c01b2e 	bgeu	r2,r3,80124c <_realloc_r+0xc0>
  8011e0:	00bffe04 	movi	r2,-8
  8011e4:	188e703a 	and	r7,r3,r2
  8011e8:	3839883a 	mov	fp,r7
  8011ec:	38001a16 	blt	r7,zero,801258 <_realloc_r+0xcc>
  8011f0:	e4401936 	bltu	fp,r17,801258 <_realloc_r+0xcc>
  8011f4:	013fff04 	movi	r4,-4
  8011f8:	4126703a 	and	r19,r8,r4
  8011fc:	99c02616 	blt	r19,r7,801298 <_realloc_r+0x10c>
  801200:	802b883a 	mov	r21,r16
  801204:	9829883a 	mov	r20,r19
  801208:	84000204 	addi	r16,r16,8
  80120c:	a80f883a 	mov	r7,r21
  801210:	a70dc83a 	sub	r6,r20,fp
  801214:	008003c4 	movi	r2,15
  801218:	1180c136 	bltu	r2,r6,801520 <_realloc_r+0x394>
  80121c:	38800117 	ldw	r2,4(r7)
  801220:	a549883a 	add	r4,r20,r21
  801224:	1080004c 	andi	r2,r2,1
  801228:	a084b03a 	or	r2,r20,r2
  80122c:	38800115 	stw	r2,4(r7)
  801230:	20c00117 	ldw	r3,4(r4)
  801234:	18c00054 	ori	r3,r3,1
  801238:	20c00115 	stw	r3,4(r4)
  80123c:	b009883a 	mov	r4,r22
  801240:	08031d80 	call	8031d8 <__malloc_unlock>
  801244:	8023883a 	mov	r17,r16
  801248:	00000606 	br	801264 <_realloc_r+0xd8>
  80124c:	01c00404 	movi	r7,16
  801250:	3839883a 	mov	fp,r7
  801254:	e47fe72e 	bgeu	fp,r17,8011f4 <_realloc_r+0x68>
  801258:	00800304 	movi	r2,12
  80125c:	0023883a 	mov	r17,zero
  801260:	b0800015 	stw	r2,0(r22)
  801264:	8805883a 	mov	r2,r17
  801268:	dfc00b17 	ldw	ra,44(sp)
  80126c:	df000a17 	ldw	fp,40(sp)
  801270:	ddc00917 	ldw	r23,36(sp)
  801274:	dd800817 	ldw	r22,32(sp)
  801278:	dd400717 	ldw	r21,28(sp)
  80127c:	dd000617 	ldw	r20,24(sp)
  801280:	dcc00517 	ldw	r19,20(sp)
  801284:	dc800417 	ldw	r18,16(sp)
  801288:	dc400317 	ldw	r17,12(sp)
  80128c:	dc000217 	ldw	r16,8(sp)
  801290:	dec00c04 	addi	sp,sp,48
  801294:	f800283a 	ret
  801298:	00802034 	movhi	r2,128
  80129c:	10967904 	addi	r2,r2,23012
  8012a0:	12400217 	ldw	r9,8(r2)
  8012a4:	84cd883a 	add	r6,r16,r19
  8012a8:	802b883a 	mov	r21,r16
  8012ac:	3240b926 	beq	r6,r9,801594 <_realloc_r+0x408>
  8012b0:	31400117 	ldw	r5,4(r6)
  8012b4:	00bfff84 	movi	r2,-2
  8012b8:	2884703a 	and	r2,r5,r2
  8012bc:	1185883a 	add	r2,r2,r6
  8012c0:	10c00117 	ldw	r3,4(r2)
  8012c4:	18c0004c 	andi	r3,r3,1
  8012c8:	1807003a 	cmpeq	r3,r3,zero
  8012cc:	1800a326 	beq	r3,zero,80155c <_realloc_r+0x3d0>
  8012d0:	2908703a 	and	r4,r5,r4
  8012d4:	9929883a 	add	r20,r19,r4
  8012d8:	a1c0a30e 	bge	r20,r7,801568 <_realloc_r+0x3dc>
  8012dc:	4080004c 	andi	r2,r8,1
  8012e0:	1000551e 	bne	r2,zero,801438 <_realloc_r+0x2ac>
  8012e4:	80800017 	ldw	r2,0(r16)
  8012e8:	80afc83a 	sub	r23,r16,r2
  8012ec:	b8c00117 	ldw	r3,4(r23)
  8012f0:	00bfff04 	movi	r2,-4
  8012f4:	1884703a 	and	r2,r3,r2
  8012f8:	30002e26 	beq	r6,zero,8013b4 <_realloc_r+0x228>
  8012fc:	3240b926 	beq	r6,r9,8015e4 <_realloc_r+0x458>
  801300:	98a9883a 	add	r20,r19,r2
  801304:	2509883a 	add	r4,r4,r20
  801308:	d9000015 	stw	r4,0(sp)
  80130c:	21c02a16 	blt	r4,r7,8013b8 <_realloc_r+0x22c>
  801310:	30800317 	ldw	r2,12(r6)
  801314:	30c00217 	ldw	r3,8(r6)
  801318:	01400904 	movi	r5,36
  80131c:	99bfff04 	addi	r6,r19,-4
  801320:	18800315 	stw	r2,12(r3)
  801324:	10c00215 	stw	r3,8(r2)
  801328:	b9000317 	ldw	r4,12(r23)
  80132c:	b8800217 	ldw	r2,8(r23)
  801330:	b82b883a 	mov	r21,r23
  801334:	bc000204 	addi	r16,r23,8
  801338:	20800215 	stw	r2,8(r4)
  80133c:	11000315 	stw	r4,12(r2)
  801340:	2980e436 	bltu	r5,r6,8016d4 <_realloc_r+0x548>
  801344:	008004c4 	movi	r2,19
  801348:	9009883a 	mov	r4,r18
  80134c:	8011883a 	mov	r8,r16
  801350:	11800f2e 	bgeu	r2,r6,801390 <_realloc_r+0x204>
  801354:	90800017 	ldw	r2,0(r18)
  801358:	ba000404 	addi	r8,r23,16
  80135c:	91000204 	addi	r4,r18,8
  801360:	b8800215 	stw	r2,8(r23)
  801364:	90c00117 	ldw	r3,4(r18)
  801368:	008006c4 	movi	r2,27
  80136c:	b8c00315 	stw	r3,12(r23)
  801370:	1180072e 	bgeu	r2,r6,801390 <_realloc_r+0x204>
  801374:	90c00217 	ldw	r3,8(r18)
  801378:	ba000604 	addi	r8,r23,24
  80137c:	91000404 	addi	r4,r18,16
  801380:	b8c00415 	stw	r3,16(r23)
  801384:	90800317 	ldw	r2,12(r18)
  801388:	b8800515 	stw	r2,20(r23)
  80138c:	3140e726 	beq	r6,r5,80172c <_realloc_r+0x5a0>
  801390:	20800017 	ldw	r2,0(r4)
  801394:	dd000017 	ldw	r20,0(sp)
  801398:	b80f883a 	mov	r7,r23
  80139c:	40800015 	stw	r2,0(r8)
  8013a0:	20c00117 	ldw	r3,4(r4)
  8013a4:	40c00115 	stw	r3,4(r8)
  8013a8:	20800217 	ldw	r2,8(r4)
  8013ac:	40800215 	stw	r2,8(r8)
  8013b0:	003f9706 	br	801210 <_realloc_r+0x84>
  8013b4:	98a9883a 	add	r20,r19,r2
  8013b8:	a1c01f16 	blt	r20,r7,801438 <_realloc_r+0x2ac>
  8013bc:	b8c00317 	ldw	r3,12(r23)
  8013c0:	b8800217 	ldw	r2,8(r23)
  8013c4:	99bfff04 	addi	r6,r19,-4
  8013c8:	01400904 	movi	r5,36
  8013cc:	b82b883a 	mov	r21,r23
  8013d0:	18800215 	stw	r2,8(r3)
  8013d4:	10c00315 	stw	r3,12(r2)
  8013d8:	bc000204 	addi	r16,r23,8
  8013dc:	2980c336 	bltu	r5,r6,8016ec <_realloc_r+0x560>
  8013e0:	008004c4 	movi	r2,19
  8013e4:	9009883a 	mov	r4,r18
  8013e8:	8011883a 	mov	r8,r16
  8013ec:	11800f2e 	bgeu	r2,r6,80142c <_realloc_r+0x2a0>
  8013f0:	90800017 	ldw	r2,0(r18)
  8013f4:	ba000404 	addi	r8,r23,16
  8013f8:	91000204 	addi	r4,r18,8
  8013fc:	b8800215 	stw	r2,8(r23)
  801400:	90c00117 	ldw	r3,4(r18)
  801404:	008006c4 	movi	r2,27
  801408:	b8c00315 	stw	r3,12(r23)
  80140c:	1180072e 	bgeu	r2,r6,80142c <_realloc_r+0x2a0>
  801410:	90c00217 	ldw	r3,8(r18)
  801414:	ba000604 	addi	r8,r23,24
  801418:	91000404 	addi	r4,r18,16
  80141c:	b8c00415 	stw	r3,16(r23)
  801420:	90800317 	ldw	r2,12(r18)
  801424:	b8800515 	stw	r2,20(r23)
  801428:	3140c726 	beq	r6,r5,801748 <_realloc_r+0x5bc>
  80142c:	20800017 	ldw	r2,0(r4)
  801430:	b80f883a 	mov	r7,r23
  801434:	003fd906 	br	80139c <_realloc_r+0x210>
  801438:	880b883a 	mov	r5,r17
  80143c:	b009883a 	mov	r4,r22
  801440:	08007e80 	call	8007e8 <_malloc_r>
  801444:	1023883a 	mov	r17,r2
  801448:	10002526 	beq	r2,zero,8014e0 <_realloc_r+0x354>
  80144c:	80800117 	ldw	r2,4(r16)
  801450:	00ffff84 	movi	r3,-2
  801454:	893ffe04 	addi	r4,r17,-8
  801458:	10c4703a 	and	r2,r2,r3
  80145c:	8085883a 	add	r2,r16,r2
  801460:	20809526 	beq	r4,r2,8016b8 <_realloc_r+0x52c>
  801464:	99bfff04 	addi	r6,r19,-4
  801468:	01c00904 	movi	r7,36
  80146c:	39804536 	bltu	r7,r6,801584 <_realloc_r+0x3f8>
  801470:	008004c4 	movi	r2,19
  801474:	9009883a 	mov	r4,r18
  801478:	880b883a 	mov	r5,r17
  80147c:	11800f2e 	bgeu	r2,r6,8014bc <_realloc_r+0x330>
  801480:	90800017 	ldw	r2,0(r18)
  801484:	89400204 	addi	r5,r17,8
  801488:	91000204 	addi	r4,r18,8
  80148c:	88800015 	stw	r2,0(r17)
  801490:	90c00117 	ldw	r3,4(r18)
  801494:	008006c4 	movi	r2,27
  801498:	88c00115 	stw	r3,4(r17)
  80149c:	1180072e 	bgeu	r2,r6,8014bc <_realloc_r+0x330>
  8014a0:	90c00217 	ldw	r3,8(r18)
  8014a4:	89400404 	addi	r5,r17,16
  8014a8:	91000404 	addi	r4,r18,16
  8014ac:	88c00215 	stw	r3,8(r17)
  8014b0:	90800317 	ldw	r2,12(r18)
  8014b4:	88800315 	stw	r2,12(r17)
  8014b8:	31c09126 	beq	r6,r7,801700 <_realloc_r+0x574>
  8014bc:	20800017 	ldw	r2,0(r4)
  8014c0:	28800015 	stw	r2,0(r5)
  8014c4:	20c00117 	ldw	r3,4(r4)
  8014c8:	28c00115 	stw	r3,4(r5)
  8014cc:	20800217 	ldw	r2,8(r4)
  8014d0:	28800215 	stw	r2,8(r5)
  8014d4:	900b883a 	mov	r5,r18
  8014d8:	b009883a 	mov	r4,r22
  8014dc:	0801f480 	call	801f48 <_free_r>
  8014e0:	b009883a 	mov	r4,r22
  8014e4:	08031d80 	call	8031d8 <__malloc_unlock>
  8014e8:	003f5e06 	br	801264 <_realloc_r+0xd8>
  8014ec:	300b883a 	mov	r5,r6
  8014f0:	dfc00b17 	ldw	ra,44(sp)
  8014f4:	df000a17 	ldw	fp,40(sp)
  8014f8:	ddc00917 	ldw	r23,36(sp)
  8014fc:	dd800817 	ldw	r22,32(sp)
  801500:	dd400717 	ldw	r21,28(sp)
  801504:	dd000617 	ldw	r20,24(sp)
  801508:	dcc00517 	ldw	r19,20(sp)
  80150c:	dc800417 	ldw	r18,16(sp)
  801510:	dc400317 	ldw	r17,12(sp)
  801514:	dc000217 	ldw	r16,8(sp)
  801518:	dec00c04 	addi	sp,sp,48
  80151c:	08007e81 	jmpi	8007e8 <_malloc_r>
  801520:	38800117 	ldw	r2,4(r7)
  801524:	e54b883a 	add	r5,fp,r21
  801528:	31000054 	ori	r4,r6,1
  80152c:	1080004c 	andi	r2,r2,1
  801530:	1704b03a 	or	r2,r2,fp
  801534:	38800115 	stw	r2,4(r7)
  801538:	29000115 	stw	r4,4(r5)
  80153c:	2987883a 	add	r3,r5,r6
  801540:	18800117 	ldw	r2,4(r3)
  801544:	29400204 	addi	r5,r5,8
  801548:	b009883a 	mov	r4,r22
  80154c:	10800054 	ori	r2,r2,1
  801550:	18800115 	stw	r2,4(r3)
  801554:	0801f480 	call	801f48 <_free_r>
  801558:	003f3806 	br	80123c <_realloc_r+0xb0>
  80155c:	000d883a 	mov	r6,zero
  801560:	0009883a 	mov	r4,zero
  801564:	003f5d06 	br	8012dc <_realloc_r+0x150>
  801568:	30c00217 	ldw	r3,8(r6)
  80156c:	30800317 	ldw	r2,12(r6)
  801570:	800f883a 	mov	r7,r16
  801574:	84000204 	addi	r16,r16,8
  801578:	10c00215 	stw	r3,8(r2)
  80157c:	18800315 	stw	r2,12(r3)
  801580:	003f2306 	br	801210 <_realloc_r+0x84>
  801584:	8809883a 	mov	r4,r17
  801588:	900b883a 	mov	r5,r18
  80158c:	08010ac0 	call	8010ac <memmove>
  801590:	003fd006 	br	8014d4 <_realloc_r+0x348>
  801594:	30800117 	ldw	r2,4(r6)
  801598:	e0c00404 	addi	r3,fp,16
  80159c:	1108703a 	and	r4,r2,r4
  8015a0:	9905883a 	add	r2,r19,r4
  8015a4:	10ff4d16 	blt	r2,r3,8012dc <_realloc_r+0x150>
  8015a8:	1705c83a 	sub	r2,r2,fp
  8015ac:	870b883a 	add	r5,r16,fp
  8015b0:	10800054 	ori	r2,r2,1
  8015b4:	28800115 	stw	r2,4(r5)
  8015b8:	80c00117 	ldw	r3,4(r16)
  8015bc:	00802034 	movhi	r2,128
  8015c0:	10967904 	addi	r2,r2,23012
  8015c4:	b009883a 	mov	r4,r22
  8015c8:	18c0004c 	andi	r3,r3,1
  8015cc:	e0c6b03a 	or	r3,fp,r3
  8015d0:	11400215 	stw	r5,8(r2)
  8015d4:	80c00115 	stw	r3,4(r16)
  8015d8:	08031d80 	call	8031d8 <__malloc_unlock>
  8015dc:	84400204 	addi	r17,r16,8
  8015e0:	003f2006 	br	801264 <_realloc_r+0xd8>
  8015e4:	98a9883a 	add	r20,r19,r2
  8015e8:	2509883a 	add	r4,r4,r20
  8015ec:	e0800404 	addi	r2,fp,16
  8015f0:	d9000115 	stw	r4,4(sp)
  8015f4:	20bf7016 	blt	r4,r2,8013b8 <_realloc_r+0x22c>
  8015f8:	b8c00317 	ldw	r3,12(r23)
  8015fc:	b8800217 	ldw	r2,8(r23)
  801600:	99bfff04 	addi	r6,r19,-4
  801604:	01400904 	movi	r5,36
  801608:	18800215 	stw	r2,8(r3)
  80160c:	10c00315 	stw	r3,12(r2)
  801610:	bc400204 	addi	r17,r23,8
  801614:	29804136 	bltu	r5,r6,80171c <_realloc_r+0x590>
  801618:	008004c4 	movi	r2,19
  80161c:	9009883a 	mov	r4,r18
  801620:	880f883a 	mov	r7,r17
  801624:	11800f2e 	bgeu	r2,r6,801664 <_realloc_r+0x4d8>
  801628:	90800017 	ldw	r2,0(r18)
  80162c:	b9c00404 	addi	r7,r23,16
  801630:	91000204 	addi	r4,r18,8
  801634:	b8800215 	stw	r2,8(r23)
  801638:	90c00117 	ldw	r3,4(r18)
  80163c:	008006c4 	movi	r2,27
  801640:	b8c00315 	stw	r3,12(r23)
  801644:	1180072e 	bgeu	r2,r6,801664 <_realloc_r+0x4d8>
  801648:	90c00217 	ldw	r3,8(r18)
  80164c:	b9c00604 	addi	r7,r23,24
  801650:	91000404 	addi	r4,r18,16
  801654:	b8c00415 	stw	r3,16(r23)
  801658:	90800317 	ldw	r2,12(r18)
  80165c:	b8800515 	stw	r2,20(r23)
  801660:	31404026 	beq	r6,r5,801764 <_realloc_r+0x5d8>
  801664:	20800017 	ldw	r2,0(r4)
  801668:	38800015 	stw	r2,0(r7)
  80166c:	20c00117 	ldw	r3,4(r4)
  801670:	38c00115 	stw	r3,4(r7)
  801674:	20800217 	ldw	r2,8(r4)
  801678:	38800215 	stw	r2,8(r7)
  80167c:	d8c00117 	ldw	r3,4(sp)
  801680:	bf0b883a 	add	r5,r23,fp
  801684:	b009883a 	mov	r4,r22
  801688:	1f05c83a 	sub	r2,r3,fp
  80168c:	10800054 	ori	r2,r2,1
  801690:	28800115 	stw	r2,4(r5)
  801694:	b8c00117 	ldw	r3,4(r23)
  801698:	00802034 	movhi	r2,128
  80169c:	10967904 	addi	r2,r2,23012
  8016a0:	11400215 	stw	r5,8(r2)
  8016a4:	18c0004c 	andi	r3,r3,1
  8016a8:	e0c6b03a 	or	r3,fp,r3
  8016ac:	b8c00115 	stw	r3,4(r23)
  8016b0:	08031d80 	call	8031d8 <__malloc_unlock>
  8016b4:	003eeb06 	br	801264 <_realloc_r+0xd8>
  8016b8:	20800117 	ldw	r2,4(r4)
  8016bc:	00ffff04 	movi	r3,-4
  8016c0:	800f883a 	mov	r7,r16
  8016c4:	10c4703a 	and	r2,r2,r3
  8016c8:	98a9883a 	add	r20,r19,r2
  8016cc:	84000204 	addi	r16,r16,8
  8016d0:	003ecf06 	br	801210 <_realloc_r+0x84>
  8016d4:	900b883a 	mov	r5,r18
  8016d8:	8009883a 	mov	r4,r16
  8016dc:	08010ac0 	call	8010ac <memmove>
  8016e0:	dd000017 	ldw	r20,0(sp)
  8016e4:	b80f883a 	mov	r7,r23
  8016e8:	003ec906 	br	801210 <_realloc_r+0x84>
  8016ec:	900b883a 	mov	r5,r18
  8016f0:	8009883a 	mov	r4,r16
  8016f4:	08010ac0 	call	8010ac <memmove>
  8016f8:	b80f883a 	mov	r7,r23
  8016fc:	003ec406 	br	801210 <_realloc_r+0x84>
  801700:	90c00417 	ldw	r3,16(r18)
  801704:	89400604 	addi	r5,r17,24
  801708:	91000604 	addi	r4,r18,24
  80170c:	88c00415 	stw	r3,16(r17)
  801710:	90800517 	ldw	r2,20(r18)
  801714:	88800515 	stw	r2,20(r17)
  801718:	003f6806 	br	8014bc <_realloc_r+0x330>
  80171c:	900b883a 	mov	r5,r18
  801720:	8809883a 	mov	r4,r17
  801724:	08010ac0 	call	8010ac <memmove>
  801728:	003fd406 	br	80167c <_realloc_r+0x4f0>
  80172c:	90c00417 	ldw	r3,16(r18)
  801730:	91000604 	addi	r4,r18,24
  801734:	ba000804 	addi	r8,r23,32
  801738:	b8c00615 	stw	r3,24(r23)
  80173c:	90800517 	ldw	r2,20(r18)
  801740:	b8800715 	stw	r2,28(r23)
  801744:	003f1206 	br	801390 <_realloc_r+0x204>
  801748:	90c00417 	ldw	r3,16(r18)
  80174c:	91000604 	addi	r4,r18,24
  801750:	ba000804 	addi	r8,r23,32
  801754:	b8c00615 	stw	r3,24(r23)
  801758:	90800517 	ldw	r2,20(r18)
  80175c:	b8800715 	stw	r2,28(r23)
  801760:	003f3206 	br	80142c <_realloc_r+0x2a0>
  801764:	90c00417 	ldw	r3,16(r18)
  801768:	91000604 	addi	r4,r18,24
  80176c:	b9c00804 	addi	r7,r23,32
  801770:	b8c00615 	stw	r3,24(r23)
  801774:	90800517 	ldw	r2,20(r18)
  801778:	b8800715 	stw	r2,28(r23)
  80177c:	003fb906 	br	801664 <_realloc_r+0x4d8>

00801780 <_sbrk_r>:
  801780:	defffd04 	addi	sp,sp,-12
  801784:	dc000015 	stw	r16,0(sp)
  801788:	04002074 	movhi	r16,129
  80178c:	8422a004 	addi	r16,r16,-30080
  801790:	dc400115 	stw	r17,4(sp)
  801794:	80000015 	stw	zero,0(r16)
  801798:	2023883a 	mov	r17,r4
  80179c:	2809883a 	mov	r4,r5
  8017a0:	dfc00215 	stw	ra,8(sp)
  8017a4:	08033d80 	call	8033d8 <sbrk>
  8017a8:	1007883a 	mov	r3,r2
  8017ac:	00bfffc4 	movi	r2,-1
  8017b0:	18800626 	beq	r3,r2,8017cc <_sbrk_r+0x4c>
  8017b4:	1805883a 	mov	r2,r3
  8017b8:	dfc00217 	ldw	ra,8(sp)
  8017bc:	dc400117 	ldw	r17,4(sp)
  8017c0:	dc000017 	ldw	r16,0(sp)
  8017c4:	dec00304 	addi	sp,sp,12
  8017c8:	f800283a 	ret
  8017cc:	80800017 	ldw	r2,0(r16)
  8017d0:	103ff826 	beq	r2,zero,8017b4 <_sbrk_r+0x34>
  8017d4:	88800015 	stw	r2,0(r17)
  8017d8:	1805883a 	mov	r2,r3
  8017dc:	dfc00217 	ldw	ra,8(sp)
  8017e0:	dc400117 	ldw	r17,4(sp)
  8017e4:	dc000017 	ldw	r16,0(sp)
  8017e8:	dec00304 	addi	sp,sp,12
  8017ec:	f800283a 	ret

008017f0 <__swsetup_r>:
  8017f0:	00802034 	movhi	r2,128
  8017f4:	109bfd04 	addi	r2,r2,28660
  8017f8:	10c00017 	ldw	r3,0(r2)
  8017fc:	defffd04 	addi	sp,sp,-12
  801800:	dc400115 	stw	r17,4(sp)
  801804:	dc000015 	stw	r16,0(sp)
  801808:	dfc00215 	stw	ra,8(sp)
  80180c:	2023883a 	mov	r17,r4
  801810:	2821883a 	mov	r16,r5
  801814:	18000226 	beq	r3,zero,801820 <__swsetup_r+0x30>
  801818:	18800e17 	ldw	r2,56(r3)
  80181c:	10001f26 	beq	r2,zero,80189c <__swsetup_r+0xac>
  801820:	8100030b 	ldhu	r4,12(r16)
  801824:	2080020c 	andi	r2,r4,8
  801828:	10002826 	beq	r2,zero,8018cc <__swsetup_r+0xdc>
  80182c:	81400417 	ldw	r5,16(r16)
  801830:	28001d26 	beq	r5,zero,8018a8 <__swsetup_r+0xb8>
  801834:	2080004c 	andi	r2,r4,1
  801838:	1005003a 	cmpeq	r2,r2,zero
  80183c:	10000b26 	beq	r2,zero,80186c <__swsetup_r+0x7c>
  801840:	2080008c 	andi	r2,r4,2
  801844:	10001226 	beq	r2,zero,801890 <__swsetup_r+0xa0>
  801848:	0005883a 	mov	r2,zero
  80184c:	80800215 	stw	r2,8(r16)
  801850:	28000b26 	beq	r5,zero,801880 <__swsetup_r+0x90>
  801854:	0005883a 	mov	r2,zero
  801858:	dfc00217 	ldw	ra,8(sp)
  80185c:	dc400117 	ldw	r17,4(sp)
  801860:	dc000017 	ldw	r16,0(sp)
  801864:	dec00304 	addi	sp,sp,12
  801868:	f800283a 	ret
  80186c:	80800517 	ldw	r2,20(r16)
  801870:	80000215 	stw	zero,8(r16)
  801874:	0085c83a 	sub	r2,zero,r2
  801878:	80800615 	stw	r2,24(r16)
  80187c:	283ff51e 	bne	r5,zero,801854 <__swsetup_r+0x64>
  801880:	2080200c 	andi	r2,r4,128
  801884:	103ff326 	beq	r2,zero,801854 <__swsetup_r+0x64>
  801888:	00bfffc4 	movi	r2,-1
  80188c:	003ff206 	br	801858 <__swsetup_r+0x68>
  801890:	80800517 	ldw	r2,20(r16)
  801894:	80800215 	stw	r2,8(r16)
  801898:	003fed06 	br	801850 <__swsetup_r+0x60>
  80189c:	1809883a 	mov	r4,r3
  8018a0:	0801bc40 	call	801bc4 <__sinit>
  8018a4:	003fde06 	br	801820 <__swsetup_r+0x30>
  8018a8:	20c0a00c 	andi	r3,r4,640
  8018ac:	00808004 	movi	r2,512
  8018b0:	18bfe026 	beq	r3,r2,801834 <__swsetup_r+0x44>
  8018b4:	8809883a 	mov	r4,r17
  8018b8:	800b883a 	mov	r5,r16
  8018bc:	08023dc0 	call	8023dc <__smakebuf_r>
  8018c0:	8100030b 	ldhu	r4,12(r16)
  8018c4:	81400417 	ldw	r5,16(r16)
  8018c8:	003fda06 	br	801834 <__swsetup_r+0x44>
  8018cc:	2080040c 	andi	r2,r4,16
  8018d0:	103fed26 	beq	r2,zero,801888 <__swsetup_r+0x98>
  8018d4:	2080010c 	andi	r2,r4,4
  8018d8:	10001226 	beq	r2,zero,801924 <__swsetup_r+0x134>
  8018dc:	81400c17 	ldw	r5,48(r16)
  8018e0:	28000526 	beq	r5,zero,8018f8 <__swsetup_r+0x108>
  8018e4:	80801004 	addi	r2,r16,64
  8018e8:	28800226 	beq	r5,r2,8018f4 <__swsetup_r+0x104>
  8018ec:	8809883a 	mov	r4,r17
  8018f0:	0801f480 	call	801f48 <_free_r>
  8018f4:	80000c15 	stw	zero,48(r16)
  8018f8:	8080030b 	ldhu	r2,12(r16)
  8018fc:	81400417 	ldw	r5,16(r16)
  801900:	80000115 	stw	zero,4(r16)
  801904:	10bff6cc 	andi	r2,r2,65499
  801908:	8080030d 	sth	r2,12(r16)
  80190c:	81400015 	stw	r5,0(r16)
  801910:	8080030b 	ldhu	r2,12(r16)
  801914:	10800214 	ori	r2,r2,8
  801918:	113fffcc 	andi	r4,r2,65535
  80191c:	8080030d 	sth	r2,12(r16)
  801920:	003fc306 	br	801830 <__swsetup_r+0x40>
  801924:	81400417 	ldw	r5,16(r16)
  801928:	003ff906 	br	801910 <__swsetup_r+0x120>

0080192c <_fflush_r>:
  80192c:	defffb04 	addi	sp,sp,-20
  801930:	dcc00315 	stw	r19,12(sp)
  801934:	dc800215 	stw	r18,8(sp)
  801938:	dfc00415 	stw	ra,16(sp)
  80193c:	dc400115 	stw	r17,4(sp)
  801940:	dc000015 	stw	r16,0(sp)
  801944:	2027883a 	mov	r19,r4
  801948:	2825883a 	mov	r18,r5
  80194c:	20000226 	beq	r4,zero,801958 <_fflush_r+0x2c>
  801950:	20800e17 	ldw	r2,56(r4)
  801954:	10005626 	beq	r2,zero,801ab0 <_fflush_r+0x184>
  801958:	9100030b 	ldhu	r4,12(r18)
  80195c:	20ffffcc 	andi	r3,r4,65535
  801960:	18e0001c 	xori	r3,r3,32768
  801964:	18e00004 	addi	r3,r3,-32768
  801968:	1880020c 	andi	r2,r3,8
  80196c:	1000261e 	bne	r2,zero,801a08 <_fflush_r+0xdc>
  801970:	90c00117 	ldw	r3,4(r18)
  801974:	20820014 	ori	r2,r4,2048
  801978:	9080030d 	sth	r2,12(r18)
  80197c:	1009883a 	mov	r4,r2
  801980:	00c0400e 	bge	zero,r3,801a84 <_fflush_r+0x158>
  801984:	92000a17 	ldw	r8,40(r18)
  801988:	40004026 	beq	r8,zero,801a8c <_fflush_r+0x160>
  80198c:	2084000c 	andi	r2,r4,4096
  801990:	10005326 	beq	r2,zero,801ae0 <_fflush_r+0x1b4>
  801994:	94001417 	ldw	r16,80(r18)
  801998:	9080030b 	ldhu	r2,12(r18)
  80199c:	1080010c 	andi	r2,r2,4
  8019a0:	1000481e 	bne	r2,zero,801ac4 <_fflush_r+0x198>
  8019a4:	91400717 	ldw	r5,28(r18)
  8019a8:	9809883a 	mov	r4,r19
  8019ac:	800d883a 	mov	r6,r16
  8019b0:	000f883a 	mov	r7,zero
  8019b4:	403ee83a 	callr	r8
  8019b8:	8080261e 	bne	r16,r2,801a54 <_fflush_r+0x128>
  8019bc:	9080030b 	ldhu	r2,12(r18)
  8019c0:	91000417 	ldw	r4,16(r18)
  8019c4:	90000115 	stw	zero,4(r18)
  8019c8:	10bdffcc 	andi	r2,r2,63487
  8019cc:	10ffffcc 	andi	r3,r2,65535
  8019d0:	18c4000c 	andi	r3,r3,4096
  8019d4:	9080030d 	sth	r2,12(r18)
  8019d8:	91000015 	stw	r4,0(r18)
  8019dc:	18002b26 	beq	r3,zero,801a8c <_fflush_r+0x160>
  8019e0:	0007883a 	mov	r3,zero
  8019e4:	1805883a 	mov	r2,r3
  8019e8:	94001415 	stw	r16,80(r18)
  8019ec:	dfc00417 	ldw	ra,16(sp)
  8019f0:	dcc00317 	ldw	r19,12(sp)
  8019f4:	dc800217 	ldw	r18,8(sp)
  8019f8:	dc400117 	ldw	r17,4(sp)
  8019fc:	dc000017 	ldw	r16,0(sp)
  801a00:	dec00504 	addi	sp,sp,20
  801a04:	f800283a 	ret
  801a08:	94400417 	ldw	r17,16(r18)
  801a0c:	88001f26 	beq	r17,zero,801a8c <_fflush_r+0x160>
  801a10:	90800017 	ldw	r2,0(r18)
  801a14:	18c000cc 	andi	r3,r3,3
  801a18:	94400015 	stw	r17,0(r18)
  801a1c:	1461c83a 	sub	r16,r2,r17
  801a20:	18002526 	beq	r3,zero,801ab8 <_fflush_r+0x18c>
  801a24:	0005883a 	mov	r2,zero
  801a28:	90800215 	stw	r2,8(r18)
  801a2c:	0400170e 	bge	zero,r16,801a8c <_fflush_r+0x160>
  801a30:	90c00917 	ldw	r3,36(r18)
  801a34:	91400717 	ldw	r5,28(r18)
  801a38:	880d883a 	mov	r6,r17
  801a3c:	800f883a 	mov	r7,r16
  801a40:	9809883a 	mov	r4,r19
  801a44:	183ee83a 	callr	r3
  801a48:	88a3883a 	add	r17,r17,r2
  801a4c:	80a1c83a 	sub	r16,r16,r2
  801a50:	00bff616 	blt	zero,r2,801a2c <_fflush_r+0x100>
  801a54:	9080030b 	ldhu	r2,12(r18)
  801a58:	00ffffc4 	movi	r3,-1
  801a5c:	10801014 	ori	r2,r2,64
  801a60:	9080030d 	sth	r2,12(r18)
  801a64:	1805883a 	mov	r2,r3
  801a68:	dfc00417 	ldw	ra,16(sp)
  801a6c:	dcc00317 	ldw	r19,12(sp)
  801a70:	dc800217 	ldw	r18,8(sp)
  801a74:	dc400117 	ldw	r17,4(sp)
  801a78:	dc000017 	ldw	r16,0(sp)
  801a7c:	dec00504 	addi	sp,sp,20
  801a80:	f800283a 	ret
  801a84:	90800f17 	ldw	r2,60(r18)
  801a88:	00bfbe16 	blt	zero,r2,801984 <_fflush_r+0x58>
  801a8c:	0007883a 	mov	r3,zero
  801a90:	1805883a 	mov	r2,r3
  801a94:	dfc00417 	ldw	ra,16(sp)
  801a98:	dcc00317 	ldw	r19,12(sp)
  801a9c:	dc800217 	ldw	r18,8(sp)
  801aa0:	dc400117 	ldw	r17,4(sp)
  801aa4:	dc000017 	ldw	r16,0(sp)
  801aa8:	dec00504 	addi	sp,sp,20
  801aac:	f800283a 	ret
  801ab0:	0801bc40 	call	801bc4 <__sinit>
  801ab4:	003fa806 	br	801958 <_fflush_r+0x2c>
  801ab8:	90800517 	ldw	r2,20(r18)
  801abc:	90800215 	stw	r2,8(r18)
  801ac0:	003fda06 	br	801a2c <_fflush_r+0x100>
  801ac4:	90800117 	ldw	r2,4(r18)
  801ac8:	90c00c17 	ldw	r3,48(r18)
  801acc:	80a1c83a 	sub	r16,r16,r2
  801ad0:	183fb426 	beq	r3,zero,8019a4 <_fflush_r+0x78>
  801ad4:	90800f17 	ldw	r2,60(r18)
  801ad8:	80a1c83a 	sub	r16,r16,r2
  801adc:	003fb106 	br	8019a4 <_fflush_r+0x78>
  801ae0:	91400717 	ldw	r5,28(r18)
  801ae4:	9809883a 	mov	r4,r19
  801ae8:	000d883a 	mov	r6,zero
  801aec:	01c00044 	movi	r7,1
  801af0:	403ee83a 	callr	r8
  801af4:	1021883a 	mov	r16,r2
  801af8:	00bfffc4 	movi	r2,-1
  801afc:	80800226 	beq	r16,r2,801b08 <_fflush_r+0x1dc>
  801b00:	92000a17 	ldw	r8,40(r18)
  801b04:	003fa406 	br	801998 <_fflush_r+0x6c>
  801b08:	98c00017 	ldw	r3,0(r19)
  801b0c:	00800744 	movi	r2,29
  801b10:	18bfde26 	beq	r3,r2,801a8c <_fflush_r+0x160>
  801b14:	9080030b 	ldhu	r2,12(r18)
  801b18:	8007883a 	mov	r3,r16
  801b1c:	10801014 	ori	r2,r2,64
  801b20:	9080030d 	sth	r2,12(r18)
  801b24:	003fcf06 	br	801a64 <_fflush_r+0x138>

00801b28 <fflush>:
  801b28:	01402034 	movhi	r5,128
  801b2c:	29464b04 	addi	r5,r5,6444
  801b30:	2007883a 	mov	r3,r4
  801b34:	20000526 	beq	r4,zero,801b4c <fflush+0x24>
  801b38:	00802034 	movhi	r2,128
  801b3c:	109bfd04 	addi	r2,r2,28660
  801b40:	11000017 	ldw	r4,0(r2)
  801b44:	180b883a 	mov	r5,r3
  801b48:	080192c1 	jmpi	80192c <_fflush_r>
  801b4c:	00802034 	movhi	r2,128
  801b50:	109bfe04 	addi	r2,r2,28664
  801b54:	11000017 	ldw	r4,0(r2)
  801b58:	080225c1 	jmpi	80225c <_fwalk_reent>

00801b5c <std>:
  801b5c:	00802034 	movhi	r2,128
  801b60:	10898204 	addi	r2,r2,9736
  801b64:	20800b15 	stw	r2,44(r4)
  801b68:	00802034 	movhi	r2,128
  801b6c:	1089bd04 	addi	r2,r2,9972
  801b70:	20800815 	stw	r2,32(r4)
  801b74:	00c02034 	movhi	r3,128
  801b78:	18c99e04 	addi	r3,r3,9848
  801b7c:	00802034 	movhi	r2,128
  801b80:	10898404 	addi	r2,r2,9744
  801b84:	2140030d 	sth	r5,12(r4)
  801b88:	2180038d 	sth	r6,14(r4)
  801b8c:	20c00915 	stw	r3,36(r4)
  801b90:	20800a15 	stw	r2,40(r4)
  801b94:	20000015 	stw	zero,0(r4)
  801b98:	20000115 	stw	zero,4(r4)
  801b9c:	20000215 	stw	zero,8(r4)
  801ba0:	20000415 	stw	zero,16(r4)
  801ba4:	20000515 	stw	zero,20(r4)
  801ba8:	20000615 	stw	zero,24(r4)
  801bac:	21000715 	stw	r4,28(r4)
  801bb0:	f800283a 	ret

00801bb4 <__sfp_lock_acquire>:
  801bb4:	f800283a 	ret

00801bb8 <__sfp_lock_release>:
  801bb8:	f800283a 	ret

00801bbc <__sinit_lock_acquire>:
  801bbc:	f800283a 	ret

00801bc0 <__sinit_lock_release>:
  801bc0:	f800283a 	ret

00801bc4 <__sinit>:
  801bc4:	20800e17 	ldw	r2,56(r4)
  801bc8:	defffd04 	addi	sp,sp,-12
  801bcc:	dc400115 	stw	r17,4(sp)
  801bd0:	dc000015 	stw	r16,0(sp)
  801bd4:	dfc00215 	stw	ra,8(sp)
  801bd8:	04400044 	movi	r17,1
  801bdc:	01400104 	movi	r5,4
  801be0:	000d883a 	mov	r6,zero
  801be4:	2021883a 	mov	r16,r4
  801be8:	2200bb04 	addi	r8,r4,748
  801bec:	200f883a 	mov	r7,r4
  801bf0:	10000526 	beq	r2,zero,801c08 <__sinit+0x44>
  801bf4:	dfc00217 	ldw	ra,8(sp)
  801bf8:	dc400117 	ldw	r17,4(sp)
  801bfc:	dc000017 	ldw	r16,0(sp)
  801c00:	dec00304 	addi	sp,sp,12
  801c04:	f800283a 	ret
  801c08:	21000117 	ldw	r4,4(r4)
  801c0c:	00802034 	movhi	r2,128
  801c10:	10872a04 	addi	r2,r2,7336
  801c14:	00c000c4 	movi	r3,3
  801c18:	80800f15 	stw	r2,60(r16)
  801c1c:	80c0b915 	stw	r3,740(r16)
  801c20:	8200ba15 	stw	r8,744(r16)
  801c24:	84400e15 	stw	r17,56(r16)
  801c28:	8000b815 	stw	zero,736(r16)
  801c2c:	0801b5c0 	call	801b5c <std>
  801c30:	81000217 	ldw	r4,8(r16)
  801c34:	880d883a 	mov	r6,r17
  801c38:	800f883a 	mov	r7,r16
  801c3c:	01400284 	movi	r5,10
  801c40:	0801b5c0 	call	801b5c <std>
  801c44:	81000317 	ldw	r4,12(r16)
  801c48:	800f883a 	mov	r7,r16
  801c4c:	01400484 	movi	r5,18
  801c50:	01800084 	movi	r6,2
  801c54:	dfc00217 	ldw	ra,8(sp)
  801c58:	dc400117 	ldw	r17,4(sp)
  801c5c:	dc000017 	ldw	r16,0(sp)
  801c60:	dec00304 	addi	sp,sp,12
  801c64:	0801b5c1 	jmpi	801b5c <std>

00801c68 <__fp_lock>:
  801c68:	0005883a 	mov	r2,zero
  801c6c:	f800283a 	ret

00801c70 <__fp_unlock>:
  801c70:	0005883a 	mov	r2,zero
  801c74:	f800283a 	ret

00801c78 <__fp_unlock_all>:
  801c78:	00802034 	movhi	r2,128
  801c7c:	109bfd04 	addi	r2,r2,28660
  801c80:	11000017 	ldw	r4,0(r2)
  801c84:	01402034 	movhi	r5,128
  801c88:	29471c04 	addi	r5,r5,7280
  801c8c:	08023241 	jmpi	802324 <_fwalk>

00801c90 <__fp_lock_all>:
  801c90:	00802034 	movhi	r2,128
  801c94:	109bfd04 	addi	r2,r2,28660
  801c98:	11000017 	ldw	r4,0(r2)
  801c9c:	01402034 	movhi	r5,128
  801ca0:	29471a04 	addi	r5,r5,7272
  801ca4:	08023241 	jmpi	802324 <_fwalk>

00801ca8 <_cleanup_r>:
  801ca8:	01402034 	movhi	r5,128
  801cac:	294a5304 	addi	r5,r5,10572
  801cb0:	08023241 	jmpi	802324 <_fwalk>

00801cb4 <_cleanup>:
  801cb4:	00802034 	movhi	r2,128
  801cb8:	109bfe04 	addi	r2,r2,28664
  801cbc:	11000017 	ldw	r4,0(r2)
  801cc0:	0801ca81 	jmpi	801ca8 <_cleanup_r>

00801cc4 <__sfmoreglue>:
  801cc4:	defffc04 	addi	sp,sp,-16
  801cc8:	dc400115 	stw	r17,4(sp)
  801ccc:	2c401724 	muli	r17,r5,92
  801cd0:	dc800215 	stw	r18,8(sp)
  801cd4:	2825883a 	mov	r18,r5
  801cd8:	89400304 	addi	r5,r17,12
  801cdc:	dc000015 	stw	r16,0(sp)
  801ce0:	dfc00315 	stw	ra,12(sp)
  801ce4:	08007e80 	call	8007e8 <_malloc_r>
  801ce8:	0021883a 	mov	r16,zero
  801cec:	880d883a 	mov	r6,r17
  801cf0:	000b883a 	mov	r5,zero
  801cf4:	10000626 	beq	r2,zero,801d10 <__sfmoreglue+0x4c>
  801cf8:	11000304 	addi	r4,r2,12
  801cfc:	14800115 	stw	r18,4(r2)
  801d00:	10000015 	stw	zero,0(r2)
  801d04:	11000215 	stw	r4,8(r2)
  801d08:	1021883a 	mov	r16,r2
  801d0c:	08025700 	call	802570 <memset>
  801d10:	8005883a 	mov	r2,r16
  801d14:	dfc00317 	ldw	ra,12(sp)
  801d18:	dc800217 	ldw	r18,8(sp)
  801d1c:	dc400117 	ldw	r17,4(sp)
  801d20:	dc000017 	ldw	r16,0(sp)
  801d24:	dec00404 	addi	sp,sp,16
  801d28:	f800283a 	ret

00801d2c <__sfp>:
  801d2c:	defffd04 	addi	sp,sp,-12
  801d30:	00802034 	movhi	r2,128
  801d34:	109bfe04 	addi	r2,r2,28664
  801d38:	dc000015 	stw	r16,0(sp)
  801d3c:	14000017 	ldw	r16,0(r2)
  801d40:	dc400115 	stw	r17,4(sp)
  801d44:	dfc00215 	stw	ra,8(sp)
  801d48:	80800e17 	ldw	r2,56(r16)
  801d4c:	2023883a 	mov	r17,r4
  801d50:	10002626 	beq	r2,zero,801dec <__sfp+0xc0>
  801d54:	8400b804 	addi	r16,r16,736
  801d58:	80800117 	ldw	r2,4(r16)
  801d5c:	81000217 	ldw	r4,8(r16)
  801d60:	10ffffc4 	addi	r3,r2,-1
  801d64:	18000916 	blt	r3,zero,801d8c <__sfp+0x60>
  801d68:	2080030f 	ldh	r2,12(r4)
  801d6c:	10000b26 	beq	r2,zero,801d9c <__sfp+0x70>
  801d70:	017fffc4 	movi	r5,-1
  801d74:	00000206 	br	801d80 <__sfp+0x54>
  801d78:	2080030f 	ldh	r2,12(r4)
  801d7c:	10000726 	beq	r2,zero,801d9c <__sfp+0x70>
  801d80:	18ffffc4 	addi	r3,r3,-1
  801d84:	21001704 	addi	r4,r4,92
  801d88:	197ffb1e 	bne	r3,r5,801d78 <__sfp+0x4c>
  801d8c:	80800017 	ldw	r2,0(r16)
  801d90:	10001926 	beq	r2,zero,801df8 <__sfp+0xcc>
  801d94:	1021883a 	mov	r16,r2
  801d98:	003fef06 	br	801d58 <__sfp+0x2c>
  801d9c:	00bfffc4 	movi	r2,-1
  801da0:	00c00044 	movi	r3,1
  801da4:	2080038d 	sth	r2,14(r4)
  801da8:	20c0030d 	sth	r3,12(r4)
  801dac:	20000015 	stw	zero,0(r4)
  801db0:	20000215 	stw	zero,8(r4)
  801db4:	20000115 	stw	zero,4(r4)
  801db8:	20000415 	stw	zero,16(r4)
  801dbc:	20000515 	stw	zero,20(r4)
  801dc0:	20000615 	stw	zero,24(r4)
  801dc4:	20000c15 	stw	zero,48(r4)
  801dc8:	20000d15 	stw	zero,52(r4)
  801dcc:	20001115 	stw	zero,68(r4)
  801dd0:	20001215 	stw	zero,72(r4)
  801dd4:	2005883a 	mov	r2,r4
  801dd8:	dfc00217 	ldw	ra,8(sp)
  801ddc:	dc400117 	ldw	r17,4(sp)
  801de0:	dc000017 	ldw	r16,0(sp)
  801de4:	dec00304 	addi	sp,sp,12
  801de8:	f800283a 	ret
  801dec:	8009883a 	mov	r4,r16
  801df0:	0801bc40 	call	801bc4 <__sinit>
  801df4:	003fd706 	br	801d54 <__sfp+0x28>
  801df8:	8809883a 	mov	r4,r17
  801dfc:	01400104 	movi	r5,4
  801e00:	0801cc40 	call	801cc4 <__sfmoreglue>
  801e04:	80800015 	stw	r2,0(r16)
  801e08:	103fe21e 	bne	r2,zero,801d94 <__sfp+0x68>
  801e0c:	00800304 	movi	r2,12
  801e10:	0009883a 	mov	r4,zero
  801e14:	88800015 	stw	r2,0(r17)
  801e18:	003fee06 	br	801dd4 <__sfp+0xa8>

00801e1c <_malloc_trim_r>:
  801e1c:	defffb04 	addi	sp,sp,-20
  801e20:	dcc00315 	stw	r19,12(sp)
  801e24:	04c02034 	movhi	r19,128
  801e28:	9cd67904 	addi	r19,r19,23012
  801e2c:	dc800215 	stw	r18,8(sp)
  801e30:	dc400115 	stw	r17,4(sp)
  801e34:	dc000015 	stw	r16,0(sp)
  801e38:	2823883a 	mov	r17,r5
  801e3c:	2025883a 	mov	r18,r4
  801e40:	dfc00415 	stw	ra,16(sp)
  801e44:	08031b80 	call	8031b8 <__malloc_lock>
  801e48:	98800217 	ldw	r2,8(r19)
  801e4c:	9009883a 	mov	r4,r18
  801e50:	000b883a 	mov	r5,zero
  801e54:	10c00117 	ldw	r3,4(r2)
  801e58:	00bfff04 	movi	r2,-4
  801e5c:	18a0703a 	and	r16,r3,r2
  801e60:	8463c83a 	sub	r17,r16,r17
  801e64:	8c43fbc4 	addi	r17,r17,4079
  801e68:	8822d33a 	srli	r17,r17,12
  801e6c:	0083ffc4 	movi	r2,4095
  801e70:	8c7fffc4 	addi	r17,r17,-1
  801e74:	8822933a 	slli	r17,r17,12
  801e78:	1440060e 	bge	r2,r17,801e94 <_malloc_trim_r+0x78>
  801e7c:	08017800 	call	801780 <_sbrk_r>
  801e80:	98c00217 	ldw	r3,8(r19)
  801e84:	9009883a 	mov	r4,r18
  801e88:	044bc83a 	sub	r5,zero,r17
  801e8c:	80c7883a 	add	r3,r16,r3
  801e90:	10c00926 	beq	r2,r3,801eb8 <_malloc_trim_r+0x9c>
  801e94:	08031d80 	call	8031d8 <__malloc_unlock>
  801e98:	0005883a 	mov	r2,zero
  801e9c:	dfc00417 	ldw	ra,16(sp)
  801ea0:	dcc00317 	ldw	r19,12(sp)
  801ea4:	dc800217 	ldw	r18,8(sp)
  801ea8:	dc400117 	ldw	r17,4(sp)
  801eac:	dc000017 	ldw	r16,0(sp)
  801eb0:	dec00504 	addi	sp,sp,20
  801eb4:	f800283a 	ret
  801eb8:	9009883a 	mov	r4,r18
  801ebc:	08017800 	call	801780 <_sbrk_r>
  801ec0:	844dc83a 	sub	r6,r16,r17
  801ec4:	00ffffc4 	movi	r3,-1
  801ec8:	9009883a 	mov	r4,r18
  801ecc:	000b883a 	mov	r5,zero
  801ed0:	01c02074 	movhi	r7,129
  801ed4:	39e2a704 	addi	r7,r7,-30052
  801ed8:	31800054 	ori	r6,r6,1
  801edc:	10c00926 	beq	r2,r3,801f04 <_malloc_trim_r+0xe8>
  801ee0:	38800017 	ldw	r2,0(r7)
  801ee4:	98c00217 	ldw	r3,8(r19)
  801ee8:	9009883a 	mov	r4,r18
  801eec:	1445c83a 	sub	r2,r2,r17
  801ef0:	38800015 	stw	r2,0(r7)
  801ef4:	19800115 	stw	r6,4(r3)
  801ef8:	08031d80 	call	8031d8 <__malloc_unlock>
  801efc:	00800044 	movi	r2,1
  801f00:	003fe606 	br	801e9c <_malloc_trim_r+0x80>
  801f04:	08017800 	call	801780 <_sbrk_r>
  801f08:	99800217 	ldw	r6,8(r19)
  801f0c:	100f883a 	mov	r7,r2
  801f10:	9009883a 	mov	r4,r18
  801f14:	1187c83a 	sub	r3,r2,r6
  801f18:	008003c4 	movi	r2,15
  801f1c:	19400054 	ori	r5,r3,1
  801f20:	10ffdc0e 	bge	r2,r3,801e94 <_malloc_trim_r+0x78>
  801f24:	00802034 	movhi	r2,128
  801f28:	109c0004 	addi	r2,r2,28672
  801f2c:	10c00017 	ldw	r3,0(r2)
  801f30:	00802074 	movhi	r2,129
  801f34:	10a2a704 	addi	r2,r2,-30052
  801f38:	31400115 	stw	r5,4(r6)
  801f3c:	38c7c83a 	sub	r3,r7,r3
  801f40:	10c00015 	stw	r3,0(r2)
  801f44:	003fd306 	br	801e94 <_malloc_trim_r+0x78>

00801f48 <_free_r>:
  801f48:	defffd04 	addi	sp,sp,-12
  801f4c:	dc400115 	stw	r17,4(sp)
  801f50:	dc000015 	stw	r16,0(sp)
  801f54:	dfc00215 	stw	ra,8(sp)
  801f58:	2821883a 	mov	r16,r5
  801f5c:	2023883a 	mov	r17,r4
  801f60:	28005a26 	beq	r5,zero,8020cc <_free_r+0x184>
  801f64:	08031b80 	call	8031b8 <__malloc_lock>
  801f68:	823ffe04 	addi	r8,r16,-8
  801f6c:	41400117 	ldw	r5,4(r8)
  801f70:	00bfff84 	movi	r2,-2
  801f74:	02802034 	movhi	r10,128
  801f78:	52967904 	addi	r10,r10,23012
  801f7c:	288e703a 	and	r7,r5,r2
  801f80:	41cd883a 	add	r6,r8,r7
  801f84:	30c00117 	ldw	r3,4(r6)
  801f88:	51000217 	ldw	r4,8(r10)
  801f8c:	00bfff04 	movi	r2,-4
  801f90:	1892703a 	and	r9,r3,r2
  801f94:	5017883a 	mov	r11,r10
  801f98:	31006726 	beq	r6,r4,802138 <_free_r+0x1f0>
  801f9c:	2880004c 	andi	r2,r5,1
  801fa0:	1005003a 	cmpeq	r2,r2,zero
  801fa4:	32400115 	stw	r9,4(r6)
  801fa8:	10001a1e 	bne	r2,zero,802014 <_free_r+0xcc>
  801fac:	000b883a 	mov	r5,zero
  801fb0:	3247883a 	add	r3,r6,r9
  801fb4:	18800117 	ldw	r2,4(r3)
  801fb8:	1080004c 	andi	r2,r2,1
  801fbc:	1000231e 	bne	r2,zero,80204c <_free_r+0x104>
  801fc0:	280ac03a 	cmpne	r5,r5,zero
  801fc4:	3a4f883a 	add	r7,r7,r9
  801fc8:	2800451e 	bne	r5,zero,8020e0 <_free_r+0x198>
  801fcc:	31000217 	ldw	r4,8(r6)
  801fd0:	00802034 	movhi	r2,128
  801fd4:	10967b04 	addi	r2,r2,23020
  801fd8:	20807b26 	beq	r4,r2,8021c8 <_free_r+0x280>
  801fdc:	30800317 	ldw	r2,12(r6)
  801fe0:	3a07883a 	add	r3,r7,r8
  801fe4:	19c00015 	stw	r7,0(r3)
  801fe8:	11000215 	stw	r4,8(r2)
  801fec:	20800315 	stw	r2,12(r4)
  801ff0:	38800054 	ori	r2,r7,1
  801ff4:	40800115 	stw	r2,4(r8)
  801ff8:	28001a26 	beq	r5,zero,802064 <_free_r+0x11c>
  801ffc:	8809883a 	mov	r4,r17
  802000:	dfc00217 	ldw	ra,8(sp)
  802004:	dc400117 	ldw	r17,4(sp)
  802008:	dc000017 	ldw	r16,0(sp)
  80200c:	dec00304 	addi	sp,sp,12
  802010:	08031d81 	jmpi	8031d8 <__malloc_unlock>
  802014:	80bffe17 	ldw	r2,-8(r16)
  802018:	50c00204 	addi	r3,r10,8
  80201c:	4091c83a 	sub	r8,r8,r2
  802020:	41000217 	ldw	r4,8(r8)
  802024:	388f883a 	add	r7,r7,r2
  802028:	20c06126 	beq	r4,r3,8021b0 <_free_r+0x268>
  80202c:	40800317 	ldw	r2,12(r8)
  802030:	3247883a 	add	r3,r6,r9
  802034:	000b883a 	mov	r5,zero
  802038:	11000215 	stw	r4,8(r2)
  80203c:	20800315 	stw	r2,12(r4)
  802040:	18800117 	ldw	r2,4(r3)
  802044:	1080004c 	andi	r2,r2,1
  802048:	103fdd26 	beq	r2,zero,801fc0 <_free_r+0x78>
  80204c:	38800054 	ori	r2,r7,1
  802050:	3a07883a 	add	r3,r7,r8
  802054:	280ac03a 	cmpne	r5,r5,zero
  802058:	40800115 	stw	r2,4(r8)
  80205c:	19c00015 	stw	r7,0(r3)
  802060:	283fe61e 	bne	r5,zero,801ffc <_free_r+0xb4>
  802064:	00807fc4 	movi	r2,511
  802068:	11c01f2e 	bgeu	r2,r7,8020e8 <_free_r+0x1a0>
  80206c:	3806d27a 	srli	r3,r7,9
  802070:	1800481e 	bne	r3,zero,802194 <_free_r+0x24c>
  802074:	3804d0fa 	srli	r2,r7,3
  802078:	100690fa 	slli	r3,r2,3
  80207c:	1acd883a 	add	r6,r3,r11
  802080:	31400217 	ldw	r5,8(r6)
  802084:	31405926 	beq	r6,r5,8021ec <_free_r+0x2a4>
  802088:	28800117 	ldw	r2,4(r5)
  80208c:	00ffff04 	movi	r3,-4
  802090:	10c4703a 	and	r2,r2,r3
  802094:	3880022e 	bgeu	r7,r2,8020a0 <_free_r+0x158>
  802098:	29400217 	ldw	r5,8(r5)
  80209c:	317ffa1e 	bne	r6,r5,802088 <_free_r+0x140>
  8020a0:	29800317 	ldw	r6,12(r5)
  8020a4:	41800315 	stw	r6,12(r8)
  8020a8:	41400215 	stw	r5,8(r8)
  8020ac:	8809883a 	mov	r4,r17
  8020b0:	2a000315 	stw	r8,12(r5)
  8020b4:	32000215 	stw	r8,8(r6)
  8020b8:	dfc00217 	ldw	ra,8(sp)
  8020bc:	dc400117 	ldw	r17,4(sp)
  8020c0:	dc000017 	ldw	r16,0(sp)
  8020c4:	dec00304 	addi	sp,sp,12
  8020c8:	08031d81 	jmpi	8031d8 <__malloc_unlock>
  8020cc:	dfc00217 	ldw	ra,8(sp)
  8020d0:	dc400117 	ldw	r17,4(sp)
  8020d4:	dc000017 	ldw	r16,0(sp)
  8020d8:	dec00304 	addi	sp,sp,12
  8020dc:	f800283a 	ret
  8020e0:	31000217 	ldw	r4,8(r6)
  8020e4:	003fbd06 	br	801fdc <_free_r+0x94>
  8020e8:	3806d0fa 	srli	r3,r7,3
  8020ec:	00800044 	movi	r2,1
  8020f0:	51400117 	ldw	r5,4(r10)
  8020f4:	180890fa 	slli	r4,r3,3
  8020f8:	1807d0ba 	srai	r3,r3,2
  8020fc:	22c9883a 	add	r4,r4,r11
  802100:	21800217 	ldw	r6,8(r4)
  802104:	10c4983a 	sll	r2,r2,r3
  802108:	41000315 	stw	r4,12(r8)
  80210c:	41800215 	stw	r6,8(r8)
  802110:	288ab03a 	or	r5,r5,r2
  802114:	22000215 	stw	r8,8(r4)
  802118:	8809883a 	mov	r4,r17
  80211c:	51400115 	stw	r5,4(r10)
  802120:	32000315 	stw	r8,12(r6)
  802124:	dfc00217 	ldw	ra,8(sp)
  802128:	dc400117 	ldw	r17,4(sp)
  80212c:	dc000017 	ldw	r16,0(sp)
  802130:	dec00304 	addi	sp,sp,12
  802134:	08031d81 	jmpi	8031d8 <__malloc_unlock>
  802138:	2880004c 	andi	r2,r5,1
  80213c:	3a4d883a 	add	r6,r7,r9
  802140:	1000071e 	bne	r2,zero,802160 <_free_r+0x218>
  802144:	80bffe17 	ldw	r2,-8(r16)
  802148:	4091c83a 	sub	r8,r8,r2
  80214c:	41000317 	ldw	r4,12(r8)
  802150:	40c00217 	ldw	r3,8(r8)
  802154:	308d883a 	add	r6,r6,r2
  802158:	20c00215 	stw	r3,8(r4)
  80215c:	19000315 	stw	r4,12(r3)
  802160:	00802034 	movhi	r2,128
  802164:	109bff04 	addi	r2,r2,28668
  802168:	11000017 	ldw	r4,0(r2)
  80216c:	30c00054 	ori	r3,r6,1
  802170:	52000215 	stw	r8,8(r10)
  802174:	40c00115 	stw	r3,4(r8)
  802178:	313fa036 	bltu	r6,r4,801ffc <_free_r+0xb4>
  80217c:	00802074 	movhi	r2,129
  802180:	10a29d04 	addi	r2,r2,-30092
  802184:	11400017 	ldw	r5,0(r2)
  802188:	8809883a 	mov	r4,r17
  80218c:	0801e1c0 	call	801e1c <_malloc_trim_r>
  802190:	003f9a06 	br	801ffc <_free_r+0xb4>
  802194:	00800104 	movi	r2,4
  802198:	10c0072e 	bgeu	r2,r3,8021b8 <_free_r+0x270>
  80219c:	00800504 	movi	r2,20
  8021a0:	10c01936 	bltu	r2,r3,802208 <_free_r+0x2c0>
  8021a4:	188016c4 	addi	r2,r3,91
  8021a8:	100690fa 	slli	r3,r2,3
  8021ac:	003fb306 	br	80207c <_free_r+0x134>
  8021b0:	01400044 	movi	r5,1
  8021b4:	003f7e06 	br	801fb0 <_free_r+0x68>
  8021b8:	3804d1ba 	srli	r2,r7,6
  8021bc:	10800e04 	addi	r2,r2,56
  8021c0:	100690fa 	slli	r3,r2,3
  8021c4:	003fad06 	br	80207c <_free_r+0x134>
  8021c8:	22000315 	stw	r8,12(r4)
  8021cc:	22000215 	stw	r8,8(r4)
  8021d0:	3a05883a 	add	r2,r7,r8
  8021d4:	38c00054 	ori	r3,r7,1
  8021d8:	11c00015 	stw	r7,0(r2)
  8021dc:	41000215 	stw	r4,8(r8)
  8021e0:	40c00115 	stw	r3,4(r8)
  8021e4:	41000315 	stw	r4,12(r8)
  8021e8:	003f8406 	br	801ffc <_free_r+0xb4>
  8021ec:	1005d0ba 	srai	r2,r2,2
  8021f0:	00c00044 	movi	r3,1
  8021f4:	51000117 	ldw	r4,4(r10)
  8021f8:	1886983a 	sll	r3,r3,r2
  8021fc:	20c8b03a 	or	r4,r4,r3
  802200:	51000115 	stw	r4,4(r10)
  802204:	003fa706 	br	8020a4 <_free_r+0x15c>
  802208:	00801504 	movi	r2,84
  80220c:	10c00436 	bltu	r2,r3,802220 <_free_r+0x2d8>
  802210:	3804d33a 	srli	r2,r7,12
  802214:	10801b84 	addi	r2,r2,110
  802218:	100690fa 	slli	r3,r2,3
  80221c:	003f9706 	br	80207c <_free_r+0x134>
  802220:	00805504 	movi	r2,340
  802224:	10c00436 	bltu	r2,r3,802238 <_free_r+0x2f0>
  802228:	3804d3fa 	srli	r2,r7,15
  80222c:	10801dc4 	addi	r2,r2,119
  802230:	100690fa 	slli	r3,r2,3
  802234:	003f9106 	br	80207c <_free_r+0x134>
  802238:	00815504 	movi	r2,1364
  80223c:	10c0032e 	bgeu	r2,r3,80224c <_free_r+0x304>
  802240:	00801f84 	movi	r2,126
  802244:	00c0fc04 	movi	r3,1008
  802248:	003f8c06 	br	80207c <_free_r+0x134>
  80224c:	3804d4ba 	srli	r2,r7,18
  802250:	10801f04 	addi	r2,r2,124
  802254:	100690fa 	slli	r3,r2,3
  802258:	003f8806 	br	80207c <_free_r+0x134>

0080225c <_fwalk_reent>:
  80225c:	defff704 	addi	sp,sp,-36
  802260:	dcc00315 	stw	r19,12(sp)
  802264:	24c0b804 	addi	r19,r4,736
  802268:	dd800615 	stw	r22,24(sp)
  80226c:	dd400515 	stw	r21,20(sp)
  802270:	dfc00815 	stw	ra,32(sp)
  802274:	ddc00715 	stw	r23,28(sp)
  802278:	dd000415 	stw	r20,16(sp)
  80227c:	dc800215 	stw	r18,8(sp)
  802280:	dc400115 	stw	r17,4(sp)
  802284:	dc000015 	stw	r16,0(sp)
  802288:	202b883a 	mov	r21,r4
  80228c:	282d883a 	mov	r22,r5
  802290:	0801bb40 	call	801bb4 <__sfp_lock_acquire>
  802294:	98002126 	beq	r19,zero,80231c <_fwalk_reent+0xc0>
  802298:	002f883a 	mov	r23,zero
  80229c:	9c800117 	ldw	r18,4(r19)
  8022a0:	9c000217 	ldw	r16,8(r19)
  8022a4:	90bfffc4 	addi	r2,r18,-1
  8022a8:	10000d16 	blt	r2,zero,8022e0 <_fwalk_reent+0x84>
  8022ac:	0023883a 	mov	r17,zero
  8022b0:	053fffc4 	movi	r20,-1
  8022b4:	8080030f 	ldh	r2,12(r16)
  8022b8:	8c400044 	addi	r17,r17,1
  8022bc:	10000626 	beq	r2,zero,8022d8 <_fwalk_reent+0x7c>
  8022c0:	8080038f 	ldh	r2,14(r16)
  8022c4:	800b883a 	mov	r5,r16
  8022c8:	a809883a 	mov	r4,r21
  8022cc:	15000226 	beq	r2,r20,8022d8 <_fwalk_reent+0x7c>
  8022d0:	b03ee83a 	callr	r22
  8022d4:	b8aeb03a 	or	r23,r23,r2
  8022d8:	84001704 	addi	r16,r16,92
  8022dc:	947ff51e 	bne	r18,r17,8022b4 <_fwalk_reent+0x58>
  8022e0:	9cc00017 	ldw	r19,0(r19)
  8022e4:	983fed1e 	bne	r19,zero,80229c <_fwalk_reent+0x40>
  8022e8:	0801bb80 	call	801bb8 <__sfp_lock_release>
  8022ec:	b805883a 	mov	r2,r23
  8022f0:	dfc00817 	ldw	ra,32(sp)
  8022f4:	ddc00717 	ldw	r23,28(sp)
  8022f8:	dd800617 	ldw	r22,24(sp)
  8022fc:	dd400517 	ldw	r21,20(sp)
  802300:	dd000417 	ldw	r20,16(sp)
  802304:	dcc00317 	ldw	r19,12(sp)
  802308:	dc800217 	ldw	r18,8(sp)
  80230c:	dc400117 	ldw	r17,4(sp)
  802310:	dc000017 	ldw	r16,0(sp)
  802314:	dec00904 	addi	sp,sp,36
  802318:	f800283a 	ret
  80231c:	002f883a 	mov	r23,zero
  802320:	003ff106 	br	8022e8 <_fwalk_reent+0x8c>

00802324 <_fwalk>:
  802324:	defff804 	addi	sp,sp,-32
  802328:	dcc00315 	stw	r19,12(sp)
  80232c:	24c0b804 	addi	r19,r4,736
  802330:	dd400515 	stw	r21,20(sp)
  802334:	dfc00715 	stw	ra,28(sp)
  802338:	dd800615 	stw	r22,24(sp)
  80233c:	dd000415 	stw	r20,16(sp)
  802340:	dc800215 	stw	r18,8(sp)
  802344:	dc400115 	stw	r17,4(sp)
  802348:	dc000015 	stw	r16,0(sp)
  80234c:	282b883a 	mov	r21,r5
  802350:	0801bb40 	call	801bb4 <__sfp_lock_acquire>
  802354:	98001f26 	beq	r19,zero,8023d4 <_fwalk+0xb0>
  802358:	002d883a 	mov	r22,zero
  80235c:	9c800117 	ldw	r18,4(r19)
  802360:	9c000217 	ldw	r16,8(r19)
  802364:	90bfffc4 	addi	r2,r18,-1
  802368:	10000c16 	blt	r2,zero,80239c <_fwalk+0x78>
  80236c:	0023883a 	mov	r17,zero
  802370:	053fffc4 	movi	r20,-1
  802374:	8080030f 	ldh	r2,12(r16)
  802378:	8c400044 	addi	r17,r17,1
  80237c:	10000526 	beq	r2,zero,802394 <_fwalk+0x70>
  802380:	8080038f 	ldh	r2,14(r16)
  802384:	8009883a 	mov	r4,r16
  802388:	15000226 	beq	r2,r20,802394 <_fwalk+0x70>
  80238c:	a83ee83a 	callr	r21
  802390:	b0acb03a 	or	r22,r22,r2
  802394:	84001704 	addi	r16,r16,92
  802398:	947ff61e 	bne	r18,r17,802374 <_fwalk+0x50>
  80239c:	9cc00017 	ldw	r19,0(r19)
  8023a0:	983fee1e 	bne	r19,zero,80235c <_fwalk+0x38>
  8023a4:	0801bb80 	call	801bb8 <__sfp_lock_release>
  8023a8:	b005883a 	mov	r2,r22
  8023ac:	dfc00717 	ldw	ra,28(sp)
  8023b0:	dd800617 	ldw	r22,24(sp)
  8023b4:	dd400517 	ldw	r21,20(sp)
  8023b8:	dd000417 	ldw	r20,16(sp)
  8023bc:	dcc00317 	ldw	r19,12(sp)
  8023c0:	dc800217 	ldw	r18,8(sp)
  8023c4:	dc400117 	ldw	r17,4(sp)
  8023c8:	dc000017 	ldw	r16,0(sp)
  8023cc:	dec00804 	addi	sp,sp,32
  8023d0:	f800283a 	ret
  8023d4:	002d883a 	mov	r22,zero
  8023d8:	003ff206 	br	8023a4 <_fwalk+0x80>

008023dc <__smakebuf_r>:
  8023dc:	2880030b 	ldhu	r2,12(r5)
  8023e0:	deffed04 	addi	sp,sp,-76
  8023e4:	dc401015 	stw	r17,64(sp)
  8023e8:	1080008c 	andi	r2,r2,2
  8023ec:	dc000f15 	stw	r16,60(sp)
  8023f0:	dfc01215 	stw	ra,72(sp)
  8023f4:	dc801115 	stw	r18,68(sp)
  8023f8:	2821883a 	mov	r16,r5
  8023fc:	2023883a 	mov	r17,r4
  802400:	10000b26 	beq	r2,zero,802430 <__smakebuf_r+0x54>
  802404:	28c010c4 	addi	r3,r5,67
  802408:	00800044 	movi	r2,1
  80240c:	28800515 	stw	r2,20(r5)
  802410:	28c00415 	stw	r3,16(r5)
  802414:	28c00015 	stw	r3,0(r5)
  802418:	dfc01217 	ldw	ra,72(sp)
  80241c:	dc801117 	ldw	r18,68(sp)
  802420:	dc401017 	ldw	r17,64(sp)
  802424:	dc000f17 	ldw	r16,60(sp)
  802428:	dec01304 	addi	sp,sp,76
  80242c:	f800283a 	ret
  802430:	2940038f 	ldh	r5,14(r5)
  802434:	28002116 	blt	r5,zero,8024bc <__smakebuf_r+0xe0>
  802438:	d80d883a 	mov	r6,sp
  80243c:	08029600 	call	802960 <_fstat_r>
  802440:	10001e16 	blt	r2,zero,8024bc <__smakebuf_r+0xe0>
  802444:	d8800117 	ldw	r2,4(sp)
  802448:	00e00014 	movui	r3,32768
  80244c:	113c000c 	andi	r4,r2,61440
  802450:	20c03126 	beq	r4,r3,802518 <__smakebuf_r+0x13c>
  802454:	8080030b 	ldhu	r2,12(r16)
  802458:	00c80004 	movi	r3,8192
  80245c:	10820014 	ori	r2,r2,2048
  802460:	8080030d 	sth	r2,12(r16)
  802464:	20c01e26 	beq	r4,r3,8024e0 <__smakebuf_r+0x104>
  802468:	04810004 	movi	r18,1024
  80246c:	8809883a 	mov	r4,r17
  802470:	900b883a 	mov	r5,r18
  802474:	08007e80 	call	8007e8 <_malloc_r>
  802478:	1009883a 	mov	r4,r2
  80247c:	10003126 	beq	r2,zero,802544 <__smakebuf_r+0x168>
  802480:	80c0030b 	ldhu	r3,12(r16)
  802484:	00802034 	movhi	r2,128
  802488:	10872a04 	addi	r2,r2,7336
  80248c:	88800f15 	stw	r2,60(r17)
  802490:	18c02014 	ori	r3,r3,128
  802494:	84800515 	stw	r18,20(r16)
  802498:	80c0030d 	sth	r3,12(r16)
  80249c:	81000415 	stw	r4,16(r16)
  8024a0:	81000015 	stw	r4,0(r16)
  8024a4:	dfc01217 	ldw	ra,72(sp)
  8024a8:	dc801117 	ldw	r18,68(sp)
  8024ac:	dc401017 	ldw	r17,64(sp)
  8024b0:	dc000f17 	ldw	r16,60(sp)
  8024b4:	dec01304 	addi	sp,sp,76
  8024b8:	f800283a 	ret
  8024bc:	80c0030b 	ldhu	r3,12(r16)
  8024c0:	1880200c 	andi	r2,r3,128
  8024c4:	10000426 	beq	r2,zero,8024d8 <__smakebuf_r+0xfc>
  8024c8:	04801004 	movi	r18,64
  8024cc:	18820014 	ori	r2,r3,2048
  8024d0:	8080030d 	sth	r2,12(r16)
  8024d4:	003fe506 	br	80246c <__smakebuf_r+0x90>
  8024d8:	04810004 	movi	r18,1024
  8024dc:	003ffb06 	br	8024cc <__smakebuf_r+0xf0>
  8024e0:	8140038f 	ldh	r5,14(r16)
  8024e4:	8809883a 	mov	r4,r17
  8024e8:	08029d40 	call	8029d4 <_isatty_r>
  8024ec:	103fde26 	beq	r2,zero,802468 <__smakebuf_r+0x8c>
  8024f0:	8080030b 	ldhu	r2,12(r16)
  8024f4:	80c010c4 	addi	r3,r16,67
  8024f8:	04810004 	movi	r18,1024
  8024fc:	10800054 	ori	r2,r2,1
  802500:	8080030d 	sth	r2,12(r16)
  802504:	00800044 	movi	r2,1
  802508:	80c00415 	stw	r3,16(r16)
  80250c:	80800515 	stw	r2,20(r16)
  802510:	80c00015 	stw	r3,0(r16)
  802514:	003fd506 	br	80246c <__smakebuf_r+0x90>
  802518:	80c00a17 	ldw	r3,40(r16)
  80251c:	00802034 	movhi	r2,128
  802520:	10898404 	addi	r2,r2,9744
  802524:	18bfcb1e 	bne	r3,r2,802454 <__smakebuf_r+0x78>
  802528:	8080030b 	ldhu	r2,12(r16)
  80252c:	00c10004 	movi	r3,1024
  802530:	1825883a 	mov	r18,r3
  802534:	10c4b03a 	or	r2,r2,r3
  802538:	8080030d 	sth	r2,12(r16)
  80253c:	80c01315 	stw	r3,76(r16)
  802540:	003fca06 	br	80246c <__smakebuf_r+0x90>
  802544:	8100030b 	ldhu	r4,12(r16)
  802548:	2080800c 	andi	r2,r4,512
  80254c:	103fb21e 	bne	r2,zero,802418 <__smakebuf_r+0x3c>
  802550:	80c010c4 	addi	r3,r16,67
  802554:	21000094 	ori	r4,r4,2
  802558:	00800044 	movi	r2,1
  80255c:	80800515 	stw	r2,20(r16)
  802560:	8100030d 	sth	r4,12(r16)
  802564:	80c00415 	stw	r3,16(r16)
  802568:	80c00015 	stw	r3,0(r16)
  80256c:	003faa06 	br	802418 <__smakebuf_r+0x3c>

00802570 <memset>:
  802570:	008000c4 	movi	r2,3
  802574:	29403fcc 	andi	r5,r5,255
  802578:	2007883a 	mov	r3,r4
  80257c:	1180022e 	bgeu	r2,r6,802588 <memset+0x18>
  802580:	2084703a 	and	r2,r4,r2
  802584:	10000826 	beq	r2,zero,8025a8 <memset+0x38>
  802588:	30000526 	beq	r6,zero,8025a0 <memset+0x30>
  80258c:	2805883a 	mov	r2,r5
  802590:	30cd883a 	add	r6,r6,r3
  802594:	18800005 	stb	r2,0(r3)
  802598:	18c00044 	addi	r3,r3,1
  80259c:	19bffd1e 	bne	r3,r6,802594 <memset+0x24>
  8025a0:	2005883a 	mov	r2,r4
  8025a4:	f800283a 	ret
  8025a8:	2804923a 	slli	r2,r5,8
  8025ac:	020003c4 	movi	r8,15
  8025b0:	200f883a 	mov	r7,r4
  8025b4:	2884b03a 	or	r2,r5,r2
  8025b8:	1006943a 	slli	r3,r2,16
  8025bc:	10c6b03a 	or	r3,r2,r3
  8025c0:	41800a2e 	bgeu	r8,r6,8025ec <memset+0x7c>
  8025c4:	4005883a 	mov	r2,r8
  8025c8:	31bffc04 	addi	r6,r6,-16
  8025cc:	38c00015 	stw	r3,0(r7)
  8025d0:	38c00115 	stw	r3,4(r7)
  8025d4:	38c00215 	stw	r3,8(r7)
  8025d8:	38c00315 	stw	r3,12(r7)
  8025dc:	39c00404 	addi	r7,r7,16
  8025e0:	11bff936 	bltu	r2,r6,8025c8 <memset+0x58>
  8025e4:	008000c4 	movi	r2,3
  8025e8:	1180052e 	bgeu	r2,r6,802600 <memset+0x90>
  8025ec:	31bfff04 	addi	r6,r6,-4
  8025f0:	008000c4 	movi	r2,3
  8025f4:	38c00015 	stw	r3,0(r7)
  8025f8:	39c00104 	addi	r7,r7,4
  8025fc:	11bffb36 	bltu	r2,r6,8025ec <memset+0x7c>
  802600:	3807883a 	mov	r3,r7
  802604:	003fe006 	br	802588 <memset+0x18>

00802608 <__sclose>:
  802608:	2940038f 	ldh	r5,14(r5)
  80260c:	08027cc1 	jmpi	8027cc <_close_r>

00802610 <__sseek>:
  802610:	defffe04 	addi	sp,sp,-8
  802614:	dc000015 	stw	r16,0(sp)
  802618:	2821883a 	mov	r16,r5
  80261c:	2940038f 	ldh	r5,14(r5)
  802620:	dfc00115 	stw	ra,4(sp)
  802624:	0802a440 	call	802a44 <_lseek_r>
  802628:	1007883a 	mov	r3,r2
  80262c:	00bfffc4 	movi	r2,-1
  802630:	18800926 	beq	r3,r2,802658 <__sseek+0x48>
  802634:	8080030b 	ldhu	r2,12(r16)
  802638:	80c01415 	stw	r3,80(r16)
  80263c:	10840014 	ori	r2,r2,4096
  802640:	8080030d 	sth	r2,12(r16)
  802644:	1805883a 	mov	r2,r3
  802648:	dfc00117 	ldw	ra,4(sp)
  80264c:	dc000017 	ldw	r16,0(sp)
  802650:	dec00204 	addi	sp,sp,8
  802654:	f800283a 	ret
  802658:	8080030b 	ldhu	r2,12(r16)
  80265c:	10bbffcc 	andi	r2,r2,61439
  802660:	8080030d 	sth	r2,12(r16)
  802664:	1805883a 	mov	r2,r3
  802668:	dfc00117 	ldw	ra,4(sp)
  80266c:	dc000017 	ldw	r16,0(sp)
  802670:	dec00204 	addi	sp,sp,8
  802674:	f800283a 	ret

00802678 <__swrite>:
  802678:	2880030b 	ldhu	r2,12(r5)
  80267c:	defffb04 	addi	sp,sp,-20
  802680:	dcc00315 	stw	r19,12(sp)
  802684:	1080400c 	andi	r2,r2,256
  802688:	dc800215 	stw	r18,8(sp)
  80268c:	dc400115 	stw	r17,4(sp)
  802690:	dc000015 	stw	r16,0(sp)
  802694:	3027883a 	mov	r19,r6
  802698:	3825883a 	mov	r18,r7
  80269c:	dfc00415 	stw	ra,16(sp)
  8026a0:	2821883a 	mov	r16,r5
  8026a4:	000d883a 	mov	r6,zero
  8026a8:	01c00084 	movi	r7,2
  8026ac:	2023883a 	mov	r17,r4
  8026b0:	10000226 	beq	r2,zero,8026bc <__swrite+0x44>
  8026b4:	2940038f 	ldh	r5,14(r5)
  8026b8:	0802a440 	call	802a44 <_lseek_r>
  8026bc:	8080030b 	ldhu	r2,12(r16)
  8026c0:	8140038f 	ldh	r5,14(r16)
  8026c4:	8809883a 	mov	r4,r17
  8026c8:	10bbffcc 	andi	r2,r2,61439
  8026cc:	980d883a 	mov	r6,r19
  8026d0:	900f883a 	mov	r7,r18
  8026d4:	8080030d 	sth	r2,12(r16)
  8026d8:	dfc00417 	ldw	ra,16(sp)
  8026dc:	dcc00317 	ldw	r19,12(sp)
  8026e0:	dc800217 	ldw	r18,8(sp)
  8026e4:	dc400117 	ldw	r17,4(sp)
  8026e8:	dc000017 	ldw	r16,0(sp)
  8026ec:	dec00504 	addi	sp,sp,20
  8026f0:	08027541 	jmpi	802754 <_write_r>

008026f4 <__sread>:
  8026f4:	defffe04 	addi	sp,sp,-8
  8026f8:	dc000015 	stw	r16,0(sp)
  8026fc:	2821883a 	mov	r16,r5
  802700:	2940038f 	ldh	r5,14(r5)
  802704:	dfc00115 	stw	ra,4(sp)
  802708:	0802abc0 	call	802abc <_read_r>
  80270c:	1007883a 	mov	r3,r2
  802710:	10000816 	blt	r2,zero,802734 <__sread+0x40>
  802714:	80801417 	ldw	r2,80(r16)
  802718:	10c5883a 	add	r2,r2,r3
  80271c:	80801415 	stw	r2,80(r16)
  802720:	1805883a 	mov	r2,r3
  802724:	dfc00117 	ldw	ra,4(sp)
  802728:	dc000017 	ldw	r16,0(sp)
  80272c:	dec00204 	addi	sp,sp,8
  802730:	f800283a 	ret
  802734:	8080030b 	ldhu	r2,12(r16)
  802738:	10bbffcc 	andi	r2,r2,61439
  80273c:	8080030d 	sth	r2,12(r16)
  802740:	1805883a 	mov	r2,r3
  802744:	dfc00117 	ldw	ra,4(sp)
  802748:	dc000017 	ldw	r16,0(sp)
  80274c:	dec00204 	addi	sp,sp,8
  802750:	f800283a 	ret

00802754 <_write_r>:
  802754:	defffd04 	addi	sp,sp,-12
  802758:	dc000015 	stw	r16,0(sp)
  80275c:	04002074 	movhi	r16,129
  802760:	8422a004 	addi	r16,r16,-30080
  802764:	dc400115 	stw	r17,4(sp)
  802768:	80000015 	stw	zero,0(r16)
  80276c:	2023883a 	mov	r17,r4
  802770:	2809883a 	mov	r4,r5
  802774:	300b883a 	mov	r5,r6
  802778:	380d883a 	mov	r6,r7
  80277c:	dfc00215 	stw	ra,8(sp)
  802780:	08034940 	call	803494 <write>
  802784:	1007883a 	mov	r3,r2
  802788:	00bfffc4 	movi	r2,-1
  80278c:	18800626 	beq	r3,r2,8027a8 <_write_r+0x54>
  802790:	1805883a 	mov	r2,r3
  802794:	dfc00217 	ldw	ra,8(sp)
  802798:	dc400117 	ldw	r17,4(sp)
  80279c:	dc000017 	ldw	r16,0(sp)
  8027a0:	dec00304 	addi	sp,sp,12
  8027a4:	f800283a 	ret
  8027a8:	80800017 	ldw	r2,0(r16)
  8027ac:	103ff826 	beq	r2,zero,802790 <_write_r+0x3c>
  8027b0:	88800015 	stw	r2,0(r17)
  8027b4:	1805883a 	mov	r2,r3
  8027b8:	dfc00217 	ldw	ra,8(sp)
  8027bc:	dc400117 	ldw	r17,4(sp)
  8027c0:	dc000017 	ldw	r16,0(sp)
  8027c4:	dec00304 	addi	sp,sp,12
  8027c8:	f800283a 	ret

008027cc <_close_r>:
  8027cc:	defffd04 	addi	sp,sp,-12
  8027d0:	dc000015 	stw	r16,0(sp)
  8027d4:	04002074 	movhi	r16,129
  8027d8:	8422a004 	addi	r16,r16,-30080
  8027dc:	dc400115 	stw	r17,4(sp)
  8027e0:	80000015 	stw	zero,0(r16)
  8027e4:	2023883a 	mov	r17,r4
  8027e8:	2809883a 	mov	r4,r5
  8027ec:	dfc00215 	stw	ra,8(sp)
  8027f0:	0802b340 	call	802b34 <close>
  8027f4:	1007883a 	mov	r3,r2
  8027f8:	00bfffc4 	movi	r2,-1
  8027fc:	18800626 	beq	r3,r2,802818 <_close_r+0x4c>
  802800:	1805883a 	mov	r2,r3
  802804:	dfc00217 	ldw	ra,8(sp)
  802808:	dc400117 	ldw	r17,4(sp)
  80280c:	dc000017 	ldw	r16,0(sp)
  802810:	dec00304 	addi	sp,sp,12
  802814:	f800283a 	ret
  802818:	80800017 	ldw	r2,0(r16)
  80281c:	103ff826 	beq	r2,zero,802800 <_close_r+0x34>
  802820:	88800015 	stw	r2,0(r17)
  802824:	1805883a 	mov	r2,r3
  802828:	dfc00217 	ldw	ra,8(sp)
  80282c:	dc400117 	ldw	r17,4(sp)
  802830:	dc000017 	ldw	r16,0(sp)
  802834:	dec00304 	addi	sp,sp,12
  802838:	f800283a 	ret

0080283c <_fclose_r>:
  80283c:	defffc04 	addi	sp,sp,-16
  802840:	dc400115 	stw	r17,4(sp)
  802844:	dc000015 	stw	r16,0(sp)
  802848:	dfc00315 	stw	ra,12(sp)
  80284c:	dc800215 	stw	r18,8(sp)
  802850:	2821883a 	mov	r16,r5
  802854:	2023883a 	mov	r17,r4
  802858:	28002926 	beq	r5,zero,802900 <_fclose_r+0xc4>
  80285c:	0801bb40 	call	801bb4 <__sfp_lock_acquire>
  802860:	88000226 	beq	r17,zero,80286c <_fclose_r+0x30>
  802864:	88800e17 	ldw	r2,56(r17)
  802868:	10002d26 	beq	r2,zero,802920 <_fclose_r+0xe4>
  80286c:	8080030f 	ldh	r2,12(r16)
  802870:	10002226 	beq	r2,zero,8028fc <_fclose_r+0xc0>
  802874:	8809883a 	mov	r4,r17
  802878:	800b883a 	mov	r5,r16
  80287c:	080192c0 	call	80192c <_fflush_r>
  802880:	1025883a 	mov	r18,r2
  802884:	80800b17 	ldw	r2,44(r16)
  802888:	10000426 	beq	r2,zero,80289c <_fclose_r+0x60>
  80288c:	81400717 	ldw	r5,28(r16)
  802890:	8809883a 	mov	r4,r17
  802894:	103ee83a 	callr	r2
  802898:	10002a16 	blt	r2,zero,802944 <_fclose_r+0x108>
  80289c:	8080030b 	ldhu	r2,12(r16)
  8028a0:	1080200c 	andi	r2,r2,128
  8028a4:	1000231e 	bne	r2,zero,802934 <_fclose_r+0xf8>
  8028a8:	81400c17 	ldw	r5,48(r16)
  8028ac:	28000526 	beq	r5,zero,8028c4 <_fclose_r+0x88>
  8028b0:	80801004 	addi	r2,r16,64
  8028b4:	28800226 	beq	r5,r2,8028c0 <_fclose_r+0x84>
  8028b8:	8809883a 	mov	r4,r17
  8028bc:	0801f480 	call	801f48 <_free_r>
  8028c0:	80000c15 	stw	zero,48(r16)
  8028c4:	81401117 	ldw	r5,68(r16)
  8028c8:	28000326 	beq	r5,zero,8028d8 <_fclose_r+0x9c>
  8028cc:	8809883a 	mov	r4,r17
  8028d0:	0801f480 	call	801f48 <_free_r>
  8028d4:	80001115 	stw	zero,68(r16)
  8028d8:	8000030d 	sth	zero,12(r16)
  8028dc:	0801bb80 	call	801bb8 <__sfp_lock_release>
  8028e0:	9005883a 	mov	r2,r18
  8028e4:	dfc00317 	ldw	ra,12(sp)
  8028e8:	dc800217 	ldw	r18,8(sp)
  8028ec:	dc400117 	ldw	r17,4(sp)
  8028f0:	dc000017 	ldw	r16,0(sp)
  8028f4:	dec00404 	addi	sp,sp,16
  8028f8:	f800283a 	ret
  8028fc:	0801bb80 	call	801bb8 <__sfp_lock_release>
  802900:	0025883a 	mov	r18,zero
  802904:	9005883a 	mov	r2,r18
  802908:	dfc00317 	ldw	ra,12(sp)
  80290c:	dc800217 	ldw	r18,8(sp)
  802910:	dc400117 	ldw	r17,4(sp)
  802914:	dc000017 	ldw	r16,0(sp)
  802918:	dec00404 	addi	sp,sp,16
  80291c:	f800283a 	ret
  802920:	8809883a 	mov	r4,r17
  802924:	0801bc40 	call	801bc4 <__sinit>
  802928:	8080030f 	ldh	r2,12(r16)
  80292c:	103fd11e 	bne	r2,zero,802874 <_fclose_r+0x38>
  802930:	003ff206 	br	8028fc <_fclose_r+0xc0>
  802934:	81400417 	ldw	r5,16(r16)
  802938:	8809883a 	mov	r4,r17
  80293c:	0801f480 	call	801f48 <_free_r>
  802940:	003fd906 	br	8028a8 <_fclose_r+0x6c>
  802944:	04bfffc4 	movi	r18,-1
  802948:	003fd406 	br	80289c <_fclose_r+0x60>

0080294c <fclose>:
  80294c:	00802034 	movhi	r2,128
  802950:	109bfd04 	addi	r2,r2,28660
  802954:	200b883a 	mov	r5,r4
  802958:	11000017 	ldw	r4,0(r2)
  80295c:	080283c1 	jmpi	80283c <_fclose_r>

00802960 <_fstat_r>:
  802960:	defffd04 	addi	sp,sp,-12
  802964:	dc000015 	stw	r16,0(sp)
  802968:	04002074 	movhi	r16,129
  80296c:	8422a004 	addi	r16,r16,-30080
  802970:	dc400115 	stw	r17,4(sp)
  802974:	80000015 	stw	zero,0(r16)
  802978:	2023883a 	mov	r17,r4
  80297c:	2809883a 	mov	r4,r5
  802980:	300b883a 	mov	r5,r6
  802984:	dfc00215 	stw	ra,8(sp)
  802988:	0802cbc0 	call	802cbc <fstat>
  80298c:	1007883a 	mov	r3,r2
  802990:	00bfffc4 	movi	r2,-1
  802994:	18800626 	beq	r3,r2,8029b0 <_fstat_r+0x50>
  802998:	1805883a 	mov	r2,r3
  80299c:	dfc00217 	ldw	ra,8(sp)
  8029a0:	dc400117 	ldw	r17,4(sp)
  8029a4:	dc000017 	ldw	r16,0(sp)
  8029a8:	dec00304 	addi	sp,sp,12
  8029ac:	f800283a 	ret
  8029b0:	80800017 	ldw	r2,0(r16)
  8029b4:	103ff826 	beq	r2,zero,802998 <_fstat_r+0x38>
  8029b8:	88800015 	stw	r2,0(r17)
  8029bc:	1805883a 	mov	r2,r3
  8029c0:	dfc00217 	ldw	ra,8(sp)
  8029c4:	dc400117 	ldw	r17,4(sp)
  8029c8:	dc000017 	ldw	r16,0(sp)
  8029cc:	dec00304 	addi	sp,sp,12
  8029d0:	f800283a 	ret

008029d4 <_isatty_r>:
  8029d4:	defffd04 	addi	sp,sp,-12
  8029d8:	dc000015 	stw	r16,0(sp)
  8029dc:	04002074 	movhi	r16,129
  8029e0:	8422a004 	addi	r16,r16,-30080
  8029e4:	dc400115 	stw	r17,4(sp)
  8029e8:	80000015 	stw	zero,0(r16)
  8029ec:	2023883a 	mov	r17,r4
  8029f0:	2809883a 	mov	r4,r5
  8029f4:	dfc00215 	stw	ra,8(sp)
  8029f8:	0802df00 	call	802df0 <isatty>
  8029fc:	1007883a 	mov	r3,r2
  802a00:	00bfffc4 	movi	r2,-1
  802a04:	18800626 	beq	r3,r2,802a20 <_isatty_r+0x4c>
  802a08:	1805883a 	mov	r2,r3
  802a0c:	dfc00217 	ldw	ra,8(sp)
  802a10:	dc400117 	ldw	r17,4(sp)
  802a14:	dc000017 	ldw	r16,0(sp)
  802a18:	dec00304 	addi	sp,sp,12
  802a1c:	f800283a 	ret
  802a20:	80800017 	ldw	r2,0(r16)
  802a24:	103ff826 	beq	r2,zero,802a08 <_isatty_r+0x34>
  802a28:	88800015 	stw	r2,0(r17)
  802a2c:	1805883a 	mov	r2,r3
  802a30:	dfc00217 	ldw	ra,8(sp)
  802a34:	dc400117 	ldw	r17,4(sp)
  802a38:	dc000017 	ldw	r16,0(sp)
  802a3c:	dec00304 	addi	sp,sp,12
  802a40:	f800283a 	ret

00802a44 <_lseek_r>:
  802a44:	defffd04 	addi	sp,sp,-12
  802a48:	dc000015 	stw	r16,0(sp)
  802a4c:	04002074 	movhi	r16,129
  802a50:	8422a004 	addi	r16,r16,-30080
  802a54:	dc400115 	stw	r17,4(sp)
  802a58:	80000015 	stw	zero,0(r16)
  802a5c:	2023883a 	mov	r17,r4
  802a60:	2809883a 	mov	r4,r5
  802a64:	300b883a 	mov	r5,r6
  802a68:	380d883a 	mov	r6,r7
  802a6c:	dfc00215 	stw	ra,8(sp)
  802a70:	0802ffc0 	call	802ffc <lseek>
  802a74:	1007883a 	mov	r3,r2
  802a78:	00bfffc4 	movi	r2,-1
  802a7c:	18800626 	beq	r3,r2,802a98 <_lseek_r+0x54>
  802a80:	1805883a 	mov	r2,r3
  802a84:	dfc00217 	ldw	ra,8(sp)
  802a88:	dc400117 	ldw	r17,4(sp)
  802a8c:	dc000017 	ldw	r16,0(sp)
  802a90:	dec00304 	addi	sp,sp,12
  802a94:	f800283a 	ret
  802a98:	80800017 	ldw	r2,0(r16)
  802a9c:	103ff826 	beq	r2,zero,802a80 <_lseek_r+0x3c>
  802aa0:	88800015 	stw	r2,0(r17)
  802aa4:	1805883a 	mov	r2,r3
  802aa8:	dfc00217 	ldw	ra,8(sp)
  802aac:	dc400117 	ldw	r17,4(sp)
  802ab0:	dc000017 	ldw	r16,0(sp)
  802ab4:	dec00304 	addi	sp,sp,12
  802ab8:	f800283a 	ret

00802abc <_read_r>:
  802abc:	defffd04 	addi	sp,sp,-12
  802ac0:	dc000015 	stw	r16,0(sp)
  802ac4:	04002074 	movhi	r16,129
  802ac8:	8422a004 	addi	r16,r16,-30080
  802acc:	dc400115 	stw	r17,4(sp)
  802ad0:	80000015 	stw	zero,0(r16)
  802ad4:	2023883a 	mov	r17,r4
  802ad8:	2809883a 	mov	r4,r5
  802adc:	300b883a 	mov	r5,r6
  802ae0:	380d883a 	mov	r6,r7
  802ae4:	dfc00215 	stw	ra,8(sp)
  802ae8:	08031f80 	call	8031f8 <read>
  802aec:	1007883a 	mov	r3,r2
  802af0:	00bfffc4 	movi	r2,-1
  802af4:	18800626 	beq	r3,r2,802b10 <_read_r+0x54>
  802af8:	1805883a 	mov	r2,r3
  802afc:	dfc00217 	ldw	ra,8(sp)
  802b00:	dc400117 	ldw	r17,4(sp)
  802b04:	dc000017 	ldw	r16,0(sp)
  802b08:	dec00304 	addi	sp,sp,12
  802b0c:	f800283a 	ret
  802b10:	80800017 	ldw	r2,0(r16)
  802b14:	103ff826 	beq	r2,zero,802af8 <_read_r+0x3c>
  802b18:	88800015 	stw	r2,0(r17)
  802b1c:	1805883a 	mov	r2,r3
  802b20:	dfc00217 	ldw	ra,8(sp)
  802b24:	dc400117 	ldw	r17,4(sp)
  802b28:	dc000017 	ldw	r16,0(sp)
  802b2c:	dec00304 	addi	sp,sp,12
  802b30:	f800283a 	ret

00802b34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802b34:	defff804 	addi	sp,sp,-32
  802b38:	dfc00715 	stw	ra,28(sp)
  802b3c:	df000615 	stw	fp,24(sp)
  802b40:	df000604 	addi	fp,sp,24
  802b44:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802b48:	e0bffc17 	ldw	r2,-16(fp)
  802b4c:	1004803a 	cmplt	r2,r2,zero
  802b50:	1000081e 	bne	r2,zero,802b74 <close+0x40>
  802b54:	e0bffc17 	ldw	r2,-16(fp)
  802b58:	10800324 	muli	r2,r2,12
  802b5c:	1007883a 	mov	r3,r2
  802b60:	00802034 	movhi	r2,128
  802b64:	10978504 	addi	r2,r2,24084
  802b68:	1887883a 	add	r3,r3,r2
  802b6c:	e0ffff15 	stw	r3,-4(fp)
  802b70:	00000106 	br	802b78 <close+0x44>
  802b74:	e03fff15 	stw	zero,-4(fp)
  802b78:	e0bfff17 	ldw	r2,-4(fp)
  802b7c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  802b80:	e0bffb17 	ldw	r2,-20(fp)
  802b84:	1005003a 	cmpeq	r2,r2,zero
  802b88:	10001d1e 	bne	r2,zero,802c00 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802b8c:	e0bffb17 	ldw	r2,-20(fp)
  802b90:	10800017 	ldw	r2,0(r2)
  802b94:	10800417 	ldw	r2,16(r2)
  802b98:	1005003a 	cmpeq	r2,r2,zero
  802b9c:	1000071e 	bne	r2,zero,802bbc <close+0x88>
  802ba0:	e0bffb17 	ldw	r2,-20(fp)
  802ba4:	10800017 	ldw	r2,0(r2)
  802ba8:	10800417 	ldw	r2,16(r2)
  802bac:	e13ffb17 	ldw	r4,-20(fp)
  802bb0:	103ee83a 	callr	r2
  802bb4:	e0bffe15 	stw	r2,-8(fp)
  802bb8:	00000106 	br	802bc0 <close+0x8c>
  802bbc:	e03ffe15 	stw	zero,-8(fp)
  802bc0:	e0bffe17 	ldw	r2,-8(fp)
  802bc4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802bc8:	e13ffc17 	ldw	r4,-16(fp)
  802bcc:	08033780 	call	803378 <alt_release_fd>
    if (rval < 0)
  802bd0:	e0bffa17 	ldw	r2,-24(fp)
  802bd4:	1004403a 	cmpge	r2,r2,zero
  802bd8:	1000071e 	bne	r2,zero,802bf8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  802bdc:	0802c300 	call	802c30 <alt_get_errno>
  802be0:	e0fffa17 	ldw	r3,-24(fp)
  802be4:	00c7c83a 	sub	r3,zero,r3
  802be8:	10c00015 	stw	r3,0(r2)
      return -1;
  802bec:	00bfffc4 	movi	r2,-1
  802bf0:	e0bffd15 	stw	r2,-12(fp)
  802bf4:	00000806 	br	802c18 <close+0xe4>
    }
    return 0;
  802bf8:	e03ffd15 	stw	zero,-12(fp)
  802bfc:	00000606 	br	802c18 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802c00:	0802c300 	call	802c30 <alt_get_errno>
  802c04:	1007883a 	mov	r3,r2
  802c08:	00801444 	movi	r2,81
  802c0c:	18800015 	stw	r2,0(r3)
    return -1;
  802c10:	00bfffc4 	movi	r2,-1
  802c14:	e0bffd15 	stw	r2,-12(fp)
  802c18:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  802c1c:	e037883a 	mov	sp,fp
  802c20:	dfc00117 	ldw	ra,4(sp)
  802c24:	df000017 	ldw	fp,0(sp)
  802c28:	dec00204 	addi	sp,sp,8
  802c2c:	f800283a 	ret

00802c30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802c30:	defffd04 	addi	sp,sp,-12
  802c34:	dfc00215 	stw	ra,8(sp)
  802c38:	df000115 	stw	fp,4(sp)
  802c3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802c40:	00802034 	movhi	r2,128
  802c44:	109c0604 	addi	r2,r2,28696
  802c48:	10800017 	ldw	r2,0(r2)
  802c4c:	1005003a 	cmpeq	r2,r2,zero
  802c50:	1000061e 	bne	r2,zero,802c6c <alt_get_errno+0x3c>
  802c54:	00802034 	movhi	r2,128
  802c58:	109c0604 	addi	r2,r2,28696
  802c5c:	10800017 	ldw	r2,0(r2)
  802c60:	103ee83a 	callr	r2
  802c64:	e0bfff15 	stw	r2,-4(fp)
  802c68:	00000306 	br	802c78 <alt_get_errno+0x48>
  802c6c:	00802074 	movhi	r2,129
  802c70:	10a2a004 	addi	r2,r2,-30080
  802c74:	e0bfff15 	stw	r2,-4(fp)
  802c78:	e0bfff17 	ldw	r2,-4(fp)
}
  802c7c:	e037883a 	mov	sp,fp
  802c80:	dfc00117 	ldw	ra,4(sp)
  802c84:	df000017 	ldw	fp,0(sp)
  802c88:	dec00204 	addi	sp,sp,8
  802c8c:	f800283a 	ret

00802c90 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802c90:	defffc04 	addi	sp,sp,-16
  802c94:	df000315 	stw	fp,12(sp)
  802c98:	df000304 	addi	fp,sp,12
  802c9c:	e13ffd15 	stw	r4,-12(fp)
  802ca0:	e17ffe15 	stw	r5,-8(fp)
  802ca4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802ca8:	e0bfff17 	ldw	r2,-4(fp)
}
  802cac:	e037883a 	mov	sp,fp
  802cb0:	df000017 	ldw	fp,0(sp)
  802cb4:	dec00104 	addi	sp,sp,4
  802cb8:	f800283a 	ret

00802cbc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  802cbc:	defff904 	addi	sp,sp,-28
  802cc0:	dfc00615 	stw	ra,24(sp)
  802cc4:	df000515 	stw	fp,20(sp)
  802cc8:	df000504 	addi	fp,sp,20
  802ccc:	e13ffc15 	stw	r4,-16(fp)
  802cd0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802cd4:	e0bffc17 	ldw	r2,-16(fp)
  802cd8:	1004803a 	cmplt	r2,r2,zero
  802cdc:	1000081e 	bne	r2,zero,802d00 <fstat+0x44>
  802ce0:	e0bffc17 	ldw	r2,-16(fp)
  802ce4:	10800324 	muli	r2,r2,12
  802ce8:	1007883a 	mov	r3,r2
  802cec:	00802034 	movhi	r2,128
  802cf0:	10978504 	addi	r2,r2,24084
  802cf4:	1887883a 	add	r3,r3,r2
  802cf8:	e0ffff15 	stw	r3,-4(fp)
  802cfc:	00000106 	br	802d04 <fstat+0x48>
  802d00:	e03fff15 	stw	zero,-4(fp)
  802d04:	e0bfff17 	ldw	r2,-4(fp)
  802d08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  802d0c:	e0bffb17 	ldw	r2,-20(fp)
  802d10:	1005003a 	cmpeq	r2,r2,zero
  802d14:	1000121e 	bne	r2,zero,802d60 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  802d18:	e0bffb17 	ldw	r2,-20(fp)
  802d1c:	10800017 	ldw	r2,0(r2)
  802d20:	10800817 	ldw	r2,32(r2)
  802d24:	1005003a 	cmpeq	r2,r2,zero
  802d28:	1000081e 	bne	r2,zero,802d4c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  802d2c:	e0bffb17 	ldw	r2,-20(fp)
  802d30:	10800017 	ldw	r2,0(r2)
  802d34:	10800817 	ldw	r2,32(r2)
  802d38:	e13ffb17 	ldw	r4,-20(fp)
  802d3c:	e17ffd17 	ldw	r5,-12(fp)
  802d40:	103ee83a 	callr	r2
  802d44:	e0bffe15 	stw	r2,-8(fp)
  802d48:	00000b06 	br	802d78 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  802d4c:	e0fffd17 	ldw	r3,-12(fp)
  802d50:	00880004 	movi	r2,8192
  802d54:	18800115 	stw	r2,4(r3)
      return 0;
  802d58:	e03ffe15 	stw	zero,-8(fp)
  802d5c:	00000606 	br	802d78 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802d60:	0802d900 	call	802d90 <alt_get_errno>
  802d64:	1007883a 	mov	r3,r2
  802d68:	00801444 	movi	r2,81
  802d6c:	18800015 	stw	r2,0(r3)
    return -1;
  802d70:	00bfffc4 	movi	r2,-1
  802d74:	e0bffe15 	stw	r2,-8(fp)
  802d78:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  802d7c:	e037883a 	mov	sp,fp
  802d80:	dfc00117 	ldw	ra,4(sp)
  802d84:	df000017 	ldw	fp,0(sp)
  802d88:	dec00204 	addi	sp,sp,8
  802d8c:	f800283a 	ret

00802d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802d90:	defffd04 	addi	sp,sp,-12
  802d94:	dfc00215 	stw	ra,8(sp)
  802d98:	df000115 	stw	fp,4(sp)
  802d9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802da0:	00802034 	movhi	r2,128
  802da4:	109c0604 	addi	r2,r2,28696
  802da8:	10800017 	ldw	r2,0(r2)
  802dac:	1005003a 	cmpeq	r2,r2,zero
  802db0:	1000061e 	bne	r2,zero,802dcc <alt_get_errno+0x3c>
  802db4:	00802034 	movhi	r2,128
  802db8:	109c0604 	addi	r2,r2,28696
  802dbc:	10800017 	ldw	r2,0(r2)
  802dc0:	103ee83a 	callr	r2
  802dc4:	e0bfff15 	stw	r2,-4(fp)
  802dc8:	00000306 	br	802dd8 <alt_get_errno+0x48>
  802dcc:	00802074 	movhi	r2,129
  802dd0:	10a2a004 	addi	r2,r2,-30080
  802dd4:	e0bfff15 	stw	r2,-4(fp)
  802dd8:	e0bfff17 	ldw	r2,-4(fp)
}
  802ddc:	e037883a 	mov	sp,fp
  802de0:	dfc00117 	ldw	ra,4(sp)
  802de4:	df000017 	ldw	fp,0(sp)
  802de8:	dec00204 	addi	sp,sp,8
  802dec:	f800283a 	ret

00802df0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  802df0:	deffeb04 	addi	sp,sp,-84
  802df4:	dfc01415 	stw	ra,80(sp)
  802df8:	df001315 	stw	fp,76(sp)
  802dfc:	df001304 	addi	fp,sp,76
  802e00:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802e04:	e0bffd17 	ldw	r2,-12(fp)
  802e08:	1004803a 	cmplt	r2,r2,zero
  802e0c:	1000081e 	bne	r2,zero,802e30 <isatty+0x40>
  802e10:	e0bffd17 	ldw	r2,-12(fp)
  802e14:	10800324 	muli	r2,r2,12
  802e18:	1007883a 	mov	r3,r2
  802e1c:	00802034 	movhi	r2,128
  802e20:	10978504 	addi	r2,r2,24084
  802e24:	1887883a 	add	r3,r3,r2
  802e28:	e0ffff15 	stw	r3,-4(fp)
  802e2c:	00000106 	br	802e34 <isatty+0x44>
  802e30:	e03fff15 	stw	zero,-4(fp)
  802e34:	e0bfff17 	ldw	r2,-4(fp)
  802e38:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  802e3c:	e0bfed17 	ldw	r2,-76(fp)
  802e40:	1005003a 	cmpeq	r2,r2,zero
  802e44:	10000f1e 	bne	r2,zero,802e84 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  802e48:	e0bfed17 	ldw	r2,-76(fp)
  802e4c:	10800017 	ldw	r2,0(r2)
  802e50:	10800817 	ldw	r2,32(r2)
  802e54:	1004c03a 	cmpne	r2,r2,zero
  802e58:	1000031e 	bne	r2,zero,802e68 <isatty+0x78>
    {
      return 1;
  802e5c:	00800044 	movi	r2,1
  802e60:	e0bffe15 	stw	r2,-8(fp)
  802e64:	00000c06 	br	802e98 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  802e68:	e17fee04 	addi	r5,fp,-72
  802e6c:	e13ffd17 	ldw	r4,-12(fp)
  802e70:	0802cbc0 	call	802cbc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  802e74:	e0bfef17 	ldw	r2,-68(fp)
  802e78:	10880020 	cmpeqi	r2,r2,8192
  802e7c:	e0bffe15 	stw	r2,-8(fp)
  802e80:	00000506 	br	802e98 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802e84:	0802eb00 	call	802eb0 <alt_get_errno>
  802e88:	1007883a 	mov	r3,r2
  802e8c:	00801444 	movi	r2,81
  802e90:	18800015 	stw	r2,0(r3)
    return 0;
  802e94:	e03ffe15 	stw	zero,-8(fp)
  802e98:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  802e9c:	e037883a 	mov	sp,fp
  802ea0:	dfc00117 	ldw	ra,4(sp)
  802ea4:	df000017 	ldw	fp,0(sp)
  802ea8:	dec00204 	addi	sp,sp,8
  802eac:	f800283a 	ret

00802eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802eb0:	defffd04 	addi	sp,sp,-12
  802eb4:	dfc00215 	stw	ra,8(sp)
  802eb8:	df000115 	stw	fp,4(sp)
  802ebc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802ec0:	00802034 	movhi	r2,128
  802ec4:	109c0604 	addi	r2,r2,28696
  802ec8:	10800017 	ldw	r2,0(r2)
  802ecc:	1005003a 	cmpeq	r2,r2,zero
  802ed0:	1000061e 	bne	r2,zero,802eec <alt_get_errno+0x3c>
  802ed4:	00802034 	movhi	r2,128
  802ed8:	109c0604 	addi	r2,r2,28696
  802edc:	10800017 	ldw	r2,0(r2)
  802ee0:	103ee83a 	callr	r2
  802ee4:	e0bfff15 	stw	r2,-4(fp)
  802ee8:	00000306 	br	802ef8 <alt_get_errno+0x48>
  802eec:	00802074 	movhi	r2,129
  802ef0:	10a2a004 	addi	r2,r2,-30080
  802ef4:	e0bfff15 	stw	r2,-4(fp)
  802ef8:	e0bfff17 	ldw	r2,-4(fp)
}
  802efc:	e037883a 	mov	sp,fp
  802f00:	dfc00117 	ldw	ra,4(sp)
  802f04:	df000017 	ldw	fp,0(sp)
  802f08:	dec00204 	addi	sp,sp,8
  802f0c:	f800283a 	ret

00802f10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  802f10:	defffe04 	addi	sp,sp,-8
  802f14:	dfc00115 	stw	ra,4(sp)
  802f18:	df000015 	stw	fp,0(sp)
  802f1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  802f20:	01002034 	movhi	r4,128
  802f24:	211c0b04 	addi	r4,r4,28716
  802f28:	01402034 	movhi	r5,128
  802f2c:	29557904 	addi	r5,r5,21988
  802f30:	01802034 	movhi	r6,128
  802f34:	319c0b04 	addi	r6,r6,28716
  802f38:	0802f900 	call	802f90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  802f3c:	01002034 	movhi	r4,128
  802f40:	21000804 	addi	r4,r4,32
  802f44:	01402034 	movhi	r5,128
  802f48:	29400804 	addi	r5,r5,32
  802f4c:	01802034 	movhi	r6,128
  802f50:	31806d04 	addi	r6,r6,436
  802f54:	0802f900 	call	802f90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  802f58:	01002034 	movhi	r4,128
  802f5c:	21156704 	addi	r4,r4,21916
  802f60:	01402034 	movhi	r5,128
  802f64:	29556704 	addi	r5,r5,21916
  802f68:	01802034 	movhi	r6,128
  802f6c:	31957904 	addi	r6,r6,21988
  802f70:	0802f900 	call	802f90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  802f74:	08043dc0 	call	8043dc <alt_dcache_flush_all>
  alt_icache_flush_all();
  802f78:	08045d40 	call	8045d4 <alt_icache_flush_all>
}
  802f7c:	e037883a 	mov	sp,fp
  802f80:	dfc00117 	ldw	ra,4(sp)
  802f84:	df000017 	ldw	fp,0(sp)
  802f88:	dec00204 	addi	sp,sp,8
  802f8c:	f800283a 	ret

00802f90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  802f90:	defffc04 	addi	sp,sp,-16
  802f94:	df000315 	stw	fp,12(sp)
  802f98:	df000304 	addi	fp,sp,12
  802f9c:	e13ffd15 	stw	r4,-12(fp)
  802fa0:	e17ffe15 	stw	r5,-8(fp)
  802fa4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  802fa8:	e0fffe17 	ldw	r3,-8(fp)
  802fac:	e0bffd17 	ldw	r2,-12(fp)
  802fb0:	18800e26 	beq	r3,r2,802fec <alt_load_section+0x5c>
  {
    while( to != end )
  802fb4:	00000a06 	br	802fe0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  802fb8:	e0bffd17 	ldw	r2,-12(fp)
  802fbc:	10c00017 	ldw	r3,0(r2)
  802fc0:	e0bffe17 	ldw	r2,-8(fp)
  802fc4:	10c00015 	stw	r3,0(r2)
  802fc8:	e0bffe17 	ldw	r2,-8(fp)
  802fcc:	10800104 	addi	r2,r2,4
  802fd0:	e0bffe15 	stw	r2,-8(fp)
  802fd4:	e0bffd17 	ldw	r2,-12(fp)
  802fd8:	10800104 	addi	r2,r2,4
  802fdc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  802fe0:	e0fffe17 	ldw	r3,-8(fp)
  802fe4:	e0bfff17 	ldw	r2,-4(fp)
  802fe8:	18bff31e 	bne	r3,r2,802fb8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  802fec:	e037883a 	mov	sp,fp
  802ff0:	df000017 	ldw	fp,0(sp)
  802ff4:	dec00104 	addi	sp,sp,4
  802ff8:	f800283a 	ret

00802ffc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  802ffc:	defff804 	addi	sp,sp,-32
  803000:	dfc00715 	stw	ra,28(sp)
  803004:	df000615 	stw	fp,24(sp)
  803008:	df000604 	addi	fp,sp,24
  80300c:	e13ffc15 	stw	r4,-16(fp)
  803010:	e17ffd15 	stw	r5,-12(fp)
  803014:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803018:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80301c:	e0bffc17 	ldw	r2,-16(fp)
  803020:	1004803a 	cmplt	r2,r2,zero
  803024:	1000081e 	bne	r2,zero,803048 <lseek+0x4c>
  803028:	e0bffc17 	ldw	r2,-16(fp)
  80302c:	10800324 	muli	r2,r2,12
  803030:	1007883a 	mov	r3,r2
  803034:	00802034 	movhi	r2,128
  803038:	10978504 	addi	r2,r2,24084
  80303c:	1887883a 	add	r3,r3,r2
  803040:	e0ffff15 	stw	r3,-4(fp)
  803044:	00000106 	br	80304c <lseek+0x50>
  803048:	e03fff15 	stw	zero,-4(fp)
  80304c:	e0bfff17 	ldw	r2,-4(fp)
  803050:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  803054:	e0bffb17 	ldw	r2,-20(fp)
  803058:	1005003a 	cmpeq	r2,r2,zero
  80305c:	1000111e 	bne	r2,zero,8030a4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803060:	e0bffb17 	ldw	r2,-20(fp)
  803064:	10800017 	ldw	r2,0(r2)
  803068:	10800717 	ldw	r2,28(r2)
  80306c:	1005003a 	cmpeq	r2,r2,zero
  803070:	1000091e 	bne	r2,zero,803098 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803074:	e0bffb17 	ldw	r2,-20(fp)
  803078:	10800017 	ldw	r2,0(r2)
  80307c:	10800717 	ldw	r2,28(r2)
  803080:	e13ffb17 	ldw	r4,-20(fp)
  803084:	e17ffd17 	ldw	r5,-12(fp)
  803088:	e1bffe17 	ldw	r6,-8(fp)
  80308c:	103ee83a 	callr	r2
  803090:	e0bffa15 	stw	r2,-24(fp)
  803094:	00000506 	br	8030ac <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803098:	00bfde84 	movi	r2,-134
  80309c:	e0bffa15 	stw	r2,-24(fp)
  8030a0:	00000206 	br	8030ac <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8030a4:	00bfebc4 	movi	r2,-81
  8030a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8030ac:	e0bffa17 	ldw	r2,-24(fp)
  8030b0:	1004403a 	cmpge	r2,r2,zero
  8030b4:	1000071e 	bne	r2,zero,8030d4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8030b8:	08030ec0 	call	8030ec <alt_get_errno>
  8030bc:	1007883a 	mov	r3,r2
  8030c0:	e0bffa17 	ldw	r2,-24(fp)
  8030c4:	0085c83a 	sub	r2,zero,r2
  8030c8:	18800015 	stw	r2,0(r3)
    rc = -1;
  8030cc:	00bfffc4 	movi	r2,-1
  8030d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8030d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8030d8:	e037883a 	mov	sp,fp
  8030dc:	dfc00117 	ldw	ra,4(sp)
  8030e0:	df000017 	ldw	fp,0(sp)
  8030e4:	dec00204 	addi	sp,sp,8
  8030e8:	f800283a 	ret

008030ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030ec:	defffd04 	addi	sp,sp,-12
  8030f0:	dfc00215 	stw	ra,8(sp)
  8030f4:	df000115 	stw	fp,4(sp)
  8030f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8030fc:	00802034 	movhi	r2,128
  803100:	109c0604 	addi	r2,r2,28696
  803104:	10800017 	ldw	r2,0(r2)
  803108:	1005003a 	cmpeq	r2,r2,zero
  80310c:	1000061e 	bne	r2,zero,803128 <alt_get_errno+0x3c>
  803110:	00802034 	movhi	r2,128
  803114:	109c0604 	addi	r2,r2,28696
  803118:	10800017 	ldw	r2,0(r2)
  80311c:	103ee83a 	callr	r2
  803120:	e0bfff15 	stw	r2,-4(fp)
  803124:	00000306 	br	803134 <alt_get_errno+0x48>
  803128:	00802074 	movhi	r2,129
  80312c:	10a2a004 	addi	r2,r2,-30080
  803130:	e0bfff15 	stw	r2,-4(fp)
  803134:	e0bfff17 	ldw	r2,-4(fp)
}
  803138:	e037883a 	mov	sp,fp
  80313c:	dfc00117 	ldw	ra,4(sp)
  803140:	df000017 	ldw	fp,0(sp)
  803144:	dec00204 	addi	sp,sp,8
  803148:	f800283a 	ret

0080314c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80314c:	defffd04 	addi	sp,sp,-12
  803150:	dfc00215 	stw	ra,8(sp)
  803154:	df000115 	stw	fp,4(sp)
  803158:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80315c:	0009883a 	mov	r4,zero
  803160:	08036140 	call	803614 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803164:	08036480 	call	803648 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803168:	01002034 	movhi	r4,128
  80316c:	21157104 	addi	r4,r4,21956
  803170:	01402034 	movhi	r5,128
  803174:	29557104 	addi	r5,r5,21956
  803178:	01802034 	movhi	r6,128
  80317c:	31957104 	addi	r6,r6,21956
  803180:	08049940 	call	804994 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803184:	080450c0 	call	80450c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803188:	01002034 	movhi	r4,128
  80318c:	21115c04 	addi	r4,r4,17776
  803190:	08051900 	call	805190 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803194:	d126a417 	ldw	r4,-25968(gp)
  803198:	d166a517 	ldw	r5,-25964(gp)
  80319c:	d1a6a617 	ldw	r6,-25960(gp)
  8031a0:	08001f00 	call	8001f0 <main>
  8031a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8031a8:	01000044 	movi	r4,1
  8031ac:	0802b340 	call	802b34 <close>
  exit (result);
  8031b0:	e13fff17 	ldw	r4,-4(fp)
  8031b4:	08051a40 	call	8051a4 <exit>

008031b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8031b8:	defffe04 	addi	sp,sp,-8
  8031bc:	df000115 	stw	fp,4(sp)
  8031c0:	df000104 	addi	fp,sp,4
  8031c4:	e13fff15 	stw	r4,-4(fp)
}
  8031c8:	e037883a 	mov	sp,fp
  8031cc:	df000017 	ldw	fp,0(sp)
  8031d0:	dec00104 	addi	sp,sp,4
  8031d4:	f800283a 	ret

008031d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8031d8:	defffe04 	addi	sp,sp,-8
  8031dc:	df000115 	stw	fp,4(sp)
  8031e0:	df000104 	addi	fp,sp,4
  8031e4:	e13fff15 	stw	r4,-4(fp)
}
  8031e8:	e037883a 	mov	sp,fp
  8031ec:	df000017 	ldw	fp,0(sp)
  8031f0:	dec00104 	addi	sp,sp,4
  8031f4:	f800283a 	ret

008031f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8031f8:	defff704 	addi	sp,sp,-36
  8031fc:	dfc00815 	stw	ra,32(sp)
  803200:	df000715 	stw	fp,28(sp)
  803204:	df000704 	addi	fp,sp,28
  803208:	e13ffb15 	stw	r4,-20(fp)
  80320c:	e17ffc15 	stw	r5,-16(fp)
  803210:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803214:	e0bffb17 	ldw	r2,-20(fp)
  803218:	1004803a 	cmplt	r2,r2,zero
  80321c:	1000081e 	bne	r2,zero,803240 <read+0x48>
  803220:	e0bffb17 	ldw	r2,-20(fp)
  803224:	10800324 	muli	r2,r2,12
  803228:	1007883a 	mov	r3,r2
  80322c:	00802034 	movhi	r2,128
  803230:	10978504 	addi	r2,r2,24084
  803234:	1887883a 	add	r3,r3,r2
  803238:	e0ffff15 	stw	r3,-4(fp)
  80323c:	00000106 	br	803244 <read+0x4c>
  803240:	e03fff15 	stw	zero,-4(fp)
  803244:	e0bfff17 	ldw	r2,-4(fp)
  803248:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80324c:	e0bffa17 	ldw	r2,-24(fp)
  803250:	1005003a 	cmpeq	r2,r2,zero
  803254:	1000241e 	bne	r2,zero,8032e8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803258:	e0bffa17 	ldw	r2,-24(fp)
  80325c:	10800217 	ldw	r2,8(r2)
  803260:	108000cc 	andi	r2,r2,3
  803264:	10800060 	cmpeqi	r2,r2,1
  803268:	10001a1e 	bne	r2,zero,8032d4 <read+0xdc>
  80326c:	e0bffa17 	ldw	r2,-24(fp)
  803270:	10800017 	ldw	r2,0(r2)
  803274:	10800517 	ldw	r2,20(r2)
  803278:	1005003a 	cmpeq	r2,r2,zero
  80327c:	1000151e 	bne	r2,zero,8032d4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803280:	e0bffa17 	ldw	r2,-24(fp)
  803284:	10800017 	ldw	r2,0(r2)
  803288:	10800517 	ldw	r2,20(r2)
  80328c:	e17ffc17 	ldw	r5,-16(fp)
  803290:	e1bffd17 	ldw	r6,-12(fp)
  803294:	e13ffa17 	ldw	r4,-24(fp)
  803298:	103ee83a 	callr	r2
  80329c:	e0bff915 	stw	r2,-28(fp)
  8032a0:	e0bff917 	ldw	r2,-28(fp)
  8032a4:	1004403a 	cmpge	r2,r2,zero
  8032a8:	1000071e 	bne	r2,zero,8032c8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  8032ac:	08033180 	call	803318 <alt_get_errno>
  8032b0:	e0fff917 	ldw	r3,-28(fp)
  8032b4:	00c7c83a 	sub	r3,zero,r3
  8032b8:	10c00015 	stw	r3,0(r2)
          return -1;
  8032bc:	00bfffc4 	movi	r2,-1
  8032c0:	e0bffe15 	stw	r2,-8(fp)
  8032c4:	00000e06 	br	803300 <read+0x108>
        }
        return rval;
  8032c8:	e0bff917 	ldw	r2,-28(fp)
  8032cc:	e0bffe15 	stw	r2,-8(fp)
  8032d0:	00000b06 	br	803300 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8032d4:	08033180 	call	803318 <alt_get_errno>
  8032d8:	1007883a 	mov	r3,r2
  8032dc:	00800344 	movi	r2,13
  8032e0:	18800015 	stw	r2,0(r3)
  8032e4:	00000406 	br	8032f8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8032e8:	08033180 	call	803318 <alt_get_errno>
  8032ec:	1007883a 	mov	r3,r2
  8032f0:	00801444 	movi	r2,81
  8032f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8032f8:	00bfffc4 	movi	r2,-1
  8032fc:	e0bffe15 	stw	r2,-8(fp)
  803300:	e0bffe17 	ldw	r2,-8(fp)
}
  803304:	e037883a 	mov	sp,fp
  803308:	dfc00117 	ldw	ra,4(sp)
  80330c:	df000017 	ldw	fp,0(sp)
  803310:	dec00204 	addi	sp,sp,8
  803314:	f800283a 	ret

00803318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803318:	defffd04 	addi	sp,sp,-12
  80331c:	dfc00215 	stw	ra,8(sp)
  803320:	df000115 	stw	fp,4(sp)
  803324:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803328:	00802034 	movhi	r2,128
  80332c:	109c0604 	addi	r2,r2,28696
  803330:	10800017 	ldw	r2,0(r2)
  803334:	1005003a 	cmpeq	r2,r2,zero
  803338:	1000061e 	bne	r2,zero,803354 <alt_get_errno+0x3c>
  80333c:	00802034 	movhi	r2,128
  803340:	109c0604 	addi	r2,r2,28696
  803344:	10800017 	ldw	r2,0(r2)
  803348:	103ee83a 	callr	r2
  80334c:	e0bfff15 	stw	r2,-4(fp)
  803350:	00000306 	br	803360 <alt_get_errno+0x48>
  803354:	00802074 	movhi	r2,129
  803358:	10a2a004 	addi	r2,r2,-30080
  80335c:	e0bfff15 	stw	r2,-4(fp)
  803360:	e0bfff17 	ldw	r2,-4(fp)
}
  803364:	e037883a 	mov	sp,fp
  803368:	dfc00117 	ldw	ra,4(sp)
  80336c:	df000017 	ldw	fp,0(sp)
  803370:	dec00204 	addi	sp,sp,8
  803374:	f800283a 	ret

00803378 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803378:	defffe04 	addi	sp,sp,-8
  80337c:	df000115 	stw	fp,4(sp)
  803380:	df000104 	addi	fp,sp,4
  803384:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803388:	e0bfff17 	ldw	r2,-4(fp)
  80338c:	108000d0 	cmplti	r2,r2,3
  803390:	10000d1e 	bne	r2,zero,8033c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803394:	e0bfff17 	ldw	r2,-4(fp)
  803398:	00c02034 	movhi	r3,128
  80339c:	18d78504 	addi	r3,r3,24084
  8033a0:	10800324 	muli	r2,r2,12
  8033a4:	10c5883a 	add	r2,r2,r3
  8033a8:	10800204 	addi	r2,r2,8
  8033ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8033b0:	e0bfff17 	ldw	r2,-4(fp)
  8033b4:	00c02034 	movhi	r3,128
  8033b8:	18d78504 	addi	r3,r3,24084
  8033bc:	10800324 	muli	r2,r2,12
  8033c0:	10c5883a 	add	r2,r2,r3
  8033c4:	10000015 	stw	zero,0(r2)
  }
}
  8033c8:	e037883a 	mov	sp,fp
  8033cc:	df000017 	ldw	fp,0(sp)
  8033d0:	dec00104 	addi	sp,sp,4
  8033d4:	f800283a 	ret

008033d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8033d8:	defff804 	addi	sp,sp,-32
  8033dc:	df000715 	stw	fp,28(sp)
  8033e0:	df000704 	addi	fp,sp,28
  8033e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8033e8:	0005303a 	rdctl	r2,status
  8033ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8033f0:	e0fffb17 	ldw	r3,-20(fp)
  8033f4:	00bfff84 	movi	r2,-2
  8033f8:	1884703a 	and	r2,r3,r2
  8033fc:	1001703a 	wrctl	status,r2
  
  return context;
  803400:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803404:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803408:	d0a00a17 	ldw	r2,-32728(gp)
  80340c:	10c000c4 	addi	r3,r2,3
  803410:	00bfff04 	movi	r2,-4
  803414:	1884703a 	and	r2,r3,r2
  803418:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80341c:	d0e00a17 	ldw	r3,-32728(gp)
  803420:	e0bffe17 	ldw	r2,-8(fp)
  803424:	1887883a 	add	r3,r3,r2
  803428:	00804034 	movhi	r2,256
  80342c:	10800004 	addi	r2,r2,0
  803430:	10c0072e 	bgeu	r2,r3,803450 <sbrk+0x78>
  803434:	e0bffd17 	ldw	r2,-12(fp)
  803438:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80343c:	e0bffa17 	ldw	r2,-24(fp)
  803440:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803444:	00bfffc4 	movi	r2,-1
  803448:	e0bfff15 	stw	r2,-4(fp)
  80344c:	00000c06 	br	803480 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  803450:	d0a00a17 	ldw	r2,-32728(gp)
  803454:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  803458:	d0e00a17 	ldw	r3,-32728(gp)
  80345c:	e0bffe17 	ldw	r2,-8(fp)
  803460:	1885883a 	add	r2,r3,r2
  803464:	d0a00a15 	stw	r2,-32728(gp)
  803468:	e0bffd17 	ldw	r2,-12(fp)
  80346c:	e0bff915 	stw	r2,-28(fp)
  803470:	e0bff917 	ldw	r2,-28(fp)
  803474:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803478:	e0bffc17 	ldw	r2,-16(fp)
  80347c:	e0bfff15 	stw	r2,-4(fp)
  803480:	e0bfff17 	ldw	r2,-4(fp)
} 
  803484:	e037883a 	mov	sp,fp
  803488:	df000017 	ldw	fp,0(sp)
  80348c:	dec00104 	addi	sp,sp,4
  803490:	f800283a 	ret

00803494 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803494:	defff704 	addi	sp,sp,-36
  803498:	dfc00815 	stw	ra,32(sp)
  80349c:	df000715 	stw	fp,28(sp)
  8034a0:	df000704 	addi	fp,sp,28
  8034a4:	e13ffb15 	stw	r4,-20(fp)
  8034a8:	e17ffc15 	stw	r5,-16(fp)
  8034ac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8034b0:	e0bffb17 	ldw	r2,-20(fp)
  8034b4:	1004803a 	cmplt	r2,r2,zero
  8034b8:	1000081e 	bne	r2,zero,8034dc <write+0x48>
  8034bc:	e0bffb17 	ldw	r2,-20(fp)
  8034c0:	10800324 	muli	r2,r2,12
  8034c4:	1007883a 	mov	r3,r2
  8034c8:	00802034 	movhi	r2,128
  8034cc:	10978504 	addi	r2,r2,24084
  8034d0:	1887883a 	add	r3,r3,r2
  8034d4:	e0ffff15 	stw	r3,-4(fp)
  8034d8:	00000106 	br	8034e0 <write+0x4c>
  8034dc:	e03fff15 	stw	zero,-4(fp)
  8034e0:	e0bfff17 	ldw	r2,-4(fp)
  8034e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8034e8:	e0bffa17 	ldw	r2,-24(fp)
  8034ec:	1005003a 	cmpeq	r2,r2,zero
  8034f0:	1000241e 	bne	r2,zero,803584 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8034f4:	e0bffa17 	ldw	r2,-24(fp)
  8034f8:	10800217 	ldw	r2,8(r2)
  8034fc:	108000cc 	andi	r2,r2,3
  803500:	1005003a 	cmpeq	r2,r2,zero
  803504:	10001a1e 	bne	r2,zero,803570 <write+0xdc>
  803508:	e0bffa17 	ldw	r2,-24(fp)
  80350c:	10800017 	ldw	r2,0(r2)
  803510:	10800617 	ldw	r2,24(r2)
  803514:	1005003a 	cmpeq	r2,r2,zero
  803518:	1000151e 	bne	r2,zero,803570 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80351c:	e0bffa17 	ldw	r2,-24(fp)
  803520:	10800017 	ldw	r2,0(r2)
  803524:	10800617 	ldw	r2,24(r2)
  803528:	e17ffc17 	ldw	r5,-16(fp)
  80352c:	e1bffd17 	ldw	r6,-12(fp)
  803530:	e13ffa17 	ldw	r4,-24(fp)
  803534:	103ee83a 	callr	r2
  803538:	e0bff915 	stw	r2,-28(fp)
  80353c:	e0bff917 	ldw	r2,-28(fp)
  803540:	1004403a 	cmpge	r2,r2,zero
  803544:	1000071e 	bne	r2,zero,803564 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  803548:	08035b40 	call	8035b4 <alt_get_errno>
  80354c:	e0fff917 	ldw	r3,-28(fp)
  803550:	00c7c83a 	sub	r3,zero,r3
  803554:	10c00015 	stw	r3,0(r2)
        return -1;
  803558:	00bfffc4 	movi	r2,-1
  80355c:	e0bffe15 	stw	r2,-8(fp)
  803560:	00000e06 	br	80359c <write+0x108>
      }
      return rval;
  803564:	e0bff917 	ldw	r2,-28(fp)
  803568:	e0bffe15 	stw	r2,-8(fp)
  80356c:	00000b06 	br	80359c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803570:	08035b40 	call	8035b4 <alt_get_errno>
  803574:	1007883a 	mov	r3,r2
  803578:	00800344 	movi	r2,13
  80357c:	18800015 	stw	r2,0(r3)
  803580:	00000406 	br	803594 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803584:	08035b40 	call	8035b4 <alt_get_errno>
  803588:	1007883a 	mov	r3,r2
  80358c:	00801444 	movi	r2,81
  803590:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803594:	00bfffc4 	movi	r2,-1
  803598:	e0bffe15 	stw	r2,-8(fp)
  80359c:	e0bffe17 	ldw	r2,-8(fp)
}
  8035a0:	e037883a 	mov	sp,fp
  8035a4:	dfc00117 	ldw	ra,4(sp)
  8035a8:	df000017 	ldw	fp,0(sp)
  8035ac:	dec00204 	addi	sp,sp,8
  8035b0:	f800283a 	ret

008035b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8035b4:	defffd04 	addi	sp,sp,-12
  8035b8:	dfc00215 	stw	ra,8(sp)
  8035bc:	df000115 	stw	fp,4(sp)
  8035c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8035c4:	00802034 	movhi	r2,128
  8035c8:	109c0604 	addi	r2,r2,28696
  8035cc:	10800017 	ldw	r2,0(r2)
  8035d0:	1005003a 	cmpeq	r2,r2,zero
  8035d4:	1000061e 	bne	r2,zero,8035f0 <alt_get_errno+0x3c>
  8035d8:	00802034 	movhi	r2,128
  8035dc:	109c0604 	addi	r2,r2,28696
  8035e0:	10800017 	ldw	r2,0(r2)
  8035e4:	103ee83a 	callr	r2
  8035e8:	e0bfff15 	stw	r2,-4(fp)
  8035ec:	00000306 	br	8035fc <alt_get_errno+0x48>
  8035f0:	00802074 	movhi	r2,129
  8035f4:	10a2a004 	addi	r2,r2,-30080
  8035f8:	e0bfff15 	stw	r2,-4(fp)
  8035fc:	e0bfff17 	ldw	r2,-4(fp)
}
  803600:	e037883a 	mov	sp,fp
  803604:	dfc00117 	ldw	ra,4(sp)
  803608:	df000017 	ldw	fp,0(sp)
  80360c:	dec00204 	addi	sp,sp,8
  803610:	f800283a 	ret

00803614 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803614:	defffd04 	addi	sp,sp,-12
  803618:	dfc00215 	stw	ra,8(sp)
  80361c:	df000115 	stw	fp,4(sp)
  803620:	df000104 	addi	fp,sp,4
  803624:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  803628:	0804e740 	call	804e74 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80362c:	00800044 	movi	r2,1
  803630:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  803634:	e037883a 	mov	sp,fp
  803638:	dfc00117 	ldw	ra,4(sp)
  80363c:	df000017 	ldw	fp,0(sp)
  803640:	dec00204 	addi	sp,sp,8
  803644:	f800283a 	ret

00803648 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  803648:	defffe04 	addi	sp,sp,-8
  80364c:	dfc00115 	stw	ra,4(sp)
  803650:	df000015 	stw	fp,0(sp)
  803654:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  803658:	01004034 	movhi	r4,256
  80365c:	21040004 	addi	r4,r4,4096
  803660:	000b883a 	mov	r5,zero
  803664:	01800044 	movi	r6,1
  803668:	01c0fa04 	movi	r7,1000
  80366c:	08041f80 	call	8041f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  803670:	01002034 	movhi	r4,128
  803674:	2117ef04 	addi	r4,r4,24508
  803678:	000b883a 	mov	r5,zero
  80367c:	01800404 	movi	r6,16
  803680:	08038240 	call	803824 <altera_avalon_jtag_uart_init>
  803684:	01002034 	movhi	r4,128
  803688:	2117e504 	addi	r4,r4,24468
  80368c:	08036a40 	call	8036a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  803690:	e037883a 	mov	sp,fp
  803694:	dfc00117 	ldw	ra,4(sp)
  803698:	df000017 	ldw	fp,0(sp)
  80369c:	dec00204 	addi	sp,sp,8
  8036a0:	f800283a 	ret

008036a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8036a4:	defffd04 	addi	sp,sp,-12
  8036a8:	dfc00215 	stw	ra,8(sp)
  8036ac:	df000115 	stw	fp,4(sp)
  8036b0:	df000104 	addi	fp,sp,4
  8036b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8036b8:	e13fff17 	ldw	r4,-4(fp)
  8036bc:	01402034 	movhi	r5,128
  8036c0:	295c0304 	addi	r5,r5,28684
  8036c4:	08043f80 	call	8043f8 <alt_dev_llist_insert>
}
  8036c8:	e037883a 	mov	sp,fp
  8036cc:	dfc00117 	ldw	ra,4(sp)
  8036d0:	df000017 	ldw	fp,0(sp)
  8036d4:	dec00204 	addi	sp,sp,8
  8036d8:	f800283a 	ret

008036dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8036dc:	defffa04 	addi	sp,sp,-24
  8036e0:	dfc00515 	stw	ra,20(sp)
  8036e4:	df000415 	stw	fp,16(sp)
  8036e8:	df000404 	addi	fp,sp,16
  8036ec:	e13ffd15 	stw	r4,-12(fp)
  8036f0:	e17ffe15 	stw	r5,-8(fp)
  8036f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8036f8:	e0bffd17 	ldw	r2,-12(fp)
  8036fc:	10800017 	ldw	r2,0(r2)
  803700:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803704:	e0bffc17 	ldw	r2,-16(fp)
  803708:	11000a04 	addi	r4,r2,40
  80370c:	e0bffd17 	ldw	r2,-12(fp)
  803710:	11c00217 	ldw	r7,8(r2)
  803714:	e17ffe17 	ldw	r5,-8(fp)
  803718:	e1bfff17 	ldw	r6,-4(fp)
  80371c:	0803d240 	call	803d24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803720:	e037883a 	mov	sp,fp
  803724:	dfc00117 	ldw	ra,4(sp)
  803728:	df000017 	ldw	fp,0(sp)
  80372c:	dec00204 	addi	sp,sp,8
  803730:	f800283a 	ret

00803734 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803734:	defffa04 	addi	sp,sp,-24
  803738:	dfc00515 	stw	ra,20(sp)
  80373c:	df000415 	stw	fp,16(sp)
  803740:	df000404 	addi	fp,sp,16
  803744:	e13ffd15 	stw	r4,-12(fp)
  803748:	e17ffe15 	stw	r5,-8(fp)
  80374c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803750:	e0bffd17 	ldw	r2,-12(fp)
  803754:	10800017 	ldw	r2,0(r2)
  803758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80375c:	e0bffc17 	ldw	r2,-16(fp)
  803760:	11000a04 	addi	r4,r2,40
  803764:	e0bffd17 	ldw	r2,-12(fp)
  803768:	11c00217 	ldw	r7,8(r2)
  80376c:	e17ffe17 	ldw	r5,-8(fp)
  803770:	e1bfff17 	ldw	r6,-4(fp)
  803774:	0803f480 	call	803f48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803778:	e037883a 	mov	sp,fp
  80377c:	dfc00117 	ldw	ra,4(sp)
  803780:	df000017 	ldw	fp,0(sp)
  803784:	dec00204 	addi	sp,sp,8
  803788:	f800283a 	ret

0080378c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80378c:	defffc04 	addi	sp,sp,-16
  803790:	dfc00315 	stw	ra,12(sp)
  803794:	df000215 	stw	fp,8(sp)
  803798:	df000204 	addi	fp,sp,8
  80379c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8037a0:	e0bfff17 	ldw	r2,-4(fp)
  8037a4:	10800017 	ldw	r2,0(r2)
  8037a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8037ac:	e0bffe17 	ldw	r2,-8(fp)
  8037b0:	11000a04 	addi	r4,r2,40
  8037b4:	e0bfff17 	ldw	r2,-4(fp)
  8037b8:	11400217 	ldw	r5,8(r2)
  8037bc:	0803bbc0 	call	803bbc <altera_avalon_jtag_uart_close>
}
  8037c0:	e037883a 	mov	sp,fp
  8037c4:	dfc00117 	ldw	ra,4(sp)
  8037c8:	df000017 	ldw	fp,0(sp)
  8037cc:	dec00204 	addi	sp,sp,8
  8037d0:	f800283a 	ret

008037d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8037d4:	defffa04 	addi	sp,sp,-24
  8037d8:	dfc00515 	stw	ra,20(sp)
  8037dc:	df000415 	stw	fp,16(sp)
  8037e0:	df000404 	addi	fp,sp,16
  8037e4:	e13ffd15 	stw	r4,-12(fp)
  8037e8:	e17ffe15 	stw	r5,-8(fp)
  8037ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8037f0:	e0bffd17 	ldw	r2,-12(fp)
  8037f4:	10800017 	ldw	r2,0(r2)
  8037f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8037fc:	e0bffc17 	ldw	r2,-16(fp)
  803800:	11000a04 	addi	r4,r2,40
  803804:	e17ffe17 	ldw	r5,-8(fp)
  803808:	e1bfff17 	ldw	r6,-4(fp)
  80380c:	0803c300 	call	803c30 <altera_avalon_jtag_uart_ioctl>
}
  803810:	e037883a 	mov	sp,fp
  803814:	dfc00117 	ldw	ra,4(sp)
  803818:	df000017 	ldw	fp,0(sp)
  80381c:	dec00204 	addi	sp,sp,8
  803820:	f800283a 	ret

00803824 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803824:	defffa04 	addi	sp,sp,-24
  803828:	dfc00515 	stw	ra,20(sp)
  80382c:	df000415 	stw	fp,16(sp)
  803830:	df000404 	addi	fp,sp,16
  803834:	e13ffd15 	stw	r4,-12(fp)
  803838:	e17ffe15 	stw	r5,-8(fp)
  80383c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803840:	e0fffd17 	ldw	r3,-12(fp)
  803844:	00800044 	movi	r2,1
  803848:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80384c:	e0bffd17 	ldw	r2,-12(fp)
  803850:	10800017 	ldw	r2,0(r2)
  803854:	11000104 	addi	r4,r2,4
  803858:	e0bffd17 	ldw	r2,-12(fp)
  80385c:	10800817 	ldw	r2,32(r2)
  803860:	1007883a 	mov	r3,r2
  803864:	2005883a 	mov	r2,r4
  803868:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80386c:	e13ffe17 	ldw	r4,-8(fp)
  803870:	e17fff17 	ldw	r5,-4(fp)
  803874:	d8000015 	stw	zero,0(sp)
  803878:	01802034 	movhi	r6,128
  80387c:	318e3904 	addi	r6,r6,14564
  803880:	e1fffd17 	ldw	r7,-12(fp)
  803884:	08046040 	call	804604 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  803888:	e0bffd17 	ldw	r2,-12(fp)
  80388c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  803890:	e0bffd17 	ldw	r2,-12(fp)
  803894:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803898:	00802074 	movhi	r2,129
  80389c:	10a2a504 	addi	r2,r2,-30060
  8038a0:	10800017 	ldw	r2,0(r2)
  8038a4:	100b883a 	mov	r5,r2
  8038a8:	01802034 	movhi	r6,128
  8038ac:	318ec304 	addi	r6,r6,15116
  8038b0:	e1fffd17 	ldw	r7,-12(fp)
  8038b4:	08042880 	call	804288 <alt_alarm_start>
  8038b8:	1004403a 	cmpge	r2,r2,zero
  8038bc:	1000041e 	bne	r2,zero,8038d0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8038c0:	e0fffd17 	ldw	r3,-12(fp)
  8038c4:	00a00034 	movhi	r2,32768
  8038c8:	10bfffc4 	addi	r2,r2,-1
  8038cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8038d0:	e037883a 	mov	sp,fp
  8038d4:	dfc00117 	ldw	ra,4(sp)
  8038d8:	df000017 	ldw	fp,0(sp)
  8038dc:	dec00204 	addi	sp,sp,8
  8038e0:	f800283a 	ret

008038e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8038e4:	defff804 	addi	sp,sp,-32
  8038e8:	df000715 	stw	fp,28(sp)
  8038ec:	df000704 	addi	fp,sp,28
  8038f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8038f4:	e0bfff17 	ldw	r2,-4(fp)
  8038f8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  8038fc:	e0bffe17 	ldw	r2,-8(fp)
  803900:	10800017 	ldw	r2,0(r2)
  803904:	e0bffd15 	stw	r2,-12(fp)
  803908:	00000006 	br	80390c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80390c:	e0bffd17 	ldw	r2,-12(fp)
  803910:	10800104 	addi	r2,r2,4
  803914:	10800037 	ldwio	r2,0(r2)
  803918:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80391c:	e0bffc17 	ldw	r2,-16(fp)
  803920:	1080c00c 	andi	r2,r2,768
  803924:	1005003a 	cmpeq	r2,r2,zero
  803928:	1000741e 	bne	r2,zero,803afc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80392c:	e0bffc17 	ldw	r2,-16(fp)
  803930:	1080400c 	andi	r2,r2,256
  803934:	1005003a 	cmpeq	r2,r2,zero
  803938:	1000351e 	bne	r2,zero,803a10 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80393c:	00800074 	movhi	r2,1
  803940:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803944:	e0bffe17 	ldw	r2,-8(fp)
  803948:	10800a17 	ldw	r2,40(r2)
  80394c:	10800044 	addi	r2,r2,1
  803950:	1081ffcc 	andi	r2,r2,2047
  803954:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  803958:	e0bffe17 	ldw	r2,-8(fp)
  80395c:	10c00b17 	ldw	r3,44(r2)
  803960:	e0bffa17 	ldw	r2,-24(fp)
  803964:	18801626 	beq	r3,r2,8039c0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803968:	e0bffd17 	ldw	r2,-12(fp)
  80396c:	10800037 	ldwio	r2,0(r2)
  803970:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  803974:	e0bffb17 	ldw	r2,-20(fp)
  803978:	10a0000c 	andi	r2,r2,32768
  80397c:	1005003a 	cmpeq	r2,r2,zero
  803980:	10000f1e 	bne	r2,zero,8039c0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803984:	e0bffe17 	ldw	r2,-8(fp)
  803988:	10c00a17 	ldw	r3,40(r2)
  80398c:	e0bffb17 	ldw	r2,-20(fp)
  803990:	1009883a 	mov	r4,r2
  803994:	e0bffe17 	ldw	r2,-8(fp)
  803998:	1885883a 	add	r2,r3,r2
  80399c:	10800e04 	addi	r2,r2,56
  8039a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8039a4:	e0bffe17 	ldw	r2,-8(fp)
  8039a8:	10800a17 	ldw	r2,40(r2)
  8039ac:	10800044 	addi	r2,r2,1
  8039b0:	10c1ffcc 	andi	r3,r2,2047
  8039b4:	e0bffe17 	ldw	r2,-8(fp)
  8039b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8039bc:	003fe106 	br	803944 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8039c0:	e0bffb17 	ldw	r2,-20(fp)
  8039c4:	10bfffec 	andhi	r2,r2,65535
  8039c8:	1005003a 	cmpeq	r2,r2,zero
  8039cc:	1000101e 	bne	r2,zero,803a10 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8039d0:	e0bffe17 	ldw	r2,-8(fp)
  8039d4:	10c00817 	ldw	r3,32(r2)
  8039d8:	00bfff84 	movi	r2,-2
  8039dc:	1886703a 	and	r3,r3,r2
  8039e0:	e0bffe17 	ldw	r2,-8(fp)
  8039e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8039e8:	e0bffd17 	ldw	r2,-12(fp)
  8039ec:	11000104 	addi	r4,r2,4
  8039f0:	e0bffe17 	ldw	r2,-8(fp)
  8039f4:	10800817 	ldw	r2,32(r2)
  8039f8:	1007883a 	mov	r3,r2
  8039fc:	2005883a 	mov	r2,r4
  803a00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803a04:	e0bffd17 	ldw	r2,-12(fp)
  803a08:	10800104 	addi	r2,r2,4
  803a0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  803a10:	e0bffc17 	ldw	r2,-16(fp)
  803a14:	1080800c 	andi	r2,r2,512
  803a18:	1005003a 	cmpeq	r2,r2,zero
  803a1c:	103fbb1e 	bne	r2,zero,80390c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  803a20:	e0bffc17 	ldw	r2,-16(fp)
  803a24:	10bfffec 	andhi	r2,r2,65535
  803a28:	1004d43a 	srli	r2,r2,16
  803a2c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  803a30:	00001506 	br	803a88 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  803a34:	e13ffd17 	ldw	r4,-12(fp)
  803a38:	e0bffe17 	ldw	r2,-8(fp)
  803a3c:	10c00d17 	ldw	r3,52(r2)
  803a40:	e0bffe17 	ldw	r2,-8(fp)
  803a44:	1885883a 	add	r2,r3,r2
  803a48:	10820e04 	addi	r2,r2,2104
  803a4c:	10800003 	ldbu	r2,0(r2)
  803a50:	10c03fcc 	andi	r3,r2,255
  803a54:	18c0201c 	xori	r3,r3,128
  803a58:	18ffe004 	addi	r3,r3,-128
  803a5c:	2005883a 	mov	r2,r4
  803a60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803a64:	e0bffe17 	ldw	r2,-8(fp)
  803a68:	10800d17 	ldw	r2,52(r2)
  803a6c:	10800044 	addi	r2,r2,1
  803a70:	10c1ffcc 	andi	r3,r2,2047
  803a74:	e0bffe17 	ldw	r2,-8(fp)
  803a78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  803a7c:	e0bff917 	ldw	r2,-28(fp)
  803a80:	10bfffc4 	addi	r2,r2,-1
  803a84:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  803a88:	e0bff917 	ldw	r2,-28(fp)
  803a8c:	1005003a 	cmpeq	r2,r2,zero
  803a90:	1000051e 	bne	r2,zero,803aa8 <altera_avalon_jtag_uart_irq+0x1c4>
  803a94:	e0bffe17 	ldw	r2,-8(fp)
  803a98:	10c00d17 	ldw	r3,52(r2)
  803a9c:	e0bffe17 	ldw	r2,-8(fp)
  803aa0:	10800c17 	ldw	r2,48(r2)
  803aa4:	18bfe31e 	bne	r3,r2,803a34 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  803aa8:	e0bff917 	ldw	r2,-28(fp)
  803aac:	1005003a 	cmpeq	r2,r2,zero
  803ab0:	103f961e 	bne	r2,zero,80390c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  803ab4:	e0bffe17 	ldw	r2,-8(fp)
  803ab8:	10c00817 	ldw	r3,32(r2)
  803abc:	00bfff44 	movi	r2,-3
  803ac0:	1886703a 	and	r3,r3,r2
  803ac4:	e0bffe17 	ldw	r2,-8(fp)
  803ac8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803acc:	e0bffe17 	ldw	r2,-8(fp)
  803ad0:	10800017 	ldw	r2,0(r2)
  803ad4:	11000104 	addi	r4,r2,4
  803ad8:	e0bffe17 	ldw	r2,-8(fp)
  803adc:	10800817 	ldw	r2,32(r2)
  803ae0:	1007883a 	mov	r3,r2
  803ae4:	2005883a 	mov	r2,r4
  803ae8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803aec:	e0bffd17 	ldw	r2,-12(fp)
  803af0:	10800104 	addi	r2,r2,4
  803af4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  803af8:	003f8406 	br	80390c <altera_avalon_jtag_uart_irq+0x28>
}
  803afc:	e037883a 	mov	sp,fp
  803b00:	df000017 	ldw	fp,0(sp)
  803b04:	dec00104 	addi	sp,sp,4
  803b08:	f800283a 	ret

00803b0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  803b0c:	defffc04 	addi	sp,sp,-16
  803b10:	df000315 	stw	fp,12(sp)
  803b14:	df000304 	addi	fp,sp,12
  803b18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  803b1c:	e0bfff17 	ldw	r2,-4(fp)
  803b20:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  803b24:	e0bffe17 	ldw	r2,-8(fp)
  803b28:	10800017 	ldw	r2,0(r2)
  803b2c:	10800104 	addi	r2,r2,4
  803b30:	10800037 	ldwio	r2,0(r2)
  803b34:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  803b38:	e0bffd17 	ldw	r2,-12(fp)
  803b3c:	1081000c 	andi	r2,r2,1024
  803b40:	1005003a 	cmpeq	r2,r2,zero
  803b44:	10000c1e 	bne	r2,zero,803b78 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  803b48:	e0bffe17 	ldw	r2,-8(fp)
  803b4c:	10800017 	ldw	r2,0(r2)
  803b50:	11000104 	addi	r4,r2,4
  803b54:	e0bffe17 	ldw	r2,-8(fp)
  803b58:	10800817 	ldw	r2,32(r2)
  803b5c:	10810014 	ori	r2,r2,1024
  803b60:	1007883a 	mov	r3,r2
  803b64:	2005883a 	mov	r2,r4
  803b68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  803b6c:	e0bffe17 	ldw	r2,-8(fp)
  803b70:	10000915 	stw	zero,36(r2)
  803b74:	00000a06 	br	803ba0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  803b78:	e0bffe17 	ldw	r2,-8(fp)
  803b7c:	10c00917 	ldw	r3,36(r2)
  803b80:	00a00034 	movhi	r2,32768
  803b84:	10bfff04 	addi	r2,r2,-4
  803b88:	10c00536 	bltu	r2,r3,803ba0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  803b8c:	e0bffe17 	ldw	r2,-8(fp)
  803b90:	10800917 	ldw	r2,36(r2)
  803b94:	10c00044 	addi	r3,r2,1
  803b98:	e0bffe17 	ldw	r2,-8(fp)
  803b9c:	10c00915 	stw	r3,36(r2)
  803ba0:	00802074 	movhi	r2,129
  803ba4:	10a2a504 	addi	r2,r2,-30060
  803ba8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  803bac:	e037883a 	mov	sp,fp
  803bb0:	df000017 	ldw	fp,0(sp)
  803bb4:	dec00104 	addi	sp,sp,4
  803bb8:	f800283a 	ret

00803bbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  803bbc:	defffc04 	addi	sp,sp,-16
  803bc0:	df000315 	stw	fp,12(sp)
  803bc4:	df000304 	addi	fp,sp,12
  803bc8:	e13ffd15 	stw	r4,-12(fp)
  803bcc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  803bd0:	00000706 	br	803bf0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  803bd4:	e0bffe17 	ldw	r2,-8(fp)
  803bd8:	1090000c 	andi	r2,r2,16384
  803bdc:	1005003a 	cmpeq	r2,r2,zero
  803be0:	1000031e 	bne	r2,zero,803bf0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  803be4:	00bffd44 	movi	r2,-11
  803be8:	e0bfff15 	stw	r2,-4(fp)
  803bec:	00000b06 	br	803c1c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  803bf0:	e0bffd17 	ldw	r2,-12(fp)
  803bf4:	10c00d17 	ldw	r3,52(r2)
  803bf8:	e0bffd17 	ldw	r2,-12(fp)
  803bfc:	10800c17 	ldw	r2,48(r2)
  803c00:	18800526 	beq	r3,r2,803c18 <altera_avalon_jtag_uart_close+0x5c>
  803c04:	e0bffd17 	ldw	r2,-12(fp)
  803c08:	10c00917 	ldw	r3,36(r2)
  803c0c:	e0bffd17 	ldw	r2,-12(fp)
  803c10:	10800117 	ldw	r2,4(r2)
  803c14:	18bfef36 	bltu	r3,r2,803bd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  803c18:	e03fff15 	stw	zero,-4(fp)
  803c1c:	e0bfff17 	ldw	r2,-4(fp)
}
  803c20:	e037883a 	mov	sp,fp
  803c24:	df000017 	ldw	fp,0(sp)
  803c28:	dec00104 	addi	sp,sp,4
  803c2c:	f800283a 	ret

00803c30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  803c30:	defff804 	addi	sp,sp,-32
  803c34:	df000715 	stw	fp,28(sp)
  803c38:	df000704 	addi	fp,sp,28
  803c3c:	e13ffb15 	stw	r4,-20(fp)
  803c40:	e17ffc15 	stw	r5,-16(fp)
  803c44:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  803c48:	00bff9c4 	movi	r2,-25
  803c4c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  803c50:	e0bffc17 	ldw	r2,-16(fp)
  803c54:	e0bfff15 	stw	r2,-4(fp)
  803c58:	e0ffff17 	ldw	r3,-4(fp)
  803c5c:	189a8060 	cmpeqi	r2,r3,27137
  803c60:	1000041e 	bne	r2,zero,803c74 <altera_avalon_jtag_uart_ioctl+0x44>
  803c64:	e0ffff17 	ldw	r3,-4(fp)
  803c68:	189a80a0 	cmpeqi	r2,r3,27138
  803c6c:	10001b1e 	bne	r2,zero,803cdc <altera_avalon_jtag_uart_ioctl+0xac>
  803c70:	00002706 	br	803d10 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  803c74:	e0bffb17 	ldw	r2,-20(fp)
  803c78:	10c00117 	ldw	r3,4(r2)
  803c7c:	00a00034 	movhi	r2,32768
  803c80:	10bfffc4 	addi	r2,r2,-1
  803c84:	18802226 	beq	r3,r2,803d10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  803c88:	e0bffd17 	ldw	r2,-12(fp)
  803c8c:	10800017 	ldw	r2,0(r2)
  803c90:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  803c94:	e0bff917 	ldw	r2,-28(fp)
  803c98:	10800090 	cmplti	r2,r2,2
  803c9c:	1000071e 	bne	r2,zero,803cbc <altera_avalon_jtag_uart_ioctl+0x8c>
  803ca0:	e0fff917 	ldw	r3,-28(fp)
  803ca4:	00a00034 	movhi	r2,32768
  803ca8:	10bfffc4 	addi	r2,r2,-1
  803cac:	18800326 	beq	r3,r2,803cbc <altera_avalon_jtag_uart_ioctl+0x8c>
  803cb0:	e0bff917 	ldw	r2,-28(fp)
  803cb4:	e0bffe15 	stw	r2,-8(fp)
  803cb8:	00000306 	br	803cc8 <altera_avalon_jtag_uart_ioctl+0x98>
  803cbc:	00e00034 	movhi	r3,32768
  803cc0:	18ffff84 	addi	r3,r3,-2
  803cc4:	e0fffe15 	stw	r3,-8(fp)
  803cc8:	e0bffb17 	ldw	r2,-20(fp)
  803ccc:	e0fffe17 	ldw	r3,-8(fp)
  803cd0:	10c00115 	stw	r3,4(r2)
      rc = 0;
  803cd4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  803cd8:	00000d06 	br	803d10 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  803cdc:	e0bffb17 	ldw	r2,-20(fp)
  803ce0:	10c00117 	ldw	r3,4(r2)
  803ce4:	00a00034 	movhi	r2,32768
  803ce8:	10bfffc4 	addi	r2,r2,-1
  803cec:	18800826 	beq	r3,r2,803d10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  803cf0:	e13ffd17 	ldw	r4,-12(fp)
  803cf4:	e0bffb17 	ldw	r2,-20(fp)
  803cf8:	10c00917 	ldw	r3,36(r2)
  803cfc:	e0bffb17 	ldw	r2,-20(fp)
  803d00:	10800117 	ldw	r2,4(r2)
  803d04:	1885803a 	cmpltu	r2,r3,r2
  803d08:	20800015 	stw	r2,0(r4)
      rc = 0;
  803d0c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  803d10:	e0bffa17 	ldw	r2,-24(fp)
}
  803d14:	e037883a 	mov	sp,fp
  803d18:	df000017 	ldw	fp,0(sp)
  803d1c:	dec00104 	addi	sp,sp,4
  803d20:	f800283a 	ret

00803d24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  803d24:	defff204 	addi	sp,sp,-56
  803d28:	dfc00d15 	stw	ra,52(sp)
  803d2c:	df000c15 	stw	fp,48(sp)
  803d30:	df000c04 	addi	fp,sp,48
  803d34:	e13ffb15 	stw	r4,-20(fp)
  803d38:	e17ffc15 	stw	r5,-16(fp)
  803d3c:	e1bffd15 	stw	r6,-12(fp)
  803d40:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  803d44:	e0bffc17 	ldw	r2,-16(fp)
  803d48:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  803d4c:	00004806 	br	803e70 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  803d50:	e0bffb17 	ldw	r2,-20(fp)
  803d54:	10800a17 	ldw	r2,40(r2)
  803d58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  803d5c:	e0bffb17 	ldw	r2,-20(fp)
  803d60:	10800b17 	ldw	r2,44(r2)
  803d64:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  803d68:	e0fff717 	ldw	r3,-36(fp)
  803d6c:	e0bff617 	ldw	r2,-40(fp)
  803d70:	18800536 	bltu	r3,r2,803d88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  803d74:	e0bff717 	ldw	r2,-36(fp)
  803d78:	e0fff617 	ldw	r3,-40(fp)
  803d7c:	10c5c83a 	sub	r2,r2,r3
  803d80:	e0bff815 	stw	r2,-32(fp)
  803d84:	00000406 	br	803d98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  803d88:	00820004 	movi	r2,2048
  803d8c:	e0fff617 	ldw	r3,-40(fp)
  803d90:	10c5c83a 	sub	r2,r2,r3
  803d94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  803d98:	e0bff817 	ldw	r2,-32(fp)
  803d9c:	1005003a 	cmpeq	r2,r2,zero
  803da0:	10001f1e 	bne	r2,zero,803e20 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  803da4:	e0fffd17 	ldw	r3,-12(fp)
  803da8:	e0bff817 	ldw	r2,-32(fp)
  803dac:	1880022e 	bgeu	r3,r2,803db8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  803db0:	e0bffd17 	ldw	r2,-12(fp)
  803db4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  803db8:	e0bffb17 	ldw	r2,-20(fp)
  803dbc:	10c00e04 	addi	r3,r2,56
  803dc0:	e0bff617 	ldw	r2,-40(fp)
  803dc4:	1887883a 	add	r3,r3,r2
  803dc8:	e0bffa17 	ldw	r2,-24(fp)
  803dcc:	1009883a 	mov	r4,r2
  803dd0:	180b883a 	mov	r5,r3
  803dd4:	e1bff817 	ldw	r6,-32(fp)
  803dd8:	080100c0 	call	80100c <memcpy>
      ptr   += n;
  803ddc:	e0fff817 	ldw	r3,-32(fp)
  803de0:	e0bffa17 	ldw	r2,-24(fp)
  803de4:	10c5883a 	add	r2,r2,r3
  803de8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  803dec:	e0fffd17 	ldw	r3,-12(fp)
  803df0:	e0bff817 	ldw	r2,-32(fp)
  803df4:	1885c83a 	sub	r2,r3,r2
  803df8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803dfc:	e0fff617 	ldw	r3,-40(fp)
  803e00:	e0bff817 	ldw	r2,-32(fp)
  803e04:	1885883a 	add	r2,r3,r2
  803e08:	10c1ffcc 	andi	r3,r2,2047
  803e0c:	e0bffb17 	ldw	r2,-20(fp)
  803e10:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  803e14:	e0bffd17 	ldw	r2,-12(fp)
  803e18:	10800048 	cmpgei	r2,r2,1
  803e1c:	103fcc1e 	bne	r2,zero,803d50 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  803e20:	e0fffa17 	ldw	r3,-24(fp)
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	1880141e 	bne	r3,r2,803e7c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  803e2c:	e0bffe17 	ldw	r2,-8(fp)
  803e30:	1090000c 	andi	r2,r2,16384
  803e34:	1004c03a 	cmpne	r2,r2,zero
  803e38:	1000101e 	bne	r2,zero,803e7c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  803e3c:	e0bffb17 	ldw	r2,-20(fp)
  803e40:	10c00a17 	ldw	r3,40(r2)
  803e44:	e0bff717 	ldw	r2,-36(fp)
  803e48:	1880051e 	bne	r3,r2,803e60 <altera_avalon_jtag_uart_read+0x13c>
  803e4c:	e0bffb17 	ldw	r2,-20(fp)
  803e50:	10c00917 	ldw	r3,36(r2)
  803e54:	e0bffb17 	ldw	r2,-20(fp)
  803e58:	10800117 	ldw	r2,4(r2)
  803e5c:	18bff736 	bltu	r3,r2,803e3c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  803e60:	e0bffb17 	ldw	r2,-20(fp)
  803e64:	10c00a17 	ldw	r3,40(r2)
  803e68:	e0bff717 	ldw	r2,-36(fp)
  803e6c:	18800326 	beq	r3,r2,803e7c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  803e70:	e0bffd17 	ldw	r2,-12(fp)
  803e74:	10800048 	cmpgei	r2,r2,1
  803e78:	103fb51e 	bne	r2,zero,803d50 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  803e7c:	e0fffa17 	ldw	r3,-24(fp)
  803e80:	e0bffc17 	ldw	r2,-16(fp)
  803e84:	18801926 	beq	r3,r2,803eec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803e88:	0005303a 	rdctl	r2,status
  803e8c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803e90:	e0fff517 	ldw	r3,-44(fp)
  803e94:	00bfff84 	movi	r2,-2
  803e98:	1884703a 	and	r2,r3,r2
  803e9c:	1001703a 	wrctl	status,r2
  
  return context;
  803ea0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  803ea4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803ea8:	e0bffb17 	ldw	r2,-20(fp)
  803eac:	10800817 	ldw	r2,32(r2)
  803eb0:	10c00054 	ori	r3,r2,1
  803eb4:	e0bffb17 	ldw	r2,-20(fp)
  803eb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803ebc:	e0bffb17 	ldw	r2,-20(fp)
  803ec0:	10800017 	ldw	r2,0(r2)
  803ec4:	11000104 	addi	r4,r2,4
  803ec8:	e0bffb17 	ldw	r2,-20(fp)
  803ecc:	10800817 	ldw	r2,32(r2)
  803ed0:	1007883a 	mov	r3,r2
  803ed4:	2005883a 	mov	r2,r4
  803ed8:	10c00035 	stwio	r3,0(r2)
  803edc:	e0bff917 	ldw	r2,-28(fp)
  803ee0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803ee4:	e0bff417 	ldw	r2,-48(fp)
  803ee8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  803eec:	e0fffa17 	ldw	r3,-24(fp)
  803ef0:	e0bffc17 	ldw	r2,-16(fp)
  803ef4:	18800526 	beq	r3,r2,803f0c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  803ef8:	e0fffa17 	ldw	r3,-24(fp)
  803efc:	e0bffc17 	ldw	r2,-16(fp)
  803f00:	1887c83a 	sub	r3,r3,r2
  803f04:	e0ffff15 	stw	r3,-4(fp)
  803f08:	00000906 	br	803f30 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  803f0c:	e0bffe17 	ldw	r2,-8(fp)
  803f10:	1090000c 	andi	r2,r2,16384
  803f14:	1005003a 	cmpeq	r2,r2,zero
  803f18:	1000031e 	bne	r2,zero,803f28 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  803f1c:	00bffd44 	movi	r2,-11
  803f20:	e0bfff15 	stw	r2,-4(fp)
  803f24:	00000206 	br	803f30 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  803f28:	00bffec4 	movi	r2,-5
  803f2c:	e0bfff15 	stw	r2,-4(fp)
  803f30:	e0bfff17 	ldw	r2,-4(fp)
}
  803f34:	e037883a 	mov	sp,fp
  803f38:	dfc00117 	ldw	ra,4(sp)
  803f3c:	df000017 	ldw	fp,0(sp)
  803f40:	dec00204 	addi	sp,sp,8
  803f44:	f800283a 	ret

00803f48 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  803f48:	defff204 	addi	sp,sp,-56
  803f4c:	dfc00d15 	stw	ra,52(sp)
  803f50:	df000c15 	stw	fp,48(sp)
  803f54:	df000c04 	addi	fp,sp,48
  803f58:	e13ffb15 	stw	r4,-20(fp)
  803f5c:	e17ffc15 	stw	r5,-16(fp)
  803f60:	e1bffd15 	stw	r6,-12(fp)
  803f64:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  803f68:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  803f6c:	e0bffc17 	ldw	r2,-16(fp)
  803f70:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  803f74:	00003a06 	br	804060 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  803f78:	e0bffb17 	ldw	r2,-20(fp)
  803f7c:	10800c17 	ldw	r2,48(r2)
  803f80:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  803f84:	e0bffb17 	ldw	r2,-20(fp)
  803f88:	10800d17 	ldw	r2,52(r2)
  803f8c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  803f90:	e0fffa17 	ldw	r3,-24(fp)
  803f94:	e0bff917 	ldw	r2,-28(fp)
  803f98:	1880062e 	bgeu	r3,r2,803fb4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  803f9c:	e0fff917 	ldw	r3,-28(fp)
  803fa0:	e0bffa17 	ldw	r2,-24(fp)
  803fa4:	1885c83a 	sub	r2,r3,r2
  803fa8:	10bfffc4 	addi	r2,r2,-1
  803fac:	e0bff815 	stw	r2,-32(fp)
  803fb0:	00000c06 	br	803fe4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  803fb4:	e0bff917 	ldw	r2,-28(fp)
  803fb8:	1005003a 	cmpeq	r2,r2,zero
  803fbc:	1000051e 	bne	r2,zero,803fd4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  803fc0:	00820004 	movi	r2,2048
  803fc4:	e0fffa17 	ldw	r3,-24(fp)
  803fc8:	10c5c83a 	sub	r2,r2,r3
  803fcc:	e0bff815 	stw	r2,-32(fp)
  803fd0:	00000406 	br	803fe4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  803fd4:	0081ffc4 	movi	r2,2047
  803fd8:	e0fffa17 	ldw	r3,-24(fp)
  803fdc:	10c5c83a 	sub	r2,r2,r3
  803fe0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  803fe4:	e0bff817 	ldw	r2,-32(fp)
  803fe8:	1005003a 	cmpeq	r2,r2,zero
  803fec:	10001f1e 	bne	r2,zero,80406c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  803ff0:	e0fffd17 	ldw	r3,-12(fp)
  803ff4:	e0bff817 	ldw	r2,-32(fp)
  803ff8:	1880022e 	bgeu	r3,r2,804004 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  803ffc:	e0bffd17 	ldw	r2,-12(fp)
  804000:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  804004:	e0bffb17 	ldw	r2,-20(fp)
  804008:	10c20e04 	addi	r3,r2,2104
  80400c:	e0bffa17 	ldw	r2,-24(fp)
  804010:	1885883a 	add	r2,r3,r2
  804014:	e0fffc17 	ldw	r3,-16(fp)
  804018:	1009883a 	mov	r4,r2
  80401c:	180b883a 	mov	r5,r3
  804020:	e1bff817 	ldw	r6,-32(fp)
  804024:	080100c0 	call	80100c <memcpy>
      ptr   += n;
  804028:	e0fff817 	ldw	r3,-32(fp)
  80402c:	e0bffc17 	ldw	r2,-16(fp)
  804030:	10c5883a 	add	r2,r2,r3
  804034:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  804038:	e0fffd17 	ldw	r3,-12(fp)
  80403c:	e0bff817 	ldw	r2,-32(fp)
  804040:	1885c83a 	sub	r2,r3,r2
  804044:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804048:	e0fffa17 	ldw	r3,-24(fp)
  80404c:	e0bff817 	ldw	r2,-32(fp)
  804050:	1885883a 	add	r2,r3,r2
  804054:	10c1ffcc 	andi	r3,r2,2047
  804058:	e0bffb17 	ldw	r2,-20(fp)
  80405c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804060:	e0bffd17 	ldw	r2,-12(fp)
  804064:	10800048 	cmpgei	r2,r2,1
  804068:	103fc31e 	bne	r2,zero,803f78 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80406c:	0005303a 	rdctl	r2,status
  804070:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804074:	e0fff517 	ldw	r3,-44(fp)
  804078:	00bfff84 	movi	r2,-2
  80407c:	1884703a 	and	r2,r3,r2
  804080:	1001703a 	wrctl	status,r2
  
  return context;
  804084:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804088:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80408c:	e0bffb17 	ldw	r2,-20(fp)
  804090:	10800817 	ldw	r2,32(r2)
  804094:	10c00094 	ori	r3,r2,2
  804098:	e0bffb17 	ldw	r2,-20(fp)
  80409c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8040a0:	e0bffb17 	ldw	r2,-20(fp)
  8040a4:	10800017 	ldw	r2,0(r2)
  8040a8:	11000104 	addi	r4,r2,4
  8040ac:	e0bffb17 	ldw	r2,-20(fp)
  8040b0:	10800817 	ldw	r2,32(r2)
  8040b4:	1007883a 	mov	r3,r2
  8040b8:	2005883a 	mov	r2,r4
  8040bc:	10c00035 	stwio	r3,0(r2)
  8040c0:	e0bff717 	ldw	r2,-36(fp)
  8040c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8040c8:	e0bff417 	ldw	r2,-48(fp)
  8040cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8040d0:	e0bffd17 	ldw	r2,-12(fp)
  8040d4:	10800050 	cmplti	r2,r2,1
  8040d8:	1000111e 	bne	r2,zero,804120 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8040dc:	e0bffe17 	ldw	r2,-8(fp)
  8040e0:	1090000c 	andi	r2,r2,16384
  8040e4:	1004c03a 	cmpne	r2,r2,zero
  8040e8:	1000101e 	bne	r2,zero,80412c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8040ec:	e0bffb17 	ldw	r2,-20(fp)
  8040f0:	10c00d17 	ldw	r3,52(r2)
  8040f4:	e0bff917 	ldw	r2,-28(fp)
  8040f8:	1880051e 	bne	r3,r2,804110 <altera_avalon_jtag_uart_write+0x1c8>
  8040fc:	e0bffb17 	ldw	r2,-20(fp)
  804100:	10c00917 	ldw	r3,36(r2)
  804104:	e0bffb17 	ldw	r2,-20(fp)
  804108:	10800117 	ldw	r2,4(r2)
  80410c:	18bff736 	bltu	r3,r2,8040ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  804110:	e0bffb17 	ldw	r2,-20(fp)
  804114:	10c00d17 	ldw	r3,52(r2)
  804118:	e0bff917 	ldw	r2,-28(fp)
  80411c:	18800326 	beq	r3,r2,80412c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  804120:	e0bffd17 	ldw	r2,-12(fp)
  804124:	10800048 	cmpgei	r2,r2,1
  804128:	103fcd1e 	bne	r2,zero,804060 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80412c:	e0fffc17 	ldw	r3,-16(fp)
  804130:	e0bff617 	ldw	r2,-40(fp)
  804134:	18800526 	beq	r3,r2,80414c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  804138:	e0fffc17 	ldw	r3,-16(fp)
  80413c:	e0bff617 	ldw	r2,-40(fp)
  804140:	1887c83a 	sub	r3,r3,r2
  804144:	e0ffff15 	stw	r3,-4(fp)
  804148:	00000906 	br	804170 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80414c:	e0bffe17 	ldw	r2,-8(fp)
  804150:	1090000c 	andi	r2,r2,16384
  804154:	1005003a 	cmpeq	r2,r2,zero
  804158:	1000031e 	bne	r2,zero,804168 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80415c:	00bffd44 	movi	r2,-11
  804160:	e0bfff15 	stw	r2,-4(fp)
  804164:	00000206 	br	804170 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  804168:	00bffec4 	movi	r2,-5
  80416c:	e0bfff15 	stw	r2,-4(fp)
  804170:	e0bfff17 	ldw	r2,-4(fp)
}
  804174:	e037883a 	mov	sp,fp
  804178:	dfc00117 	ldw	ra,4(sp)
  80417c:	df000017 	ldw	fp,0(sp)
  804180:	dec00204 	addi	sp,sp,8
  804184:	f800283a 	ret

00804188 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  804188:	defffa04 	addi	sp,sp,-24
  80418c:	dfc00515 	stw	ra,20(sp)
  804190:	df000415 	stw	fp,16(sp)
  804194:	df000404 	addi	fp,sp,16
  804198:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80419c:	e0bfff17 	ldw	r2,-4(fp)
  8041a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8041a4:	e0bfff17 	ldw	r2,-4(fp)
  8041a8:	10800104 	addi	r2,r2,4
  8041ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8041b0:	0005303a 	rdctl	r2,status
  8041b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8041b8:	e0fffd17 	ldw	r3,-12(fp)
  8041bc:	00bfff84 	movi	r2,-2
  8041c0:	1884703a 	and	r2,r3,r2
  8041c4:	1001703a 	wrctl	status,r2
  
  return context;
  8041c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8041cc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8041d0:	0804d680 	call	804d68 <alt_tick>
  8041d4:	e0bffe17 	ldw	r2,-8(fp)
  8041d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8041dc:	e0bffc17 	ldw	r2,-16(fp)
  8041e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8041e4:	e037883a 	mov	sp,fp
  8041e8:	dfc00117 	ldw	ra,4(sp)
  8041ec:	df000017 	ldw	fp,0(sp)
  8041f0:	dec00204 	addi	sp,sp,8
  8041f4:	f800283a 	ret

008041f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8041f8:	defff804 	addi	sp,sp,-32
  8041fc:	dfc00715 	stw	ra,28(sp)
  804200:	df000615 	stw	fp,24(sp)
  804204:	df000604 	addi	fp,sp,24
  804208:	e13ffc15 	stw	r4,-16(fp)
  80420c:	e17ffd15 	stw	r5,-12(fp)
  804210:	e1bffe15 	stw	r6,-8(fp)
  804214:	e1ffff15 	stw	r7,-4(fp)
  804218:	e0bfff17 	ldw	r2,-4(fp)
  80421c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  804220:	00802074 	movhi	r2,129
  804224:	10a2a504 	addi	r2,r2,-30060
  804228:	10800017 	ldw	r2,0(r2)
  80422c:	1004c03a 	cmpne	r2,r2,zero
  804230:	1000041e 	bne	r2,zero,804244 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  804234:	00c02074 	movhi	r3,129
  804238:	18e2a504 	addi	r3,r3,-30060
  80423c:	e0bffb17 	ldw	r2,-20(fp)
  804240:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  804244:	e0bffc17 	ldw	r2,-16(fp)
  804248:	10800104 	addi	r2,r2,4
  80424c:	1007883a 	mov	r3,r2
  804250:	008001c4 	movi	r2,7
  804254:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  804258:	d8000015 	stw	zero,0(sp)
  80425c:	e13ffd17 	ldw	r4,-12(fp)
  804260:	e17ffe17 	ldw	r5,-8(fp)
  804264:	01802034 	movhi	r6,128
  804268:	31906204 	addi	r6,r6,16776
  80426c:	e1fffc17 	ldw	r7,-16(fp)
  804270:	08046040 	call	804604 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  804274:	e037883a 	mov	sp,fp
  804278:	dfc00117 	ldw	ra,4(sp)
  80427c:	df000017 	ldw	fp,0(sp)
  804280:	dec00204 	addi	sp,sp,8
  804284:	f800283a 	ret

00804288 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  804288:	defff404 	addi	sp,sp,-48
  80428c:	df000b15 	stw	fp,44(sp)
  804290:	df000b04 	addi	fp,sp,44
  804294:	e13ffb15 	stw	r4,-20(fp)
  804298:	e17ffc15 	stw	r5,-16(fp)
  80429c:	e1bffd15 	stw	r6,-12(fp)
  8042a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8042a4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8042a8:	00802074 	movhi	r2,129
  8042ac:	10a2a504 	addi	r2,r2,-30060
  8042b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8042b4:	1005003a 	cmpeq	r2,r2,zero
  8042b8:	1000411e 	bne	r2,zero,8043c0 <alt_alarm_start+0x138>
  {
    if (alarm)
  8042bc:	e0bffb17 	ldw	r2,-20(fp)
  8042c0:	1005003a 	cmpeq	r2,r2,zero
  8042c4:	10003b1e 	bne	r2,zero,8043b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8042c8:	e0fffb17 	ldw	r3,-20(fp)
  8042cc:	e0bffd17 	ldw	r2,-12(fp)
  8042d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8042d4:	e0fffb17 	ldw	r3,-20(fp)
  8042d8:	e0bffe17 	ldw	r2,-8(fp)
  8042dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8042e0:	0005303a 	rdctl	r2,status
  8042e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8042e8:	e0fff817 	ldw	r3,-32(fp)
  8042ec:	00bfff84 	movi	r2,-2
  8042f0:	1884703a 	and	r2,r3,r2
  8042f4:	1001703a 	wrctl	status,r2
  
  return context;
  8042f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8042fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804300:	00802074 	movhi	r2,129
  804304:	10a2a604 	addi	r2,r2,-30056
  804308:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80430c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  804310:	e0fffc17 	ldw	r3,-16(fp)
  804314:	e0bff917 	ldw	r2,-28(fp)
  804318:	1885883a 	add	r2,r3,r2
  80431c:	10c00044 	addi	r3,r2,1
  804320:	e0bffb17 	ldw	r2,-20(fp)
  804324:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804328:	e0bffb17 	ldw	r2,-20(fp)
  80432c:	10c00217 	ldw	r3,8(r2)
  804330:	e0bff917 	ldw	r2,-28(fp)
  804334:	1880042e 	bgeu	r3,r2,804348 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  804338:	e0fffb17 	ldw	r3,-20(fp)
  80433c:	00800044 	movi	r2,1
  804340:	18800405 	stb	r2,16(r3)
  804344:	00000206 	br	804350 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  804348:	e0bffb17 	ldw	r2,-20(fp)
  80434c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  804350:	e0fffb17 	ldw	r3,-20(fp)
  804354:	00802034 	movhi	r2,128
  804358:	109c0904 	addi	r2,r2,28708
  80435c:	e0bff615 	stw	r2,-40(fp)
  804360:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804364:	e0fff717 	ldw	r3,-36(fp)
  804368:	e0bff617 	ldw	r2,-40(fp)
  80436c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  804370:	e0bff617 	ldw	r2,-40(fp)
  804374:	10c00017 	ldw	r3,0(r2)
  804378:	e0bff717 	ldw	r2,-36(fp)
  80437c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804380:	e0bff617 	ldw	r2,-40(fp)
  804384:	10c00017 	ldw	r3,0(r2)
  804388:	e0bff717 	ldw	r2,-36(fp)
  80438c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  804390:	e0fff617 	ldw	r3,-40(fp)
  804394:	e0bff717 	ldw	r2,-36(fp)
  804398:	18800015 	stw	r2,0(r3)
  80439c:	e0bffa17 	ldw	r2,-24(fp)
  8043a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8043a4:	e0bff517 	ldw	r2,-44(fp)
  8043a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8043ac:	e03fff15 	stw	zero,-4(fp)
  8043b0:	00000506 	br	8043c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8043b4:	00bffa84 	movi	r2,-22
  8043b8:	e0bfff15 	stw	r2,-4(fp)
  8043bc:	00000206 	br	8043c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8043c0:	00bfde84 	movi	r2,-134
  8043c4:	e0bfff15 	stw	r2,-4(fp)
  8043c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8043cc:	e037883a 	mov	sp,fp
  8043d0:	df000017 	ldw	fp,0(sp)
  8043d4:	dec00104 	addi	sp,sp,4
  8043d8:	f800283a 	ret

008043dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8043dc:	deffff04 	addi	sp,sp,-4
  8043e0:	df000015 	stw	fp,0(sp)
  8043e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8043e8:	e037883a 	mov	sp,fp
  8043ec:	df000017 	ldw	fp,0(sp)
  8043f0:	dec00104 	addi	sp,sp,4
  8043f4:	f800283a 	ret

008043f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8043f8:	defff904 	addi	sp,sp,-28
  8043fc:	dfc00615 	stw	ra,24(sp)
  804400:	df000515 	stw	fp,20(sp)
  804404:	df000504 	addi	fp,sp,20
  804408:	e13ffd15 	stw	r4,-12(fp)
  80440c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  804410:	e0bffd17 	ldw	r2,-12(fp)
  804414:	1005003a 	cmpeq	r2,r2,zero
  804418:	1000041e 	bne	r2,zero,80442c <alt_dev_llist_insert+0x34>
  80441c:	e0bffd17 	ldw	r2,-12(fp)
  804420:	10800217 	ldw	r2,8(r2)
  804424:	1004c03a 	cmpne	r2,r2,zero
  804428:	1000071e 	bne	r2,zero,804448 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80442c:	08044ac0 	call	8044ac <alt_get_errno>
  804430:	1007883a 	mov	r3,r2
  804434:	00800584 	movi	r2,22
  804438:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80443c:	00bffa84 	movi	r2,-22
  804440:	e0bfff15 	stw	r2,-4(fp)
  804444:	00001306 	br	804494 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  804448:	e0fffd17 	ldw	r3,-12(fp)
  80444c:	e0bffe17 	ldw	r2,-8(fp)
  804450:	e0bffb15 	stw	r2,-20(fp)
  804454:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804458:	e0fffc17 	ldw	r3,-16(fp)
  80445c:	e0bffb17 	ldw	r2,-20(fp)
  804460:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  804464:	e0bffb17 	ldw	r2,-20(fp)
  804468:	10c00017 	ldw	r3,0(r2)
  80446c:	e0bffc17 	ldw	r2,-16(fp)
  804470:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804474:	e0bffb17 	ldw	r2,-20(fp)
  804478:	10c00017 	ldw	r3,0(r2)
  80447c:	e0bffc17 	ldw	r2,-16(fp)
  804480:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  804484:	e0fffb17 	ldw	r3,-20(fp)
  804488:	e0bffc17 	ldw	r2,-16(fp)
  80448c:	18800015 	stw	r2,0(r3)

  return 0;  
  804490:	e03fff15 	stw	zero,-4(fp)
  804494:	e0bfff17 	ldw	r2,-4(fp)
}
  804498:	e037883a 	mov	sp,fp
  80449c:	dfc00117 	ldw	ra,4(sp)
  8044a0:	df000017 	ldw	fp,0(sp)
  8044a4:	dec00204 	addi	sp,sp,8
  8044a8:	f800283a 	ret

008044ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8044ac:	defffd04 	addi	sp,sp,-12
  8044b0:	dfc00215 	stw	ra,8(sp)
  8044b4:	df000115 	stw	fp,4(sp)
  8044b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8044bc:	00802034 	movhi	r2,128
  8044c0:	109c0604 	addi	r2,r2,28696
  8044c4:	10800017 	ldw	r2,0(r2)
  8044c8:	1005003a 	cmpeq	r2,r2,zero
  8044cc:	1000061e 	bne	r2,zero,8044e8 <alt_get_errno+0x3c>
  8044d0:	00802034 	movhi	r2,128
  8044d4:	109c0604 	addi	r2,r2,28696
  8044d8:	10800017 	ldw	r2,0(r2)
  8044dc:	103ee83a 	callr	r2
  8044e0:	e0bfff15 	stw	r2,-4(fp)
  8044e4:	00000306 	br	8044f4 <alt_get_errno+0x48>
  8044e8:	00802074 	movhi	r2,129
  8044ec:	10a2a004 	addi	r2,r2,-30080
  8044f0:	e0bfff15 	stw	r2,-4(fp)
  8044f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8044f8:	e037883a 	mov	sp,fp
  8044fc:	dfc00117 	ldw	ra,4(sp)
  804500:	df000017 	ldw	fp,0(sp)
  804504:	dec00204 	addi	sp,sp,8
  804508:	f800283a 	ret

0080450c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80450c:	defffd04 	addi	sp,sp,-12
  804510:	dfc00215 	stw	ra,8(sp)
  804514:	df000115 	stw	fp,4(sp)
  804518:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80451c:	00bfff04 	movi	r2,-4
  804520:	00c02034 	movhi	r3,128
  804524:	18d56704 	addi	r3,r3,21916
  804528:	1885883a 	add	r2,r3,r2
  80452c:	e0bfff15 	stw	r2,-4(fp)
  804530:	00000606 	br	80454c <_do_ctors+0x40>
        (*ctor) (); 
  804534:	e0bfff17 	ldw	r2,-4(fp)
  804538:	10800017 	ldw	r2,0(r2)
  80453c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  804540:	e0bfff17 	ldw	r2,-4(fp)
  804544:	10bfff04 	addi	r2,r2,-4
  804548:	e0bfff15 	stw	r2,-4(fp)
  80454c:	e0ffff17 	ldw	r3,-4(fp)
  804550:	00802034 	movhi	r2,128
  804554:	10956604 	addi	r2,r2,21912
  804558:	18bff62e 	bgeu	r3,r2,804534 <_do_ctors+0x28>
        (*ctor) (); 
}
  80455c:	e037883a 	mov	sp,fp
  804560:	dfc00117 	ldw	ra,4(sp)
  804564:	df000017 	ldw	fp,0(sp)
  804568:	dec00204 	addi	sp,sp,8
  80456c:	f800283a 	ret

00804570 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  804570:	defffd04 	addi	sp,sp,-12
  804574:	dfc00215 	stw	ra,8(sp)
  804578:	df000115 	stw	fp,4(sp)
  80457c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  804580:	00bfff04 	movi	r2,-4
  804584:	00c02034 	movhi	r3,128
  804588:	18d56704 	addi	r3,r3,21916
  80458c:	1885883a 	add	r2,r3,r2
  804590:	e0bfff15 	stw	r2,-4(fp)
  804594:	00000606 	br	8045b0 <_do_dtors+0x40>
        (*dtor) (); 
  804598:	e0bfff17 	ldw	r2,-4(fp)
  80459c:	10800017 	ldw	r2,0(r2)
  8045a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8045a4:	e0bfff17 	ldw	r2,-4(fp)
  8045a8:	10bfff04 	addi	r2,r2,-4
  8045ac:	e0bfff15 	stw	r2,-4(fp)
  8045b0:	e0ffff17 	ldw	r3,-4(fp)
  8045b4:	00802034 	movhi	r2,128
  8045b8:	10956704 	addi	r2,r2,21916
  8045bc:	18bff62e 	bgeu	r3,r2,804598 <_do_dtors+0x28>
        (*dtor) (); 
}
  8045c0:	e037883a 	mov	sp,fp
  8045c4:	dfc00117 	ldw	ra,4(sp)
  8045c8:	df000017 	ldw	fp,0(sp)
  8045cc:	dec00204 	addi	sp,sp,8
  8045d0:	f800283a 	ret

008045d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8045d4:	defffe04 	addi	sp,sp,-8
  8045d8:	dfc00115 	stw	ra,4(sp)
  8045dc:	df000015 	stw	fp,0(sp)
  8045e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8045e4:	0009883a 	mov	r4,zero
  8045e8:	01420004 	movi	r5,2048
  8045ec:	08051000 	call	805100 <alt_icache_flush>
#endif
}
  8045f0:	e037883a 	mov	sp,fp
  8045f4:	dfc00117 	ldw	ra,4(sp)
  8045f8:	df000017 	ldw	fp,0(sp)
  8045fc:	dec00204 	addi	sp,sp,8
  804600:	f800283a 	ret

00804604 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  804604:	defff904 	addi	sp,sp,-28
  804608:	dfc00615 	stw	ra,24(sp)
  80460c:	df000515 	stw	fp,20(sp)
  804610:	df000504 	addi	fp,sp,20
  804614:	e13ffc15 	stw	r4,-16(fp)
  804618:	e17ffd15 	stw	r5,-12(fp)
  80461c:	e1bffe15 	stw	r6,-8(fp)
  804620:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  804624:	e0800217 	ldw	r2,8(fp)
  804628:	d8800015 	stw	r2,0(sp)
  80462c:	e13ffc17 	ldw	r4,-16(fp)
  804630:	e17ffd17 	ldw	r5,-12(fp)
  804634:	e1bffe17 	ldw	r6,-8(fp)
  804638:	e1ffff17 	ldw	r7,-4(fp)
  80463c:	08047d80 	call	8047d8 <alt_iic_isr_register>
}  
  804640:	e037883a 	mov	sp,fp
  804644:	dfc00117 	ldw	ra,4(sp)
  804648:	df000017 	ldw	fp,0(sp)
  80464c:	dec00204 	addi	sp,sp,8
  804650:	f800283a 	ret

00804654 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  804654:	defff904 	addi	sp,sp,-28
  804658:	df000615 	stw	fp,24(sp)
  80465c:	df000604 	addi	fp,sp,24
  804660:	e13ffe15 	stw	r4,-8(fp)
  804664:	e17fff15 	stw	r5,-4(fp)
  804668:	e0bfff17 	ldw	r2,-4(fp)
  80466c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804670:	0005303a 	rdctl	r2,status
  804674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804678:	e0fffb17 	ldw	r3,-20(fp)
  80467c:	00bfff84 	movi	r2,-2
  804680:	1884703a 	and	r2,r3,r2
  804684:	1001703a 	wrctl	status,r2
  
  return context;
  804688:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80468c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  804690:	e0fffc17 	ldw	r3,-16(fp)
  804694:	00800044 	movi	r2,1
  804698:	10c4983a 	sll	r2,r2,r3
  80469c:	1007883a 	mov	r3,r2
  8046a0:	00802074 	movhi	r2,129
  8046a4:	10a2a404 	addi	r2,r2,-30064
  8046a8:	10800017 	ldw	r2,0(r2)
  8046ac:	1886b03a 	or	r3,r3,r2
  8046b0:	00802074 	movhi	r2,129
  8046b4:	10a2a404 	addi	r2,r2,-30064
  8046b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8046bc:	00802074 	movhi	r2,129
  8046c0:	10a2a404 	addi	r2,r2,-30064
  8046c4:	10800017 	ldw	r2,0(r2)
  8046c8:	100170fa 	wrctl	ienable,r2
  8046cc:	e0bffd17 	ldw	r2,-12(fp)
  8046d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046d4:	e0bffa17 	ldw	r2,-24(fp)
  8046d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8046dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8046e0:	e037883a 	mov	sp,fp
  8046e4:	df000017 	ldw	fp,0(sp)
  8046e8:	dec00104 	addi	sp,sp,4
  8046ec:	f800283a 	ret

008046f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8046f0:	defff904 	addi	sp,sp,-28
  8046f4:	df000615 	stw	fp,24(sp)
  8046f8:	df000604 	addi	fp,sp,24
  8046fc:	e13ffe15 	stw	r4,-8(fp)
  804700:	e17fff15 	stw	r5,-4(fp)
  804704:	e0bfff17 	ldw	r2,-4(fp)
  804708:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80470c:	0005303a 	rdctl	r2,status
  804710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804714:	e0fffb17 	ldw	r3,-20(fp)
  804718:	00bfff84 	movi	r2,-2
  80471c:	1884703a 	and	r2,r3,r2
  804720:	1001703a 	wrctl	status,r2
  
  return context;
  804724:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  804728:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80472c:	e0fffc17 	ldw	r3,-16(fp)
  804730:	00800044 	movi	r2,1
  804734:	10c4983a 	sll	r2,r2,r3
  804738:	0084303a 	nor	r2,zero,r2
  80473c:	1007883a 	mov	r3,r2
  804740:	00802074 	movhi	r2,129
  804744:	10a2a404 	addi	r2,r2,-30064
  804748:	10800017 	ldw	r2,0(r2)
  80474c:	1886703a 	and	r3,r3,r2
  804750:	00802074 	movhi	r2,129
  804754:	10a2a404 	addi	r2,r2,-30064
  804758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80475c:	00802074 	movhi	r2,129
  804760:	10a2a404 	addi	r2,r2,-30064
  804764:	10800017 	ldw	r2,0(r2)
  804768:	100170fa 	wrctl	ienable,r2
  80476c:	e0bffd17 	ldw	r2,-12(fp)
  804770:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804774:	e0bffa17 	ldw	r2,-24(fp)
  804778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80477c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  804780:	e037883a 	mov	sp,fp
  804784:	df000017 	ldw	fp,0(sp)
  804788:	dec00104 	addi	sp,sp,4
  80478c:	f800283a 	ret

00804790 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  804790:	defffc04 	addi	sp,sp,-16
  804794:	df000315 	stw	fp,12(sp)
  804798:	df000304 	addi	fp,sp,12
  80479c:	e13ffe15 	stw	r4,-8(fp)
  8047a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8047a4:	000530fa 	rdctl	r2,ienable
  8047a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8047ac:	e0ffff17 	ldw	r3,-4(fp)
  8047b0:	00800044 	movi	r2,1
  8047b4:	10c4983a 	sll	r2,r2,r3
  8047b8:	1007883a 	mov	r3,r2
  8047bc:	e0bffd17 	ldw	r2,-12(fp)
  8047c0:	1884703a 	and	r2,r3,r2
  8047c4:	1004c03a 	cmpne	r2,r2,zero
}
  8047c8:	e037883a 	mov	sp,fp
  8047cc:	df000017 	ldw	fp,0(sp)
  8047d0:	dec00104 	addi	sp,sp,4
  8047d4:	f800283a 	ret

008047d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8047d8:	defff404 	addi	sp,sp,-48
  8047dc:	dfc00b15 	stw	ra,44(sp)
  8047e0:	df000a15 	stw	fp,40(sp)
  8047e4:	df000a04 	addi	fp,sp,40
  8047e8:	e13ffb15 	stw	r4,-20(fp)
  8047ec:	e17ffc15 	stw	r5,-16(fp)
  8047f0:	e1bffd15 	stw	r6,-12(fp)
  8047f4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8047f8:	00bffa84 	movi	r2,-22
  8047fc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  804800:	e0bffc17 	ldw	r2,-16(fp)
  804804:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804808:	e0bff917 	ldw	r2,-28(fp)
  80480c:	10800808 	cmpgei	r2,r2,32
  804810:	1000291e 	bne	r2,zero,8048b8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804814:	0005303a 	rdctl	r2,status
  804818:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80481c:	e0fff717 	ldw	r3,-36(fp)
  804820:	00bfff84 	movi	r2,-2
  804824:	1884703a 	and	r2,r3,r2
  804828:	1001703a 	wrctl	status,r2
  
  return context;
  80482c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  804830:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  804834:	e0bff917 	ldw	r2,-28(fp)
  804838:	00c02074 	movhi	r3,129
  80483c:	18e2b104 	addi	r3,r3,-30012
  804840:	100490fa 	slli	r2,r2,3
  804844:	10c7883a 	add	r3,r2,r3
  804848:	e0bffd17 	ldw	r2,-12(fp)
  80484c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  804850:	e0bff917 	ldw	r2,-28(fp)
  804854:	00c02074 	movhi	r3,129
  804858:	18e2b104 	addi	r3,r3,-30012
  80485c:	100490fa 	slli	r2,r2,3
  804860:	10c5883a 	add	r2,r2,r3
  804864:	10c00104 	addi	r3,r2,4
  804868:	e0bffe17 	ldw	r2,-8(fp)
  80486c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  804870:	e0bffd17 	ldw	r2,-12(fp)
  804874:	1005003a 	cmpeq	r2,r2,zero
  804878:	1000051e 	bne	r2,zero,804890 <alt_iic_isr_register+0xb8>
  80487c:	e17ff917 	ldw	r5,-28(fp)
  804880:	e13ffb17 	ldw	r4,-20(fp)
  804884:	08046540 	call	804654 <alt_ic_irq_enable>
  804888:	e0bfff15 	stw	r2,-4(fp)
  80488c:	00000406 	br	8048a0 <alt_iic_isr_register+0xc8>
  804890:	e17ff917 	ldw	r5,-28(fp)
  804894:	e13ffb17 	ldw	r4,-20(fp)
  804898:	08046f00 	call	8046f0 <alt_ic_irq_disable>
  80489c:	e0bfff15 	stw	r2,-4(fp)
  8048a0:	e0bfff17 	ldw	r2,-4(fp)
  8048a4:	e0bffa15 	stw	r2,-24(fp)
  8048a8:	e0bff817 	ldw	r2,-32(fp)
  8048ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8048b0:	e0bff617 	ldw	r2,-40(fp)
  8048b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8048b8:	e0bffa17 	ldw	r2,-24(fp)
}
  8048bc:	e037883a 	mov	sp,fp
  8048c0:	dfc00117 	ldw	ra,4(sp)
  8048c4:	df000017 	ldw	fp,0(sp)
  8048c8:	dec00204 	addi	sp,sp,8
  8048cc:	f800283a 	ret

008048d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8048d0:	defff904 	addi	sp,sp,-28
  8048d4:	dfc00615 	stw	ra,24(sp)
  8048d8:	df000515 	stw	fp,20(sp)
  8048dc:	df000504 	addi	fp,sp,20
  8048e0:	e13ffc15 	stw	r4,-16(fp)
  8048e4:	e17ffd15 	stw	r5,-12(fp)
  8048e8:	e1bffe15 	stw	r6,-8(fp)
  8048ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8048f0:	e13ffd17 	ldw	r4,-12(fp)
  8048f4:	e17ffe17 	ldw	r5,-8(fp)
  8048f8:	e1bfff17 	ldw	r6,-4(fp)
  8048fc:	0804ae80 	call	804ae8 <open>
  804900:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  804904:	e0bffb17 	ldw	r2,-20(fp)
  804908:	1004803a 	cmplt	r2,r2,zero
  80490c:	10001c1e 	bne	r2,zero,804980 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  804910:	e0bffb17 	ldw	r2,-20(fp)
  804914:	00c02034 	movhi	r3,128
  804918:	18d78504 	addi	r3,r3,24084
  80491c:	10800324 	muli	r2,r2,12
  804920:	10c5883a 	add	r2,r2,r3
  804924:	10c00017 	ldw	r3,0(r2)
  804928:	e0bffc17 	ldw	r2,-16(fp)
  80492c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  804930:	e0bffb17 	ldw	r2,-20(fp)
  804934:	00c02034 	movhi	r3,128
  804938:	18d78504 	addi	r3,r3,24084
  80493c:	10800324 	muli	r2,r2,12
  804940:	10c5883a 	add	r2,r2,r3
  804944:	10800104 	addi	r2,r2,4
  804948:	10c00017 	ldw	r3,0(r2)
  80494c:	e0bffc17 	ldw	r2,-16(fp)
  804950:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  804954:	e0bffb17 	ldw	r2,-20(fp)
  804958:	00c02034 	movhi	r3,128
  80495c:	18d78504 	addi	r3,r3,24084
  804960:	10800324 	muli	r2,r2,12
  804964:	10c5883a 	add	r2,r2,r3
  804968:	10800204 	addi	r2,r2,8
  80496c:	10c00017 	ldw	r3,0(r2)
  804970:	e0bffc17 	ldw	r2,-16(fp)
  804974:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  804978:	e13ffb17 	ldw	r4,-20(fp)
  80497c:	08033780 	call	803378 <alt_release_fd>
  }
} 
  804980:	e037883a 	mov	sp,fp
  804984:	dfc00117 	ldw	ra,4(sp)
  804988:	df000017 	ldw	fp,0(sp)
  80498c:	dec00204 	addi	sp,sp,8
  804990:	f800283a 	ret

00804994 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  804994:	defffb04 	addi	sp,sp,-20
  804998:	dfc00415 	stw	ra,16(sp)
  80499c:	df000315 	stw	fp,12(sp)
  8049a0:	df000304 	addi	fp,sp,12
  8049a4:	e13ffd15 	stw	r4,-12(fp)
  8049a8:	e17ffe15 	stw	r5,-8(fp)
  8049ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8049b0:	01002034 	movhi	r4,128
  8049b4:	21178804 	addi	r4,r4,24096
  8049b8:	e17ffd17 	ldw	r5,-12(fp)
  8049bc:	01800044 	movi	r6,1
  8049c0:	01c07fc4 	movi	r7,511
  8049c4:	08048d00 	call	8048d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8049c8:	01002034 	movhi	r4,128
  8049cc:	21178504 	addi	r4,r4,24084
  8049d0:	e17ffe17 	ldw	r5,-8(fp)
  8049d4:	000d883a 	mov	r6,zero
  8049d8:	01c07fc4 	movi	r7,511
  8049dc:	08048d00 	call	8048d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8049e0:	01002034 	movhi	r4,128
  8049e4:	21178b04 	addi	r4,r4,24108
  8049e8:	e17fff17 	ldw	r5,-4(fp)
  8049ec:	01800044 	movi	r6,1
  8049f0:	01c07fc4 	movi	r7,511
  8049f4:	08048d00 	call	8048d0 <alt_open_fd>
}  
  8049f8:	e037883a 	mov	sp,fp
  8049fc:	dfc00117 	ldw	ra,4(sp)
  804a00:	df000017 	ldw	fp,0(sp)
  804a04:	dec00204 	addi	sp,sp,8
  804a08:	f800283a 	ret

00804a0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804a0c:	defffc04 	addi	sp,sp,-16
  804a10:	df000315 	stw	fp,12(sp)
  804a14:	df000304 	addi	fp,sp,12
  804a18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804a1c:	e0bffe17 	ldw	r2,-8(fp)
  804a20:	10800217 	ldw	r2,8(r2)
  804a24:	10d00034 	orhi	r3,r2,16384
  804a28:	e0bffe17 	ldw	r2,-8(fp)
  804a2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804a30:	e03ffd15 	stw	zero,-12(fp)
  804a34:	00002006 	br	804ab8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804a38:	e0bffd17 	ldw	r2,-12(fp)
  804a3c:	00c02034 	movhi	r3,128
  804a40:	18d78504 	addi	r3,r3,24084
  804a44:	10800324 	muli	r2,r2,12
  804a48:	10c5883a 	add	r2,r2,r3
  804a4c:	10c00017 	ldw	r3,0(r2)
  804a50:	e0bffe17 	ldw	r2,-8(fp)
  804a54:	10800017 	ldw	r2,0(r2)
  804a58:	1880141e 	bne	r3,r2,804aac <alt_file_locked+0xa0>
  804a5c:	e0bffd17 	ldw	r2,-12(fp)
  804a60:	00c02034 	movhi	r3,128
  804a64:	18d78504 	addi	r3,r3,24084
  804a68:	10800324 	muli	r2,r2,12
  804a6c:	10c5883a 	add	r2,r2,r3
  804a70:	10800204 	addi	r2,r2,8
  804a74:	10800017 	ldw	r2,0(r2)
  804a78:	1004403a 	cmpge	r2,r2,zero
  804a7c:	10000b1e 	bne	r2,zero,804aac <alt_file_locked+0xa0>
  804a80:	e0bffd17 	ldw	r2,-12(fp)
  804a84:	10800324 	muli	r2,r2,12
  804a88:	1007883a 	mov	r3,r2
  804a8c:	00802034 	movhi	r2,128
  804a90:	10978504 	addi	r2,r2,24084
  804a94:	1887883a 	add	r3,r3,r2
  804a98:	e0bffe17 	ldw	r2,-8(fp)
  804a9c:	18800326 	beq	r3,r2,804aac <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804aa0:	00bffcc4 	movi	r2,-13
  804aa4:	e0bfff15 	stw	r2,-4(fp)
  804aa8:	00000a06 	br	804ad4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804aac:	e0bffd17 	ldw	r2,-12(fp)
  804ab0:	10800044 	addi	r2,r2,1
  804ab4:	e0bffd15 	stw	r2,-12(fp)
  804ab8:	00802034 	movhi	r2,128
  804abc:	109c0504 	addi	r2,r2,28692
  804ac0:	10800017 	ldw	r2,0(r2)
  804ac4:	1007883a 	mov	r3,r2
  804ac8:	e0bffd17 	ldw	r2,-12(fp)
  804acc:	18bfda2e 	bgeu	r3,r2,804a38 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804ad0:	e03fff15 	stw	zero,-4(fp)
  804ad4:	e0bfff17 	ldw	r2,-4(fp)
}
  804ad8:	e037883a 	mov	sp,fp
  804adc:	df000017 	ldw	fp,0(sp)
  804ae0:	dec00104 	addi	sp,sp,4
  804ae4:	f800283a 	ret

00804ae8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804ae8:	defff404 	addi	sp,sp,-48
  804aec:	dfc00b15 	stw	ra,44(sp)
  804af0:	df000a15 	stw	fp,40(sp)
  804af4:	df000a04 	addi	fp,sp,40
  804af8:	e13ffb15 	stw	r4,-20(fp)
  804afc:	e17ffc15 	stw	r5,-16(fp)
  804b00:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804b04:	00bfffc4 	movi	r2,-1
  804b08:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  804b0c:	00bffb44 	movi	r2,-19
  804b10:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  804b14:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804b18:	e13ffb17 	ldw	r4,-20(fp)
  804b1c:	01402034 	movhi	r5,128
  804b20:	295c0304 	addi	r5,r5,28684
  804b24:	0804e940 	call	804e94 <alt_find_dev>
  804b28:	e0bffa15 	stw	r2,-24(fp)
  804b2c:	e0bffa17 	ldw	r2,-24(fp)
  804b30:	1004c03a 	cmpne	r2,r2,zero
  804b34:	1000051e 	bne	r2,zero,804b4c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804b38:	e13ffb17 	ldw	r4,-20(fp)
  804b3c:	0804f280 	call	804f28 <alt_find_file>
  804b40:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  804b44:	00800044 	movi	r2,1
  804b48:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804b4c:	e0bffa17 	ldw	r2,-24(fp)
  804b50:	1005003a 	cmpeq	r2,r2,zero
  804b54:	1000301e 	bne	r2,zero,804c18 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804b58:	e13ffa17 	ldw	r4,-24(fp)
  804b5c:	08050480 	call	805048 <alt_get_fd>
  804b60:	e0bff815 	stw	r2,-32(fp)
  804b64:	e0bff817 	ldw	r2,-32(fp)
  804b68:	1004403a 	cmpge	r2,r2,zero
  804b6c:	1000031e 	bne	r2,zero,804b7c <open+0x94>
    {
      status = index;
  804b70:	e0bff817 	ldw	r2,-32(fp)
  804b74:	e0bff715 	stw	r2,-36(fp)
  804b78:	00002906 	br	804c20 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  804b7c:	e0bff817 	ldw	r2,-32(fp)
  804b80:	10800324 	muli	r2,r2,12
  804b84:	1007883a 	mov	r3,r2
  804b88:	00802034 	movhi	r2,128
  804b8c:	10978504 	addi	r2,r2,24084
  804b90:	1885883a 	add	r2,r3,r2
  804b94:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  804b98:	e0fffc17 	ldw	r3,-16(fp)
  804b9c:	00900034 	movhi	r2,16384
  804ba0:	10bfffc4 	addi	r2,r2,-1
  804ba4:	1886703a 	and	r3,r3,r2
  804ba8:	e0bff917 	ldw	r2,-28(fp)
  804bac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804bb0:	e0bff617 	ldw	r2,-40(fp)
  804bb4:	1004c03a 	cmpne	r2,r2,zero
  804bb8:	1000061e 	bne	r2,zero,804bd4 <open+0xec>
  804bbc:	e13ff917 	ldw	r4,-28(fp)
  804bc0:	0804a0c0 	call	804a0c <alt_file_locked>
  804bc4:	e0bff715 	stw	r2,-36(fp)
  804bc8:	e0bff717 	ldw	r2,-36(fp)
  804bcc:	1004803a 	cmplt	r2,r2,zero
  804bd0:	1000131e 	bne	r2,zero,804c20 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804bd4:	e0bffa17 	ldw	r2,-24(fp)
  804bd8:	10800317 	ldw	r2,12(r2)
  804bdc:	1005003a 	cmpeq	r2,r2,zero
  804be0:	1000091e 	bne	r2,zero,804c08 <open+0x120>
  804be4:	e0bffa17 	ldw	r2,-24(fp)
  804be8:	10800317 	ldw	r2,12(r2)
  804bec:	e13ff917 	ldw	r4,-28(fp)
  804bf0:	e17ffb17 	ldw	r5,-20(fp)
  804bf4:	e1bffc17 	ldw	r6,-16(fp)
  804bf8:	e1fffd17 	ldw	r7,-12(fp)
  804bfc:	103ee83a 	callr	r2
  804c00:	e0bfff15 	stw	r2,-4(fp)
  804c04:	00000106 	br	804c0c <open+0x124>
  804c08:	e03fff15 	stw	zero,-4(fp)
  804c0c:	e0bfff17 	ldw	r2,-4(fp)
  804c10:	e0bff715 	stw	r2,-36(fp)
  804c14:	00000206 	br	804c20 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  804c18:	00bffb44 	movi	r2,-19
  804c1c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804c20:	e0bff717 	ldw	r2,-36(fp)
  804c24:	1004403a 	cmpge	r2,r2,zero
  804c28:	1000091e 	bne	r2,zero,804c50 <open+0x168>
  {
    alt_release_fd (index);  
  804c2c:	e13ff817 	ldw	r4,-32(fp)
  804c30:	08033780 	call	803378 <alt_release_fd>
    ALT_ERRNO = -status;
  804c34:	0804c700 	call	804c70 <alt_get_errno>
  804c38:	e0fff717 	ldw	r3,-36(fp)
  804c3c:	00c7c83a 	sub	r3,zero,r3
  804c40:	10c00015 	stw	r3,0(r2)
    return -1;
  804c44:	00bfffc4 	movi	r2,-1
  804c48:	e0bffe15 	stw	r2,-8(fp)
  804c4c:	00000206 	br	804c58 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  804c50:	e0bff817 	ldw	r2,-32(fp)
  804c54:	e0bffe15 	stw	r2,-8(fp)
  804c58:	e0bffe17 	ldw	r2,-8(fp)
}
  804c5c:	e037883a 	mov	sp,fp
  804c60:	dfc00117 	ldw	ra,4(sp)
  804c64:	df000017 	ldw	fp,0(sp)
  804c68:	dec00204 	addi	sp,sp,8
  804c6c:	f800283a 	ret

00804c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804c70:	defffd04 	addi	sp,sp,-12
  804c74:	dfc00215 	stw	ra,8(sp)
  804c78:	df000115 	stw	fp,4(sp)
  804c7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804c80:	00802034 	movhi	r2,128
  804c84:	109c0604 	addi	r2,r2,28696
  804c88:	10800017 	ldw	r2,0(r2)
  804c8c:	1005003a 	cmpeq	r2,r2,zero
  804c90:	1000061e 	bne	r2,zero,804cac <alt_get_errno+0x3c>
  804c94:	00802034 	movhi	r2,128
  804c98:	109c0604 	addi	r2,r2,28696
  804c9c:	10800017 	ldw	r2,0(r2)
  804ca0:	103ee83a 	callr	r2
  804ca4:	e0bfff15 	stw	r2,-4(fp)
  804ca8:	00000306 	br	804cb8 <alt_get_errno+0x48>
  804cac:	00802074 	movhi	r2,129
  804cb0:	10a2a004 	addi	r2,r2,-30080
  804cb4:	e0bfff15 	stw	r2,-4(fp)
  804cb8:	e0bfff17 	ldw	r2,-4(fp)
}
  804cbc:	e037883a 	mov	sp,fp
  804cc0:	dfc00117 	ldw	ra,4(sp)
  804cc4:	df000017 	ldw	fp,0(sp)
  804cc8:	dec00204 	addi	sp,sp,8
  804ccc:	f800283a 	ret

00804cd0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  804cd0:	defffa04 	addi	sp,sp,-24
  804cd4:	df000515 	stw	fp,20(sp)
  804cd8:	df000504 	addi	fp,sp,20
  804cdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ce0:	0005303a 	rdctl	r2,status
  804ce4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ce8:	e0fffd17 	ldw	r3,-12(fp)
  804cec:	00bfff84 	movi	r2,-2
  804cf0:	1884703a 	and	r2,r3,r2
  804cf4:	1001703a 	wrctl	status,r2
  
  return context;
  804cf8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  804cfc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  804d00:	e0bfff17 	ldw	r2,-4(fp)
  804d04:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  804d08:	e0bffc17 	ldw	r2,-16(fp)
  804d0c:	10c00017 	ldw	r3,0(r2)
  804d10:	e0bffc17 	ldw	r2,-16(fp)
  804d14:	10800117 	ldw	r2,4(r2)
  804d18:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  804d1c:	e0bffc17 	ldw	r2,-16(fp)
  804d20:	10c00117 	ldw	r3,4(r2)
  804d24:	e0bffc17 	ldw	r2,-16(fp)
  804d28:	10800017 	ldw	r2,0(r2)
  804d2c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  804d30:	e0fffc17 	ldw	r3,-16(fp)
  804d34:	e0bffc17 	ldw	r2,-16(fp)
  804d38:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  804d3c:	e0fffc17 	ldw	r3,-16(fp)
  804d40:	e0bffc17 	ldw	r2,-16(fp)
  804d44:	18800015 	stw	r2,0(r3)
  804d48:	e0bffe17 	ldw	r2,-8(fp)
  804d4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804d50:	e0bffb17 	ldw	r2,-20(fp)
  804d54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  804d58:	e037883a 	mov	sp,fp
  804d5c:	df000017 	ldw	fp,0(sp)
  804d60:	dec00104 	addi	sp,sp,4
  804d64:	f800283a 	ret

00804d68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  804d68:	defffb04 	addi	sp,sp,-20
  804d6c:	dfc00415 	stw	ra,16(sp)
  804d70:	df000315 	stw	fp,12(sp)
  804d74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  804d78:	d0a00c17 	ldw	r2,-32720(gp)
  804d7c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  804d80:	d0a6a917 	ldw	r2,-25948(gp)
  804d84:	10800044 	addi	r2,r2,1
  804d88:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  804d8c:	00003106 	br	804e54 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  804d90:	e0bffe17 	ldw	r2,-8(fp)
  804d94:	10800017 	ldw	r2,0(r2)
  804d98:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  804d9c:	e0bffe17 	ldw	r2,-8(fp)
  804da0:	10800403 	ldbu	r2,16(r2)
  804da4:	10803fcc 	andi	r2,r2,255
  804da8:	1005003a 	cmpeq	r2,r2,zero
  804dac:	1000051e 	bne	r2,zero,804dc4 <alt_tick+0x5c>
  804db0:	d0a6a917 	ldw	r2,-25948(gp)
  804db4:	1004c03a 	cmpne	r2,r2,zero
  804db8:	1000021e 	bne	r2,zero,804dc4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  804dbc:	e0bffe17 	ldw	r2,-8(fp)
  804dc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  804dc4:	e0bffe17 	ldw	r2,-8(fp)
  804dc8:	10c00217 	ldw	r3,8(r2)
  804dcc:	d0a6a917 	ldw	r2,-25948(gp)
  804dd0:	10c01e36 	bltu	r2,r3,804e4c <alt_tick+0xe4>
  804dd4:	e0bffe17 	ldw	r2,-8(fp)
  804dd8:	10800403 	ldbu	r2,16(r2)
  804ddc:	10803fcc 	andi	r2,r2,255
  804de0:	1004c03a 	cmpne	r2,r2,zero
  804de4:	1000191e 	bne	r2,zero,804e4c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  804de8:	e0bffe17 	ldw	r2,-8(fp)
  804dec:	10c00317 	ldw	r3,12(r2)
  804df0:	e0bffe17 	ldw	r2,-8(fp)
  804df4:	11000517 	ldw	r4,20(r2)
  804df8:	183ee83a 	callr	r3
  804dfc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  804e00:	e0bffd17 	ldw	r2,-12(fp)
  804e04:	1004c03a 	cmpne	r2,r2,zero
  804e08:	1000031e 	bne	r2,zero,804e18 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  804e0c:	e13ffe17 	ldw	r4,-8(fp)
  804e10:	0804cd00 	call	804cd0 <alt_alarm_stop>
  804e14:	00000d06 	br	804e4c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  804e18:	e0bffe17 	ldw	r2,-8(fp)
  804e1c:	10c00217 	ldw	r3,8(r2)
  804e20:	e0bffd17 	ldw	r2,-12(fp)
  804e24:	1887883a 	add	r3,r3,r2
  804e28:	e0bffe17 	ldw	r2,-8(fp)
  804e2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  804e30:	e0bffe17 	ldw	r2,-8(fp)
  804e34:	10c00217 	ldw	r3,8(r2)
  804e38:	d0a6a917 	ldw	r2,-25948(gp)
  804e3c:	1880032e 	bgeu	r3,r2,804e4c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  804e40:	e0fffe17 	ldw	r3,-8(fp)
  804e44:	00800044 	movi	r2,1
  804e48:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  804e4c:	e0bfff17 	ldw	r2,-4(fp)
  804e50:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  804e54:	d0e00c04 	addi	r3,gp,-32720
  804e58:	e0bffe17 	ldw	r2,-8(fp)
  804e5c:	10ffcc1e 	bne	r2,r3,804d90 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  804e60:	e037883a 	mov	sp,fp
  804e64:	dfc00117 	ldw	ra,4(sp)
  804e68:	df000017 	ldw	fp,0(sp)
  804e6c:	dec00204 	addi	sp,sp,8
  804e70:	f800283a 	ret

00804e74 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  804e74:	deffff04 	addi	sp,sp,-4
  804e78:	df000015 	stw	fp,0(sp)
  804e7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  804e80:	000170fa 	wrctl	ienable,zero
}
  804e84:	e037883a 	mov	sp,fp
  804e88:	df000017 	ldw	fp,0(sp)
  804e8c:	dec00104 	addi	sp,sp,4
  804e90:	f800283a 	ret

00804e94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  804e94:	defff904 	addi	sp,sp,-28
  804e98:	dfc00615 	stw	ra,24(sp)
  804e9c:	df000515 	stw	fp,20(sp)
  804ea0:	df000504 	addi	fp,sp,20
  804ea4:	e13ffd15 	stw	r4,-12(fp)
  804ea8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  804eac:	e0bffe17 	ldw	r2,-8(fp)
  804eb0:	10800017 	ldw	r2,0(r2)
  804eb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  804eb8:	e13ffd17 	ldw	r4,-12(fp)
  804ebc:	08002d80 	call	8002d8 <strlen>
  804ec0:	10800044 	addi	r2,r2,1
  804ec4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  804ec8:	00000d06 	br	804f00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  804ecc:	e0bffc17 	ldw	r2,-16(fp)
  804ed0:	11000217 	ldw	r4,8(r2)
  804ed4:	e1bffb17 	ldw	r6,-20(fp)
  804ed8:	e17ffd17 	ldw	r5,-12(fp)
  804edc:	08051dc0 	call	8051dc <memcmp>
  804ee0:	1004c03a 	cmpne	r2,r2,zero
  804ee4:	1000031e 	bne	r2,zero,804ef4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  804ee8:	e0bffc17 	ldw	r2,-16(fp)
  804eec:	e0bfff15 	stw	r2,-4(fp)
  804ef0:	00000706 	br	804f10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  804ef4:	e0bffc17 	ldw	r2,-16(fp)
  804ef8:	10800017 	ldw	r2,0(r2)
  804efc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  804f00:	e0fffe17 	ldw	r3,-8(fp)
  804f04:	e0bffc17 	ldw	r2,-16(fp)
  804f08:	10fff01e 	bne	r2,r3,804ecc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  804f0c:	e03fff15 	stw	zero,-4(fp)
  804f10:	e0bfff17 	ldw	r2,-4(fp)
}
  804f14:	e037883a 	mov	sp,fp
  804f18:	dfc00117 	ldw	ra,4(sp)
  804f1c:	df000017 	ldw	fp,0(sp)
  804f20:	dec00204 	addi	sp,sp,8
  804f24:	f800283a 	ret

00804f28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  804f28:	defffa04 	addi	sp,sp,-24
  804f2c:	dfc00515 	stw	ra,20(sp)
  804f30:	df000415 	stw	fp,16(sp)
  804f34:	df000404 	addi	fp,sp,16
  804f38:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  804f3c:	00802034 	movhi	r2,128
  804f40:	109c0104 	addi	r2,r2,28676
  804f44:	10800017 	ldw	r2,0(r2)
  804f48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  804f4c:	00003306 	br	80501c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  804f50:	e0bffd17 	ldw	r2,-12(fp)
  804f54:	11000217 	ldw	r4,8(r2)
  804f58:	08002d80 	call	8002d8 <strlen>
  804f5c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  804f60:	e0bffd17 	ldw	r2,-12(fp)
  804f64:	10c00217 	ldw	r3,8(r2)
  804f68:	e0bffc17 	ldw	r2,-16(fp)
  804f6c:	1885883a 	add	r2,r3,r2
  804f70:	10bfffc4 	addi	r2,r2,-1
  804f74:	10800003 	ldbu	r2,0(r2)
  804f78:	10803fcc 	andi	r2,r2,255
  804f7c:	1080201c 	xori	r2,r2,128
  804f80:	10bfe004 	addi	r2,r2,-128
  804f84:	10800bd8 	cmpnei	r2,r2,47
  804f88:	1000031e 	bne	r2,zero,804f98 <alt_find_file+0x70>
    {
      len -= 1;
  804f8c:	e0bffc17 	ldw	r2,-16(fp)
  804f90:	10bfffc4 	addi	r2,r2,-1
  804f94:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  804f98:	e0bffc17 	ldw	r2,-16(fp)
  804f9c:	1007883a 	mov	r3,r2
  804fa0:	e0bffe17 	ldw	r2,-8(fp)
  804fa4:	1885883a 	add	r2,r3,r2
  804fa8:	10800003 	ldbu	r2,0(r2)
  804fac:	10803fcc 	andi	r2,r2,255
  804fb0:	1080201c 	xori	r2,r2,128
  804fb4:	10bfe004 	addi	r2,r2,-128
  804fb8:	10800be0 	cmpeqi	r2,r2,47
  804fbc:	10000a1e 	bne	r2,zero,804fe8 <alt_find_file+0xc0>
  804fc0:	e0bffc17 	ldw	r2,-16(fp)
  804fc4:	1007883a 	mov	r3,r2
  804fc8:	e0bffe17 	ldw	r2,-8(fp)
  804fcc:	1885883a 	add	r2,r3,r2
  804fd0:	10800003 	ldbu	r2,0(r2)
  804fd4:	10803fcc 	andi	r2,r2,255
  804fd8:	1080201c 	xori	r2,r2,128
  804fdc:	10bfe004 	addi	r2,r2,-128
  804fe0:	1004c03a 	cmpne	r2,r2,zero
  804fe4:	10000a1e 	bne	r2,zero,805010 <alt_find_file+0xe8>
  804fe8:	e0bffd17 	ldw	r2,-12(fp)
  804fec:	11000217 	ldw	r4,8(r2)
  804ff0:	e1bffc17 	ldw	r6,-16(fp)
  804ff4:	e17ffe17 	ldw	r5,-8(fp)
  804ff8:	08051dc0 	call	8051dc <memcmp>
  804ffc:	1004c03a 	cmpne	r2,r2,zero
  805000:	1000031e 	bne	r2,zero,805010 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  805004:	e0bffd17 	ldw	r2,-12(fp)
  805008:	e0bfff15 	stw	r2,-4(fp)
  80500c:	00000806 	br	805030 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  805010:	e0bffd17 	ldw	r2,-12(fp)
  805014:	10800017 	ldw	r2,0(r2)
  805018:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80501c:	00c02034 	movhi	r3,128
  805020:	18dc0104 	addi	r3,r3,28676
  805024:	e0bffd17 	ldw	r2,-12(fp)
  805028:	10ffc91e 	bne	r2,r3,804f50 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80502c:	e03fff15 	stw	zero,-4(fp)
  805030:	e0bfff17 	ldw	r2,-4(fp)
}
  805034:	e037883a 	mov	sp,fp
  805038:	dfc00117 	ldw	ra,4(sp)
  80503c:	df000017 	ldw	fp,0(sp)
  805040:	dec00204 	addi	sp,sp,8
  805044:	f800283a 	ret

00805048 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  805048:	defffc04 	addi	sp,sp,-16
  80504c:	df000315 	stw	fp,12(sp)
  805050:	df000304 	addi	fp,sp,12
  805054:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  805058:	00bffa04 	movi	r2,-24
  80505c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  805060:	e03ffe15 	stw	zero,-8(fp)
  805064:	00001e06 	br	8050e0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  805068:	e0bffe17 	ldw	r2,-8(fp)
  80506c:	00c02034 	movhi	r3,128
  805070:	18d78504 	addi	r3,r3,24084
  805074:	10800324 	muli	r2,r2,12
  805078:	10c5883a 	add	r2,r2,r3
  80507c:	10800017 	ldw	r2,0(r2)
  805080:	1004c03a 	cmpne	r2,r2,zero
  805084:	1000131e 	bne	r2,zero,8050d4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  805088:	e0bffe17 	ldw	r2,-8(fp)
  80508c:	00c02034 	movhi	r3,128
  805090:	18d78504 	addi	r3,r3,24084
  805094:	10800324 	muli	r2,r2,12
  805098:	10c7883a 	add	r3,r2,r3
  80509c:	e0bfff17 	ldw	r2,-4(fp)
  8050a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8050a4:	00802034 	movhi	r2,128
  8050a8:	109c0504 	addi	r2,r2,28692
  8050ac:	10c00017 	ldw	r3,0(r2)
  8050b0:	e0bffe17 	ldw	r2,-8(fp)
  8050b4:	1880040e 	bge	r3,r2,8050c8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8050b8:	00c02034 	movhi	r3,128
  8050bc:	18dc0504 	addi	r3,r3,28692
  8050c0:	e0bffe17 	ldw	r2,-8(fp)
  8050c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8050c8:	e0bffe17 	ldw	r2,-8(fp)
  8050cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8050d0:	00000606 	br	8050ec <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8050d4:	e0bffe17 	ldw	r2,-8(fp)
  8050d8:	10800044 	addi	r2,r2,1
  8050dc:	e0bffe15 	stw	r2,-8(fp)
  8050e0:	e0bffe17 	ldw	r2,-8(fp)
  8050e4:	10800810 	cmplti	r2,r2,32
  8050e8:	103fdf1e 	bne	r2,zero,805068 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8050ec:	e0bffd17 	ldw	r2,-12(fp)
}
  8050f0:	e037883a 	mov	sp,fp
  8050f4:	df000017 	ldw	fp,0(sp)
  8050f8:	dec00104 	addi	sp,sp,4
  8050fc:	f800283a 	ret

00805100 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  805100:	defffb04 	addi	sp,sp,-20
  805104:	df000415 	stw	fp,16(sp)
  805108:	df000404 	addi	fp,sp,16
  80510c:	e13ffe15 	stw	r4,-8(fp)
  805110:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  805114:	e0bfff17 	ldw	r2,-4(fp)
  805118:	10820070 	cmpltui	r2,r2,2049
  80511c:	1000021e 	bne	r2,zero,805128 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  805120:	00820004 	movi	r2,2048
  805124:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  805128:	e0fffe17 	ldw	r3,-8(fp)
  80512c:	e0bfff17 	ldw	r2,-4(fp)
  805130:	1885883a 	add	r2,r3,r2
  805134:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805138:	e0bffe17 	ldw	r2,-8(fp)
  80513c:	e0bffd15 	stw	r2,-12(fp)
  805140:	00000506 	br	805158 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  805144:	e0bffd17 	ldw	r2,-12(fp)
  805148:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80514c:	e0bffd17 	ldw	r2,-12(fp)
  805150:	10800804 	addi	r2,r2,32
  805154:	e0bffd15 	stw	r2,-12(fp)
  805158:	e0fffd17 	ldw	r3,-12(fp)
  80515c:	e0bffc17 	ldw	r2,-16(fp)
  805160:	18bff836 	bltu	r3,r2,805144 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  805164:	e0bffe17 	ldw	r2,-8(fp)
  805168:	108007cc 	andi	r2,r2,31
  80516c:	1005003a 	cmpeq	r2,r2,zero
  805170:	1000021e 	bne	r2,zero,80517c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  805174:	e0bffd17 	ldw	r2,-12(fp)
  805178:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80517c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  805180:	e037883a 	mov	sp,fp
  805184:	df000017 	ldw	fp,0(sp)
  805188:	dec00104 	addi	sp,sp,4
  80518c:	f800283a 	ret

00805190 <atexit>:
  805190:	200b883a 	mov	r5,r4
  805194:	000d883a 	mov	r6,zero
  805198:	0009883a 	mov	r4,zero
  80519c:	000f883a 	mov	r7,zero
  8051a0:	08052501 	jmpi	805250 <__register_exitproc>

008051a4 <exit>:
  8051a4:	defffe04 	addi	sp,sp,-8
  8051a8:	000b883a 	mov	r5,zero
  8051ac:	dc000015 	stw	r16,0(sp)
  8051b0:	dfc00115 	stw	ra,4(sp)
  8051b4:	2021883a 	mov	r16,r4
  8051b8:	08053880 	call	805388 <__call_exitprocs>
  8051bc:	00802034 	movhi	r2,128
  8051c0:	109bfe04 	addi	r2,r2,28664
  8051c4:	11000017 	ldw	r4,0(r2)
  8051c8:	20800f17 	ldw	r2,60(r4)
  8051cc:	10000126 	beq	r2,zero,8051d4 <exit+0x30>
  8051d0:	103ee83a 	callr	r2
  8051d4:	8009883a 	mov	r4,r16
  8051d8:	08055780 	call	805578 <_exit>

008051dc <memcmp>:
  8051dc:	00c000c4 	movi	r3,3
  8051e0:	1980032e 	bgeu	r3,r6,8051f0 <memcmp+0x14>
  8051e4:	2144b03a 	or	r2,r4,r5
  8051e8:	10c4703a 	and	r2,r2,r3
  8051ec:	10000f26 	beq	r2,zero,80522c <memcmp+0x50>
  8051f0:	31ffffc4 	addi	r7,r6,-1
  8051f4:	3000061e 	bne	r6,zero,805210 <memcmp+0x34>
  8051f8:	00000a06 	br	805224 <memcmp+0x48>
  8051fc:	39ffffc4 	addi	r7,r7,-1
  805200:	00bfffc4 	movi	r2,-1
  805204:	21000044 	addi	r4,r4,1
  805208:	29400044 	addi	r5,r5,1
  80520c:	38800526 	beq	r7,r2,805224 <memcmp+0x48>
  805210:	20c00003 	ldbu	r3,0(r4)
  805214:	28800003 	ldbu	r2,0(r5)
  805218:	18bff826 	beq	r3,r2,8051fc <memcmp+0x20>
  80521c:	1885c83a 	sub	r2,r3,r2
  805220:	f800283a 	ret
  805224:	0005883a 	mov	r2,zero
  805228:	f800283a 	ret
  80522c:	180f883a 	mov	r7,r3
  805230:	20c00017 	ldw	r3,0(r4)
  805234:	28800017 	ldw	r2,0(r5)
  805238:	18bfed1e 	bne	r3,r2,8051f0 <memcmp+0x14>
  80523c:	31bfff04 	addi	r6,r6,-4
  805240:	21000104 	addi	r4,r4,4
  805244:	29400104 	addi	r5,r5,4
  805248:	39bff936 	bltu	r7,r6,805230 <memcmp+0x54>
  80524c:	003fe806 	br	8051f0 <memcmp+0x14>

00805250 <__register_exitproc>:
  805250:	defffa04 	addi	sp,sp,-24
  805254:	00802034 	movhi	r2,128
  805258:	109bfe04 	addi	r2,r2,28664
  80525c:	dc000015 	stw	r16,0(sp)
  805260:	14000017 	ldw	r16,0(r2)
  805264:	dd000415 	stw	r20,16(sp)
  805268:	2829883a 	mov	r20,r5
  80526c:	81405217 	ldw	r5,328(r16)
  805270:	dcc00315 	stw	r19,12(sp)
  805274:	dc800215 	stw	r18,8(sp)
  805278:	dc400115 	stw	r17,4(sp)
  80527c:	dfc00515 	stw	ra,20(sp)
  805280:	2023883a 	mov	r17,r4
  805284:	3027883a 	mov	r19,r6
  805288:	3825883a 	mov	r18,r7
  80528c:	28002526 	beq	r5,zero,805324 <__register_exitproc+0xd4>
  805290:	29000117 	ldw	r4,4(r5)
  805294:	008007c4 	movi	r2,31
  805298:	11002716 	blt	r2,r4,805338 <__register_exitproc+0xe8>
  80529c:	8800101e 	bne	r17,zero,8052e0 <__register_exitproc+0x90>
  8052a0:	2105883a 	add	r2,r4,r4
  8052a4:	1085883a 	add	r2,r2,r2
  8052a8:	20c00044 	addi	r3,r4,1
  8052ac:	1145883a 	add	r2,r2,r5
  8052b0:	0009883a 	mov	r4,zero
  8052b4:	15000215 	stw	r20,8(r2)
  8052b8:	28c00115 	stw	r3,4(r5)
  8052bc:	2005883a 	mov	r2,r4
  8052c0:	dfc00517 	ldw	ra,20(sp)
  8052c4:	dd000417 	ldw	r20,16(sp)
  8052c8:	dcc00317 	ldw	r19,12(sp)
  8052cc:	dc800217 	ldw	r18,8(sp)
  8052d0:	dc400117 	ldw	r17,4(sp)
  8052d4:	dc000017 	ldw	r16,0(sp)
  8052d8:	dec00604 	addi	sp,sp,24
  8052dc:	f800283a 	ret
  8052e0:	29802204 	addi	r6,r5,136
  8052e4:	00800044 	movi	r2,1
  8052e8:	110e983a 	sll	r7,r2,r4
  8052ec:	30c04017 	ldw	r3,256(r6)
  8052f0:	2105883a 	add	r2,r4,r4
  8052f4:	1085883a 	add	r2,r2,r2
  8052f8:	1185883a 	add	r2,r2,r6
  8052fc:	19c6b03a 	or	r3,r3,r7
  805300:	14802015 	stw	r18,128(r2)
  805304:	14c00015 	stw	r19,0(r2)
  805308:	00800084 	movi	r2,2
  80530c:	30c04015 	stw	r3,256(r6)
  805310:	88bfe31e 	bne	r17,r2,8052a0 <__register_exitproc+0x50>
  805314:	30804117 	ldw	r2,260(r6)
  805318:	11c4b03a 	or	r2,r2,r7
  80531c:	30804115 	stw	r2,260(r6)
  805320:	003fdf06 	br	8052a0 <__register_exitproc+0x50>
  805324:	00802074 	movhi	r2,129
  805328:	10a2f104 	addi	r2,r2,-29756
  80532c:	100b883a 	mov	r5,r2
  805330:	80805215 	stw	r2,328(r16)
  805334:	003fd606 	br	805290 <__register_exitproc+0x40>
  805338:	00800034 	movhi	r2,0
  80533c:	10800004 	addi	r2,r2,0
  805340:	1000021e 	bne	r2,zero,80534c <__register_exitproc+0xfc>
  805344:	013fffc4 	movi	r4,-1
  805348:	003fdc06 	br	8052bc <__register_exitproc+0x6c>
  80534c:	01006404 	movi	r4,400
  805350:	103ee83a 	callr	r2
  805354:	1007883a 	mov	r3,r2
  805358:	103ffa26 	beq	r2,zero,805344 <__register_exitproc+0xf4>
  80535c:	80805217 	ldw	r2,328(r16)
  805360:	180b883a 	mov	r5,r3
  805364:	18000115 	stw	zero,4(r3)
  805368:	18800015 	stw	r2,0(r3)
  80536c:	80c05215 	stw	r3,328(r16)
  805370:	18006215 	stw	zero,392(r3)
  805374:	18006315 	stw	zero,396(r3)
  805378:	0009883a 	mov	r4,zero
  80537c:	883fc826 	beq	r17,zero,8052a0 <__register_exitproc+0x50>
  805380:	003fd706 	br	8052e0 <__register_exitproc+0x90>

00805384 <register_fini>:
  805384:	f800283a 	ret

00805388 <__call_exitprocs>:
  805388:	00802034 	movhi	r2,128
  80538c:	109bfe04 	addi	r2,r2,28664
  805390:	10800017 	ldw	r2,0(r2)
  805394:	defff304 	addi	sp,sp,-52
  805398:	df000b15 	stw	fp,44(sp)
  80539c:	d8800115 	stw	r2,4(sp)
  8053a0:	00800034 	movhi	r2,0
  8053a4:	10800004 	addi	r2,r2,0
  8053a8:	1005003a 	cmpeq	r2,r2,zero
  8053ac:	d8800215 	stw	r2,8(sp)
  8053b0:	d8800117 	ldw	r2,4(sp)
  8053b4:	dd400815 	stw	r21,32(sp)
  8053b8:	dd000715 	stw	r20,28(sp)
  8053bc:	10805204 	addi	r2,r2,328
  8053c0:	dfc00c15 	stw	ra,48(sp)
  8053c4:	ddc00a15 	stw	r23,40(sp)
  8053c8:	dd800915 	stw	r22,36(sp)
  8053cc:	dcc00615 	stw	r19,24(sp)
  8053d0:	dc800515 	stw	r18,20(sp)
  8053d4:	dc400415 	stw	r17,16(sp)
  8053d8:	dc000315 	stw	r16,12(sp)
  8053dc:	282b883a 	mov	r21,r5
  8053e0:	2039883a 	mov	fp,r4
  8053e4:	d8800015 	stw	r2,0(sp)
  8053e8:	2829003a 	cmpeq	r20,r5,zero
  8053ec:	d8800117 	ldw	r2,4(sp)
  8053f0:	14405217 	ldw	r17,328(r2)
  8053f4:	88001026 	beq	r17,zero,805438 <__call_exitprocs+0xb0>
  8053f8:	ddc00017 	ldw	r23,0(sp)
  8053fc:	88800117 	ldw	r2,4(r17)
  805400:	8c802204 	addi	r18,r17,136
  805404:	143fffc4 	addi	r16,r2,-1
  805408:	80000916 	blt	r16,zero,805430 <__call_exitprocs+0xa8>
  80540c:	05bfffc4 	movi	r22,-1
  805410:	a000151e 	bne	r20,zero,805468 <__call_exitprocs+0xe0>
  805414:	8409883a 	add	r4,r16,r16
  805418:	2105883a 	add	r2,r4,r4
  80541c:	1485883a 	add	r2,r2,r18
  805420:	10c02017 	ldw	r3,128(r2)
  805424:	a8c01126 	beq	r21,r3,80546c <__call_exitprocs+0xe4>
  805428:	843fffc4 	addi	r16,r16,-1
  80542c:	85bff81e 	bne	r16,r22,805410 <__call_exitprocs+0x88>
  805430:	d8800217 	ldw	r2,8(sp)
  805434:	10003126 	beq	r2,zero,8054fc <__call_exitprocs+0x174>
  805438:	dfc00c17 	ldw	ra,48(sp)
  80543c:	df000b17 	ldw	fp,44(sp)
  805440:	ddc00a17 	ldw	r23,40(sp)
  805444:	dd800917 	ldw	r22,36(sp)
  805448:	dd400817 	ldw	r21,32(sp)
  80544c:	dd000717 	ldw	r20,28(sp)
  805450:	dcc00617 	ldw	r19,24(sp)
  805454:	dc800517 	ldw	r18,20(sp)
  805458:	dc400417 	ldw	r17,16(sp)
  80545c:	dc000317 	ldw	r16,12(sp)
  805460:	dec00d04 	addi	sp,sp,52
  805464:	f800283a 	ret
  805468:	8409883a 	add	r4,r16,r16
  80546c:	88c00117 	ldw	r3,4(r17)
  805470:	2105883a 	add	r2,r4,r4
  805474:	1445883a 	add	r2,r2,r17
  805478:	18ffffc4 	addi	r3,r3,-1
  80547c:	11800217 	ldw	r6,8(r2)
  805480:	1c001526 	beq	r3,r16,8054d8 <__call_exitprocs+0x150>
  805484:	10000215 	stw	zero,8(r2)
  805488:	303fe726 	beq	r6,zero,805428 <__call_exitprocs+0xa0>
  80548c:	00c00044 	movi	r3,1
  805490:	1c06983a 	sll	r3,r3,r16
  805494:	90804017 	ldw	r2,256(r18)
  805498:	8cc00117 	ldw	r19,4(r17)
  80549c:	1884703a 	and	r2,r3,r2
  8054a0:	10001426 	beq	r2,zero,8054f4 <__call_exitprocs+0x16c>
  8054a4:	90804117 	ldw	r2,260(r18)
  8054a8:	1884703a 	and	r2,r3,r2
  8054ac:	10000c1e 	bne	r2,zero,8054e0 <__call_exitprocs+0x158>
  8054b0:	2105883a 	add	r2,r4,r4
  8054b4:	1485883a 	add	r2,r2,r18
  8054b8:	11400017 	ldw	r5,0(r2)
  8054bc:	e009883a 	mov	r4,fp
  8054c0:	303ee83a 	callr	r6
  8054c4:	88800117 	ldw	r2,4(r17)
  8054c8:	98bfc81e 	bne	r19,r2,8053ec <__call_exitprocs+0x64>
  8054cc:	b8800017 	ldw	r2,0(r23)
  8054d0:	147fd526 	beq	r2,r17,805428 <__call_exitprocs+0xa0>
  8054d4:	003fc506 	br	8053ec <__call_exitprocs+0x64>
  8054d8:	8c000115 	stw	r16,4(r17)
  8054dc:	003fea06 	br	805488 <__call_exitprocs+0x100>
  8054e0:	2105883a 	add	r2,r4,r4
  8054e4:	1485883a 	add	r2,r2,r18
  8054e8:	11000017 	ldw	r4,0(r2)
  8054ec:	303ee83a 	callr	r6
  8054f0:	003ff406 	br	8054c4 <__call_exitprocs+0x13c>
  8054f4:	303ee83a 	callr	r6
  8054f8:	003ff206 	br	8054c4 <__call_exitprocs+0x13c>
  8054fc:	88800117 	ldw	r2,4(r17)
  805500:	1000081e 	bne	r2,zero,805524 <__call_exitprocs+0x19c>
  805504:	89000017 	ldw	r4,0(r17)
  805508:	20000726 	beq	r4,zero,805528 <__call_exitprocs+0x1a0>
  80550c:	b9000015 	stw	r4,0(r23)
  805510:	8809883a 	mov	r4,r17
  805514:	00000000 	call	0 <__reset-0x800000>
  805518:	bc400017 	ldw	r17,0(r23)
  80551c:	883fb71e 	bne	r17,zero,8053fc <__call_exitprocs+0x74>
  805520:	003fc506 	br	805438 <__call_exitprocs+0xb0>
  805524:	89000017 	ldw	r4,0(r17)
  805528:	882f883a 	mov	r23,r17
  80552c:	2023883a 	mov	r17,r4
  805530:	883fb21e 	bne	r17,zero,8053fc <__call_exitprocs+0x74>
  805534:	003fc006 	br	805438 <__call_exitprocs+0xb0>

00805538 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  805538:	defffd04 	addi	sp,sp,-12
  80553c:	df000215 	stw	fp,8(sp)
  805540:	df000204 	addi	fp,sp,8
  805544:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  805550:	e0bffe17 	ldw	r2,-8(fp)
  805554:	1005003a 	cmpeq	r2,r2,zero
  805558:	1000021e 	bne	r2,zero,805564 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80555c:	002af070 	cmpltui	zero,zero,43969
  805560:	00000106 	br	805568 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  805564:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  805568:	e037883a 	mov	sp,fp
  80556c:	df000017 	ldw	fp,0(sp)
  805570:	dec00104 	addi	sp,sp,4
  805574:	f800283a 	ret

00805578 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  805578:	defffd04 	addi	sp,sp,-12
  80557c:	dfc00215 	stw	ra,8(sp)
  805580:	df000115 	stw	fp,4(sp)
  805584:	df000104 	addi	fp,sp,4
  805588:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80558c:	e13fff17 	ldw	r4,-4(fp)
  805590:	08055380 	call	805538 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  805594:	003fff06 	br	805594 <_exit+0x1c>
  805598:	00805384 	movi	r2,334
